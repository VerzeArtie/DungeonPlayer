using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using System.Reflection;

namespace DungeonPlayer
{
    public partial class TruthDungeon : MotherForm
    {
        MainCharacter mc = null; // プレイヤー１
        MainCharacter sc = null; // プレイヤー２
        MainCharacter tc = null; // プレイヤー３
        WorldEnvironment we = null; // ダンジョンワールド環境フラグ

        private bool DungeonViewMode = false; // ダンジョンマップの全体を見たいときに使うフラグ
        private Point DungeonViewModeMasterLocation = new Point(); // ダンジョン全体マップView表示時の元のViewの位置
        private Point DungeonViewModeMasterPlayerLocation = new Point(); //  ダンジョン全体マップView表示時のプレイヤーの元のViewの位置

        // ダンジョンマッピングデータを示すタイル情報
        private PictureBox[] dungeonTile = new PictureBox[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];
        private PictureBox[] unknownTile = new PictureBox[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];

        // 到達・未到達領域を示すためのタイル情報
        string[] tileInfo = null;
        string[] tileInfo2 = null;
        string[] tileInfo3 = null;
        string[] tileInfo4 = null;
        string[] tileInfo5 = null;
        bool[] knownTileInfo = null;
        bool[] knownTileInfo2 = null;
        bool[] knownTileInfo3 = null;
        bool[] knownTileInfo4 = null;
        bool[] knownTileInfo5 = null;

        // 敵の強さを区分けするためのタイルカラー情報
        int[] tileColor = null;

        // ダンジョンマップ上にあるイベント要素情報
        bool[] treasureBoxTile = new bool[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];
        bool[] boardTile = new bool[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];
        bool[] upstairTile = new bool[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];
        bool[] downstairTile = new bool[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];
        bool[] mirrorTile = new bool[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];
        bool[] blueOrbTile = new bool[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];
        bool[] fountainTile = new bool[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];

        // ダンジョンマップ上にある条件付青壁の情報
        const int BLUE_WALL_NUM = 4;
        bool[] blueWallTop = new bool[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];
        bool[] blueWallLeft = new bool[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];
        bool[] blueWallRight = new bool[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];
        bool[] blueWallBottom = new bool[Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW];

        // ダンジョンマップ上に描画するImageデータ
        Bitmap treasureImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[0] + Database.TREASURE_BOX);
        Bitmap treasureOpenImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[0] + Database.TREASURE_BOX_OPEN);
        Bitmap boardImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[0] + Database.BOARD);
        Bitmap upstairImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[0] + Database.UPSTAIR);
        Bitmap downstairImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[0] + Database.DOWNSTAIR);
        Bitmap mirrorImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[0] + Database.MIRROR);
        Bitmap blueOrbImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[0] + Database.BLUEORB);
        Bitmap fountainImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[0] + Database.FOUNTAIN);

        public MainCharacter MC
        {
            get { return mc; }
            set { mc = value; }
        }
        public MainCharacter SC
        {
            get { return sc; }
            set { sc = value; }
        }
        public MainCharacter TC
        {
            get { return tc; }
            set { tc = value; }
        }
        public WorldEnvironment WE
        {
            get { return we; }
            set { we = value; }
        }

        public bool[] Truth_KnownTileInfo
        {
            get { return knownTileInfo; }
            set { knownTileInfo = value; }
        }
        public bool[] Truth_KnownTileInfo2
        {
            get { return knownTileInfo2; }
            set { knownTileInfo2 = value; }
        }
        public bool[] Truth_KnownTileInfo3
        {
            get { return knownTileInfo3; }
            set { knownTileInfo3 = value; }
        }
        public bool[] Truth_KnownTileInfo4
        {
            get { return knownTileInfo4; }
            set { knownTileInfo4 = value; }
        }
        public bool[] Truth_KnownTileInfo5
        {
            get { return knownTileInfo5; }
            set { knownTileInfo5 = value; }
        }

        private int battleSpeed;
        public int BattleSpeed
        {
            get { return battleSpeed; }
            set { battleSpeed = value; }
        }
        private int difficulty;
        public int Difficulty
        {
            get { return difficulty; }
            set { difficulty = value; }
        }

        public int BASE_LIFE_WIDTH = 0;
        public int BASE_CHARACTER_PANEL_HEIGHT = 0;
        public TruthDungeon()
        {
            InitializeComponent();
            BASE_LIFE_WIDTH = currentLife1.Width;
            BASE_CHARACTER_PANEL_HEIGHT = FirstPlayerPanel.Height;

            //this.dungeonField.Controls.Add(this.Player);

            tileInfo = new string[Database.TRUTH_DUNGEON_ROW * Database.TRUTH_DUNGEON_COLUMN];
            tileInfo2 = new string[Database.TRUTH_DUNGEON_ROW * Database.TRUTH_DUNGEON_COLUMN];
            tileInfo3 = new string[Database.TRUTH_DUNGEON_ROW * Database.TRUTH_DUNGEON_COLUMN];
            tileInfo4 = new string[Database.TRUTH_DUNGEON_ROW * Database.TRUTH_DUNGEON_COLUMN];
            tileInfo5 = new string[Database.TRUTH_DUNGEON_ROW * Database.TRUTH_DUNGEON_COLUMN];

            tileColor = new int[Database.TRUTH_DUNGEON_ROW * Database.TRUTH_DUNGEON_COLUMN];
        }

        private void TruthDungeon_Load(object sender, EventArgs e)
        {
            
            ExecSomeEvents(0, 0); // 本メソッドはSwitch-Caseの長文を作ってしまったため、初回アクセスで遅延が見られる。この遅延をなくすため、ここでカラ実行を一度実施する。
            this.VigilanceMode.Image = Image.FromFile(Database.BaseResourceFolder + "VigilanceMode.png");
            this.PathfindingMode.Image = Image.FromFile(Database.BaseResourceFolder + "PathfindingMode.png");

            if (we.DungeonArea == 1)
            {
                ReadDungeonTileFromXmlFile(@"DungeonMapping_T_1.xml");
            }
            else if (we.DungeonArea == 2)
            {
                ReadDungeonTileFromXmlFile(@"DungeonMapping_T_2.xml");
            }
            else if (we.DungeonArea == 3)
            {
                ReadDungeonTileFromXmlFile(@"DungeonMapping_T_3.xml");
            }
            else if (we.DungeonArea == 4)
            {
                ReadDungeonTileFromXmlFile(@"DungeonMapping_T_4.xml");
            }
            else if (we.DungeonArea == 5)
            {
                ReadDungeonTileFromXmlFile(@"DungeonMapping_T_5.xml");
            }

            if (labelVigilance.Text == Database.TEXT_VIGILANCE_MODE)
            {
                labelVigilance.ForeColor = Color.DeepSkyBlue;
            }
            else
            {
                labelVigilance.ForeColor = Color.DarkRed;
            }

            this.Player.BackgroundImage = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + "Player.bmp");
            this.treasureImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TREASURE_BOX);
            this.treasureOpenImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TREASURE_BOX_OPEN);
            this.boardImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.BOARD);
            this.upstairImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.UPSTAIR);
            this.downstairImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.DOWNSTAIR);
            this.mirrorImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.MIRROR);
            this.blueOrbImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.BLUEORB);
            this.fountainImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.FOUNTAIN);

            for (int ii = 0; ii < Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW; ii++)
            {
                unknownTile[ii] = new PictureBox();
                unknownTile[ii].Size = new Size(Database.DUNGEON_MOVE_LEN, Database.DUNGEON_MOVE_LEN);
                unknownTile[ii].Location = new Point((ii % Database.TRUTH_DUNGEON_COLUMN) * Database.DUNGEON_MOVE_LEN, (ii / Database.TRUTH_DUNGEON_COLUMN) * Database.DUNGEON_MOVE_LEN);
                unknownTile[ii].Visible = !knownTileInfo[ii]; // 反対ですが意味付けは同じ本質です。
            }

            // 始めて開始する場合、あらかじめスタート地点を設定。
            if ((we.dungeonViewPointX == 0) && (we.dungeonViewPointY == 0) &&
                (we.DungeonPosX == 1 + Database.DUNGEON_BASE_X + (Database.FIRST_POS % Database.TRUTH_DUNGEON_COLUMN) * Database.DUNGEON_MOVE_LEN) &&
                (we.DungeonPosY == 1 + Database.DUNGEON_BASE_Y + (Database.FIRST_POS / Database.TRUTH_DUNGEON_COLUMN) * Database.DUNGEON_MOVE_LEN))
            {
                UpdateViewPoint(-Database.DUNGEON_MOVE_LEN * 25, -Database.DUNGEON_MOVE_LEN * 5);
                UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * (39 - 25), Database.DUNGEON_MOVE_LEN * (14 - 5));
            }
            else
            {
                if (we.Version <= 0)
                {
                    we.DungeonPosX = we.DungeonPosX / 16 * 25;
                    we.DungeonPosY = we.DungeonPosY / 16 * 25;
                    we.dungeonViewPointX = we.dungeonViewPointX / 16 * 25;
                    we.dungeonViewPointY = we.dungeonViewPointY / 16 * 25;
                }
                UpdateViewPoint(we.dungeonViewPointX, we.dungeonViewPointY);
                UpdatePlayerLocationInfo(we.DungeonPosX, we.DungeonPosY);
            }
            SetupDungeonMapping(we.DungeonArea);
            this.dungeonField.Invalidate();

            this.Update();

            if (!we.SaveByDungeon)
            {
                firstLoadIgnoreMusic = true;
                CallHomeTown(false);
                UpdateMainMessage("", true);
            }
            if ((GroundOne.WE2.RealWorld && GroundOne.WE2.RealDungeonArea == 5 && GroundOne.WE2.SeekerEvent1014) ||
                (GroundOne.WE2.RealWorld && GroundOne.WE2.SeekerEvent506 && !GroundOne.WE2.SeekerEvent508))
            {
                GroundOne.PlayDungeonMusic(Database.BGM07, Database.BGM07LoopBegin);
            }
            else if (we.CompleteSlayBoss5 || we.dungeonEvent4_SlayBoss3)
            {
                firstLoadIgnoreMusic = true;
            }
            else
            {
                GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
            }

            SetupPlayerStatus();
        }

        private void ReadDungeonTileFromXmlFile(string xmlFileName)
        {
            #region "ダンジョンマップをXMLから読み込み"
            XmlDocument xml = new XmlDocument();
            xml.Load(Database.BaseResourceFolder + xmlFileName);

            // 高速読み取りのため、データファイル読み出しは１回だけで出来るようにしておく。
            Image bmp1 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_1);
            Image bmp2 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_2);
            Image bmp3 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_3);
            Image bmp4 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_4);
            Image bmp5 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_5);
            Image bmp6 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_6);
            Image bmp7 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_7);
            Image bmp8 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_8);
            Image bmp9 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_9);
            Image bmp10 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_10);
            Image bmp11 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_11);
            Image bmp12 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_12);
            Image bmp13 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
            Image bmp14 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
            Image bmp15 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_15);
            Image bmp16 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_16);
            Image bmp17 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_17);
            Image bmp18 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_18);
            Image bmp19 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_19);
            Image bmp20 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_20);
            Image bmp21 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_21);
            Image bmp22 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_22);
            Image bmp23 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_23);
            Image bmp24 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
            Image bmp25 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_25);
            Image bmp26 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_26);
            Image bmp27 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_27);
            Image bmp28 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_28);
            Image bmp29 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_29);
            Image bmp30 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_30);
            Image bmp31 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_31);

            Image bmp32 = null;
            Image bmp33 = null;
            Image bmp34 = null;
            Image bmp35 = null;
            Image bmp36 = null;
            Image bmp37 = null;
            Image bmp38 = null;
            Image bmp39 = null;

            Image bmp42 = null;
            Image bmp43 = null;
            Image bmp44 = null;
            if (we.DungeonArea == 2)
            {
                // ２階数字タイル
                bmp32 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_32);
                bmp33 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_33);
                bmp34 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_34);
                bmp35 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_35);
                bmp36 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_36);
                bmp37 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_37);
                bmp38 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_38);
                bmp39 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_39);
                // ２階技の部屋、ダミー壁
                bmp42 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_42);
            }
            if (we.DungeonArea == 3)
            {
                bmp43 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_43);
            }
            if (we.DungeonArea == 5)
            {
                bmp44 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_44);
            }

            XmlNodeList currentList = xml.GetElementsByTagName("TileData");
            XmlNodeList childList = currentList[0].ChildNodes;
            for (int ii = 0; ii < Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW; ii++)
            {
                // 他のパーツを改めてFor分で回しても良いが、処理に時間がかかる。
                // 他のパーツ部分のFor分は全タイル分まで回らず、途中で例外終了させる仕組みなので
                // ここで初期化を行うこととする。
                treasureBoxTile[ii] = false;
                boardTile[ii] = false;
                upstairTile[ii] = false;
                downstairTile[ii] = false;
                mirrorTile[ii] = false;
                blueOrbTile[ii] = false;
                fountainTile[ii] = false;
                blueWallBottom[ii] = false;
                blueWallLeft[ii] = false;
                blueWallRight[ii] = false;
                blueWallTop[ii] = false;

                dungeonTile[ii] = new PictureBox();
                dungeonTile[ii].Size = new Size(Database.DUNGEON_MOVE_LEN, Database.DUNGEON_MOVE_LEN);
                dungeonTile[ii].Location = new Point((ii % Database.TRUTH_DUNGEON_COLUMN) * Database.DUNGEON_MOVE_LEN, (ii / Database.TRUTH_DUNGEON_COLUMN) * Database.DUNGEON_MOVE_LEN);
                // タイル情報をXMLデータから変換して取得
                dungeonTile[ii].Name = Convert.ToString(childList[ii * 2 + 0].InnerText);
                tileColor[ii] = Convert.ToInt32(childList[ii * 2 + 1].InnerText);

                // １階、ダンジョン進行フラグに応じて、真実イベントへの防壁を解除
                if (we.DungeonArea == 1 && we.Truth_Communication_Dungeon11)
                {
                    if (ii == Database.TRUTH_DUNGEON_COLUMN * 29 + 50)
                    {
                        dungeonTile[ii].Name = Database.TILEINFO_21;
                    }
                }
                // ２階、心の部屋。心層の壁解除
                if (we.DungeonArea == 2 && we.dungeonEvent249)
                {
                    if ((ii == 5 * Database.TRUTH_DUNGEON_COLUMN + 28) ||
                        (ii == 6 * Database.TRUTH_DUNGEON_COLUMN + 28) ||
                        (ii == 7 * Database.TRUTH_DUNGEON_COLUMN + 28))
                    {
                        dungeonTile[ii].Name = Database.TILEINFO_13;
                    }
                }
                // ２階、技の部屋、隠し通路の壁解除
                if (we.DungeonArea == 2 && we.dungeonEvent258)
                {
                    if (ii == 36 * Database.TRUTH_DUNGEON_COLUMN + 59)
                    {
                        dungeonTile[ii].Name = Database.TILEINFO_21;
                    }
                }
                // ２階、ダンジョン進行フラグに応じて、真実イベントへの防壁を解除
                if (we.DungeonArea == 2 && GroundOne.WE2.TruthAnswer2_OK)
                {
                    if (ii == Database.TRUTH_DUNGEON_COLUMN * 26 + 13)
                    {
                        dungeonTile[ii].Name = Database.TILEINFO_13;
                    }
                }

                switch (dungeonTile[ii].Name)
                {
                    case Database.TILEINFO_1:
                        dungeonTile[ii].Image = bmp1;
                        break;
                    case Database.TILEINFO_2:
                        dungeonTile[ii].Image = bmp2;
                        break;
                    case Database.TILEINFO_3:
                        dungeonTile[ii].Image = bmp3;
                        break;
                    case Database.TILEINFO_4:
                        dungeonTile[ii].Image = bmp4;
                        break;
                    case Database.TILEINFO_5:
                        dungeonTile[ii].Image = bmp5;
                        break;
                    case Database.TILEINFO_6:
                        dungeonTile[ii].Image = bmp6;
                        break;
                    case Database.TILEINFO_7:
                        dungeonTile[ii].Image = bmp7;
                        break;
                    case Database.TILEINFO_8:
                        dungeonTile[ii].Image = bmp8;
                        break;
                    case Database.TILEINFO_9:
                        dungeonTile[ii].Image = bmp9;
                        break;
                    case Database.TILEINFO_10:
                        dungeonTile[ii].Image = bmp10;
                        break;
                    case Database.TILEINFO_11:
                        dungeonTile[ii].Image = bmp11;
                        break;
                    case Database.TILEINFO_12:
                        dungeonTile[ii].Image = bmp12;
                        break;
                    case Database.TILEINFO_13:
                        dungeonTile[ii].Image = bmp13;
                        break;
                    case Database.TILEINFO_14:
                        dungeonTile[ii].Image = bmp14;
                        break;
                    case Database.TILEINFO_15:
                        dungeonTile[ii].Image = bmp15;
                        break;
                    case Database.TILEINFO_16:
                        dungeonTile[ii].Image = bmp16;
                        break;
                    case Database.TILEINFO_17:
                        dungeonTile[ii].Image = bmp17;
                        break;
                    case Database.TILEINFO_18:
                        dungeonTile[ii].Image = bmp18;
                        break;
                    case Database.TILEINFO_19:
                        dungeonTile[ii].Image = bmp19;
                        break;
                    case Database.TILEINFO_20:
                        dungeonTile[ii].Image = bmp20;
                        break;
                    case Database.TILEINFO_21:
                        dungeonTile[ii].Image = bmp21;
                        break;
                    case Database.TILEINFO_22:
                        dungeonTile[ii].Image = bmp22;
                        break;
                    case Database.TILEINFO_23:
                        dungeonTile[ii].Image = bmp23;
                        break;
                    case Database.TILEINFO_24:
                        dungeonTile[ii].Image = bmp24;
                        break;
                    case Database.TILEINFO_25:
                        dungeonTile[ii].Image = bmp25;
                        break;
                    case Database.TILEINFO_26:
                        dungeonTile[ii].Image = bmp26;
                        break;
                    case Database.TILEINFO_27:
                        dungeonTile[ii].Image = bmp27;
                        break;
                    case Database.TILEINFO_28:
                        dungeonTile[ii].Image = bmp28;
                        break;
                    case Database.TILEINFO_29:
                        dungeonTile[ii].Image = bmp29;
                        break;
                    case Database.TILEINFO_30:
                        dungeonTile[ii].Image = bmp30;
                        break;
                    case Database.TILEINFO_31:
                        dungeonTile[ii].Image = bmp31;
                        break;
                    case Database.TILEINFO_42:
                        dungeonTile[ii].Image = bmp42;
                        break;
                    case Database.TILEINFO_43:
                        dungeonTile[ii].Image = bmp43;
                        break;
                    case Database.TILEINFO_44:
                        dungeonTile[ii].Image = bmp44;
                        break;
                }

                // ２階数字タイル
                if (we.DungeonArea == 2)
                {
                    if (ii == 11 * Database.TRUTH_DUNGEON_COLUMN + 42)
                    {
                        dungeonTile[ii].Image = bmp32;
                    }
                    if (ii == 13 * Database.TRUTH_DUNGEON_COLUMN + 38)
                    {
                        dungeonTile[ii].Image = bmp33;
                    }
                    if (ii == 15 * Database.TRUTH_DUNGEON_COLUMN + 40)
                    {
                        dungeonTile[ii].Image = bmp34;
                    }
                    if (ii == 19 * Database.TRUTH_DUNGEON_COLUMN + 38)
                    {
                        dungeonTile[ii].Image = bmp35;
                    }
                    if (ii == 17 * Database.TRUTH_DUNGEON_COLUMN + 42)
                    {
                        dungeonTile[ii].Image = bmp36;
                    }
                    if (ii == 19 * Database.TRUTH_DUNGEON_COLUMN + 46)
                    {
                        dungeonTile[ii].Image = bmp37;
                    }
                    if (ii == 11 * Database.TRUTH_DUNGEON_COLUMN + 44)
                    {
                        dungeonTile[ii].Image = bmp38;
                    }
                    if (ii == 15 * Database.TRUTH_DUNGEON_COLUMN + 46)
                    {
                        dungeonTile[ii].Image = bmp39;
                    }
                }

                // ４階、ダンジョン進行フラグに応じて、真実イベントへの防壁を解除
                if (we.DungeonArea == 4 && we.dungeonEvent424)
                {
                    if (ii == Database.TRUTH_DUNGEON_COLUMN * 19 + 44)
                    {
                        dungeonTile[ii].Name = Database.TILEINFO_13;
                    }
                }
                if (we.DungeonArea == 4 && we.dungeonEvent440)
                {
                    if (ii == Database.TRUTH_DUNGEON_COLUMN * 21 + 20)
                    {
                        dungeonTile[ii].Name = Database.TILEINFO_13;
                    }
                }
                if (we.DungeonArea == 4 && we.dungeonEvent476)                
                {
                    if (ii == Database.TRUTH_DUNGEON_COLUMN * 34 + 22)
                    {
                        dungeonTile[ii].Name = Database.TILEINFO_13;
                    }
                }
                if (we.DungeonArea == 4 && we.dungeonEvent489)
                {
                    if (ii == Database.TRUTH_DUNGEON_COLUMN * 32 + 46)
                    {
                        dungeonTile[ii].Name = Database.TILEINFO_13;
                    }
                }
                if (we.DungeonArea == 4 && GroundOne.WE2.SeekerEvent1)
                {
                    if (ii == Database.TRUTH_DUNGEON_COLUMN * 21 + 46)
                    {
                        dungeonTile[ii].Name = Database.TILEINFO_13;
                    }
                }

                if ((we.DungeonArea == 1) || (we.DungeonArea == 0))
                {
                    tileInfo[ii] = dungeonTile[ii].Name;
                }
                else if (we.DungeonArea == 2)
                {
                    tileInfo2[ii] = dungeonTile[ii].Name;
                }
                else if (we.DungeonArea == 3)
                {
                    tileInfo3[ii] = dungeonTile[ii].Name;
                }
                else if (we.DungeonArea == 4)
                {
                    tileInfo4[ii] = dungeonTile[ii].Name;
                }
                else if (we.DungeonArea == 5)
                {
                    tileInfo5[ii] = dungeonTile[ii].Name;
                }
            }

            // 宝箱、看板など他のパーツを読み取り
            try
            {
                XmlNodeList currentList2 = xml.GetElementsByTagName("OtherData");
                XmlNodeList childList2 = currentList2[0].ChildNodes;

                string OTHER1 = "TreasureInfo";
                string OTHER2 = "BoardInfo";
                string OTHER3 = "UpstairInfo";
                string OTHER4 = "DownstairInfo";
                string OTHER5 = "BlueWallTopInfo";
                string OTHER6 = "BlueWallLeftInfo";
                string OTHER7 = "BlueWallRightInfo";
                string OTHER8 = "BlueWallBottomInfo";
                string OTHER9 = "MirrorInfo";
                string OTHER10 = "BlueOrbInfo";
                string OTHER11 = "FountainInfo";

                // [警告] 青壁を消すプログラムを記述してるが、漏れの発端になるため、要改善です。
                for (int ii = 0; ii < Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW; ii++)
                {
                    if (childList2[ii].Name.Contains(OTHER1))
                    {
                        int targetNumber = Convert.ToInt32(childList2[ii].Name.Substring(OTHER1.Length, childList2[ii].Name.Length - OTHER1.Length));
                        treasureBoxTile[targetNumber] = true;
                    }

                    if (childList2[ii].Name.Contains(OTHER2))
                    {
                        int targetNumber = Convert.ToInt32(childList2[ii].Name.Substring(OTHER2.Length, childList2[ii].Name.Length - OTHER2.Length));
                        boardTile[targetNumber] = true;
                    }
                    if (childList2[ii].Name.Contains(OTHER3))
                    {
                        int targetNumber = Convert.ToInt32(childList2[ii].Name.Substring(OTHER3.Length, childList2[ii].Name.Length - OTHER3.Length));
                        upstairTile[targetNumber] = true;
                    }
                    if (childList2[ii].Name.Contains(OTHER4))
                    {
                        int targetNumber = Convert.ToInt32(childList2[ii].Name.Substring(OTHER4.Length, childList2[ii].Name.Length - OTHER4.Length));
                        downstairTile[targetNumber] = true;
                    }
                    if (childList2[ii].Name.Contains(OTHER9))
                    {
                        int targetNumber = Convert.ToInt32(childList2[ii].Name.Substring(OTHER9.Length, childList2[ii].Name.Length - OTHER9.Length));
                        mirrorTile[targetNumber] = true;
                    }
                    if (childList2[ii].Name.Contains(OTHER10))
                    {
                        int targetNumber = Convert.ToInt32(childList2[ii].Name.Substring(OTHER10.Length, childList2[ii].Name.Length - OTHER10.Length));
                        blueOrbTile[targetNumber] = true;
                    }
                    if (childList2[ii].Name.Contains(OTHER11))
                    {
                        int targetNumber = Convert.ToInt32(childList2[ii].Name.Substring(OTHER11.Length, childList2[ii].Name.Length - OTHER11.Length));
                        fountainTile[targetNumber] = true;
                    }
                    if (childList2[ii].Name.Contains(OTHER5))
                    {
                        int targetNumber = Convert.ToInt32(childList2[ii].Name.Substring(OTHER5.Length, childList2[ii].Name.Length - OTHER5.Length));
                        blueWallTop[targetNumber] = true;

                        // １階
                        if (we.DungeonArea == 1)
                        {
                            if (we.dungeonEvent14KeyOpen && (targetNumber == 27 * Database.TRUTH_DUNGEON_COLUMN + 21))
                            {
                                blueWallTop[targetNumber] = false;
                            }
                            if (we.dungeonEvent12KeyOpen && (targetNumber == 35 * Database.TRUTH_DUNGEON_COLUMN + 21))
                            {
                                blueWallTop[targetNumber] = false;
                            }
                            if (we.dungeonEvent16 && (targetNumber == 27 * Database.TRUTH_DUNGEON_COLUMN + 14))
                            {
                                blueWallTop[targetNumber] = false;
                            }
                            if (we.dungeonEvent16 && (targetNumber == 35 * Database.TRUTH_DUNGEON_COLUMN + 14))
                            {
                                blueWallTop[targetNumber] = false;
                            }
                            if (we.dungeonEvent21KeyOpen && (targetNumber == 13 * Database.TRUTH_DUNGEON_COLUMN + 2))
                            {
                                blueWallTop[targetNumber] = false;
                            }
                            if (we.dungeonEvent22KeyOpen && (targetNumber == 13 * Database.TRUTH_DUNGEON_COLUMN + 4))
                            {
                                blueWallTop[targetNumber] = false;
                            }
                        }

                        // ２階
                        if (we.DungeonArea == 2)
                        {
                            if ((we.dungeonEvent205 && (targetNumber == 18 * Database.TRUTH_DUNGEON_COLUMN + 33)) ||
                                (we.dungeonEvent205 && (targetNumber == 21 * Database.TRUTH_DUNGEON_COLUMN + 25)) ||
                                (we.dungeonEvent211 && (targetNumber == 3 * Database.TRUTH_DUNGEON_COLUMN + 42)) ||
                                (we.dungeonEvent211 && (targetNumber == 8 * Database.TRUTH_DUNGEON_COLUMN + 46)) ||
                                (we.dungeonEvent219 && (targetNumber == 8 * Database.TRUTH_DUNGEON_COLUMN + 38)) ||
                                (we.dungeonEvent224 && (targetNumber == 9 * Database.TRUTH_DUNGEON_COLUMN + 35)) ||
                                (we.dungeonEvent250_SlayBoss && (targetNumber == 35 * Database.TRUTH_DUNGEON_COLUMN + 21)) ||
                                (we.dungeonEvent251_SlayBoss && (targetNumber == 24 * Database.TRUTH_DUNGEON_COLUMN + 21)) ||
                                (we.dungeonEvent253_SlayBoss && (targetNumber == 28 * Database.TRUTH_DUNGEON_COLUMN + 6)) ||
                                (we.dungeonEvent254_SlayBoss && (targetNumber == 38 * Database.TRUTH_DUNGEON_COLUMN + 5)) ||
                                (we.dungeonEvent255_SlayBoss && (targetNumber == 29 * Database.TRUTH_DUNGEON_COLUMN + 14)))
                            {
                                blueWallTop[targetNumber] = false;
                            }
                        }

                        // ３階
                        if (we.DungeonArea == 3)
                        {
                            // とくになし
                        }

                        // ４階
                        if (we.DungeonArea == 4)
                        {
                            if ((we.dungeonEvent402 && (targetNumber == 17 * Database.TRUTH_DUNGEON_COLUMN + 45)) ||
                                (we.dungeonEvent4_key1_1_open && (targetNumber == 11 * Database.TRUTH_DUNGEON_COLUMN + 43)) ||
                                (we.dungeonEvent4_key1_2_open && (targetNumber == 6 * Database.TRUTH_DUNGEON_COLUMN + 45)) ||
                                (we.dungeonEvent4_key1_4_open && (targetNumber == 4 * Database.TRUTH_DUNGEON_COLUMN + 31)) ||
                                (we.dungeonEvent4_SlayBoss1 && (targetNumber == 17 * Database.TRUTH_DUNGEON_COLUMN + 47)) ||
                                (we.dungeonEvent429 && (targetNumber == 8 * Database.TRUTH_DUNGEON_COLUMN + 6)) ||
                                (we.dungeonEvent431 && (targetNumber == 8 * Database.TRUTH_DUNGEON_COLUMN + 10)) ||
                                (we.dungeonEvent431 && (targetNumber == 8 * Database.TRUTH_DUNGEON_COLUMN + 11)) ||
                                (we.dungeonEvent437 && (targetNumber == 14 * Database.TRUTH_DUNGEON_COLUMN + 16)) ||
                                (we.dungeonEvent4_SlayBoss2 && (targetNumber == 17 * Database.TRUTH_DUNGEON_COLUMN + 20)) ||
                                (we.dungeonEvent488 && (targetNumber == 32 * Database.TRUTH_DUNGEON_COLUMN + 48)))
                            {
                                blueWallTop[targetNumber] = false;
                            }
                        }
                    }
                    if (childList2[ii].Name.Contains(OTHER6))
                    {
                        int targetNumber = Convert.ToInt32(childList2[ii].Name.Substring(OTHER6.Length, childList2[ii].Name.Length - OTHER6.Length));
                        blueWallLeft[targetNumber] = true;

                        // １階
                        if (we.DungeonArea == 1)
                        {
                            if (we.dungeonEvent11KeyOpen && (targetNumber == 33 * Database.TRUTH_DUNGEON_COLUMN + 23))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                            if (we.dungeonEvent13KeyOpen && (targetNumber == 28 * Database.TRUTH_DUNGEON_COLUMN + 23))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                            if (we.dungeonEvent16 && (targetNumber == 33 * Database.TRUTH_DUNGEON_COLUMN + 13))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                            if (we.dungeonEvent16 && (targetNumber == 28 * Database.TRUTH_DUNGEON_COLUMN + 13))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                            if (we.dungeonEvent16 && (targetNumber == 10 * Database.TRUTH_DUNGEON_COLUMN + 16))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                            if (we.dungeonEvent23KeyOpen && (targetNumber == 2 * Database.TRUTH_DUNGEON_COLUMN + 6))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                            if (we.dungeonEvent20 && (targetNumber == 16 * Database.TRUTH_DUNGEON_COLUMN + 13))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                            if (we.dungeonEvent24KeyOpen && (targetNumber == 11 * Database.TRUTH_DUNGEON_COLUMN + 6))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                            if (we.dungeonEvent28KeyOpen && (targetNumber == 6 * Database.TRUTH_DUNGEON_COLUMN + 6))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                        }

                        // ２階
                        if (we.DungeonArea == 2)
                        {
                            if ((we.dungeonEvent205 && (targetNumber == 23 * Database.TRUTH_DUNGEON_COLUMN + 31)) ||
                                (we.dungeonEvent205 && (targetNumber == 15 * Database.TRUTH_DUNGEON_COLUMN + 28)) ||
                                (we.dungeonEvent211 && (targetNumber == 17 * Database.TRUTH_DUNGEON_COLUMN + 50)) ||
                                (we.dungeonEvent219 && (targetNumber == 11 * Database.TRUTH_DUNGEON_COLUMN + 50)) ||
                                (we.dungeonEvent219 && (targetNumber == 14 * Database.TRUTH_DUNGEON_COLUMN + 59)) ||
                                (we.dungeonEvent230 && (targetNumber == 15 * Database.TRUTH_DUNGEON_COLUMN + 47)) ||
                                (we.dungeonEvent230 && (targetNumber == 2 * Database.TRUTH_DUNGEON_COLUMN + 50)) ||
                                (we.dungeonEvent252_SlayBoss && (targetNumber == 18 * Database.TRUTH_DUNGEON_COLUMN + 11)) ||
                                (we.dungeonEvent263_KeyOpen && (targetNumber == 26 * Database.TRUTH_DUNGEON_COLUMN + 17)))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                        }
                        // ３階
                        if (we.DungeonArea == 3)
                        {
                            if ((we.dungeonEvent305 && (targetNumber == 19 * Database.TRUTH_DUNGEON_COLUMN + 19)) ||
                                (we.dungeonEvent319KeyOpen && (targetNumber == 39 * Database.TRUTH_DUNGEON_COLUMN + 55)))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                        }
                        // ４階
                        if (we.DungeonArea == 4)
                        {
                            if ((we.dungeonEvent401 && (targetNumber == 18 * Database.TRUTH_DUNGEON_COLUMN + 49)) ||
                                (we.dungeonEvent4_key1_3_open && (targetNumber == 4 * Database.TRUTH_DUNGEON_COLUMN + 36)) ||
                                (we.dungeonEvent4_key1_5_open && (targetNumber == 12 * Database.TRUTH_DUNGEON_COLUMN + 34)) ||
                                (we.dungeonEvent4_key1_6 && (targetNumber == 13 * Database.TRUTH_DUNGEON_COLUMN + 41)) ||
                                (we.dungeonEvent4_key1_6_open && (targetNumber == 6 * Database.TRUTH_DUNGEON_COLUMN + 48)) ||
                                (we.dungeonEvent4_key1_7_open && (targetNumber == 3 * Database.TRUTH_DUNGEON_COLUMN + 54)) ||
                                (we.dungeonEvent4_key1_8_open && (targetNumber == 1 * Database.TRUTH_DUNGEON_COLUMN + 56)) ||
                                (we.dungeonEvent4_key1_9_open && (targetNumber == 11 * Database.TRUTH_DUNGEON_COLUMN + 52)) ||
                                (we.dungeonEvent426 && (targetNumber == 19 * Database.TRUTH_DUNGEON_COLUMN + 18)) ||
                                (we.dungeonEvent427 && (targetNumber == 8 * Database.TRUTH_DUNGEON_COLUMN + 11)) ||
                                (we.dungeonEvent433 && (targetNumber == 2 * Database.TRUTH_DUNGEON_COLUMN + 12)) ||
                                (we.dungeonEvent435 && (targetNumber == 7 * Database.TRUTH_DUNGEON_COLUMN + 12)) ||
                                (we.dungeonEvent435 && (targetNumber == 8 * Database.TRUTH_DUNGEON_COLUMN + 12)) ||
                                (we.dungeonEvent442 && (targetNumber == 33 * Database.TRUTH_DUNGEON_COLUMN + 18)) ||
                                (we.dungeonEvent473 && (targetNumber == 39 * Database.TRUTH_DUNGEON_COLUMN + 23)) ||
                                (we.dungeonEvent4_SlayBoss3 && (targetNumber == 35 * Database.TRUTH_DUNGEON_COLUMN + 23)) ||
                                (we.dungeonEvent477 && (targetNumber == 34 * Database.TRUTH_DUNGEON_COLUMN + 49)) ||
                                (we.dungeonEvent481 && (targetNumber == 39 * Database.TRUTH_DUNGEON_COLUMN + 48)) ||
                                (we.dungeonEvent483 && (targetNumber == 35 * Database.TRUTH_DUNGEON_COLUMN + 51)) ||
                                (we.dungeonEvent483 && (targetNumber == 34 * Database.TRUTH_DUNGEON_COLUMN + 51)) ||
                                (we.dungeonEvent485 && (targetNumber == 22 * Database.TRUTH_DUNGEON_COLUMN + 49)) ||
                                (GroundOne.WE2.SeekerEvent1 && (targetNumber == 20 * Database.TRUTH_DUNGEON_COLUMN + 49)))
                            {
                                blueWallLeft[targetNumber] = false;
                            }
                        }
                    }
                    if (childList2[ii].Name.Contains(OTHER7))
                    {
                        int targetNumber = Convert.ToInt32(childList2[ii].Name.Substring(OTHER7.Length, childList2[ii].Name.Length - OTHER7.Length));
                        blueWallRight[targetNumber] = true;

                        // １階
                        if (we.DungeonArea == 1)
                        {
                            if (we.dungeonEvent11KeyOpen && (targetNumber == 33 * Database.TRUTH_DUNGEON_COLUMN + 22))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                            if (we.dungeonEvent13KeyOpen && (targetNumber == 28 * Database.TRUTH_DUNGEON_COLUMN + 22))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                            if (we.dungeonEvent16 && (targetNumber == 33 * Database.TRUTH_DUNGEON_COLUMN + 12))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                            if (we.dungeonEvent16 && (targetNumber == 28 * Database.TRUTH_DUNGEON_COLUMN + 12))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                            if (we.dungeonEvent16 && (targetNumber == 10 * Database.TRUTH_DUNGEON_COLUMN + 15))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                            if (we.dungeonEvent23KeyOpen && (targetNumber == 2 * Database.TRUTH_DUNGEON_COLUMN + 5))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                            if (we.dungeonEvent20 && (targetNumber == 16 * Database.TRUTH_DUNGEON_COLUMN + 12))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                            if (we.dungeonEvent24KeyOpen && (targetNumber == 11 * Database.TRUTH_DUNGEON_COLUMN + 5))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                            if (we.dungeonEvent28KeyOpen && (targetNumber == 6 * Database.TRUTH_DUNGEON_COLUMN + 5))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                        }

                        // ２階
                        if (we.DungeonArea == 2)
                        {
                            if ((we.dungeonEvent205 && (targetNumber == 23 * Database.TRUTH_DUNGEON_COLUMN + 30)) ||
                                (we.dungeonEvent205 && (targetNumber == 15 * Database.TRUTH_DUNGEON_COLUMN + 27)) ||
                                (we.dungeonEvent211 && (targetNumber == 17 * Database.TRUTH_DUNGEON_COLUMN + 49)) ||
                                (we.dungeonEvent219 && (targetNumber == 11 * Database.TRUTH_DUNGEON_COLUMN + 49)) ||
                                (we.dungeonEvent219 && (targetNumber == 14 * Database.TRUTH_DUNGEON_COLUMN + 58)) ||
                                (we.dungeonEvent230 && (targetNumber == 15 * Database.TRUTH_DUNGEON_COLUMN + 46)) ||
                                (we.dungeonEvent230 && (targetNumber == 2 * Database.TRUTH_DUNGEON_COLUMN + 49)) ||
                                (we.dungeonEvent252_SlayBoss && (targetNumber == 18 * Database.TRUTH_DUNGEON_COLUMN + 10)) ||
                                (we.dungeonEvent263_KeyOpen && (targetNumber == 26 * Database.TRUTH_DUNGEON_COLUMN + 16)))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                        }
                        // ３階
                        if (we.DungeonArea == 3)
                        {
                            if ((we.dungeonEvent305 && (targetNumber == 19 * Database.TRUTH_DUNGEON_COLUMN + 18)) ||
                                (we.dungeonEvent319KeyOpen && (targetNumber == 39 * Database.TRUTH_DUNGEON_COLUMN + 54)))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                        }
                        // ４階
                        if (we.DungeonArea == 4)
                        {
                            if ((we.dungeonEvent401 && (targetNumber == 18 * Database.TRUTH_DUNGEON_COLUMN + 48)) ||
                                (we.dungeonEvent4_key1_3_open && (targetNumber == 4 * Database.TRUTH_DUNGEON_COLUMN + 35)) ||
                                (we.dungeonEvent4_key1_5_open && (targetNumber == 12 * Database.TRUTH_DUNGEON_COLUMN + 33)) ||
                                (we.dungeonEvent4_key1_6 && (targetNumber == 13 * Database.TRUTH_DUNGEON_COLUMN + 40)) ||
                                (we.dungeonEvent4_key1_6_open && (targetNumber == 6 * Database.TRUTH_DUNGEON_COLUMN + 47)) ||
                                (we.dungeonEvent4_key1_7_open && (targetNumber == 3 * Database.TRUTH_DUNGEON_COLUMN + 53)) ||
                                (we.dungeonEvent4_key1_8_open && (targetNumber == 1 * Database.TRUTH_DUNGEON_COLUMN + 55)) ||
                                (we.dungeonEvent4_key1_9_open && (targetNumber == 11 * Database.TRUTH_DUNGEON_COLUMN + 51)) ||
                                (we.dungeonEvent426 && (targetNumber == 19 * Database.TRUTH_DUNGEON_COLUMN + 17)) ||
                                (we.dungeonEvent427 && (targetNumber == 8 * Database.TRUTH_DUNGEON_COLUMN + 10)) ||
                                (we.dungeonEvent433 && (targetNumber == 2 * Database.TRUTH_DUNGEON_COLUMN + 11)) ||
                                (we.dungeonEvent435 && (targetNumber == 7 * Database.TRUTH_DUNGEON_COLUMN + 11)) ||
                                (we.dungeonEvent435 && (targetNumber == 8 * Database.TRUTH_DUNGEON_COLUMN + 11)) ||
                                (we.dungeonEvent442 && (targetNumber == 33 * Database.TRUTH_DUNGEON_COLUMN + 17)) ||
                                (we.dungeonEvent473 && (targetNumber == 39 * Database.TRUTH_DUNGEON_COLUMN + 22)) ||
                                (we.dungeonEvent4_SlayBoss3 && (targetNumber == 35 * Database.TRUTH_DUNGEON_COLUMN + 22)) ||
                                (we.dungeonEvent477 && (targetNumber == 34 * Database.TRUTH_DUNGEON_COLUMN + 48)) ||
                                (we.dungeonEvent481 && (targetNumber == 39 * Database.TRUTH_DUNGEON_COLUMN + 47)) ||
                                (we.dungeonEvent483 && (targetNumber == 35 * Database.TRUTH_DUNGEON_COLUMN + 50)) ||
                                (we.dungeonEvent483 && (targetNumber == 34 * Database.TRUTH_DUNGEON_COLUMN + 50)) ||
                                (we.dungeonEvent485 && (targetNumber == 22 * Database.TRUTH_DUNGEON_COLUMN + 48)) ||
                                (GroundOne.WE2.SeekerEvent1 && (targetNumber == 20 * Database.TRUTH_DUNGEON_COLUMN + 48)))
                            {
                                blueWallRight[targetNumber] = false;
                            }
                        }
                    }
                    if (childList2[ii].Name.Contains(OTHER8))
                    {
                        int targetNumber = Convert.ToInt32(childList2[ii].Name.Substring(OTHER8.Length, childList2[ii].Name.Length - OTHER8.Length));
                        blueWallBottom[targetNumber] = true;

                        // １階
                        if (we.DungeonArea == 1)
                        {
                            if (we.dungeonEvent14KeyOpen && (targetNumber == 26 * Database.TRUTH_DUNGEON_COLUMN + 21))
                            {
                                blueWallBottom[targetNumber] = false;
                            }
                            if (we.dungeonEvent12KeyOpen && (targetNumber == 34 * Database.TRUTH_DUNGEON_COLUMN + 21))
                            {
                                blueWallBottom[targetNumber] = false;
                            }
                            if (we.dungeonEvent16 && (targetNumber == 26 * Database.TRUTH_DUNGEON_COLUMN + 14))
                            {
                                blueWallBottom[targetNumber] = false;
                            }
                            if (we.dungeonEvent16 && (targetNumber == 34 * Database.TRUTH_DUNGEON_COLUMN + 14))
                            {
                                blueWallBottom[targetNumber] = false;
                            }
                            if (we.dungeonEvent21KeyOpen && (targetNumber == 12 * Database.TRUTH_DUNGEON_COLUMN + 2))
                            {
                                blueWallBottom[targetNumber] = false;
                            }
                            if (we.dungeonEvent22KeyOpen && (targetNumber == 12 * Database.TRUTH_DUNGEON_COLUMN + 4))
                            {
                                blueWallBottom[targetNumber] = false;
                            }
                        }

                        // ２階
                        if (we.DungeonArea == 2)
                        {
                            if ((we.dungeonEvent205 && (targetNumber == 17 * Database.TRUTH_DUNGEON_COLUMN + 33)) ||
                                (we.dungeonEvent205 && (targetNumber == 20 * Database.TRUTH_DUNGEON_COLUMN + 25)) ||
                                (we.dungeonEvent211 && (targetNumber == 2 * Database.TRUTH_DUNGEON_COLUMN + 42)) ||
                                (we.dungeonEvent211 && (targetNumber == 7 * Database.TRUTH_DUNGEON_COLUMN + 46)) ||
                                (we.dungeonEvent219 && (targetNumber == 7 * Database.TRUTH_DUNGEON_COLUMN + 38)) ||
                                (we.dungeonEvent224 && (targetNumber == 8 * Database.TRUTH_DUNGEON_COLUMN + 35)) ||
                                (we.dungeonEvent250_SlayBoss && (targetNumber == 34 * Database.TRUTH_DUNGEON_COLUMN + 21)) ||
                                (we.dungeonEvent251_SlayBoss && (targetNumber == 23 * Database.TRUTH_DUNGEON_COLUMN + 21)) ||
                                (we.dungeonEvent253_SlayBoss && (targetNumber == 27 * Database.TRUTH_DUNGEON_COLUMN + 6)) ||
                                (we.dungeonEvent254_SlayBoss && (targetNumber == 37 * Database.TRUTH_DUNGEON_COLUMN + 5)) ||
                                (we.dungeonEvent255_SlayBoss && (targetNumber == 28 * Database.TRUTH_DUNGEON_COLUMN + 14)))
                            {
                                blueWallBottom[targetNumber] = false;
                            }
                        }

                        // ３階
                        if (we.DungeonArea == 3)
                        {
                            // とくになし
                        }

                        // ４階
                        if (we.DungeonArea == 4)
                        {
                            if ((we.dungeonEvent402 && (targetNumber == 16 * Database.TRUTH_DUNGEON_COLUMN + 45)) ||
                                (we.dungeonEvent4_key1_1_open && (targetNumber == 10 * Database.TRUTH_DUNGEON_COLUMN + 43)) ||
                                (we.dungeonEvent4_key1_2_open && (targetNumber == 5 * Database.TRUTH_DUNGEON_COLUMN + 45)) ||
                                (we.dungeonEvent4_key1_4_open && (targetNumber == 3 * Database.TRUTH_DUNGEON_COLUMN + 31)) ||
                                (we.dungeonEvent4_SlayBoss1 && (targetNumber == 16 * Database.TRUTH_DUNGEON_COLUMN + 47)) ||
                                (we.dungeonEvent429 && (targetNumber == 7 * Database.TRUTH_DUNGEON_COLUMN + 6)) ||
                                (we.dungeonEvent431 && (targetNumber == 7 * Database.TRUTH_DUNGEON_COLUMN + 10)) ||
                                (we.dungeonEvent431 && (targetNumber == 7 * Database.TRUTH_DUNGEON_COLUMN + 11)) ||
                                (we.dungeonEvent437 && (targetNumber == 13 * Database.TRUTH_DUNGEON_COLUMN + 16)) ||
                                (we.dungeonEvent4_SlayBoss2 && (targetNumber == 16 * Database.TRUTH_DUNGEON_COLUMN + 20)) ||
                                (we.dungeonEvent488 && (targetNumber == 31 * Database.TRUTH_DUNGEON_COLUMN + 48)))
                            {
                                blueWallBottom[targetNumber] = false;
                            }
                        }
                    }
                }
            }
            catch { }
            #endregion
        }

        private bool firstLoadIgnoreMusic = false;

        private int stepCounter = 0; // 敵エンカウント率調整の値

        private void CallHomeTown(bool noFirstMusic)
        {
            CancelKeyDownMovement();

            stepCounter = 0;
            GroundOne.StopDungeonMusic();

            using (TruthHomeTown ht = new TruthHomeTown())
            {
                // ホームタウンに入る前は、遠見の青水晶を使ってくる場合もあるため、スタート地点へ移動しておく事とする。
                UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * 39, Database.DUNGEON_MOVE_LEN * 14);
                SetupDungeonMapping(1);

                ht.MC = this.MC;
                ht.SC = this.SC;
                ht.TC = this.TC;
                ht.WE = this.WE;
                ht.Truth_KnownTileInfo = this.knownTileInfo;
                ht.Truth_KnownTileInfo2 = this.knownTileInfo2;
                ht.Truth_KnownTileInfo3 = this.knownTileInfo3;
                ht.Truth_KnownTileInfo4 = this.knownTileInfo4;
                ht.Truth_KnownTileInfo5 = this.knownTileInfo5;
                ht.NoFirstMusic = noFirstMusic;
                ht.BattleSpeed = this.battleSpeed;
                ht.Difficulty = this.difficulty;

                this.Hide();
                ht.ShowDialog();

                this.mc = ht.MC;
                this.sc = ht.SC;
                this.tc = ht.TC;
                this.we = ht.WE;

                if (ht.DialogResult == DialogResult.Retry)
                {
                    this.Show();
                    this.mc = ht.MC;
                    this.sc = ht.SC;
                    this.tc = ht.TC;
                    this.we = ht.WE;
                    this.knownTileInfo = ht.Truth_KnownTileInfo;
                    this.knownTileInfo2 = ht.Truth_KnownTileInfo2;
                    this.knownTileInfo3 = ht.Truth_KnownTileInfo3;
                    this.knownTileInfo4 = ht.Truth_KnownTileInfo4;
                    this.knownTileInfo5 = ht.Truth_KnownTileInfo5;
                    SetupPlayerStatus();
                    PreInitialize();
                }
                else if (ht.DialogResult == DialogResult.Cancel)
                {
                    this.Show();
                    this.DialogResult = DialogResult.Cancel;
                }
                else
                {
                    // ダンジョンに戻ってきたため、フラグを立てる
                    this.WE.SaveByDungeon = true;
                    // ホームタウンから出てきたら、その日のコミュニケーションフラグを落とす
                    this.WE.AlreadyCommunicate = false;
                    this.WE.AlreadyEquipShop = false;
                    this.WE.alreadyCommunicateCahlhanz = false;
                    this.WE.AlreadyRest = false;
                    this.dayLabel.Text = we.GameDay.ToString() + "日目";
                    this.dungeonAreaLabel.Text = we.DungeonArea.ToString() + "　階";

                    switch (ht.TargetDungeon)
                    {
                        case 1:
                            UpdateViewPoint(-Database.DUNGEON_MOVE_LEN * 25, -Database.DUNGEON_MOVE_LEN * 5);
                            UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * (39 - 25), Database.DUNGEON_MOVE_LEN * (14 - 5));
                            break;
                        case 2:
                            UpdateViewPoint(-Database.DUNGEON_MOVE_LEN * 25, -Database.DUNGEON_MOVE_LEN * 5);
                            UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * (29 - 25), Database.DUNGEON_MOVE_LEN * (19 - 5));
                            break;
                        case 3:
                            UpdateViewPoint(-Database.DUNGEON_MOVE_LEN * 0, -Database.DUNGEON_MOVE_LEN * 10);
                            UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * (0 - 0), Database.DUNGEON_MOVE_LEN * (19 - 10));
                            break;
                        case 4:
                            JumpByNormal(18, 52);
                            //UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * 6, Database.DUNGEON_MOVE_LEN * 19);
                            break;
                        case 5:
                            UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * 20, Database.DUNGEON_MOVE_LEN * 0);
                            break;
                    }
                    SetupDungeonMapping(ht.TargetDungeon);

                    UpdateMainMessage("", true);
                    this.Show();
                    GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                    SetupPlayerStatus();
                }
            }
            UpdateUnknownTile();
            dungeonField.Invalidate();
        }



        bool keyDown = false;
        bool keyUp = false;
        bool keyLeft = false;
        bool keyRight = false;
        private void TruthDungeon_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                // プレイヤーの動作を示す
                case Keys.NumPad8:
                case Keys.Up:
                    if (!this.keyUp)
                    {
                        movementTimer.Interval = 1;
                        movementTimer.Enabled = true;
                        movementTimer.Start();
                        this.keyUp = true;
                        this.keyDown = false;
                    }
                    break;
                case Keys.NumPad4:
                case Keys.Left:
                    if (!this.keyLeft)
                    {
                        movementTimer.Interval = 1;
                        movementTimer.Enabled = true;
                        movementTimer.Start();
                        this.keyLeft = true;
                        this.keyRight = false;
                    }
                    break;
                case Keys.NumPad6:
                case Keys.Right:
                    if (!this.keyRight)
                    {
                        movementTimer.Interval = 1;
                        movementTimer.Enabled = true;
                        movementTimer.Start();
                        this.keyRight = true;
                        this.keyLeft = false;
                    }
                    break;
                case Keys.NumPad2:
                case Keys.Down:
                    if (!this.keyDown)
                    {
                        movementTimer.Interval = 1;
                        movementTimer.Enabled = true;
                        movementTimer.Start();
                        this.keyDown = true;
                        this.keyUp = false;
                    }
                    break;
                case Keys.Escape:
                    if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd && !GroundOne.WE2.SeekerEvent506)
                    {
                        mainMessage.Text = "アイン：いや、もうその必要はねえ。";
                        return;
                    }

                    CancelKeyDownMovement();

                    if (this.DungeonViewMode) return;

                    using (ESCMenu esc = new ESCMenu())
                    {
                        esc.MC = this.MC;
                        esc.SC = this.SC;
                        esc.TC = this.TC;
                        esc.WE = this.WE;
                        esc.Truth_KnownTileInfo = this.Truth_KnownTileInfo;
                        esc.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2;
                        esc.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3;
                        esc.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4;
                        esc.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5;
                        esc.StartPosition = FormStartPosition.CenterParent;
                        esc.TruthStory = true;
                        esc.ShowDialog(this);
                        if (esc.DialogResult == DialogResult.Abort)
                        {
                            CallHomeTown();
                        }
                        else if (esc.DialogResult == DialogResult.Retry)
                        {
                            this.mc = esc.MC;
                            this.sc = esc.SC;
                            this.tc = esc.TC;
                            this.we = esc.WE;
                            this.Truth_KnownTileInfo = esc.Truth_KnownTileInfo;
                            this.Truth_KnownTileInfo2 = esc.Truth_KnownTileInfo2;
                            this.Truth_KnownTileInfo3 = esc.Truth_KnownTileInfo3;
                            this.Truth_KnownTileInfo4 = esc.Truth_KnownTileInfo4;
                            this.Truth_KnownTileInfo5 = esc.Truth_KnownTileInfo5;

                            PreInitialize();
                        }
                        else if (esc.DialogResult == DialogResult.Cancel)
                        {
                            this.DialogResult = DialogResult.Cancel;
                        }
                    }
                    break;

                case Keys.F2:
                    this.DungeonViewMode = !this.DungeonViewMode;
                    if (this.DungeonViewMode)
                    {
                        this.DungeonViewModeMasterLocation = new Point(this.viewPoint.X, this.viewPoint.Y);
                        this.DungeonViewModeMasterPlayerLocation = new Point(this.Player.Location.X, this.Player.Location.Y);

                        this.FirstPlayerPanel.Visible = false;
                        this.SecondPlayerPanel.Visible = false;
                        this.ThirdPlayerPanel.Visible = false;
                        this.labelVigilance.Visible = false;

                        this.MovementInterval = 1;
                    }
                    else
                    {
                        this.MovementInterval = 100;

                        this.viewPoint = new Point(this.DungeonViewModeMasterLocation.X, this.DungeonViewModeMasterLocation.Y);
                        this.Player.Location = new Point(this.DungeonViewModeMasterPlayerLocation.X, this.DungeonViewModeMasterPlayerLocation.Y);

                        if (we.AvailableFirstCharacter)
                        {
                            this.FirstPlayerPanel.Visible = true;
                        }
                        if (we.AvailableSecondCharacter)
                        {
                            this.SecondPlayerPanel.Visible = true;
                        }
                        if (we.AvailableThirdCharacter)
                        {
                            this.ThirdPlayerPanel.Visible = true;
                        }
                        this.labelVigilance.Visible = true;

                        dungeonField.Invalidate();
                        this.Update();
                    }
                    //if (GroundOne.map == null)
                    //{
                    //    GroundOne.map = new TruthDungeonMapAll();
                    //    GroundOne.map.StartPosition = FormStartPosition.CenterParent;

                    //    GroundOne.map.dungeonTile = this.dungeonTile;
                    //    GroundOne.map.unknownTile = this.unknownTile;

                    //    GroundOne.map.treasureBoxTile = this.treasureBoxTile;
                    //    GroundOne.map.boardTile = this.boardTile;
                    //    GroundOne.map.upstairTile = this.upstairTile;
                    //    GroundOne.map.downstairTile = this.downstairTile;

                    //    GroundOne.map.blueWallTop = this.blueWallTop;
                    //    GroundOne.map.blueWallLeft = this.blueWallLeft;
                    //    GroundOne.map.blueWallRight = this.blueWallRight;
                    //    GroundOne.map.blueWallBottom = this.blueWallBottom;

                    //    GroundOne.map.treasureImage = this.treasureImage;
                    //    GroundOne.map.treasureOpenImage = this.treasureOpenImage;
                    //    GroundOne.map.boardImage = this.boardImage;
                    //    GroundOne.map.upstairImage = this.upstairImage;
                    //    GroundOne.map.downstairImage = this.downstairImage;

                    //    GroundOne.map.viewPoint = this.viewPoint;
                    //    GroundOne.map.Player = this.Player;

                    //    GroundOne.map.we = this.we;
                    //    GroundOne.map.we2 = this.we2;

                    //    GroundOne.map.ShowDialog();
                    //    GroundOne.map = null;
                    //    GC.Collect();
                    //}                  
                    break;
            }
        }

        private void UpdatePlayersKeyEvents(int direction)
        {
            // 通常動作モード
            if (!this.DungeonViewMode)
            {
                int moveX = 0;
                int moveY = 0;

                // [警告]：開発途中で戦闘終了後、イベント発生後などでキーダウンで効かない場合があった。押下しっぱなしだと進められるように仕様変更となるので、別の不具合が出た場合はまた再検討してください。
                // [警告]：後編でキーダウン動作仕様を変更した。戦闘エンカウントやメッセージ表示、ホームタウン戻り、壁当たりなど随所にCancelKeyDownMovementを導入して検討中。
                //keyDown = true;
                if (CheckWall(direction))
                {
                    //keyDown = false;
                    //keyUp = false;
                    //keyLeft = false;
                    //keyRight = false;
                    System.Threading.Thread.Sleep(200);
                    return;
                }
                if (CheckBlueWall(direction))
                {
                    System.Threading.Thread.Sleep(200);
                    return;
                }

                if (direction == 0) moveY = -Database.DUNGEON_MOVE_LEN;
                else if (direction == 1) moveX = -Database.DUNGEON_MOVE_LEN;
                else if (direction == 2) moveX = Database.DUNGEON_MOVE_LEN;
                else if (direction == 3) moveY = Database.DUNGEON_MOVE_LEN;

                int tilenum = GetTileNumber(Player.Location);
                int row = tilenum / Database.TRUTH_DUNGEON_COLUMN;
                int column = tilenum % Database.TRUTH_DUNGEON_COLUMN;

                // 上端ダンジョン外を見せないようにする
                // 右端ダンジョン外を見せないようにする
                // 左端ダンジョン外を見せないようにする
                // 下端ダンジョン外を見せないようにする
                // 上端近辺での↑移動はプレイヤー移動
                // 右端近辺での→移動はプレイヤー移動
                // 左端近辺での←移動はプレイヤー移動
                // 下端近辺での↓移動はプレイヤー移動
                if ((direction == 0 && this.viewPoint.Y >= 0) ||
                     (direction == 1 && this.viewPoint.X >= 0) ||
                     (direction == 2 && this.viewPoint.X <= -Database.TRUTH_DUNGEON_COLUMN * Database.DUNGEON_MOVE_LEN / 2) ||
                     (direction == 3 && this.viewPoint.Y <= -Database.TRUTH_DUNGEON_ROW * Database.DUNGEON_MOVE_LEN / 2) ||
                     (direction == 0 && this.Player.Location.Y >= Database.DUNGEON_MOVE_LEN * 8) ||
                     (direction == 1 && this.Player.Location.X >= Database.DUNGEON_MOVE_LEN * 10) ||
                     (direction == 2 && this.Player.Location.X <= Database.DUNGEON_MOVE_LEN * 20) ||
                     (direction == 3 && this.Player.Location.Y <= Database.DUNGEON_MOVE_LEN * 12))
                {
                    UpdatePlayerLocationInfo(this.Player.Location.X + moveX, this.Player.Location.Y + moveY, false);
                }
                else
                {
                    UpdateViewPoint(viewPoint.X - moveX, viewPoint.Y - moveY);
                }

                // EPICアイテムEPIC_ORB_GROW_GREENの効果
                for (int ii = 0; ii < 3; ii++)
                {
                    MainCharacter player = null;
                    Label targetLabel = null;
                    if (ii == 0) { player = mc; targetLabel = currentSkillPoint1; }
                    else if (ii == 1) { player = sc; targetLabel = currentSkillPoint2; }
                    else if (ii == 2) { player = tc; targetLabel = currentSkillPoint3; }
                    if (player != null)
                    {
                        if (player.Accessory != null)
                        {
                            if (player.Accessory.Name == Database.EPIC_ORB_GROW_GREEN)
                            {
                                player.CurrentSkillPoint++;
                                targetLabel.Width = (int)((double)((double)player.CurrentSkillPoint / (double)player.MaxSkillPoint) * 100.0f);
                            }
                        }
                        if (player.Accessory2 != null)
                        {
                            if (player.Accessory2.Name == Database.EPIC_ORB_GROW_GREEN)
                            {
                                player.CurrentSkillPoint++;
                                targetLabel.Width = (int)((double)((double)player.CurrentSkillPoint / (double)player.MaxSkillPoint) * 100.0f);
                            }
                        }
                    }
                }

                // 移動時のタイル更新
                bool lowSpeed = UpdateUnknownTile();
                dungeonField.Invalidate();
                this.Update();

                // イベント発生
                SearchSomeEvents();

                if (lowSpeed)
                {
                    //    System.Threading.Thread.Sleep(200);
                    this.MovementInterval = 200;
                }
                else
                {
                    //    System.Threading.Thread.Sleep(100);
                    this.MovementInterval = 100;
                }
                GetTileNumber(Player.Location);
            }
            // View動作モード
            else
            {
                int moveX = 0;
                int moveY = 0;

                if (direction == 0) moveY = -Database.DUNGEON_MOVE_LEN;
                else if (direction == 1) moveX = -Database.DUNGEON_MOVE_LEN;
                else if (direction == 2) moveX = Database.DUNGEON_MOVE_LEN;
                else if (direction == 3) moveY = Database.DUNGEON_MOVE_LEN;

                int tilenum = GetTileNumber(Player.Location);
                int row = tilenum / Database.TRUTH_DUNGEON_COLUMN;
                int column = tilenum % Database.TRUTH_DUNGEON_COLUMN;

                // 上端ダンジョン外を見せないようにする
                // 右端ダンジョン外を見せないようにする
                // 左端ダンジョン外を見せないようにする
                // 下端ダンジョン外を見せないようにする
                if ((direction == 0 && this.viewPoint.Y >= 0) ||
                     (direction == 1 && this.viewPoint.X >= 0) ||
                     (direction == 2 && this.viewPoint.X <= -Database.TRUTH_DUNGEON_COLUMN * Database.DUNGEON_MOVE_LEN / 2) ||
                     (direction == 3 && this.viewPoint.Y <= -Database.TRUTH_DUNGEON_ROW * Database.DUNGEON_MOVE_LEN / 2)
                    )
                {
                    return;
                }

                UpdateViewPoint(viewPoint.X - moveX, viewPoint.Y - moveY);

                if (direction == 0)
                {
                    UpdatePlayerLocationInfo(this.Player.Location.X + moveX, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN, false);
                }
                else if (direction == 1)
                {
                    UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y, false);
                }
                else if (direction == 2)
                {
                    UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y, false);
                }
                else if (direction == 3)
                {
                    UpdatePlayerLocationInfo(this.Player.Location.X + moveX, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN, false);
                }

                dungeonField.Invalidate();
                this.Update();

                GetTileNumber(Player.Location);
            }
        }

        private void SearchSomeEvents()
        {
            bool detectEvent = false;
            using (OKRequest ok = new OKRequest())
            {
                ok.StartPosition = FormStartPosition.Manual;
                ok.Location = new Point(this.Location.X + 904, this.Location.Y + 708);

                #region "１階"
                if (we.DungeonArea == 1 && GroundOne.WE2.StartSeeker == false)
                {
                    for (int ii = 0; ii < 60; ii++)
                    {
                        if (CheckTriggeredEvent(ii))
                        {
                            detectEvent = true;
                            ExecSomeEvents(1, ii);
                            return;
                        }
                    }
                }
                #endregion
                #region "２階"
                else if (we.DungeonArea == 2 && GroundOne.WE2.StartSeeker == false)
                {
                    for (int ii = 0; ii < 200; ii++)
                    {
                        if (CheckTriggeredEvent(ii))
                        {
                            detectEvent = true;
                            ExecSomeEvents(2, ii);
                            return;
                        }
                    }
                }
                #endregion
                #region "３階"
                else if (we.DungeonArea == 3 && GroundOne.WE2.StartSeeker == false)
                {
                    for (int ii = 0; ii < 500; ii++)
                    {
                        if (CheckTriggeredEvent(ii))
                        {
                            detectEvent = true;
                            ExecSomeEvents(3, ii);
                            return;
                        }
                    }
                }
                #endregion
                #region "４階"
                else if (we.DungeonArea == 4)
                {
                    for (int ii = 0; ii < 500; ii++)
                    {
                        if (CheckTriggeredEvent(ii))
                        {
                            detectEvent = true;
                            ExecSomeEvents(4, ii);
                            return;
                        }
                    }
                }
                #endregion
                #region "５階"
                else if (we.DungeonArea == 5)
                {
                    for (int ii = 0; ii < 500; ii++)
                    {
                        if (CheckTriggeredEvent(ii))
                        {
                            detectEvent = true;
                            ExecSomeEvents(5, ii);
                            return;
                        }
                    }
                }
                #endregion

                #region "現実世界"
                if (GroundOne.WE2.StartSeeker)
                {
                    ExecSomeEvent_ReadWorld();
                }
                #endregion


                if (!detectEvent)
                {
                    EncountEnemy();
                }
            }
        }

        // [必須] このメソッドは長文のため、処理遅延につながっている。
        private bool ExecSomeEvents(int area, int ii)
        {
            #region "１階"
            if (area == 1)
            {
                switch (ii)
                {
                    #region "始まりの看板"
                    case 0:
                        if (!we.BoardInfo10)
                        {
                            UpdateMainMessage("アイン：看板があるな・・・なになに？");

                            UpdateMainMessage("　　　　『始まりの地、見落とすべからず』");

                            if (we.AvailableSecondCharacter)
                            {
                                UpdateMainMessage("アイン：始まりの地って、ここのダンジョン１階の事か？");

                                UpdateMainMessage("ラナ：そうなんじゃない？最初が肝心って意味じゃないかしら。");

                                UpdateMainMessage("アイン：見落とす・・・べからず？　べからずってどういう意味だよ。");

                                UpdateMainMessage("ラナ：「見落としてはいけません」って意味でしょ。");

                                UpdateMainMessage("アイン：何だ、普通の看板だな。特にコレといった特徴もねえし。");

                                UpdateMainMessage("ラナ：くまなくダンジョンを探索してみましょ。");

                                UpdateMainMessage("アイン：了解了解！", true);

                            }
                            else
                            {
                                UpdateMainMessage("アイン：始まりの地って、ここのダンジョン１階の事か？");

                                UpdateMainMessage("アイン：っと、見落とすべからず？");

                                UpdateMainMessage("アイン：しまった・・・「べからず」ってどういう意味だよ。くそ。");

                                UpdateMainMessage("アイン：まあ、いいか。後でラナにでも聞いてみるか。", true);
                            }
                            we.BoardInfo10 = true;
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『始まりの地、見落とすべからず。』", true);
                        }
                        return true;
                    #endregion
                    #region "近道の看板"
                    case 1:
                        if (!we.BoardInfo11)
                        {
                            UpdateMainMessage("アイン：こんなトコにも看板か。・・・ええっと？");

                            UpdateMainMessage("　　　　『近道にこそ、危険が潜む』");

                            if (we.AvailableSecondCharacter)
                            {
                                UpdateMainMessage("ラナ：進むの止めといた方が良いんじゃない？");

                                UpdateMainMessage("アイン：何でだよ？近道だろ？");

                                UpdateMainMessage("ラナ：危険って書いてあるじゃない。あからさまな罠でしょ。");

                                if (mc.Level < 10)
                                {
                                    UpdateMainMessage("アイン：危険って書いてあるだけだろ？大丈夫だって。");

                                    UpdateMainMessage("ラナ：何で大丈夫なのよ！？引き返しなさいよ！！！");

                                    UpdateMainMessage("アイン：だあぁぁ、分かったって！引き返すって！っな？");

                                    UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);

                                    UpdateMainMessage("アイン：（駄目だ・・・ラナが許してくれそうにもねえ・・・）");

                                    UpdateMainMessage("アイン：（もう少し、レベルアップするか何かしないとな・・・）", true);
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：でもな俺もLV" + mc.Level + "なワケだし、大丈夫だろ？");

                                    UpdateMainMessage("ラナ：そうかしら・・・そんな簡単に進めるとは思えないけど。");

                                    UpdateMainMessage("アイン：まあ明らかに危ないと感じたら引き返す。それで良いだろ？");

                                    UpdateMainMessage("ラナ：ん〜、まあ良いわ。分かったわよ。");

                                    UpdateMainMessage("アイン：っしゃ、じゃあ進もうぜ！", true);

                                    we.dungeonEvent29 = true;
                                }
                                we.dungeonEvent30 = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：なるほどな。まあ確かに近道ってのは危険がつきものだ。");

                                UpdateMainMessage("アイン：って事は、ひょっとしたら・・・すげえルートがあるかもしれねえな。");

                                UpdateMainMessage("アイン：ラナが居たら絶対ひき止められそうだが、行ってみるか！", true);
                            }

                            we.BoardInfo11 = true;
                        }
                        else
                        {
                            if (we.dungeonEvent29 == false)
                            {
                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("　　　　『近道にこそ、危険が潜む。』");

                                    if (we.dungeonEvent30 == false)
                                    {
                                        UpdateMainMessage("ラナ：進むの止めといた方が良いんじゃない？");

                                        UpdateMainMessage("アイン：何でだよ？近道だろ？");

                                        UpdateMainMessage("ラナ：危険って書いてあるじゃない。あからさまな罠でしょ。");

                                        if (mc.Level < 10)
                                        {
                                            UpdateMainMessage("アイン：危険って書いてあるだけだろ？大丈夫だって。");

                                            UpdateMainMessage("ラナ：何で大丈夫なのよ！？引き返しなさいよ！！！");

                                            UpdateMainMessage("アイン：だあぁぁ、分かったって！引き返すって！っな？");

                                            UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);

                                            UpdateMainMessage("アイン：（駄目だ・・・ラナが許してくれそうにもねえ・・・）");

                                            UpdateMainMessage("アイン：（もう少し、レベルアップするか何かしないとな・・・）", true);
                                        }
                                        else
                                        {
                                            UpdateMainMessage("アイン：でもな俺もLV" + mc.Level + "なワケだし、大丈夫だろ？");

                                            UpdateMainMessage("ラナ：そうかしら・・・そんな簡単に進めるとは思えないけど。");

                                            UpdateMainMessage("アイン：まあ明らかに危ないと感じたら引き返す。それで良いだろ？");

                                            UpdateMainMessage("ラナ：ん〜、まあ良いわ。分かったわよ。");

                                            UpdateMainMessage("アイン：っしゃ、じゃあ進もうぜ！", true);

                                            we.dungeonEvent29 = true;
                                        }
                                        we.dungeonEvent30 = true;
                                    }
                                    else
                                    {
                                        if (mc.Level < 8)
                                        {
                                            UpdateMainMessage("ラナ：・・・ちょっと！？");

                                            UpdateMainMessage("アイン：分かった、分かった・・・分かりました、ラナ様・・・");

                                            UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                        }
                                        else
                                        {
                                            UpdateMainMessage("アイン：ラナ、俺もLV" + mc.Level + "に到達してる。もう、大丈夫だろ？");

                                            UpdateMainMessage("ラナ：そうかしら・・・そんな簡単に進めるとは思えないけど。");

                                            UpdateMainMessage("アイン：まあ明らかに危ないと感じたら引き返す。それで良いだろ？");

                                            UpdateMainMessage("ラナ：ん〜、まあ良いわ。分かったわよ。");

                                            UpdateMainMessage("アイン：っしゃ、じゃあ進もうぜ！", true);

                                            we.dungeonEvent29 = true;
                                        }
                                    }
                                }
                                else
                                {
                                    UpdateMainMessage("　　　　『近道にこそ、危険が潜む。』", true);
                                }
                            }
                            else
                            {
                                UpdateMainMessage("　　　　『近道にこそ、危険が潜む。』", true);
                            }
                        }
                        break;
                    #endregion
                    #region "大広間、看板"
                    case 2:
                        if (!we.BoardInfo12)
                        {
                            UpdateMainMessage("アイン：おっ、看板発見っと！");

                            UpdateMainMessage("　　　　『入り口側の扉をすべて開けよ。さすれば、道は開けるであろう。』");

                            if (we.AvailableSecondCharacter)
                            {
                                UpdateMainMessage("ラナ：結構扉が並んでるわね、ズラリと。");

                                UpdateMainMessage("ラナ：各角に２個ずつ扉があるわね。合計８箇所ってとこかしら。");

                                UpdateMainMessage("ラナ：入り口側っていう切り口も少し気になるわね。");

                                UpdateMainMessage("アイン：このダンジョン。妙に迷路っぽいだろ。方向が掴み難くいんだよ。");

                                UpdateMainMessage("ラナ：少しは自分でマッピングしていったらどうなのよ？");

                                UpdateMainMessage("アイン：面倒くせえ。");

                                UpdateMainMessage("ラナ：まったく、そういうとこ本当治らないわね・・・はあぁぁぁ・・・");

                                UpdateMainMessage("ラナ：まあ良いわ。進む方向とマッピングは私がやるから。アインは戦闘の前衛をお願いね。");

                                UpdateMainMessage("アイン：サンキュー。恩にきるぜ！");

                            }
                            else
                            {

                                UpdateMainMessage("アイン：へえ、結構な扉の数だな。");

                                UpdateMainMessage("アイン：各角に２箇所ずつ、合計８箇所って事か。");

                                UpdateMainMessage("アイン：入り口側ってのが少し気にかかるが・・・");

                                UpdateMainMessage("アイン：まあ考えててもしょうがねえ。探索するしかないな。", true);
                            }

                            we.BoardInfo12 = true;
                        }
                        else
                        {
                            if (we.AvailableSecondCharacter && !we.dungeonEvent15)
                            {
                                UpdateMainMessage("アイン：何かよくわかんねえよな。この看板。");

                                UpdateMainMessage("アイン：入り口側・・・入り口側・・・");

                                UpdateMainMessage("ラナ：入り口側って、ひょっとして、右側４つを指しているんじゃないかしら？");

                                UpdateMainMessage("アイン：マジかよ！？何でそうなるんだよ！？");

                                UpdateMainMessage("ラナ：単純な理屈よ。単にスタート地点がこの大広間より右側にある、それだけよ。");

                                UpdateMainMessage("アイン：ソレだ！！");

                                UpdateMainMessage("ラナ：ちょっと・・・違うかも知れないわよ？ひょっとしたら反対側の４つかも知れないし。");

                                UpdateMainMessage("アイン：良いってイイって！それでいこうぜ！右側４箇所だな。");

                                UpdateMainMessage("ラナ：っちょ、本当に適当よ。間違ってても知らないわよ？");

                                UpdateMainMessage("アイン：了解！了解！ッハッハッハ！", true);

                                we.dungeonEvent15 = true;
                            }
                            else
                            {
                                UpdateMainMessage("　　　　『入り口側の扉をすべて開けよ。さすれば、道は開けるであろう。』", true);
                            }
                        }
                        break;
                    #endregion
                    #region "看板、メンバー構成"
                    case 3:
                        if (!we.BoardInfo13)
                        {
                            UpdateMainMessage("アイン：看板が立ててあるな。なになに？");

                            UpdateMainMessage("　　　　『ダンジョンはメンバー構成によって変化する。』");

                            if (we.AvailableSecondCharacter)
                            {
                                UpdateMainMessage("アイン：しかしだな、ラナが加わって何か変わったんだろうか。");

                                UpdateMainMessage("ラナ：アインが入った時と比べて、何か変化してる？");

                                UpdateMainMessage("アイン：いいや、特に変わりは無いぜ。");

                                UpdateMainMessage("ラナ：本当に変化してるのかどうか、分からないわね。");

                                UpdateMainMessage("アイン：ダンジョンの全構図が見えてれば、分かるんだろうが・・・");

                                UpdateMainMessage("アイン：さすがに今の時点じゃ分からねえな。");

                                UpdateMainMessage("ラナ：まあ、もう少し他を探索してみましょ。");

                                UpdateMainMessage("アイン：ああ、そうだな。", true);
                            }
                            else
                            {
                                UpdateMainMessage("アイン：ん？そうなのか。");

                                UpdateMainMessage("アイン：まあ、今は俺一人だから変わりようがねえけどな。");

                                UpdateMainMessage("アイン：でも、面白そうだな。今度ラナでも誘ってみるか。", true);
                            }

                            we.BoardInfo13 = true;
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『ダンジョンはメンバー構成によって変化する。』", true);
                        }
                        break;
                    #endregion
                    #region "真実解を示す子部屋情報"
                    case 4:
                        if (we.dungeonEvent21KeyOpen && we.dungeonEvent22KeyOpen && we.dungeonEvent23KeyOpen && we.dungeonEvent24KeyOpen && !we.dungeonEvent27 && !we.dungeonEvent28KeyOpen)
                        {
                            this.BackColor = Color.Black;

                            UpdateMainMessage("　　　　『真実解１　　＜始まりの地にて＞　　地点【４７　２９】』");

                            UpdateMainMessage("アイン：おいおい・・・なんだよ、これ。");

                            UpdateMainMessage("ラナ：ちょっと待って、マップ見てみるわ。");

                            UpdateMainMessage("ラナ：・・・４７　２９は多分座標ポイントね。");

                            UpdateMainMessage("ラナ：その数字からすると・・・右下のホラ、この辺よきっと。");

                            UpdateMainMessage("アイン：やべ・・・頭が・・・ッグ・・・");

                            UpdateMainMessage("ラナ：っちょ、アイン大丈夫！？汗びっしょりじゃないの！");

                            UpdateMainMessage("アイン：ッグ・・・だ・・・大丈夫だ。");

                            UpdateMainMessage("アイン：激しい頭痛がするだけだ。心配すんなって、大丈夫だから。");

                            UpdateMainMessage("ラナ：そんな汗びっしょりでどこが大丈夫なのよ！？");

                            UpdateMainMessage("アイン：・・・すまねえ。一旦戻ろう。遠見の青水晶だ。");

                            UpdateMainMessage("ラナ：最初からそう言いなさいよ。じゃあ戻るわよ？");

                            UpdateMainMessage("ラナ：遠見の青水晶を使うわ。ッハイ！");

                            this.BackColor = Color.RoyalBlue;

                            we.dungeonEvent27 = true;

                            CallHomeTown();
                        }
                        else
                        {
                            if (!we.BoardInfo14)
                            {
                                if (!we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("アイン：こんなとこにも看板があるな。");

                                    UpdateMainMessage("　　　　『くまなく、探したか？』");

                                    UpdateMainMessage("アイン：なんだこりゃ。くまなく・・・探したか？？");

                                    UpdateMainMessage("アイン：やべ、わかんねえ単語だな。。。「くまなく」って何だよ。");

                                    UpdateMainMessage("アイン：まあいい。ラナに聞いてみるとするか。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：こんなとこにも看板があるな。");

                                    UpdateMainMessage("　　　　『くまなく、探したか？』");

                                    UpdateMainMessage("アイン：くまなく・・・熊無く・・・");

                                    UpdateMainMessage("ラナ：隅々まで余すことなく、って意味よ。");

                                    UpdateMainMessage("アイン：サンキュー。隅々まで探したかどうか・・・か。");

                                    UpdateMainMessage("アイン：う〜ん・・・いまいち分かり辛い内容だな。");

                                    UpdateMainMessage("ラナ：「ダンジョン内をくまなく探せ。」って意味でしょ？");

                                    UpdateMainMessage("ラナ：あんまり深く考えない方が得策よ♪");

                                    UpdateMainMessage("アイン：ああ・・・まあそうだな・・・。");
                                }

                                we.BoardInfo14 = true;
                            }
                            else
                            {
                                if (we.dungeonEvent27)
                                {
                                    UpdateMainMessage("　　　　『真実解１　　＜始まりの地にて＞　　地点【４７　２９】』", true);
                                }
                                else
                                {
                                    UpdateMainMessage("　　　　『くまなく、探したか？』", true);
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region "街へ戻る"
                    case 5:
                        UpdateMainMessage("アイン：ユングの町に戻るか？", true);
                        using (YesNoRequest ynr = new YesNoRequest())
                        {
                            ynr.StartPosition = FormStartPosition.CenterParent;
                            ynr.ShowDialog();
                            if (ynr.DialogResult == DialogResult.Yes)
                            {
                                CallHomeTown();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                UpdateMainMessage("", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "宝箱エリア１"
                    case 6:
                        we.TruthTreasure11 = GetTreasure(Database.COMMON_SIMPLE_BRACELET);
                        break;
                    case 7:
                        we.TruthTreasure12 = GetTreasure(Database.POOR_HARD_SHOES);
                        break;
                    case 8:
                        we.TruthTreasure13 = GetTreasure(Database.COMMON_SEAL_OF_POSION);
                        break;
                    case 9:
                        we.TruthTreasure14 = GetTreasure(Database.COMMON_GREEN_EGG_KAIGARA);
                        break;
                    case 10:
                        we.TruthTreasure15 = GetTreasure(Database.COMMON_CHARM_OF_FIRE_ANGEL);
                        break;
                    #endregion
                    #region "ボス戦闘"
                    case 11:
                        this.Update();
                        UpdateMainMessage("アイン：ボスとの戦闘だ！気を引き締めていくぜ！", true);
                        bool result = EncountBattle(Database.ENEMY_BOSS_KARAMITUKU_FLANSIS, String.Empty, String.Empty, false, false, false, false);
                        if (!result)
                        {
                            UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y, false);
                            this.dungeonField.Invalidate();
                            UpdateMainMessage("", true);
                        }
                        else
                        {
                            we.TruthCompleteSlayBoss1 = true;
                        }
                        UpdateMainMessage("", true);
                        return true;
                    #endregion
                    #region "鍵付き扉"
                    case 12:
                        if (we.dungeonEvent11KeyOpen)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent11NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：鍵穴とかも特に無さそうよ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");
                                }

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent11NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "大広間エントランス１"
                    case 13:
                        if (!we.dungeonEvent11KeyOpen)
                        {
                            if (!we.dungeonEvent12KeyOpen && !we.dungeonEvent13KeyOpen && !we.dungeonEvent14KeyOpen)
                            {
                                UpdateMainMessage("アイン：っと、何だこりゃ。");

                                UpdateMainMessage("アイン：何かの扉みたいが見えるな。");

                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：特に鍵もかかってないみたいね。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵はどうもかかってなさそうだな。");
                                }

                                UpdateMainMessage("アイン：っしゃ、さっそく開けてみるとするか！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea11();
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：わぁ、大きい広間ね。");

                                    UpdateMainMessage("アイン：遠くまで見渡せる感じだな。良い造りしてんじゃねえか。");

                                    UpdateMainMessage("ラナ：なんとなく見とれてしまうわね。");

                                    UpdateMainMessage("アイン：ああ、そうだな・・・");

                                    UpdateMainMessage("アイン：まあ探索を続けようぜ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：どうやら、でかい広間に出たみたいだな。");

                                    UpdateMainMessage("アイン：へぇ・・・遠くまで見渡せる感じだな。良い造りしてんじゃねえか。");

                                    UpdateMainMessage("アイン：おっと、見とれてる場合じゃねえ。探索探索っと！");
                                }

                                we.dungeonEvent11KeyOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：おし、扉が見えてきたぜ。");

                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);

                                UpdateMainMessage("アイン：ここを開ければ、大広間に繋がってるはずだ。");

                                UpdateMainMessage("アイン：っしゃ、さっそく開けるぜ！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea11();
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                if (we.dungeonEvent12KeyOpen && we.dungeonEvent13KeyOpen && we.dungeonEvent14KeyOpen)
                                {
                                    UpdateMainMessage("アイン：おし、これで４つ目の扉が開いたな。");

                                    UpdateMainMessage("    『ゴゴゴォ・・・ゴオオォォン！！』");

                                    blueWallBottom[26 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;
                                    blueWallTop[27 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;

                                    blueWallTop[35 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;
                                    blueWallBottom[34 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;

                                    blueWallLeft[28 * Database.TRUTH_DUNGEON_COLUMN + 13] = false;
                                    blueWallRight[28 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;

                                    blueWallLeft[33 * Database.TRUTH_DUNGEON_COLUMN + 13] = false;
                                    blueWallRight[33 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;

                                    blueWallLeft[10 * Database.TRUTH_DUNGEON_COLUMN + 16] = false;
                                    blueWallRight[10 * Database.TRUTH_DUNGEON_COLUMN + 15] = false;

                                    dungeonField.Invalidate();

                                    if (we.AvailableSecondCharacter)
                                    {
                                        UpdateMainMessage("アイン：おお！見ろよラナ！　向こう側の扉が一気に開いたぜ！");

                                        UpdateMainMessage("ラナ：これで先に進めるってわけね♪");

                                        UpdateMainMessage("アイン：いや、ホント。俺だけで進められなかったぜコレ。本当にサンキューな。");

                                        UpdateMainMessage("ラナ：何言ってるのよ。まだ終わったわけじゃないんだから。ホラホラ、先に進みましょ♪");

                                        UpdateMainMessage("アイン：了解！");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：おお！向こう側の扉が一気に開いたぜ！");

                                        UpdateMainMessage("アイン：っしゃ、さっそく向こう側の方へ行ってみるとするか！");
                                    }

                                    we.dungeonEvent16 = true;
                                }
                                else if ((we.dungeonEvent12KeyOpen && we.dungeonEvent13KeyOpen && !we.dungeonEvent14KeyOpen) ||
                                         (we.dungeonEvent12KeyOpen && !we.dungeonEvent13KeyOpen && we.dungeonEvent14KeyOpen) ||
                                         (!we.dungeonEvent12KeyOpen && we.dungeonEvent13KeyOpen && we.dungeonEvent14KeyOpen))
                                {
                                    UpdateMainMessage("アイン：おし、これで３つ目の扉が開いたな。");

                                    UpdateMainMessage("アイン：まだ他のルートが残ってそうだな。引き続き探索と行くか！");
                                }
                                else if ((we.dungeonEvent12KeyOpen && !we.dungeonEvent13KeyOpen && !we.dungeonEvent14KeyOpen) ||
                                         (!we.dungeonEvent12KeyOpen && we.dungeonEvent13KeyOpen && !we.dungeonEvent14KeyOpen) ||
                                         (!we.dungeonEvent12KeyOpen && !we.dungeonEvent13KeyOpen && we.dungeonEvent14KeyOpen))
                                {
                                    UpdateMainMessage("アイン：おし、これで２つ目の扉が開いたな。");

                                    UpdateMainMessage("アイン：まだ他のルートが残ってそうだな。引き続き探索と行くか！");
                                }
                                we.dungeonEvent11KeyOpen = true;
                            }
                        }
                        return true;
                    #endregion
                    #region "大広間エントランス２"
                    case 14:
                        if (we.dungeonEvent12KeyOpen)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent12NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：鍵穴とかも特に無さそうよ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");
                                }

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent12NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "大広間エントランス３"
                    case 15:
                        if (!we.dungeonEvent12KeyOpen)
                        {
                            if (!we.dungeonEvent11KeyOpen && !we.dungeonEvent13KeyOpen && !we.dungeonEvent14KeyOpen)
                            {
                                UpdateMainMessage("アイン：っと、何だこりゃ。");

                                UpdateMainMessage("アイン：何かの扉みたいが見えるな。");

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);


                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：特に鍵もかかってないみたいね。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵はどうもかかってなさそうだな。");
                                }

                                UpdateMainMessage("アイン：っしゃ、さっそく開けてみるとするか！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallTop[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea11();
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                                blueWallBottom[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：どうやら、でかい広間に出たみたいだな。");

                                UpdateMainMessage("アイン：へぇ・・・遠くまで見渡せる感じだな。良い造りしてんじゃねえか。");

                                UpdateMainMessage("アイン：おっと、見とれてる場合じゃねえ。探索探索っと！");

                                we.dungeonEvent12KeyOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：おし、扉が見えてきたぜ。");

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);

                                UpdateMainMessage("アイン：ここを開ければ、大広間に繋がってるはずだ。");

                                UpdateMainMessage("アイン：っしゃ、さっそく開けるぜ！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallTop[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea11();
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                                blueWallBottom[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                if (we.dungeonEvent11KeyOpen && we.dungeonEvent13KeyOpen && we.dungeonEvent14KeyOpen)
                                {
                                    UpdateMainMessage("アイン：おし、これで４つ目の扉が開いたな。");

                                    UpdateMainMessage("    『ゴゴゴォ・・・ゴオオォォン！！』");

                                    blueWallBottom[26 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;
                                    blueWallTop[27 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;

                                    blueWallTop[35 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;
                                    blueWallBottom[34 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;

                                    blueWallLeft[28 * Database.TRUTH_DUNGEON_COLUMN + 13] = false;
                                    blueWallRight[28 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;

                                    blueWallLeft[33 * Database.TRUTH_DUNGEON_COLUMN + 13] = false;
                                    blueWallRight[33 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;

                                    blueWallLeft[10 * Database.TRUTH_DUNGEON_COLUMN + 16] = false;
                                    blueWallRight[10 * Database.TRUTH_DUNGEON_COLUMN + 15] = false;

                                    dungeonField.Invalidate();

                                    if (we.AvailableSecondCharacter)
                                    {
                                        UpdateMainMessage("アイン：おお！見ろよラナ！　向こう側の扉が一気に開いたぜ！");

                                        UpdateMainMessage("ラナ：これで先に進めるってわけね♪");

                                        UpdateMainMessage("アイン：いや、ホント。俺だけで進められなかったぜコレ。本当にサンキューな。");

                                        UpdateMainMessage("ラナ：何言ってるのよ。まだ終わったわけじゃないんだから。ホラホラ、先に進みましょ♪");

                                        UpdateMainMessage("アイン：了解！");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：おお！向こう側の扉が一気に開いたぜ！");

                                        UpdateMainMessage("アイン：っしゃ、さっそく向こう側の方へ行ってみるとするか！");
                                    }

                                    we.dungeonEvent16 = true;
                                }
                                else if ((we.dungeonEvent11KeyOpen && we.dungeonEvent13KeyOpen && !we.dungeonEvent14KeyOpen) ||
                                         (we.dungeonEvent11KeyOpen && !we.dungeonEvent13KeyOpen && we.dungeonEvent14KeyOpen) ||
                                         (!we.dungeonEvent11KeyOpen && we.dungeonEvent13KeyOpen && we.dungeonEvent14KeyOpen))
                                {
                                    UpdateMainMessage("アイン：おし、これで３つ目の扉が開いたな。");

                                    UpdateMainMessage("アイン：まだ他のルートが残ってそうだな。引き続き探索と行くか！");
                                }
                                else if ((we.dungeonEvent11KeyOpen && !we.dungeonEvent13KeyOpen && !we.dungeonEvent14KeyOpen) ||
                                         (!we.dungeonEvent11KeyOpen && we.dungeonEvent13KeyOpen && !we.dungeonEvent14KeyOpen) ||
                                         (!we.dungeonEvent11KeyOpen && !we.dungeonEvent13KeyOpen && we.dungeonEvent14KeyOpen))
                                {
                                    UpdateMainMessage("アイン：おし、これで２つ目の扉が開いたな。");

                                    UpdateMainMessage("アイン：まだ他のルートが残ってそうだな。引き続き探索と行くか！");
                                }
                                we.dungeonEvent12KeyOpen = true;
                            }
                        }
                        return true;
                    #endregion
                    #region "大広間エントランス４"
                    case 16:
                        if (we.dungeonEvent13KeyOpen)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent13NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：鍵穴とかも特に無さそうよ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");
                                }

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent13NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "大広間エントランス５"
                    case 17:
                        if (!we.dungeonEvent13KeyOpen)
                        {
                            if (!we.dungeonEvent11KeyOpen && !we.dungeonEvent12KeyOpen && !we.dungeonEvent14KeyOpen)
                            {
                                UpdateMainMessage("アイン：っと、何だこりゃ。");

                                UpdateMainMessage("アイン：何かの扉みたいが見えるな。");

                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：特に鍵もかかってないみたいね。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵はどうもかかってなさそうだな。");
                                }

                                UpdateMainMessage("アイン：っしゃ、さっそく開けてみるとするか！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea11();
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：どうやら、でかい広間に出たみたいだな。");

                                UpdateMainMessage("アイン：へぇ・・・遠くまで見渡せる感じだな。良い造りしてんじゃねえか。");

                                UpdateMainMessage("アイン：おっと、見とれてる場合じゃねえ。探索探索っと！");

                                we.dungeonEvent13KeyOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：おし、扉が見えてきたぜ。");

                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);

                                UpdateMainMessage("アイン：ここを開ければ、大広間に繋がってるはずだ。");

                                UpdateMainMessage("アイン：っしゃ、さっそく開けるぜ！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea11();
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                if (we.dungeonEvent11KeyOpen && we.dungeonEvent12KeyOpen && we.dungeonEvent14KeyOpen)
                                {
                                    UpdateMainMessage("アイン：おし、これで４つ目の扉が開いたな。");

                                    UpdateMainMessage("    『ゴゴゴォ・・・ゴオオォォン！！』");

                                    blueWallBottom[26 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;
                                    blueWallTop[27 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;

                                    blueWallTop[35 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;
                                    blueWallBottom[34 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;

                                    blueWallLeft[28 * Database.TRUTH_DUNGEON_COLUMN + 13] = false;
                                    blueWallRight[28 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;

                                    blueWallLeft[33 * Database.TRUTH_DUNGEON_COLUMN + 13] = false;
                                    blueWallRight[33 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;

                                    blueWallLeft[10 * Database.TRUTH_DUNGEON_COLUMN + 16] = false;
                                    blueWallRight[10 * Database.TRUTH_DUNGEON_COLUMN + 15] = false;

                                    dungeonField.Invalidate();

                                    if (we.AvailableSecondCharacter)
                                    {
                                        UpdateMainMessage("アイン：おお！見ろよラナ！　向こう側の扉が一気に開いたぜ！");

                                        UpdateMainMessage("ラナ：これで先に進めるってわけね♪");

                                        UpdateMainMessage("アイン：いや、ホント。俺だけで進められなかったぜコレ。本当にサンキューな。");

                                        UpdateMainMessage("ラナ：何言ってるのよ。まだ終わったわけじゃないんだから。ホラホラ、先に進みましょ♪");

                                        UpdateMainMessage("アイン：了解！");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：おお！向こう側の扉が一気に開いたぜ！");

                                        UpdateMainMessage("アイン：っしゃ、さっそく向こう側の方へ行ってみるとするか！");
                                    }

                                    we.dungeonEvent16 = true;
                                }
                                else if ((we.dungeonEvent11KeyOpen && we.dungeonEvent12KeyOpen && !we.dungeonEvent14KeyOpen) ||
                                         (we.dungeonEvent11KeyOpen && !we.dungeonEvent12KeyOpen && we.dungeonEvent14KeyOpen) ||
                                         (!we.dungeonEvent11KeyOpen && we.dungeonEvent12KeyOpen && we.dungeonEvent14KeyOpen))
                                {
                                    UpdateMainMessage("アイン：おし、これで３つ目の扉が開いたな。");

                                    UpdateMainMessage("アイン：まだ他のルートが残ってそうだな。引き続き探索と行くか！");
                                }
                                else if ((we.dungeonEvent11KeyOpen && !we.dungeonEvent12KeyOpen && !we.dungeonEvent14KeyOpen) ||
                                         (!we.dungeonEvent11KeyOpen && we.dungeonEvent12KeyOpen && !we.dungeonEvent14KeyOpen) ||
                                         (!we.dungeonEvent11KeyOpen && !we.dungeonEvent12KeyOpen && we.dungeonEvent14KeyOpen))
                                {
                                    UpdateMainMessage("アイン：おし、これで２つ目の扉が開いたな。");

                                    UpdateMainMessage("アイン：まだ他のルートが残ってそうだな。引き続き探索と行くか！");
                                }
                                we.dungeonEvent13KeyOpen = true;
                            }
                        }
                        return true;
                    #endregion
                    #region "大広間エントランス６"
                    case 18:
                        if (we.dungeonEvent14KeyOpen)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent14NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：鍵穴とかも特に無さそうよ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");
                                }

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent14NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "大広間エントランス７"
                    case 19:
                        if (!we.dungeonEvent14KeyOpen)
                        {
                            if (!we.dungeonEvent11KeyOpen && !we.dungeonEvent12KeyOpen && !we.dungeonEvent13KeyOpen)
                            {
                                UpdateMainMessage("アイン：っと、何だこりゃ。");

                                UpdateMainMessage("アイン：何かの扉みたいが見えるな。");

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：特に鍵もかかってないみたいね。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵はどうもかかってなさそうだな。");
                                }

                                UpdateMainMessage("アイン：っしゃ、さっそく開けてみるとするか！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallBottom[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea11();
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                                blueWallTop[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：どうやら、でかい広間に出たみたいだな。");

                                UpdateMainMessage("アイン：へぇ・・・遠くまで見渡せる感じだな。良い造りしてんじゃねえか。");

                                UpdateMainMessage("アイン：おっと、見とれてる場合じゃねえ。探索探索っと！");

                                we.dungeonEvent14KeyOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：おし、扉が見えてきたぜ。");

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);

                                UpdateMainMessage("アイン：ここを開ければ、大広間に繋がってるはずだ。");

                                UpdateMainMessage("アイン：っしゃ、さっそく開けるぜ！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallBottom[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea11();
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                                blueWallTop[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                if (we.dungeonEvent11KeyOpen && we.dungeonEvent12KeyOpen && we.dungeonEvent13KeyOpen)
                                {
                                    UpdateMainMessage("アイン：おし、これで４つ目の扉が開いたな。");

                                    UpdateMainMessage("    『ゴゴゴォ・・・ゴオオォォン！！』");

                                    blueWallBottom[26 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;
                                    blueWallTop[27 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;

                                    blueWallTop[35 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;
                                    blueWallBottom[34 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;

                                    blueWallLeft[28 * Database.TRUTH_DUNGEON_COLUMN + 13] = false;
                                    blueWallRight[28 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;

                                    blueWallLeft[33 * Database.TRUTH_DUNGEON_COLUMN + 13] = false;
                                    blueWallRight[33 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;

                                    blueWallLeft[10 * Database.TRUTH_DUNGEON_COLUMN + 16] = false;
                                    blueWallRight[10 * Database.TRUTH_DUNGEON_COLUMN + 15] = false;

                                    dungeonField.Invalidate();

                                    if (we.AvailableSecondCharacter)
                                    {
                                        UpdateMainMessage("アイン：おお！見ろよラナ！　向こう側の扉が一気に開いたぜ！");

                                        UpdateMainMessage("ラナ：これで先に進めるってわけね♪");

                                        UpdateMainMessage("アイン：いや、ホント。俺だけで進められなかったぜコレ。本当にサンキューな。");

                                        UpdateMainMessage("ラナ：何言ってるのよ。まだ終わったわけじゃないんだから。ホラホラ、先に進みましょ♪");

                                        UpdateMainMessage("アイン：了解！");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：おお！向こう側の扉が一気に開いたぜ！");

                                        UpdateMainMessage("アイン：っしゃ、さっそく向こう側の方へ行ってみるとするか！");
                                    }

                                    we.dungeonEvent16 = true;
                                }
                                else if ((we.dungeonEvent11KeyOpen && we.dungeonEvent12KeyOpen && !we.dungeonEvent13KeyOpen) ||
                                         (we.dungeonEvent11KeyOpen && !we.dungeonEvent12KeyOpen && we.dungeonEvent13KeyOpen) ||
                                         (!we.dungeonEvent11KeyOpen && we.dungeonEvent12KeyOpen && we.dungeonEvent13KeyOpen))
                                {
                                    UpdateMainMessage("アイン：おし、これで３つ目の扉が開いたな。");

                                    UpdateMainMessage("アイン：まだ他のルートが残ってそうだな。引き続き探索と行くか！");
                                }
                                else if ((we.dungeonEvent11KeyOpen && !we.dungeonEvent12KeyOpen && !we.dungeonEvent13KeyOpen) ||
                                         (!we.dungeonEvent11KeyOpen && we.dungeonEvent12KeyOpen && !we.dungeonEvent13KeyOpen) ||
                                         (!we.dungeonEvent11KeyOpen && !we.dungeonEvent12KeyOpen && we.dungeonEvent13KeyOpen))
                                {
                                    UpdateMainMessage("アイン：おし、これで２つ目の扉が開いたな。");

                                    UpdateMainMessage("アイン：まだ他のルートが残ってそうだな。引き続き探索と行くか！");
                                }
                                we.dungeonEvent14KeyOpen = true;
                            }
                        }
                        return true;
                    #endregion
                    #region "大広間エントランス８"
                    case 20:
                        if (!we.dungeonEvent16)
                        {
                            if (!we.dungeonEvent17)
                            {
                                UpdateMainMessage("アイン：おっと、何だこりゃ。扉か？");

                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：くそっ、開かねえな。");

                                UpdateMainMessage("アイン：今のところ、通れないみたいだし、他のルートを探すとするか。");

                                we.dungeonEvent17 = true;
                            }
                        }
                        else
                        {
                            if (!we.dungeonEvent18)
                            {
                                if (!we.dungeonEvent17)
                                {
                                    if (we.AvailableSecondCharacter)
                                    {
                                        UpdateMainMessage("アイン：ん？何か妙に綺麗な造りをした通路だな。");

                                        UpdateMainMessage("アイン：まるで扉でもあったかのような場所に見えるな。");

                                        UpdateMainMessage("ラナ：アイン、良く分かるわね。確かに、ここはもともと扉があったみたいよ。");

                                        UpdateMainMessage("アイン：ラナこそ良く分かったな、そんな事？");

                                        UpdateMainMessage("ラナ：この壁の隙間よ。扉がぴったり収まってるわ。");

                                        UpdateMainMessage("アイン：なるほど、最初は閉じてたが、いつのまにか開いたって事か。");

                                        UpdateMainMessage("アイン：まあいい。開いてるんだし、さっそく進もうぜ！");

                                        UpdateMainMessage("ラナ：まったく何の考えも無しに突っ込んで、知らないわよ？");

                                        UpdateMainMessage("アイン：大丈夫大丈夫！ッハッハッハ！", true);
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：ん？何か妙に綺麗な造りをした通路だな。");

                                        UpdateMainMessage("アイン：まるで扉でもあったかのような場所に見えるな。");

                                        UpdateMainMessage("アイン：・・・なるほど。両脇に扉が押し込まれてるな。そういうことだったのか。");

                                        UpdateMainMessage("アイン：まあいい。幸い扉は開いてる。ガンガン進むとするか！");
                                    }

                                    we.dungeonEvent18 = true;

                                }
                                else
                                {
                                    if (we.AvailableSecondCharacter)
                                    {
                                        UpdateMainMessage("アイン：おぉ、いつの間にか扉が開いてるじゃねえか！");

                                        UpdateMainMessage("ラナ：でも気をつけてよね。こういう所って大概危ないんだから。");

                                        UpdateMainMessage("アイン：そんな危ない所、あるわけねえだろ？さっさと行くぜ！");

                                        UpdateMainMessage("ラナ：まったく何の考えも無しに突っ込んで、知らないわよ？");

                                        UpdateMainMessage("アイン：大丈夫大丈夫！ッハッハッハ！", true);
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：おし、思ったとおり。この扉も開くってわけだな。");

                                        UpdateMainMessage("アイン：ラナが居たら『何の考えも無しに』とか言いそうだが・・・。");

                                        UpdateMainMessage("アイン：まあこの扉仕掛け自体が本命だろ。このまま突っ切るぜ！");
                                    }
                                    we.dungeonEvent18 = true;
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region "大広間エントランス９"
                    case 21:
                        if (!we.dungeonEvent16)
                        {
                            UpdateMainMessage("アイン：扉は閉じたままだな。", true);
                        }
                        return true;
                    #endregion
                    #region "宝箱エリア２"
                    case 22:
                        we.TruthTreasure121 = GetTreasure(Database.COMMON_DREAM_POWDER);
                        break;
                    case 23:
                        we.TruthTreasure122 = GetTreasure(Database.COMMON_VIKING_SWORD);
                        break;
                    case 24:
                        we.TruthTreasure123 = GetTreasure(Database.COMMON_NEBARIITO_KUMO);
                        break;
                    case 25:
                        we.TruthTreasure124 = GetTreasure(Database.COMMON_SUN_PRISM);
                        break;
                    case 26:
                        we.TruthTreasure125 = GetTreasure(Database.COMMON_POISON_EKISU);
                        break;
                    case 27:
                        we.TruthTreasure126 = GetTreasure(Database.COMMON_SOLID_CLAW);
                        break;
                    case 28:
                        we.TruthTreasure127 = GetTreasure(Database.COMMON_GREEN_LEEF_CHARM);
                        break;
                    case 29:
                        we.TruthTreasure128 = GetTreasure(Database.COMMON_WARRIOR_MEDAL);
                        break;
                    case 30:
                        we.TruthTreasure129 = GetTreasure(Database.COMMON_PALADIN_MEDAL);
                        break;
                    case 31:
                        we.TruthTreasure1210 = GetTreasure(Database.COMMON_KASHI_ROD);
                        break;
                    case 32:
                        we.TruthTreasure1211 = GetTreasure(Database.RARE_TOTAL_HIYAKU_KASSEI);
                        break;
                    case 33:
                        we.TruthTreasure1212 = GetTreasure(Database.RARE_ZEPHER_FETHER);
                        break;
                    case 34:
                        we.TruthTreasure131 = GetTreasure(Database.COMMON_HAYATE_ORB);
                        break;
                    case 35:
                        we.TruthTreasure132 = GetTreasure(Database.COMMON_BLUE_COPPER);
                        break;
                    case 36:
                        we.TruthTreasure133 = GetTreasure(Database.COMMON_ORANGE_MATERIAL);
                        break;
                    case 37:
                        we.TruthTreasure134 = GetTreasure(Database.RARE_LIFE_SWORD);
                        break;
                    case 38:
                        we.TruthTreasure141 = GetTreasure(Database.RARE_PURE_WATER);
                        break;
                    case 39:
                        we.TruthTreasure142 = GetTreasure(Database.RARE_PURE_GREEN_SILK_ROBE);
                        break;
                    #endregion
                    #region "中通路の扉"
                    case 40:
                        if (!we.dungeonEvent20)
                        {
                            if (!we.dungeonEvent19)
                            {
                                UpdateMainMessage("アイン：おっ、ここも扉ってワケか。");

                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：やっぱりココも開かないようだな。");

                                UpdateMainMessage("アイン：開く方法も見つからねえし、やはり他のルートを探すか。");

                                we.dungeonEvent19 = true;
                            }
                        }
                        else
                        {
                            if (!we.dungeonEvent26)
                            {
                                if (!we.dungeonEvent19)
                                {
                                    if (!we.dungeonEvent17)
                                    {
                                        UpdateMainMessage("アイン：ここも、何か妙に綺麗な造りだな。");

                                        if (we.AvailableSecondCharacter)
                                        {
                                            UpdateMainMessage("ラナ：この壁の隙間にもホラ。扉が収まってるわ。");

                                            UpdateMainMessage("アイン：本当だな。さっきの音はここのだったのかも知れないな。");
                                        }
                                        else
                                        {
                                            UpdateMainMessage("アイン：まるで扉でもあったかのような場所だが・・・");

                                            UpdateMainMessage("アイン：おっ、やっぱりな。両サイドにピッタリと扉がはまっているぜ。");

                                            UpdateMainMessage("アイン：きっとここも扉で閉まってたんだろうな。");
                                        }

                                        UpdateMainMessage("アイン：さてと・・・このマップからして・・・");

                                        UpdateMainMessage("アイン：きっとお宝だ！！　マチガイない！！");

                                        if (we.AvailableSecondCharacter)
                                        {
                                            UpdateMainMessage("ラナ：何でそうなるのよ？");

                                            UpdateMainMessage("アイン：俺の勘がそう言ってるんだ。まちがいねえぜ！");
                                        }

                                        UpdateMainMessage("アイン：さあ、進むぜ！ッハッハッハ！！");

                                        if (we.AvailableSecondCharacter)
                                        {
                                            UpdateMainMessage("ラナ：大丈夫なのかしら、ホント・・・", true);
                                        }

                                        we.dungeonEvent26 = true;
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：ん？何か妙に綺麗な造りをした通路だな。");

                                        if (we.AvailableSecondCharacter)
                                        {
                                            UpdateMainMessage("アイン：まるで扉でもあったかのような場所に見えるな。");

                                            UpdateMainMessage("ラナ：アイン、良く分かるわね。確かに、ここはもともと扉があったみたいよ。");

                                            UpdateMainMessage("アイン：ってことは、さっきの音はここのだったのかも知れないな。");
                                        }
                                        else
                                        {
                                            UpdateMainMessage("アイン：まるで扉でもあったかのような場所だが・・・");

                                            UpdateMainMessage("アイン：おっ、やっぱりな。両サイドにピッタリと扉がはまっているぜ。");

                                            UpdateMainMessage("アイン：きっとここも扉で閉まってたんだろうな。");
                                        }

                                        UpdateMainMessage("アイン：さてと・・・このマップからして・・・");

                                        UpdateMainMessage("アイン：きっとお宝だ！！　マチガイない！！");

                                        if (we.AvailableSecondCharacter)
                                        {
                                            UpdateMainMessage("ラナ：何でそうなるのよ？");

                                            UpdateMainMessage("アイン：俺の勘がそう言ってるんだ。まちがいねえぜ！");
                                        }

                                        UpdateMainMessage("アイン：さあ、進むぜ！ッハッハッハ！！");

                                        if (we.AvailableSecondCharacter)
                                        {
                                            UpdateMainMessage("ラナ：大丈夫なのかしら、ホント・・・", true);
                                        }

                                        we.dungeonEvent26 = true;
                                    }
                                }
                                else
                                {
                                    if (we.AvailableSecondCharacter)
                                    {
                                        UpdateMainMessage("アイン：っしゃ！予想通り、ここの扉が開いてるぜ！");

                                        UpdateMainMessage("ラナ：よく気づいたわね。こんな所。");

                                        UpdateMainMessage("アイン：ああ、大広間の仕掛けがヒントになっていたのさ。");

                                        UpdateMainMessage("アイン：あの大広間、４箇所開くと次の扉が開いただろ？");

                                        UpdateMainMessage("アイン：だから小広間も扉を開いて行けば、いずれどこか開くってワケさ！");

                                        UpdateMainMessage("ラナ：バカのくせにこういう所はホント勘が良いわね。");

                                        UpdateMainMessage("アイン：っさてと！これは絶対にお宝だ！！おっ宝お宝！！");

                                        UpdateMainMessage("ラナ：あんまりはしゃぎすぎて、変なトラップにはまらないでよね？");

                                        UpdateMainMessage("アイン：了解了解！　待ってろよ、お宝！！");

                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：よしきた！ここの扉も開くと思ってたぜ。");

                                        UpdateMainMessage("アイン：大広間が例の仕掛けだからな。類似系パターンが適用されてたってワケだ。");

                                        UpdateMainMessage("アイン：よし・・・って事は・・・");

                                        UpdateMainMessage("アイン：お宝に違いねえ！");

                                        UpdateMainMessage("アイン：待ってろよ、お宝！", true);
                                    }

                                    we.dungeonEvent26 = true;
                                }
                            }
                        }
                        break;
                    #endregion
                    #region "中通路の扉(反対)"
                    case 41:
                        if (!we.dungeonEvent20)
                        {
                            UpdateMainMessage("アイン：扉は閉じたままだな。", true);
                        }
                        return true;

                    case 42:
                        if (we.dungeonEvent11KeyOpen)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent21NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent21NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "小広間への扉"
                    case 43:
                        if (!we.dungeonEvent21KeyOpen)
                        {
                            if (!we.dungeonEvent22KeyOpen && !we.dungeonEvent23KeyOpen)
                            {
                                UpdateMainMessage("アイン：っお・・・扉だな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：どうするの？調べてみる？");

                                    UpdateMainMessage("アイン：ああ、少しだけ調べてみるとするか！");
                                }

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);

                                UpdateMainMessage("アイン：オーケーオーケー。鍵はかかってねえな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：変なトラップとかも特に無さそうね。");
                                }

                                UpdateMainMessage("アイン：っしゃ、さっそく開けるぜ！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallTop[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea12();
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                                blueWallBottom[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：へえ、少し狭めの広間に出たな。");

                                UpdateMainMessage("アイン：・・・ん？");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：どうかしたの？");
                                }

                                UpdateMainMessage("アイン：・・・気のせいか、少し強い気配を感じる。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：バカアインもそういう気配察知は大したものよね。");

                                    UpdateMainMessage("アイン：バカは余計だ。まあ、気をつけて探索を続けようぜ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：少し気をつけた方が良さそうだな。", true);
                                }

                                we.dungeonEvent21KeyOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：オッケー。小広間に繋がる扉発見！");

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);

                                UpdateMainMessage("アイン：さっそく開けるぜ！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallTop[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea12();
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                                blueWallBottom[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                if (we.dungeonEvent22KeyOpen && we.dungeonEvent23KeyOpen)
                                {
                                    if (we.dungeonEvent28KeyOpen)
                                    {
                                        UpdateMainMessage("アイン：小広間、４つ目の扉が開いたな。");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：小広間、３つ目の扉が開いたな。");
                                    }

                                    UpdateMainMessage("    『ゴゴゴォ・・・ゴオオォォン！！』");

                                    blueWallLeft[16 * Database.TRUTH_DUNGEON_COLUMN + 13] = false;
                                    blueWallRight[16 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;

                                    dungeonField.Invalidate();

                                    if (we.AvailableSecondCharacter)
                                    {
                                        UpdateMainMessage("アイン：っお！何か遠くで音がしなかったか！？");

                                        UpdateMainMessage("ラナ：うん、確かになんか聞こえたわね。");

                                        UpdateMainMessage("アイン：どっかの扉が開いたんだろ。行ってみようぜ！");

                                        UpdateMainMessage("ラナ：ッフフ、はしゃいじゃって。じゃあ、行ってみましょ♪");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：っしゃ！何かの音がしたぜ！");

                                        UpdateMainMessage("アイン：おそらくどこかの扉が開いたんだろ。行ってみるとするか！");
                                    }

                                    we.dungeonEvent20 = true;
                                }
                                else if ((we.dungeonEvent22KeyOpen && !we.dungeonEvent23KeyOpen) ||
                                         (!we.dungeonEvent22KeyOpen && we.dungeonEvent23KeyOpen))
                                {
                                    if (we.dungeonEvent28KeyOpen)
                                    {
                                        UpdateMainMessage("アイン：小広間、３つ目の扉が開いたな。");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：小広間、２つ目の扉が開いたな。");
                                    }

                                    UpdateMainMessage("アイン：まだ特に何も起きてねえが・・・引き続き探索と行くか！");
                                }
                                we.dungeonEvent21KeyOpen = true;
                            }
                        }
                        return true;
                    #endregion
                    #region "扉系統"
                    case 44:
                        if (we.dungeonEvent22KeyOpen)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent22NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent22NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "扉系統"
                    case 45:
                        if (!we.dungeonEvent22KeyOpen)
                        {
                            if (!we.dungeonEvent21KeyOpen && !we.dungeonEvent23KeyOpen)
                            {
                                UpdateMainMessage("アイン：っお・・・扉だな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：どうするの？調べてみる？");

                                    UpdateMainMessage("アイン：ああ、少しだけ調べてみるとするか！");
                                }

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);

                                UpdateMainMessage("アイン：オーケーオーケー。鍵はかかってねえな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：変なトラップとかも特に無さそうね。");
                                }

                                UpdateMainMessage("アイン：っしゃ、さっそく開けるぜ！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallTop[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea12();
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                                blueWallBottom[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：へえ、少し狭めの広間に出たな。");

                                UpdateMainMessage("アイン：・・・ん？");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：どうかしたの？");
                                }

                                UpdateMainMessage("アイン：・・・気のせいか、少し強い気配を感じる。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：バカアインもそういう気配察知は大したものよね。");

                                    UpdateMainMessage("アイン：バカは余計だ。まあ、気をつけて探索を続けようぜ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：少し気をつけた方が良さそうだな。", true);
                                }

                                we.dungeonEvent22KeyOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：オッケー。小広間に繋がる扉発見！");

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);

                                UpdateMainMessage("アイン：さっそく開けるぜ！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallTop[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea12();
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                                blueWallBottom[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                if (we.dungeonEvent21KeyOpen && we.dungeonEvent23KeyOpen)
                                {
                                    if (we.dungeonEvent28KeyOpen)
                                    {
                                        UpdateMainMessage("アイン：小広間、４つ目の扉が開いたな。");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：小広間、３つ目の扉が開いたな。");
                                    }

                                    UpdateMainMessage("    『ゴゴゴォ・・・ゴオオォォン！！』");

                                    blueWallLeft[16 * Database.TRUTH_DUNGEON_COLUMN + 13] = false;
                                    blueWallRight[16 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;

                                    dungeonField.Invalidate();

                                    if (we.AvailableSecondCharacter)
                                    {
                                        UpdateMainMessage("アイン：っお！何か遠くで音がしなかったか！？");

                                        UpdateMainMessage("ラナ：うん、確かになんか聞こえたわね。");

                                        UpdateMainMessage("アイン：どっかの扉が開いたんだろ。行ってみようぜ！");

                                        UpdateMainMessage("ラナ：ッフフ、はしゃいじゃって。じゃあ、行ってみましょ♪");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：っしゃ！何かの音がしたぜ！");

                                        UpdateMainMessage("アイン：おそらくどこかの扉が開いたんだろ。行ってみるとするか！");
                                    }

                                    we.dungeonEvent20 = true;
                                }
                                else if ((we.dungeonEvent21KeyOpen && !we.dungeonEvent23KeyOpen) ||
                                         (!we.dungeonEvent21KeyOpen && we.dungeonEvent23KeyOpen))
                                {
                                    if (we.dungeonEvent28KeyOpen)
                                    {
                                        UpdateMainMessage("アイン：小広間、３つ目の扉が開いたな。");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：小広間、２つ目の扉が開いたな。");
                                    }

                                    UpdateMainMessage("アイン：まだ特に何も起きてねえが・・・引き続き探索と行くか！");
                                }
                                we.dungeonEvent22KeyOpen = true;
                            }
                        }
                        return true;
                    #endregion
                    #region "扉系統"
                    case 46:
                        if (we.dungeonEvent24KeyOpen)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent24NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent24NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "扉系統"
                    case 47:
                        if (!we.dungeonEvent24KeyOpen)
                        {
                            if (we.dungeonEvent28KeyOpen)
                            {
                                UpdateMainMessage("アイン：よし、いよいよこれで小広間の扉も５つ目だ。");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：よし、いよいよこれで小広間の扉も４つ目だ。");
                            }

                            if (we.AvailableSecondCharacter)
                            {
                                UpdateMainMessage("ラナ：小広間って確か５つ扉があったわよね？");

                                if (we.dungeonEvent28KeyOpen)
                                {
                                    UpdateMainMessage("アイン：ああ、ここが５つ目って事になるな。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：ああ、これが４つ目って事になるな。");
                                }
                            }
                            else
                            {
                                if (we.dungeonEvent28KeyOpen)
                                {
                                    UpdateMainMessage("アイン：（ココが最後の５つ目って考えるのは少し変だが・・・）");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：（俺の読みが正しければ、・・・これが先に開くべき扉だ)");
                                }
                            }

                            UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);

                            if (we.AvailableSecondCharacter)
                            {
                                UpdateMainMessage("ラナ：トラップとかも特に無さそうよ。");

                                UpdateMainMessage("アイン：何か期待してしまうな・・・それじゃ開けるぜ！");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：っしゃ・・・開けるぜ！");
                            }

                            UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                            blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                            UpdateUnknownTileArea12();
                            UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            blueWallRight[GetTileNumber(this.Player.Location)] = false;
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：・・・");

                            if (we.AvailableSecondCharacter)
                            {
                                if (we.dungeonEvent28KeyOpen)
                                {
                                    UpdateMainMessage("アイン：特に何も無いみたいだな。");

                                    UpdateMainMessage("ラナ：・・・う〜ん。宝箱が１個あったじゃない。そういう事じゃない？");

                                    UpdateMainMessage("アイン：まあ、そうかも知れないな。");

                                    UpdateMainMessage("ラナ：まあ、あんまり深く考えずに進めましょ♪");

                                    UpdateMainMessage("アイン：あぁ、了解だ。", true);
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：特に何も無いみたいだな。");

                                    UpdateMainMessage("ラナ：・・・そうでも無いみたいよ。ホラ、あの看板。");

                                    UpdateMainMessage("アイン：看板？");

                                    UpdateMainMessage("ラナ：ここからだと良く見えないけど、少し文章が変わってるように見えるわ。");

                                    UpdateMainMessage("アイン：本当かよ！？早速見に行こうぜ！");

                                    UpdateMainMessage("ラナ：うん、行ってみましょ。", true);
                                }
                            }
                            else
                            {
                                if (we.dungeonEvent28KeyOpen)
                                {
                                    UpdateMainMessage("アイン：そうそう、何も起きないか、さすがに。");

                                    UpdateMainMessage("アイン：（宝箱・・・だけか）");


                                    UpdateMainMessage("アイン：（まあ、あんまり深く考えててもしょうがねえよな）");

                                    UpdateMainMessage("アイン：さて、次へ進めるとするか。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：そうそう、何も起きないか、さすがに。");

                                    UpdateMainMessage("アイン：ん？あの看板・・・");

                                    UpdateMainMessage("アイン：ここからだと良く見えないが、何か文章が変わってるように見えるな。");

                                    UpdateMainMessage("アイン：早速見に行ってみるとするか！");
                                }
                            }

                            we.dungeonEvent24KeyOpen = true;
                        }
                        return true;
                    #endregion
                    #region "扉系統"
                    case 48:
                        if (we.dungeonEvent23KeyOpen)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent23NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent23NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "扉系統"
                    case 49:
                        if (!we.dungeonEvent23KeyOpen)
                        {
                            if (!we.dungeonEvent21KeyOpen && !we.dungeonEvent22KeyOpen)
                            {
                                UpdateMainMessage("アイン：っお・・・扉だな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：どうするの？調べてみる？");

                                    UpdateMainMessage("アイン：ああ、少しだけ調べてみるとするか！");
                                }

                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);

                                UpdateMainMessage("アイン：オーケーオーケー。鍵はかかってねえな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：変なトラップとかも特に無さそうね。");
                                }

                                UpdateMainMessage("アイン：っしゃ、さっそく開けるぜ！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea12();
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：へえ、少し狭めの広間に出たな。");

                                UpdateMainMessage("アイン：・・・ん？");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：どうかしたの？");
                                }

                                UpdateMainMessage("アイン：・・・気のせいか、少し強い気配を感じる。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：バカアインもそういう気配察知は大したものよね。");

                                    UpdateMainMessage("アイン：バカは余計だ。まあ、気をつけて探索を続けようぜ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：少し気をつけた方が良さそうだな。", true);
                                }

                                we.dungeonEvent23KeyOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：オッケー。小広間に繋がる扉発見！");

                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);

                                UpdateMainMessage("アイン：さっそく開けるぜ！");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTileArea12();
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                dungeonField.Invalidate();
                                if (we.dungeonEvent21KeyOpen && we.dungeonEvent22KeyOpen)
                                {
                                    UpdateMainMessage("アイン：小広間、３つ目の扉が開いたな。");

                                    UpdateMainMessage("    『ゴゴゴォ・・・ゴオオォォン！！』");

                                    blueWallLeft[16 * Database.TRUTH_DUNGEON_COLUMN + 13] = false;
                                    blueWallRight[16 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;

                                    dungeonField.Invalidate();

                                    if (we.AvailableSecondCharacter)
                                    {
                                        UpdateMainMessage("アイン：っお！何か遠くで音がしなかったか！？");

                                        UpdateMainMessage("ラナ：うん、確かになんか聞こえたわね。");

                                        UpdateMainMessage("アイン：どっかの扉が開いたんだろ。行ってみようぜ！");

                                        UpdateMainMessage("ラナ：ッフフ、はしゃいじゃって。じゃあ、行ってみましょ♪");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：っしゃ！何かの音がしたぜ！");

                                        UpdateMainMessage("アイン：おそらくどこかの扉が開いたんだろ。行ってみるとするか！");
                                    }

                                    we.dungeonEvent20 = true;
                                }
                                else if ((!we.dungeonEvent21KeyOpen && we.dungeonEvent22KeyOpen) ||
                                         (we.dungeonEvent21KeyOpen && !we.dungeonEvent22KeyOpen))
                                {
                                    UpdateMainMessage("アイン：小広間、２つ目の扉が開いたな。");

                                    UpdateMainMessage("アイン：まだ特に何も起きてねえが・・・引き続き探索と行くか！");
                                }
                                we.dungeonEvent23KeyOpen = true;
                            }
                        }
                        return true;
                    #endregion
                    #region "ボス前の扉"
                    case 50:
                        if (!we.dungeonEvent25)
                        {
                            if (we.AvailableSecondCharacter == false)
                            {
                                GroundOne.StopDungeonMusic();
                                GroundOne.PlayDungeonMusic(Database.BGM16, Database.BGM16LoopBegin);
                                UpdateMainMessage("アイン：・・・扉があるな。");

                                UpdateMainMessage("アイン：・・・　・・・");

                                UpdateMainMessage("アイン：（どうもおかしい、ただならぬ殺気を感じるが）");

                                UpdateMainMessage("アイン：（ひょっとして１階のボスじゃねえか？この先・・・）");

                                UpdateMainMessage("アイン：（・・・どうする・・・開けるか・・・開けないべきか・・・）");

                                using (TruthDecision td = new TruthDecision())
                                {
                                    td.MainMessage = "　【　扉を開けますか？　】";
                                    td.FirstMessage = "扉を開ける。";
                                    td.SecondMessage = "扉を開けず、他を探す。";
                                    td.StartPosition = FormStartPosition.CenterParent;
                                    td.ShowDialog();
                                    if (td.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                    {
                                        GroundOne.StopDungeonMusic();

                                        UpdateMainMessage("アイン：よし、開けるぜ！");

                                        UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                        blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                        UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                        blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                        UpdateUnknownTile();
                                        dungeonField.Invalidate();

                                        UpdateMainMessage("アイン：（ピリピリと殺気を感じるな。コイツはやばいぜ）");

                                        UpdateMainMessage("アイン：（１階ボスだな。この感触、間違いねえ。危ないと思ったらすぐ引き返すか）");

                                        we.dungeonEvent28KeyOpen = true;
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：・・・　・・・");

                                        UpdateMainMessage("アイン：（やはりおかしい。進んでは行けない気がする。）");

                                        UpdateMainMessage("アイン：（このダンジョンの構成、どうも引っかかる）");

                                        UpdateMainMessage("アイン：（もう少し他を探索するか）");
                                    }
                                }

                                GroundOne.StopDungeonMusic();
                                GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                            }
                            else
                            {
                                GroundOne.StopDungeonMusic();
                                GroundOne.PlayDungeonMusic(Database.BGM16, Database.BGM16LoopBegin);

                                UpdateMainMessage("アイン：扉・・・か。");

                                UpdateMainMessage("アイン：鍵はかかってねえみたいだな。");

                                UpdateMainMessage("アイン：・・・　・・・");

                                UpdateMainMessage("ラナ：どうしたのよ？");

                                UpdateMainMessage("アイン：・・・いや。何でもねえが・・・");

                                UpdateMainMessage("アイン：ラナ、お前どう思う？");

                                UpdateMainMessage("ラナ：何がよ？");

                                UpdateMainMessage("アイン：この扉、トラップとか仕掛けてあると思うか？");

                                UpdateMainMessage("ラナ：今調べてみてるけど、特に無さそうよ。");

                                UpdateMainMessage("アイン：そうか・・・");

                                UpdateMainMessage("ラナ：一体どうしちゃったのよ。怖気づいたわけ？");

                                UpdateMainMessage("アイン：何かこう・・・ダンジョンの構成がわからねえんだ。");

                                UpdateMainMessage("ラナ：ダンジョンの構成？どこがわからないのよ。");

                                UpdateMainMessage("アイン：いや・・・上手く表現できねえが・・・");

                                UpdateMainMessage("アイン：納得がいかねえ。そんな感じだ。");

                                UpdateMainMessage("ラナ：気にしすぎなんじゃないの？らしくないわね。");

                                UpdateMainMessage("アイン：・・・　・・・　・・・");

                                UpdateMainMessage("アイン：ああ、そうかもな。");

                                UpdateMainMessage("アイン：（駄目だ。ラナはこういう所、昔っから鈍感だからな。）");

                                UpdateMainMessage("アイン：（・・・どうする・・・開けるか・・・開けないべきか・・・）");

                                using (TruthDecision td = new TruthDecision())
                                {
                                    td.MainMessage = "　【　扉を開けますか？　】";
                                    td.FirstMessage = "扉を開ける。";
                                    td.SecondMessage = "扉を開けず、他を探す。";
                                    td.StartPosition = FormStartPosition.CenterParent;
                                    td.ShowDialog();
                                    if (td.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                    {
                                        GroundOne.StopDungeonMusic();

                                        UpdateMainMessage("アイン：よし、開けるぜ！");

                                        UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                        blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                        UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                        blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                        UpdateUnknownTile();
                                        dungeonField.Invalidate();

                                        UpdateMainMessage("ラナ：特に、変な所は無さそうね。普通の通路と同じね。");

                                        UpdateMainMessage("アイン：待て、ラナ。下手に進むな。強い殺気を感じる！");

                                        UpdateMainMessage("ラナ：そう？そろそろボスって所かしら。気をつけて進みましょ。");

                                        UpdateMainMessage("アイン：ああ、気を引き締めていこうぜ。");

                                        we.dungeonEvent28KeyOpen = true;
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：・・・　・・・");

                                        UpdateMainMessage("ラナ：ちょっと、本当にどうしたのよ？");

                                        UpdateMainMessage("アイン：ラナ、もう少し他を探索しようぜ。");

                                        UpdateMainMessage("ラナ：アインがそう言うんだったら、別に止めはしないわよ。");

                                        UpdateMainMessage("アイン：このダンジョンの構成、どうも引っかかるんだ。");

                                        UpdateMainMessage("アイン：ラナもう少しだけ探索させてくれ。悪ぃな。");

                                        UpdateMainMessage("ラナ：ううん、別に。他に何か無いか、探して見ましょ♪");

                                        UpdateMainMessage("アイン：ああ。", true);
                                    }
                                }
                                GroundOne.StopDungeonMusic();
                                GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                            }
                            we.dungeonEvent25 = true;
                        }
                        else
                        {
                            if (!we.dungeonEvent28KeyOpen)
                            {
                                GroundOne.StopDungeonMusic();
                                GroundOne.PlayDungeonMusic(Database.BGM16, Database.BGM16LoopBegin);

                                UpdateMainMessage("アイン：・・・　・・・");

                                if (we.AvailableSecondCharacter == false)
                                {
                                    using (TruthDecision td = new TruthDecision())
                                    {
                                        td.MainMessage = "　【　扉を開けますか？　】";
                                        td.FirstMessage = "扉を開ける。";
                                        td.SecondMessage = "扉を開けず、他を探す。";
                                        td.StartPosition = FormStartPosition.CenterParent;
                                        td.ShowDialog();
                                        if (td.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                        {
                                            GroundOne.StopDungeonMusic();

                                            UpdateMainMessage("アイン：よし、開けるぜ！");

                                            UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                            blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                            UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                            blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                            UpdateUnknownTile();
                                            dungeonField.Invalidate();

                                            UpdateMainMessage("アイン：（ピリピリと殺気を感じるな。コイツはやばいぜ）");

                                            UpdateMainMessage("アイン：（おそらく、１階ボスだな。危ないと思ったらすぐ引き返すか）");

                                            we.dungeonEvent28KeyOpen = true;
                                        }
                                        else
                                        {
                                            UpdateMainMessage("アイン：・・・　・・・");

                                            UpdateMainMessage("アイン：（やはりおかしい。進んでは行けない気がする。）");

                                            UpdateMainMessage("アイン：（このダンジョンの構成、どうも引っかかる）");

                                            UpdateMainMessage("アイン：（もう少し他を探索するか）", true);
                                        }
                                    }
                                }
                                else
                                {
                                    using (TruthDecision td = new TruthDecision())
                                    {
                                        td.MainMessage = "　【　扉を開けますか？　】";
                                        td.FirstMessage = "扉を開ける。";
                                        td.SecondMessage = "扉を開けず、他を探す。";
                                        td.StartPosition = FormStartPosition.CenterParent;
                                        td.ShowDialog();
                                        if (td.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                        {
                                            GroundOne.StopDungeonMusic();

                                            UpdateMainMessage("アイン：よし、開けるぜ！");

                                            UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                            blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                            UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                            blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                            UpdateUnknownTile();
                                            dungeonField.Invalidate();

                                            UpdateMainMessage("ラナ：特に、変な所は無さそうね。普通の通路と同じね。");

                                            UpdateMainMessage("アイン：待て、ラナ。下手に進むな。強い殺気を感じる！");

                                            UpdateMainMessage("ラナ：そう？そろそろボスって所かしら。気をつけて進みましょ。");

                                            UpdateMainMessage("アイン：ああ、気を引き締めていこうぜ。");

                                            we.dungeonEvent28KeyOpen = true;
                                        }
                                        else
                                        {
                                            UpdateMainMessage("アイン：・・・　・・・");

                                            UpdateMainMessage("ラナ：ちょっと、本当にどうしたのよ？");

                                            UpdateMainMessage("アイン：ラナ、もう少し他を探索しようぜ。");

                                            UpdateMainMessage("ラナ：アインがそう言うんだったら、別に止めはしないわよ。");

                                            UpdateMainMessage("アイン：このダンジョンの構成、どうも引っかかるんだ。");

                                            UpdateMainMessage("アイン：ラナもう少しだけ探索させてくれ。悪ぃな。");

                                            UpdateMainMessage("ラナ：ううん、別に。他に何か無いか、探して見ましょ♪");

                                            UpdateMainMessage("アイン：ああ。", true);
                                        }
                                    }
                                }
                                GroundOne.StopDungeonMusic();
                                GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                            }
                        }
                        return true;
                    #endregion
                    #region "２階への階段"
                    case 51:
                        UpdateMainMessage("アイン：下り階段発見！さっそく降りるとするか？", true);
                        using (YesNoRequest ynr = new YesNoRequest())
                        {
                            bool tempCompleteArea = we.TruthCompleteArea1;
                            ynr.StartPosition = FormStartPosition.CenterParent;
                            ynr.ShowDialog();
                            if (ynr.DialogResult == DialogResult.Yes)
                            {
                                UpdateViewPoint(-Database.DUNGEON_MOVE_LEN * 15, -Database.DUNGEON_MOVE_LEN * 10);
                                UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * (29 - 15), Database.DUNGEON_MOVE_LEN * (19 - 10));
                                SetupDungeonMapping(2);
                                dungeonField.Invalidate();
                                UpdateMainMessage("", true);

                                if (!tempCompleteArea)
                                {
                                    UpdateMainMessage("アイン：おし、１階制覇した事だし、一度ユングの町へ戻るとするか。");
                                    CallHomeTown();
                                }
                            }
                            else
                            {
                                UpdateMainMessage("", true);
                            }

                        }
                        return true;
                    #endregion
                    #region "扉系統"
                    case 52:
                        if (we.dungeonEvent16)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent16_1NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：鍵穴とかも特に無さそうよ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");
                                }

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent16_1NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "扉系統"
                    case 53:
                        if (we.dungeonEvent16)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent16_2NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：鍵穴とかも特に無さそうよ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");
                                }

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent16_2NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "扉系統"
                    case 54:
                        if (we.dungeonEvent16)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent16_3NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：鍵穴とかも特に無さそうよ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");
                                }

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent16_3NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "扉系統"
                    case 55:
                        if (we.dungeonEvent16)
                        {
                            // すでにオープンなら、何も発生させない。
                        }
                        else
                        {
                            if (!we.dungeonEvent16_4NotOpen)
                            {
                                UpdateMainMessage("アイン：ん？この扉、鍵がかかってるみたいだな。");

                                if (we.AvailableSecondCharacter)
                                {
                                    UpdateMainMessage("ラナ：鍵穴とかも特に無さそうよ。");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：鍵穴も無いみてえだし・・・");
                                }

                                UpdateMainMessage("アイン：まあ、しょうがねえ。他のルートを探してみるとするか。");
                                we.dungeonEvent16_4NotOpen = true;
                            }
                            else
                            {
                                UpdateMainMessage("アイン：この扉は開かないな。他のルートでも探そう。", true);
                            }
                        }
                        return true;
                    #endregion
                    #region "隠し小部屋の前"
                    case 56:
                        if (we.Truth_Communication_Dungeon11 && !we.dungeonEvent31)
                        {
                            if (we.AvailableSecondCharacter)
                            {
                                UpdateMainMessage("アイン：着いたぜ。ここだろ。");

                                UpdateMainMessage("ラナ：アイン、相変わらず汗びっしょりね。大丈夫なの？");

                                UpdateMainMessage("アイン：大丈夫だ。変な頭痛は相変わらずだが、倒れるほどじゃねえ。");

                                UpdateMainMessage("アイン：っさ、行くぞ。");

                                UpdateMainMessage("ラナ：っえ、えぇ。");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：着いた。ここだな。");

                                UpdateMainMessage("アイン：（あれから、変な頭痛が取れねえな・・・イツツ・・）");

                                UpdateMainMessage("アイン：（こんな所で立ち止まってたら駄目だ）");

                                UpdateMainMessage("アイン：っよし、行くぜ。");
                            }

                            we.dungeonEvent31 = true;

                        }
                        return true;
                    #endregion
                    #region "記憶の回想"
                    case 57:
                        if (GroundOne.WE2.TruthRecollection1 == false)
                        {
                            GroundOne.WE2.TruthRecollection1 = true;

                            GroundOne.StopDungeonMusic();

                            this.BackColor = Color.Black;

                            UpdateMainMessage("　　　【その瞬間、アインの脳裏に激しい激痛が襲った！周囲の感覚が麻痺する！！】");

                            UpdateMainMessage("　　＜＜＜　力こそが全てである ＞＞＞");

                            GroundOne.PlayDungeonMusic(Database.BGM15, Database.BGM15LoopBegin);

                            UpdateMainMessage("　　？？？：これは小さい頃から何度も読んでるっての。");

                            UpdateMainMessage("　　？？？：そんなだから、てめぇはザコアインのままなんだろ。");

                            UpdateMainMessage("　　アイン：俺はザコアインじゃねえ。");

                            UpdateMainMessage("　　アイン：師匠だって、いつも力押しばっかりじゃねえか。");

                            UpdateMainMessage("　　ランディス：あぁ、そうだな。");

                            UpdateMainMessage("　　アイン：じゃあ、力で押す以外に無いって事じゃないか。");

                            UpdateMainMessage("　　ランディス：次、読め。ボケアイン");

                            UpdateMainMessage("　　＜＜＜　力は力にあらず、力は全てである　＞＞＞");

                            UpdateMainMessage("　　アイン：ここも知ってるって。結局は力って事を言いたいんだろ。");

                            UpdateMainMessage("　　ランディス：っち・・・今のザコアインじゃ、まだ早過ぎか。");

                            UpdateMainMessage("　　ランディス：最後の文面も、一応読んどけ。");

                            UpdateMainMessage("　　＜＜＜　負けられない勝負。　しかし心は満たず。　＞＞＞");

                            UpdateMainMessage("　　＜＜＜　力のみに依存するな。心を対にせよ。　＞＞＞");

                            UpdateMainMessage("　　アイン：・・・読んだぜ？");

                            UpdateMainMessage("　　ランディス：もう行くぞ。");

                            UpdateMainMessage("　　アイン：何だよ。教えてくれよ？");

                            UpdateMainMessage("　　ランディス：ザコにはザコのままがお似合いだって事さ。");

                            UpdateMainMessage("　　アイン：俺はザコじゃねえ。");

                            UpdateMainMessage("　　アイン：とにかく、俺はダンジョンへ行く。");

                            UpdateMainMessage("　　ランディス：止めとけ。てめぇには無理だ。");

                            UpdateMainMessage("　　アイン：何でそう言い切れるんだよ？");

                            UpdateMainMessage("　　アイン：俺もずいぶんと強くなった。");

                            UpdateMainMessage("　　アイン：今じゃ、DUELでもそれなりの戦歴が残せているし。");

                            UpdateMainMessage("　　アイン：魔物討伐や護衛なんかもかなりハイレベルな内容もやってのけるぜ。");

                            UpdateMainMessage("　　ランディス：そういう話してんじゃねえ。無理なもんは無理だ。");

                            UpdateMainMessage("　　ラナ：アイン・・・ダンジョン行くの、止めておいたら？");

                            UpdateMainMessage("　　アイン：ラナ、お前は師匠がいるといっつも師匠の味方だな。");

                            UpdateMainMessage("　　ラナ：そういうわけじゃないけど・・・");

                            UpdateMainMessage("　　アイン：俺は行く。決めてたんだ。");

                            UpdateMainMessage("　　ランディス：っち・・・おい、ちょっと待て。");

                            UpdateMainMessage("　　アイン：何だよ。俺は行くぜ？とめても無駄だからな。");

                            UpdateMainMessage("　　ランディス：行く前に一つやってけ。");

                            UpdateMainMessage("　　アイン：何をやるんだよ？");

                            UpdateMainMessage("    アイン：まさか師匠とDUELで腕試しってわけか。");

                            UpdateMainMessage("　　ランディス：違ぇよ。俺様とじゃなくてだ。");

                            UpdateMainMessage("　　ランディス：そこの小娘と勝負してみろ。");

                            UpdateMainMessage("　　アイン：っな！！！");

                            UpdateMainMessage("　　ラナ：わ、わわわ私？？？");

                            UpdateMainMessage("    ランディス：勝敗はどうでもいい。いっぺんココでやってけ。");

                            UpdateMainMessage("　　アイン：っぐ・・・");

                            UpdateMainMessage("    ランディス：どぉした。");

                            UpdateMainMessage("    アイン：ああ！やってやるさ！ラナ、準備は良いか？");

                            UpdateMainMessage("    ラナ：うわ、っちょっとぐらい待ってよね。");

                            UpdateMainMessage("    ラナ：・・・えーっと・・・");

                            UpdateMainMessage("    ラナ：こんなもんかな。じゃ良いわよ。");

                            UpdateMainMessage("    ランディス：よぉし、じゃあ始め！！");

                            UpdateMainMessage("    【・・・　・・・　・・・】");

                            UpdateMainMessage("    【・・・　・・・】");

                            UpdateMainMessage("    【・・・】");

                            UpdateMainMessage("    ランディス：勝負あり！");

                            UpdateMainMessage("    アイン：いっつつつ・・・");

                            UpdateMainMessage("    ランディス：勝者！ラナ・アミリア！");

                            UpdateMainMessage("    ラナ：やったわ♪　私のエレメンタルブローが決まったみたいね♪");

                            UpdateMainMessage("    アイン：もうちょっとタイミングが合ってれば俺の勝ちだったんだけどな。。。");

                            UpdateMainMessage("    ランディス：っち・・・");

                            UpdateMainMessage("    アイン：師匠すまねえ。ギリギリ負けちまったみたいだ。");

                            UpdateMainMessage("    ランディス：てめぇ、治ってねえな。その性格。");

                            UpdateMainMessage("    アイン：え？");

                            UpdateMainMessage("    ランディス：自覚、してねえんだろ。");

                            UpdateMainMessage("    アイン：自覚って何の話だよ？");

                            UpdateMainMessage("    ランディス：分かんねぇなら、それまでだ。好きにしろ。");

                            UpdateMainMessage("    アイン：・・・じゃ、もう良いか？俺は行くぜ、ダンジョンへ！");

                            UpdateMainMessage("    ラナ：ちょっとアイン・・・");

                            UpdateMainMessage("    ランディス：あぁ。行って来い。");

                            UpdateMainMessage("    ラナ：え、良いんですか？");

                            UpdateMainMessage("    ランディス：あぁ。");

                            UpdateMainMessage("    アイン：ラナ、お前も一緒にダンジョン来るか？");

                            UpdateMainMessage("    ラナ：え・・・う〜ん・・・");

                            UpdateMainMessage("    ラナ：ちょっと、考えさせてよ。っね？");

                            UpdateMainMessage("    アイン：あ、ああ。");

                            UpdateMainMessage("　　＜オル・ランディスは少し微笑むと・・・＞");

                            UpdateMainMessage("    ランディス：ッフ、まぁガンバレや。ザコアイン。");

                            UpdateMainMessage("    アイン：師匠すまねえ。頑張ってダンジョン制覇してくるぜ。");

                            UpdateMainMessage("    ランディス：厳しくなったら、引き返せよ。");

                            UpdateMainMessage("    アイン：あ、あぁ。了解了解！");

                            GroundOne.StopDungeonMusic();

                            UpdateMainMessage("　　　【アインに対する激しい激痛は少しずつ引いていった。】");

                            this.BackColor = Color.RoyalBlue;

                            if (we.AvailableSecondCharacter)
                            {
                                UpdateMainMessage("ラナ：アイン・・・大丈夫？");

                                UpdateMainMessage("アイン：ん？おお・・・おぉ、大丈夫だ。");

                                UpdateMainMessage("ラナ：随分と壁に向かって止まってたみたいだけど。");

                                UpdateMainMessage("アイン：ああ、何て事はねえ。大丈夫だぜ。");

                                UpdateMainMessage("ラナ：汗・・・引いてるわね。");

                                UpdateMainMessage("アイン：そうか？そういや、変な頭痛も無くなったみたいだ。");

                                UpdateMainMessage("ラナ：・・・見たのね？");

                                UpdateMainMessage("アイン：ああ。");

                                UpdateMainMessage("アイン：あれは、おそらく過去の記憶だ。");

                                UpdateMainMessage("アイン：・・・っよし！");

                                UpdateMainMessage("アイン：じゃあ、１階のボスを倒しにでも行くか！");

                                UpdateMainMessage("ラナ：っちょ、何でいきなりそうなるのよ？");

                                UpdateMainMessage("アイン：まあ良いじゃねえか。詳しいことは後だ。ボスを倒してしまおうぜ。");

                                UpdateMainMessage("ラナ：アインって、たまに無理やりよね・・・まあ分かったわ。");

                                UpdateMainMessage("アイン：すまねえな、いろいろと。");

                                UpdateMainMessage("ラナ：別に良いわよ。納得が行ってなかったんでしょ？今まで。");

                                UpdateMainMessage("アイン：いや、いやいや、そういうわけじゃねえが。");

                                UpdateMainMessage("ラナ：イイって言ってるじゃない。ホラ、とっとと倒しちゃいましょ♪");

                                UpdateMainMessage("アイン：ああ！ボス戦、行こうぜ！");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：（・・・頭の頭痛が消えている・・・）");

                                UpdateMainMessage("アイン：（真実解ってのはおそらく・・・過去の記憶だ）");

                                UpdateMainMessage("アイン：（だとすれば・・・）");

                                UpdateMainMessage("アイン：っしゃ！１階ボス、目指すとするか！");
                            }

                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        return true;
                    #endregion
                    #region "何もないとき"
                    default:
                        UpdateMainMessage("アイン：ん？特に何もなかったと思うが。", true);
                        return true;
                    #endregion
                }
            }
            #endregion
            #region "２階"
            else if (area == 2)
            {
                switch (ii)
                {
                    #region "１階へ戻る階段"
                    case 0:
                        UpdateMainMessage("アイン：１階へ戻る階段だな。ここは一旦戻るか？", true);
                        using (YesNoRequest ynr = new YesNoRequest())
                        {
                            ynr.StartPosition = FormStartPosition.CenterParent;
                            ynr.ShowDialog();
                            if (ynr.DialogResult == DialogResult.Yes)
                            {
                                UpdateViewPoint(-Database.DUNGEON_MOVE_LEN * 0, -Database.DUNGEON_MOVE_LEN * 0);
                                UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * (17 - 0), Database.DUNGEON_MOVE_LEN * (6 - 0));
                                SetupDungeonMapping(1);
                                dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                UpdateMainMessage("", true);
                            }
                        }
                        break;
                    #endregion
                    #region "中央４看板"
                    case 1:
                        if (!we.dungeonEvent201)
                        {
                            we.dungeonEvent201 = true;

                            UpdateMainMessage("アイン：おっ、看板があるぜ。");

                            UpdateMainMessage("　　　　『知を示す者、隠されし通路、秘められた選択』");

                            UpdateMainMessage("ラナ：ふうん、なんだか意味深な内容ね。");

                            UpdateMainMessage("アイン：知力を示せって言ってるんだろ？");

                            UpdateMainMessage("ラナ：そんなの誰だってわかるわよ、ほんっと適当なんだから・・・");

                            UpdateMainMessage("ラナ：隠されし通路、秘められた選択・・・どういう意味なのかしら。");

                            UpdateMainMessage("アイン：隠し通路見つけて秘密に質問に答えるってトコだろ。");

                            UpdateMainMessage("ラナ：何かものすごく淡々としてるわね・・・バカに磨きがかかったワケ？");

                            UpdateMainMessage("アイン：何を言うか。順当読みだ。ありのまま読んでるだけだって。");

                            if (we.dungeonEvent201 && we.dungeonEvent202 && we.dungeonEvent203 && we.dungeonEvent204)
                            {
                                UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                                we.dungeonEvent205 = true;
                                blueWallBottom[17 * Database.TRUTH_DUNGEON_COLUMN + 33] = false;
                                blueWallTop[18 * Database.TRUTH_DUNGEON_COLUMN + 33] = false;
                                blueWallBottom[20 * Database.TRUTH_DUNGEON_COLUMN + 25] = false;
                                blueWallTop[21 * Database.TRUTH_DUNGEON_COLUMN + 25] = false;
                                blueWallRight[23 * Database.TRUTH_DUNGEON_COLUMN + 30] = false;
                                blueWallLeft[23 * Database.TRUTH_DUNGEON_COLUMN + 31] = false;
                                blueWallRight[15 * Database.TRUTH_DUNGEON_COLUMN + 27] = false;
                                blueWallLeft[15 * Database.TRUTH_DUNGEON_COLUMN + 28] = false;
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：おっ！開いたんじゃねえか！？");

                                UpdateMainMessage("ラナ：４つとも調べると、開く仕組みだったワケね♪");

                                UpdateMainMessage("ラナ：でも本当気をつけてよね。この先、何が待ち構えてるか分からないし。");

                                UpdateMainMessage("アイン：ああ、分かってるって。危ないと感じたら戻れるようにしておくさ。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：まあ、良いわ。特に行き道も無さそうだし、他も探索してみましょ。");

                                UpdateMainMessage("アイン：ああ、そうだな。", true);
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『知を示す者、隠されし通路、秘められた選択』", true);
                        }
                        return true;

                    case 2:
                        if (!we.dungeonEvent202)
                        {
                            we.dungeonEvent202 = true;
                            UpdateMainMessage("アイン：おっ、看板があるぜ。");

                            UpdateMainMessage("　　　　『技を示す者、順序ある通路、閉ざされた選択』");

                            UpdateMainMessage("アイン：技か・・・なるほどな。");

                            UpdateMainMessage("ラナ：何が「なるほど」なのよ？");

                            UpdateMainMessage("アイン：順序ある通路だな・・・なるほど・・・。");

                            UpdateMainMessage("ラナ：分からないで適当に言ってるでしょ？");

                            UpdateMainMessage("アイン：いや、理解して言ってるぜ。");

                            UpdateMainMessage("ラナ：じゃあ言ってごらんなさいよ。ッホラ。");

                            UpdateMainMessage("アイン：・・・");

                            UpdateMainMessage("アイン：ッハッハッハッハ！");

                            UpdateMainMessage("　　　『ズゴゴオオォォン！！！』（ラナのアルタネイティブブローがアインに炸裂）　　");

                            UpdateMainMessage("アイン：イッツツツ・・・わかったって。正直分かってません、ハイハイ・・・");

                            if (we.dungeonEvent201 && we.dungeonEvent202 && we.dungeonEvent203 && we.dungeonEvent204)
                            {
                                UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                                we.dungeonEvent205 = true;
                                blueWallBottom[17 * Database.TRUTH_DUNGEON_COLUMN + 33] = false;
                                blueWallTop[18 * Database.TRUTH_DUNGEON_COLUMN + 33] = false;
                                blueWallBottom[20 * Database.TRUTH_DUNGEON_COLUMN + 25] = false;
                                blueWallTop[21 * Database.TRUTH_DUNGEON_COLUMN + 25] = false;
                                blueWallRight[23 * Database.TRUTH_DUNGEON_COLUMN + 30] = false;
                                blueWallLeft[23 * Database.TRUTH_DUNGEON_COLUMN + 31] = false;
                                blueWallRight[15 * Database.TRUTH_DUNGEON_COLUMN + 27] = false;
                                blueWallLeft[15 * Database.TRUTH_DUNGEON_COLUMN + 28] = false;
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：っお！？ホラ見ろ、開いたんじゃねえか！？");

                                UpdateMainMessage("ラナ：４つとも調べると、開く仕組みだったワケね。バカアインは関係ないから");

                                UpdateMainMessage("アイン：マジかよ！蹴られ損かよ！？");

                                UpdateMainMessage("ラナ：でも本当気をつけてよね。この先、何が待ち構えてるか分からないし。");

                                UpdateMainMessage("アイン：あ、あぁ・・・分かってるって。危ないと感じたら迷わず戻るようにするさ。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：まあ、いいわ。特に行き道も無さそうだし、他も探索してみましょ。");

                                UpdateMainMessage("アイン：ああ、そうだな。", true);
                            }

                        }
                        else
                        {
                            UpdateMainMessage("　　　　『技を示す者、順序ある通路、閉ざされた選択』", true);
                        }
                        return true;

                    case 3:
                        if (!we.dungeonEvent203)
                        {
                            we.dungeonEvent203 = true;
                            UpdateMainMessage("アイン：おっ、看板があるぜ。");

                            UpdateMainMessage("　　　　『心を示す者、無間の部屋、存在しない解への選択』");

                            UpdateMainMessage("ラナ：無間って・・・何か嫌な感じね。");

                            UpdateMainMessage("アイン：存在しない解とか書いてあるな。");

                            UpdateMainMessage("ラナ：バカアインは意味分かる？");

                            UpdateMainMessage("アイン：バカだからわかんねえ。");

                            UpdateMainMessage("　　　『ッドグシ！！！』（ラナのサドンキックがアインに炸裂）　　");

                            UpdateMainMessage("アイン：ッヴ・・・いやいやいや。");

                            UpdateMainMessage("アイン：本当に無間ってのがあるワケが無いだろう？");

                            UpdateMainMessage("ラナ：ん〜、まあそうよね。");

                            UpdateMainMessage("アイン：答えはひとつって感じもするよな・・・どうだろう。");

                            UpdateMainMessage("ラナ：ん〜、今ひとつピンと来ないわね。");

                            if (we.dungeonEvent201 && we.dungeonEvent202 && we.dungeonEvent203 && we.dungeonEvent204)
                            {
                                UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                                we.dungeonEvent205 = true;
                                blueWallBottom[17 * Database.TRUTH_DUNGEON_COLUMN + 33] = false;
                                blueWallTop[18 * Database.TRUTH_DUNGEON_COLUMN + 33] = false;
                                blueWallBottom[20 * Database.TRUTH_DUNGEON_COLUMN + 25] = false;
                                blueWallTop[21 * Database.TRUTH_DUNGEON_COLUMN + 25] = false;
                                blueWallRight[23 * Database.TRUTH_DUNGEON_COLUMN + 30] = false;
                                blueWallLeft[23 * Database.TRUTH_DUNGEON_COLUMN + 31] = false;
                                blueWallRight[15 * Database.TRUTH_DUNGEON_COLUMN + 27] = false;
                                blueWallLeft[15 * Database.TRUTH_DUNGEON_COLUMN + 28] = false;
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：おっ！開いたんじゃねえか！？");

                                UpdateMainMessage("ラナ：４つとも調べると、開く仕組みだったワケね♪");

                                UpdateMainMessage("ラナ：でも本当気をつけてよね。この先、何が待ち構えてるか分からないし。");

                                UpdateMainMessage("アイン：ああ、分かってるって。危ないと感じたら戻れるようにしておくさ。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：まあ、いいわ。特に行き道も無さそうだし、他も探索してみましょ。");

                                UpdateMainMessage("アイン：ああ、そうだな。", true);
                            }

                        }
                        else
                        {
                            UpdateMainMessage("　　　　『心を示す者、無間の部屋、存在しない解への選択』", true);
                        }
                        return true;

                    case 4:
                        if (!we.dungeonEvent204)
                        {
                            we.dungeonEvent204 = true;

                            UpdateMainMessage("アイン：おっ、看板があるぜ。");

                            UpdateMainMessage("　　　　『力を示す者、戻り無き通路、真実への選択』");

                            UpdateMainMessage("アイン：っしゃ！こういうのは分かりやすいよな！");

                            UpdateMainMessage("ラナ：ちょっと、戻り無き通路とか書いてあるじゃない。気をつけてよね？");

                            UpdateMainMessage("アイン：ッハッハッハ！力任せは決してバカではない。");

                            UpdateMainMessage("ラナ：また、テキトーな理論で突っ込まないでよね、ホント・・・");

                            if (we.dungeonEvent201 && we.dungeonEvent202 && we.dungeonEvent203 && we.dungeonEvent204)
                            {
                                UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                                we.dungeonEvent205 = true;
                                blueWallBottom[17 * Database.TRUTH_DUNGEON_COLUMN + 33] = false;
                                blueWallTop[18 * Database.TRUTH_DUNGEON_COLUMN + 33] = false;
                                blueWallBottom[20 * Database.TRUTH_DUNGEON_COLUMN + 25] = false;
                                blueWallTop[21 * Database.TRUTH_DUNGEON_COLUMN + 25] = false;
                                blueWallRight[23 * Database.TRUTH_DUNGEON_COLUMN + 30] = false;
                                blueWallLeft[23 * Database.TRUTH_DUNGEON_COLUMN + 31] = false;
                                blueWallRight[15 * Database.TRUTH_DUNGEON_COLUMN + 27] = false;
                                blueWallLeft[15 * Database.TRUTH_DUNGEON_COLUMN + 28] = false;
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：おっ！開いたんじゃねえか！？");

                                UpdateMainMessage("ラナ：４つとも調べると、開く仕組みだったワケね♪");

                                UpdateMainMessage("ラナ：でも本当気をつけてよね。この先、何が待ち構えてるか分からないし。");

                                UpdateMainMessage("アイン：ああ、分かってるって。危ないと感じたら戻れるようにしておくさ。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：まあ、いいわ。特に行き道も無さそうだし、他も探索してみましょ。");

                                UpdateMainMessage("アイン：ああ、そうだな。", true);
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『力を示す者、戻り無き通路、真実への選択』", true);
                        }
                        return true;
                    #endregion
                    #region "知の部屋、メイン看板"
                    case 5:
                        #region "ファースト：３隅"
                        if (!we.dungeonEvent211)
                        {
                            if (!we.dungeonEvent206)
                            {
                                we.dungeonEvent206 = true;

                                UpdateMainMessage("アイン：おっ、何か書いてあるぜ。なになに？");

                                UpdateMainMessage("　　　　『  上  』");

                                UpdateMainMessage("ラナ：何このテキトーな看板・・・");

                                UpdateMainMessage("アイン：よっしゃ、じゃあさっそく上へ行くとするか！");

                                UpdateMainMessage("ラナ：ちょっと待ってよ。アイン。");

                                UpdateMainMessage("アイン：ん？何だ？");

                                UpdateMainMessage("ラナ：上ってどっちの事を指してるのよ？");

                                UpdateMainMessage("アイン：どっち？どっちって言われると困るが・・・");

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：こっちじゃねえのか？");

                                UpdateMainMessage("ラナ：今来た道から見て右よね。どうして、そっちが上なのよ？");

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);

                                UpdateMainMessage("アイン：最初の看板から進んで来て・・・");

                                UpdateMainMessage("アイン：右３だから、もう１回曲がれば右４つまり元の方向だ。");

                                UpdateMainMessage("アイン：最初向いていた方向を上と仮定すれば、コッチが上で決まりってわけさ。");

                                UpdateMainMessage("ラナ：・・・え？");

                                UpdateMainMessage("アイン：っあ！　いやいや！　当てずっぽだからな！ッハッハッハッハ！");

                                UpdateMainMessage("ラナ：ふうん、あながち間違いってワケでも無さそうね。");

                                UpdateMainMessage("ラナ：じゃあ、そっちに進んでみましょ♪");

                                UpdateMainMessage("アイン：オーケー！", true);

                            }
                            else
                            {
                                if (!we.dungeonEvent207)
                                {
                                    UpdateMainMessage("　　　　『  上  』", true);
                                }
                                else
                                {
                                    if (!we.dungeonEvent208)
                                    {
                                        we.dungeonEvent208 = true;

                                        UpdateMainMessage("　　　　『  下  』");

                                        UpdateMainMessage("アイン：おっ、見ろよ？看板が変わってるじゃねえか！！");

                                        UpdateMainMessage("ラナ：上から下って事は、さすがにこれは楽勝ね♪");

                                        UpdateMainMessage("アイン：っしゃ、下へ行ってみようぜ！", true);
                                    }
                                    else
                                    {
                                        if (!we.dungeonEvent209)
                                        {
                                            UpdateMainMessage("　　　　『  下  』", true);
                                        }
                                        else
                                        {
                                            if (!we.dungeonEvent210)
                                            {
                                                we.dungeonEvent210 = true;

                                                UpdateMainMessage("　　　　『  左  』");

                                                UpdateMainMessage("アイン：よし、左だな！");

                                                UpdateMainMessage("ラナ：コレといった引っ掛け問題でも無さそうね、進みましょ♪");

                                                UpdateMainMessage("アイン：了解了解！", true);

                                            }
                                            else
                                            {
                                                UpdateMainMessage("　　　　『  左  』", true);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        #region "セカンド：下３上１２左８"
                        else if (!we.dungeonEvent215)
                        {
                            if (we.dungeonEvent212 && we.dungeonEvent213 && we.dungeonEvent214)
                            {
                                we.dungeonEvent215 = true;

                                UpdateMainMessage("　　　　『  下３　上１２　左８  』");

                                UpdateMainMessage("アイン：おっしゃ！見ろよラナ、看板に何か書いてあるぜ！");

                                UpdateMainMessage("アイン：これ、レバーに関する法則か何かのヒントだろ？ッハッハッハ！");

                                UpdateMainMessage("ラナ：・・・　・・・　・・・");

                                UpdateMainMessage("アイン：っど、どうしたラナ？？");

                                UpdateMainMessage("ラナ：えっと・・・");

                                UpdateMainMessage("ラナ：凄いじゃない、オメデト。　驚いたわホント。");

                                UpdateMainMessage("ラナ：何で看板の文字が復活するのが分かったのよ？");

                                UpdateMainMessage("アイン：何でって言われても困るが・・・");

                                UpdateMainMessage("アイン：なんとなく引っかかるだろ？");

                                UpdateMainMessage("ラナ：答えになってないじゃない。ちゃんと説明しなさいよ。");

                                UpdateMainMessage("アイン：こういうのは、どう説明していいか・・・");

                                UpdateMainMessage("アイン：師匠に習ったんだよ。いろいろとな。");

                                UpdateMainMessage("ラナ：ランディスお師匠さん？");

                                UpdateMainMessage("アイン：ああ、そうだ。");

                                UpdateMainMessage("ラナ：何て習ったの？");

                                UpdateMainMessage("アイン：（声マネ）『ランディス：てめぇは少し考えすぎだ。』");

                                UpdateMainMessage("アイン：（声マネ）『ランディス：思考を捨てろ、ザコアイン。』");

                                UpdateMainMessage("アイン：（声マネ）『ランディス：そんなんじゃ、見えるもんも見えねぇぞ。』");

                                UpdateMainMessage("ラナ：考えすぎ！？ジョーダンでしょ！？");

                                UpdateMainMessage("アイン：いや、俺なりにだな・・・");

                                UpdateMainMessage("ラナ：アンタから思考捨てちゃったら、バカの領域を超えたスーパーバカになるでしょ！？");

                                UpdateMainMessage("アイン：いやいや・・・そこは、俺なりにだな・・・");

                                UpdateMainMessage("ラナ：見えるもんも見えないって・・・いつも見えてないでしょ！？");

                                UpdateMainMessage("アイン：いやいやいや・・・そこも、俺なりにいろいろとだな・・・");

                                UpdateMainMessage("ラナ：結局それが、今回の件にどう結びついてるわけよ！？");

                                UpdateMainMessage("ラナ：あーーーーーーっ！！！！！！");

                                UpdateMainMessage("アイン：うぉおおぉ！？うるせえな、いきなり大声出すなっつうの。");

                                UpdateMainMessage("ラナ：確かに今回、当たったわね。");

                                UpdateMainMessage("アイン：ああ、まあな。看板ヒントを引き当てたぜ。");

                                UpdateMainMessage("ラナ：でも・・・でも・・・");

                                UpdateMainMessage("ラナ：もう良いわよ！！　バカアインなんか知らない！！");

                                UpdateMainMessage("　　　『バグシイイイィィィ！！』（ラナのジェノサイドキックがアインの脇腹に炸裂）　　");

                                UpdateMainMessage("アイン：ッボグゥ・・・なぜ・・・");

                                UpdateMainMessage("ラナ：ええっと　「下３　上１２　左８」　だから・・・");

                                UpdateMainMessage("ラナ：下側通路で３回レバー、上側で１２回レバー、左側で８回レバーやれって事ね♪");

                                UpdateMainMessage("ラナ：簡単じゃない♪　とっとと行くわよ。ッホラホラ♪");

                                UpdateMainMessage("アイン：神よ・・・このラナ・アミリアという人間に慈しみの心を・・・", true);
                            }
                        }
                        else if (we.dungeonEvent215 && !we.dungeonEvent219)
                        {
                            UpdateMainMessage("　　　　『  下３　上１２　左８  』", true);
                        }
                        #endregion
                        #region "サード：( >10 _6 <7 )  ( <11 ~3 )  ( _3 >7 )"
                        else if (we.dungeonEvent215 && we.dungeonEvent219 && !we.dungeonEvent220)
                        {
                            we.dungeonEvent220 = true;

                            UpdateMainMessage("ラナ：っあ、見てみてアイン。看板の内容が変わってるわよ♪");

                            UpdateMainMessage("　　　　『  ( >10 _6 <7 )  ( <11 ~3 )  ( _3 >7 )  』");

                            UpdateMainMessage("ラナ：っちょ・・・何よこれ？？？");

                            UpdateMainMessage("アイン：やっかいな内容だな・・・良く見せてくれ。");

                            UpdateMainMessage("アイン：・・・  ・・・");

                            UpdateMainMessage("ラナ：えっと・・・わかりそう？");

                            UpdateMainMessage("アイン：・・・  ・・・　いや。");

                            UpdateMainMessage("アイン：なんとなくだが。");

                            UpdateMainMessage("ラナ：そう？私はお手上げみたい。");

                            UpdateMainMessage("ラナ：頼んだわよ、アンタのバカ感性だけが頼りなんだから。");

                            UpdateMainMessage("アイン：それって褒めて無いよな？");

                            UpdateMainMessage("ラナ：ううん、褒めてるわよ♪");

                            UpdateMainMessage("アイン：サンキュー！任せておけって！　ッハッハッハ！");
                        }
                        else
                        {
                            if (we.dungeonEvent225)
                            {
                                if (!we.dungeonEvent227)
                                {
                                    if (we.AvailableThirdCharacter)
                                    {
                                        UpdateMainMessage("ランディス：よぉ、ザコアイン。ここか？");

                                        UpdateMainMessage("アイン：ああ、確かここで台座が突然出てきたんだ。");

                                        UpdateMainMessage("ラナ：突然の出来事でビックリしたわよ、ホント。");

                                        UpdateMainMessage("ランディス：やるじゃねぇか。たいしたもんだ。");

                                        UpdateMainMessage("ランディス：そっちの娘。直接関与は？");

                                        UpdateMainMessage("ラナ：っえ！？　私ですか！？");

                                        UpdateMainMessage("ラナ：い、いえ。私は外から見てただけでした。");

                                        UpdateMainMessage("ランディス：なら良い。");

                                        UpdateMainMessage("ランディス：おい、ザコアイン。");

                                        UpdateMainMessage("アイン：な、何だよ？");

                                        UpdateMainMessage("ランディス：この場所、終わってねえだろ。とっとと進めろ。");

                                        UpdateMainMessage("アイン：わ、分かってるって！今すぐ進めるさ！！");

                                        we.dungeonEvent227 = true;
                                    }
                                    else
                                    {
                                        UpdateMainMessage("台座はもうなくなってる", true);
                                    }
                                }
                                else
                                {
                                    UpdateMainMessage("台座はもうなくなってる", true);
                                }
                            }
                            else
                            {
                                if (!we.dungeonEvent221 || !we.dungeonEvent222 || !we.dungeonEvent223)
                                {
                                    UpdateMainMessage("　　　　『  ( >10 _6 <7 )  ( <11 ~3 )  ( _3 >7 )  』", true);
                                }
                                else
                                {
                                    UpdateMainMessage("　　　　『  ( >10 _6 <7 )  ( <11 ~3 )  ( _3 >7 )  』");

                                    UpdateMainMessage("アイン：これ、分かったぜ。");

                                    UpdateMainMessage("ラナ：ホント？");

                                    UpdateMainMessage("アイン：今見てきた、部屋への通路ポイントだ。");

                                    UpdateMainMessage("アイン：まあ、見てろ。");

                                    GroundOne.StopDungeonMusic();

                                    UpdateMainMessage("　　　　『突如台座がアインの前に浮き上がった。直後、薄黄色い空間にアインが包まれた。』");

                                    UpdateMainMessage("　　　　『絶対試練：汝、答えを示せ。』");

                                    UpdateMainMessage("ラナ：っちょっと何これ？？アイン！？");

                                    UpdateMainMessage("アイン：大丈夫だ。任せとけ。");

                                    UpdateMainMessage("ラナ：アイン・・・頑張って・・・");

                                    GroundOne.PlayDungeonMusic(Database.BGM09, Database.BGM09LoopBegin);
                                    using (TruthAnswer TA = new TruthAnswer())
                                    {
                                        TA.StartPosition = FormStartPosition.CenterScreen;
                                        TA.ShowDialog();
                                        GroundOne.StopDungeonMusic();

                                        if (TA.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                        {
                                            GroundOne.WE2.TruthAnswerSuccess = true;
                                            we.dungeonEvent224 = true;

                                            UpdateMainMessage("　　　　『空間が激しくフラッシュし、凝縮された空間へと連続的に小さくなる！！！』");

                                            UpdateMainMessage("　　　　『パパパパパパパ！！！！ッバシュウウウゥゥゥン！！！！！！！』");

                                            UpdateMainMessage("　　　　『空間は弾け飛んだ後、台座の前にアインの倒れた姿があった』");

                                            UpdateMainMessage("ラナ：アイン！！大丈夫！？");

                                            UpdateMainMessage("アイン：あ、ああ。大丈夫だ。イッツツツ・・・");

                                            UpdateMainMessage("ラナ：何・・・心配させちゃってんのよ！！");

                                            UpdateMainMessage("ラナ：アンタって本当にバカよ！！何やってんのよホントに！！！");

                                            UpdateMainMessage("アイン：わ、悪かったって。大丈夫だって言ってるじゃないか・・・");

                                            UpdateMainMessage("アイン：叩くなっつうの、いってぇって・・・");

                                            using (MessageDisplay md = new MessageDisplay())
                                            {
                                                md.StartPosition = FormStartPosition.CenterParent;
                                                md.Message = "アインとラナはしばらくその場で休息を取った。";
                                                md.ShowDialog();
                                            }

                                            UpdateMainMessage("アイン：あの詩、全然聞いた事無いけどな。不思議と昔から知ってるような感じだったぜ。すげえ綺麗だった。");

                                            UpdateMainMessage("ラナ：でも、アインが選んでいた選択肢だけど");

                                            UpdateMainMessage("アイン：何だ、外から見えていたのか？");

                                            UpdateMainMessage("ラナ：ええ、見えるってもんじゃなかったわよ。");

                                            UpdateMainMessage("ラナ：文字そのものが空中に浮いててビックリしたんだけど・・・");

                                            UpdateMainMessage("アイン：っげ、そうだったのかよ？俺は全然周囲を把握できない状況だったしな。");

                                            UpdateMainMessage("ラナ：そんな事より、さっき順番に選択していた詩だけど。");

                                            UpdateMainMessage("アイン：なんだ？");

                                            UpdateMainMessage("ラナ：う〜ん・・・多分私もその詩、知ってるわよ。");

                                            UpdateMainMessage("アイン：マジかよ！？");

                                            UpdateMainMessage("ラナ：私の母さんからよく聞かされていたわ。確かタイトルが・・・");

                                            UpdateMainMessage("ラナ：『神々の詩』よ。サブタイトルもあったと思うんだけど忘れちゃったわ。");

                                            UpdateMainMessage("アイン：神々の詩？へえ、そんなタイトルなんだ・・・");

                                            UpdateMainMessage("アイン：って、あれ？？　ラナ、お前知ってたのかよ！？");

                                            UpdateMainMessage("ラナ：文字を見てたら偶然思い出したわ。思い出に近いって感じかしら。");

                                            UpdateMainMessage("ラナ：私とアインが小さい頃、私の母さんに歌ってもらったヤツよ。覚えてない？");

                                            UpdateMainMessage("アイン：そうだったっけ・・・全然覚えに無いが・・・");

                                            UpdateMainMessage("アイン：そうだな、昔から知ってるって感覚は、そういう事か。");

                                            UpdateMainMessage("アイン：なあ、一辺戻るか？　町へ。");

                                            UpdateMainMessage("ラナ：別に良いけど、どうかしたわけ？");

                                            UpdateMainMessage("アイン：何かちょっと気になる事があってな。途中で悪いけど。");

                                            UpdateMainMessage("ラナ：ん、良いわよ。じゃ戻りましょ♪");

                                            UpdateMainMessage("アイン：じゃ、使うぜ！　遠見の青水晶。");

                                            CallHomeTown();
                                        }
                                        else
                                        {
                                            GroundOne.WE2.TruthAnswerFail = true;

                                            UpdateMainMessage("アイン：駄目だ・・・何かが違う・・・");

                                            UpdateMainMessage("アイン：ひょっとして・・・今のは・・・確か・・・");

                                            UpdateMainMessage("アイン：やべ・・・何か頭が・・・ッグ・・・");

                                            UpdateMainMessage("アイン：・・・　・・・　・・・");

                                            UpdateMainMessage("アイン：・・・　・・・");

                                            UpdateMainMessage("アイン：・・・");

                                            UpdateMainMessage(" 〜　THE　END　〜　（記憶の断片）");

                                            using (ESCMenu esc = new ESCMenu())
                                            {
                                                esc.MC = this.MC;
                                                esc.SC = this.SC;
                                                esc.TC = this.TC;
                                                esc.WE = this.we;
                                                esc.KnownTileInfo = null;
                                                esc.KnownTileInfo2 = null;
                                                esc.KnownTileInfo3 = null;
                                                esc.KnownTileInfo4 = null;
                                                esc.KnownTileInfo5 = null;
                                                esc.Truth_KnownTileInfo = this.Truth_KnownTileInfo;
                                                esc.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2;
                                                esc.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3;
                                                esc.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4;
                                                esc.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5;
                                                esc.StartPosition = FormStartPosition.CenterParent;
                                                esc.TruthStory = true;
                                                esc.OnlySave = true;
                                                esc.ShowDialog();
                                            }

                                            this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    #endregion
                    #region "知の部屋、フェーズ１"
                    case 8:
                        if (we.dungeonEvent206 && !we.dungeonEvent207)
                        {
                            // 正解
                            we.dungeonEvent207 = true;

                            UpdateMainMessage("　　　【ッカチ】");

                            UpdateMainMessage("アイン：何か今・・・");

                            UpdateMainMessage("ラナ：っちょ、アイン。何か踏んでるわよ・・・");

                            UpdateMainMessage("アイン：ん？・・・おお、よく見たら小さいスイッチがあるな。");

                            UpdateMainMessage("アイン：悪い悪い、踏んでた！ッハッハッハッハ！");

                            UpdateMainMessage("ラナ：もう少し気を配って進んでよね！？何かのトラップだったらどうするのよ！？");

                            UpdateMainMessage("アイン：わー、わかった分かった！気をつけて進みます、ハイハイ・・・");

                            UpdateMainMessage("ラナ：ハイハイ、じゃないわよもう。ホンット気をつけてよね。");

                            UpdateMainMessage("アイン：ハイ・・・", true);
                        }
                        else
                        {
                            if (we.dungeonEvent208 && !we.dungeonEvent209)
                            {
                                // 不正解
                                we.dungeonEvent209Fail = true;
                                we.dungeonEvent209FailEvent2 = true;

                                UpdateMainMessage("　　　【ッカチ】");

                                UpdateMainMessage("アイン：ん？しまっ、ひょっとして！？");

                                UpdateMainMessage("　　　【アインとラナの周囲を奇妙な光が包み込んだ】");

                                UpdateMainMessage("ラナ：っちょっと！？バカアイン！？");

                                UpdateMainMessage("　　　【ッバシュウウウゥゥゥンン】");

                                CallHomeTown();
                            }
                            else
                            {
                                if (we.dungeonEvent210 && !we.dungeonEvent211)
                                {
                                    // 不正解
                                    we.dungeonEvent211Fail = true;
                                    we.dungeonEvent211FailEvent2 = true;

                                    UpdateMainMessage("　　　【ッカチ】");

                                    UpdateMainMessage("アイン：ん？なんだ！？");

                                    UpdateMainMessage("　　　【アインとラナの周囲を奇妙な光が包み込んだ】");

                                    UpdateMainMessage("ラナ：っちょっと！？勝手に踏まないでって！");

                                    UpdateMainMessage("　　　【ッバシュウウウゥゥゥンン】");

                                    CallHomeTown();
                                }
                                else
                                {
                                    // イベント終了後は特に無いので、記述不要
                                }
                            }
                        }
                        break;
                    case 9:
                        if (we.dungeonEvent206 && !we.dungeonEvent207)
                        {
                            // 不正解
                            we.dungeonEvent207Fail = true;
                            we.dungeonEvent207FailEvent2 = true;

                            UpdateMainMessage("　　　【ッカチ】");

                            UpdateMainMessage("アイン：ん？何か今・・・");

                            UpdateMainMessage("　　　【アインとラナの周囲を奇妙な光が包み込んだ】");

                            UpdateMainMessage("ラナ：っちょ、コレって！？");

                            UpdateMainMessage("　　　【ッバシュウウウゥゥゥンン】");

                            CallHomeTown();
                        }
                        else
                        {
                            if (we.dungeonEvent208 && !we.dungeonEvent209)
                            {
                                // 正解
                                we.dungeonEvent209 = true;

                                UpdateMainMessage("　　　【ッカチ】");

                                UpdateMainMessage("アイン：何か今・・・");

                                UpdateMainMessage("ラナ：っちょ、アイン！？今分かってて踏んだでしょ！？");

                                UpdateMainMessage("アイン：あ、いやいや、そうじゃねえ・・・");

                                UpdateMainMessage("アイン：気が付いたら、踏んでた！ッハッハッハッハ！");

                                UpdateMainMessage("ラナ：ちょっともう！あれほど気をつけてって言ってるじゃない！？");

                                UpdateMainMessage("アイン：いやあ、下ってココだろ？間違いないと思ってさ。");

                                UpdateMainMessage("ラナ：たとえ、そうだったとしても、１回ぐらいちゃんと相談しなさいよね！？");

                                UpdateMainMessage("アイン：っす、すまねえな・・・次からは気をつけるって・・・", true);
                            }
                            else
                            {
                                if (we.dungeonEvent210 && !we.dungeonEvent211)
                                {
                                    // 不正解
                                    we.dungeonEvent211Fail = true;
                                    we.dungeonEvent211FailEvent2 = true;

                                    UpdateMainMessage("　　　【ッカチ】");

                                    UpdateMainMessage("アイン：ん？なんだ！？");

                                    UpdateMainMessage("　　　【アインとラナの周囲を奇妙な光が包み込んだ】");

                                    UpdateMainMessage("ラナ：っちょっと！？勝手に踏まないでって！");

                                    UpdateMainMessage("　　　【ッバシュウウウゥゥゥンン】");

                                    CallHomeTown();
                                }
                                else
                                {
                                    // イベント終了後は特に無いので、記述不要
                                }
                            }
                        }
                        break;
                    case 10:
                        if (we.dungeonEvent206 && !we.dungeonEvent207)
                        {
                            // 不正解
                            we.dungeonEvent207Fail = true;
                            we.dungeonEvent207FailEvent2 = true;

                            UpdateMainMessage("　　　【ッカチ】");

                            UpdateMainMessage("アイン：ん？何か今・・・");

                            UpdateMainMessage("　　　【アインとラナの周囲を奇妙な光が包み込んだ】");

                            UpdateMainMessage("ラナ：っちょ、コレって！？");

                            UpdateMainMessage("　　　【ッバシュウウウゥゥゥンン】");

                            CallHomeTown();
                        }
                        else
                        {
                            if (we.dungeonEvent208 && !we.dungeonEvent209)
                            {
                                // 不正解
                                we.dungeonEvent209Fail = true;
                                we.dungeonEvent209FailEvent2 = true;

                                UpdateMainMessage("　　　【ッカチ】");

                                UpdateMainMessage("アイン：ん？しまっ、ひょっとして！？");

                                UpdateMainMessage("　　　【アインとラナの周囲を奇妙な光が包み込んだ】");

                                UpdateMainMessage("ラナ：っちょっと！？バカアイン！？");

                                UpdateMainMessage("　　　【ッバシュウウウゥゥゥンン】");

                                CallHomeTown();
                            }
                            else
                            {
                                // 正解
                                if (we.dungeonEvent210 && !we.dungeonEvent211)
                                {
                                    we.dungeonEvent211 = true;

                                    UpdateMainMessage("アイン：よし、ここのくぼみだな。");

                                    UpdateMainMessage("ラナ：今までの通路、青扉が幾つかあったわよね？");

                                    UpdateMainMessage("アイン：ん？ああ、そうだな。まだ開いてなかったみたいだが。");

                                    UpdateMainMessage("アイン：おそらく、このスイッチで・・・行くぜ？");

                                    UpdateMainMessage("ラナ：ええ、良いわよ。");

                                    UpdateMainMessage("　　　【ッカチ】");

                                    UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                                    blueWallLeft[17 * Database.TRUTH_DUNGEON_COLUMN + 50] = false;
                                    blueWallRight[17 * Database.TRUTH_DUNGEON_COLUMN + 49] = false;
                                    blueWallBottom[2 * Database.TRUTH_DUNGEON_COLUMN + 42] = false;
                                    blueWallTop[3 * Database.TRUTH_DUNGEON_COLUMN + 42] = false;
                                    blueWallBottom[7 * Database.TRUTH_DUNGEON_COLUMN + 46] = false;
                                    blueWallTop[8 * Database.TRUTH_DUNGEON_COLUMN + 46] = false;
                                    dungeonField.Invalidate();

                                    UpdateMainMessage("アイン：っしゃ！どうやら正解みたいだな！ッハッハッハ！");

                                    UpdateMainMessage("ラナ：アイン、ちょっと良いかしら？");

                                    UpdateMainMessage("アイン：何だ？");

                                    UpdateMainMessage("ラナ：アインは、なんて言うのかしら・・・その・・・");

                                    UpdateMainMessage("アイン：っな・・・何だよ？");

                                    UpdateMainMessage("ラナ：どういう理解でダンジョン攻略を進めてるわけ？");

                                    UpdateMainMessage("アイン：よく分からない質問だな。う〜ん、何て言うんだろうな。");

                                    UpdateMainMessage("ラナ：良いから、ちょっと答えてみなさいよ。ッホラ早く！");

                                    UpdateMainMessage("アイン：何で質問してる側が・・・まあいいか。ええとだな。");

                                    UpdateMainMessage("アイン：看板、あるだろ？");

                                    UpdateMainMessage("ラナ：ええ、あるわね。");

                                    UpdateMainMessage("アイン：文字、書いてあるじゃねえか？");

                                    UpdateMainMessage("ラナ：そうね。１文字ばっかりだったけど");

                                    UpdateMainMessage("アイン：んで、青扉が並んでるだろ？");

                                    UpdateMainMessage("ラナ：う〜ん・・・あるけど・・・");

                                    UpdateMainMessage("アイン：じゃあ、今のところ１通りしかねえ。");

                                    UpdateMainMessage("ラナ：条件違うと、他の事でも考えられうるわけ？");

                                    UpdateMainMessage("アイン：赤扉とか、複雑な迷路であれば違った発想もあるよな。");

                                    UpdateMainMessage("アイン：ってか、どうしたんだ？突然そんなこと聞き始めて。");

                                    UpdateMainMessage("ラナ：うーん、私と考え方がちょっと違うみたいだし。");

                                    UpdateMainMessage("アイン：ラナ、おまえはどう思ってたんだ？");

                                    UpdateMainMessage("ラナ：別に良いじゃない。教えない。");

                                    UpdateMainMessage("アイン：っう・・・そうか。まあ良いんだ。今後もバンバン聞いてくれ。");

                                    UpdateMainMessage("ラナ：まあ、教えてくれてありがと♪　ダンジョン探索続けましょ♪");

                                    UpdateMainMessage("アイン：オーケー！", true);
                                }
                                else
                                {
                                    // イベント終了後は特に無いので、記述不要
                                }
                            }
                        }
                        break;
                    #endregion
                    #region "知の部屋、フェーズ２"
                    case 11:
                        if (!we.dungeonEvent212)
                        {
                            we.dungeonEvent212 = true;

                            if (!we.dungeonEvent213 && !we.dungeonEvent214)
                            {

                                UpdateMainMessage("アイン：ん？なんだこのレバーは。");

                                UpdateMainMessage("ラナ：見たところ、駆動部は１箇所だけね。");

                                UpdateMainMessage("アイン：どうする？");

                                UpdateMainMessage("ラナ：う〜〜ん・・・アインはどう思うわけ？");

                                UpdateMainMessage("アイン：そうだなあ・・・");

                                UpdateMainMessage("アイン：まだ開いてるとこ、あるんじゃねえかな。");

                                UpdateMainMessage("ラナ：そういえば、青扉っていくつかあったわね。");

                                UpdateMainMessage("アイン：他の場所をもう少し探索が要る。そう俺は思うぜ。");

                                UpdateMainMessage("ラナ：テキトーにレバー引かないワケ？");

                                UpdateMainMessage("アイン：場合によるな。今回は引かない。");

                                UpdateMainMessage("ラナ：ふーん。そう・・・まあ良いけど。");

                                UpdateMainMessage("ラナ：じゃあ、他の場所でも探索してみる？");

                                UpdateMainMessage("アイン：ああ、行ってみようぜ。");
                            }
                            else if ((!we.dungeonEvent213 && we.dungeonEvent214) ||
                                     (we.dungeonEvent213 && !we.dungeonEvent214))
                            {
                                UpdateMainMessage("アイン：おっ、レバー発見発見！");

                                UpdateMainMessage("ラナ：やっぱり同じようなレバーね。特徴もまったく一緒よ。");

                                UpdateMainMessage("ラナ：どうするの？もうレバー引いちゃうわけ？");

                                UpdateMainMessage("アイン：俺はバカではない。今回も見送りだ。");

                                UpdateMainMessage("ラナ：ふ〜ん、やけに慎重ね。頭でも打ったの？");

                                UpdateMainMessage("アイン：違うっつうの。ただ、今回はアレだ。");

                                UpdateMainMessage("アイン：看板の文字がさ。もう消えてるだろ？");

                                UpdateMainMessage("ラナ：・・・っえ！？");

                                UpdateMainMessage("アイン：あの看板。役割を終えたのかどうかがハッキリしねえ。");

                                UpdateMainMessage("アイン：普通さ。役割終えたら、そのままにしておくと思わねえか？");

                                UpdateMainMessage("ラナ：う〜ん、どうかしら。役割終えたから、文字が消えたんじゃないの？");

                                UpdateMainMessage("アイン：今までそうだったか？");

                                UpdateMainMessage("ラナ：えっと、う〜ん、全然気にしてなかったわよ、そんなの。");

                                UpdateMainMessage("アイン：だろ？じゃあ、多分まだ何かあるんだぜ。きっと。");

                                UpdateMainMessage("ラナ：っちょ、だからどうしてそうなるのよ。");

                                UpdateMainMessage("アイン：まあ、良いじゃねえか。っしゃ、引き続き探索と行こうぜ！");

                                UpdateMainMessage("ラナ：何か無理やり切り上げてるし・・・まあ、慎重なのは良い事だけど。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：レバーがあったわよ？どうするの？アイン。");

                                UpdateMainMessage("アイン：・・・そうだなあ。・・・ちょっと待ってくれ。");

                                UpdateMainMessage("アイン：・・・　・・・　・・・");

                                UpdateMainMessage("アイン：・・・　・・・");

                                UpdateMainMessage("アイン：・・・");

                                UpdateMainMessage("アイン：看板、見に行こうぜ。");

                                UpdateMainMessage("アイン：すまねえな、ちょっと気になってるんだ。すぐソコだし良いだろ？");

                                UpdateMainMessage("ラナ：ホントかしら・・・まあ、アインがそういうなら。");

                                UpdateMainMessage("アイン：すまねえな。じゃ、看板見に行くとするか！");
                            }
                        }
                        else if (we.dungeonEvent219)
                        {
                            UpdateMainMessage("　　　　『  レバーはもう動かない  』", true);
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  レバーがある  』");

                            if (!we.dungeonEvent215)
                            {
                                UpdateMainMessage("アイン：（どうすっかな・・・やっぱ挑戦してみるべきか・・・）");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：（情報も揃ったことだし、挑戦みるか！）");
                            }

                            using (YesNoRequest yesno = new YesNoRequest())
                            {
                                yesno.StartPosition = FormStartPosition.CenterScreen;
                                yesno.ShowDialog();
                                if (yesno.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                {
                                    if (we.dungeonEvent215)
                                    {
                                        if (!we.dungeonEvent216_2)
                                        {
                                            we.dungeonEvent216_2 = true;

                                            UpdateMainMessage("アイン：ええっと、何々。注意書きがあるな。");

                                            UpdateMainMessage("　　　　『  レバーの回数を示せ  』");

                                            UpdateMainMessage("ラナ：えっと、分かってるわよね？さっきのヒントで。");

                                            UpdateMainMessage("アイン：ああ、任せておけ！　回数は・・・");
                                        }
                                        else
                                        {

                                            UpdateMainMessage("ラナ：あれ？またやってみるわけ？");

                                            UpdateMainMessage("アイン：あ、ああ、任せておけ！　回数は・・・");
                                        }
                                    }
                                    else
                                    {
                                        if (!we.dungeonEvent216_2)
                                        {
                                            we.dungeonEvent216_2 = true;
                                            UpdateMainMessage("ラナ：あれ？試してみるわけ？");

                                            UpdateMainMessage("アイン：ああ、ちょっとだけな。");

                                            UpdateMainMessage("アイン：ええっと、何々。注意書きがあるな。");

                                            UpdateMainMessage("　　　　『  レバーの回数を示せ  』");

                                            UpdateMainMessage("アイン：ッゲ、回数なんてあるのかよ？");

                                            UpdateMainMessage("ラナ：あっ、言ってなかったっけ？");

                                            UpdateMainMessage("アイン：回数入力なんてマジかよ。じゃあ・・・");
                                        }
                                        else
                                        {
                                            UpdateMainMessage("ラナ：また、やってみるわけ？");

                                            UpdateMainMessage("アイン：ああ・・・");

                                            UpdateMainMessage("　　　　『  レバーの回数を示せ  』");

                                            UpdateMainMessage("アイン：回数か。じゃあ・・・");
                                        }
                                    }

                                    using (RequestInput request = new RequestInput())
                                    {
                                        request.StartPosition = FormStartPosition.CenterScreen;
                                        request.InputData = "1";
                                        request.ShowDialog();
                                        if (request.InputData == "12")
                                        {
                                            we.dungeonEvent216 = true;
                                        }
                                        else
                                        {
                                            we.dungeonEvent216 = false;
                                        }
                                    }

                                    UpdateMainMessage("　　　【ッガチャン】");

                                    if (we.dungeonEvent216 && we.dungeonEvent217 && we.dungeonEvent218)
                                    {
                                        we.dungeonEvent219 = true;

                                        UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                                        blueWallBottom[7 * Database.TRUTH_DUNGEON_COLUMN + 38] = false;
                                        blueWallTop[8 * Database.TRUTH_DUNGEON_COLUMN + 38] = false;
                                        blueWallLeft[11 * Database.TRUTH_DUNGEON_COLUMN + 50] = false;
                                        blueWallRight[11 * Database.TRUTH_DUNGEON_COLUMN + 49] = false;
                                        blueWallLeft[14 * Database.TRUTH_DUNGEON_COLUMN + 59] = false;
                                        blueWallRight[14 * Database.TRUTH_DUNGEON_COLUMN + 58] = false;
                                        dungeonField.Invalidate();

                                        UpdateMainMessage("アイン：っしゃ！来たぜ、ラナ！　ッハッハッハ！！");

                                        UpdateMainMessage("ラナ：まあ順当って感じよね♪");

                                        UpdateMainMessage("アイン：また、どっかの青扉が開いているだろうし、行ってみようぜ！");

                                        UpdateMainMessage("ラナ：じゃあ、引き続き探索と行きますか♪");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：・・・");

                                        UpdateMainMessage("ラナ：・・・何も起こらないけど？");

                                        if (we.dungeonEvent215)
                                        {
                                            UpdateMainMessage("アイン：いや、合ってるはずだが・・・");
                                        }
                                        else
                                        {
                                            UpdateMainMessage("アイン：やっぱ、探索を続けるか・・・");
                                        }
                                    }
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：何ボーっとしてんのよ？");

                                    UpdateMainMessage("アイン：あ、いやいや。ッハッハッハ！");
                                }
                            }
                        }
                        break;
                    case 12:
                        if (!we.dungeonEvent213)
                        {
                            we.dungeonEvent213 = true;

                            if (!we.dungeonEvent212 && !we.dungeonEvent214)
                            {

                                UpdateMainMessage("アイン：ん？なんだこのレバーは。");

                                UpdateMainMessage("ラナ：見たところ、駆動部は１箇所だけね。");

                                UpdateMainMessage("アイン：どうする？");

                                UpdateMainMessage("ラナ：う〜〜ん・・・アインはどう思うわけ？");

                                UpdateMainMessage("アイン：そうだなあ・・・");

                                UpdateMainMessage("アイン：まだ開いてるとこ、あるんじゃねえかな。");

                                UpdateMainMessage("ラナ：そういえば、青扉っていくつかあったわね。");

                                UpdateMainMessage("アイン：他の場所をもう少し探索が要る。そう俺は思うぜ。");

                                UpdateMainMessage("ラナ：テキトーにレバー引かないワケ？");

                                UpdateMainMessage("アイン：場合によるな。今回は引かない。");

                                UpdateMainMessage("ラナ：ふーん。そう・・・まあ良いけど。");

                                UpdateMainMessage("ラナ：じゃあ、他の場所でも探索してみる？");

                                UpdateMainMessage("アイン：ああ、行ってみようぜ。");
                            }
                            else if ((!we.dungeonEvent212 && we.dungeonEvent214) ||
                                     (we.dungeonEvent212 && !we.dungeonEvent214))
                            {
                                UpdateMainMessage("アイン：おっ、レバー発見発見！");

                                UpdateMainMessage("ラナ：やっぱり同じようなレバーね。特徴もまったく一緒よ。");

                                UpdateMainMessage("ラナ：どうするの？もうレバー引いちゃうわけ？");

                                UpdateMainMessage("アイン：俺はバカではない。今回も見送りだ。");

                                UpdateMainMessage("ラナ：ふ〜ん、やけに慎重ね。頭でも打ったの？");

                                UpdateMainMessage("アイン：違うっつうの。ただ、今回はアレだ。");

                                UpdateMainMessage("アイン：看板の文字がさ。もう消えてるだろ？");

                                UpdateMainMessage("ラナ：・・・っえ！？");

                                UpdateMainMessage("アイン：あの看板。役割を終えたのかどうかがハッキリしねえ。");

                                UpdateMainMessage("アイン：普通さ。役割終えたら、そのままにしておくと思わねえか？");

                                UpdateMainMessage("ラナ：う〜ん、どうかしら。役割終えたから、文字が消えたんじゃないの？");

                                UpdateMainMessage("アイン：今までそうだったか？");

                                UpdateMainMessage("ラナ：えっと、う〜ん、全然気にしてなかったわよ、そんなの。");

                                UpdateMainMessage("アイン：だろ？じゃあ、多分まだ何かあるんだぜ。きっと。");

                                UpdateMainMessage("ラナ：っちょ、だからどうしてそうなるのよ。");

                                UpdateMainMessage("アイン：まあ、良いじゃねえか。っしゃ、引き続き探索と行こうぜ！");

                                UpdateMainMessage("ラナ：何か無理やり切り上げてるし・・・まあ、慎重なのは良い事だけど。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：レバーがあったわよ？どうするの？アイン。");

                                UpdateMainMessage("アイン：・・・そうだなあ。・・・ちょっと待ってくれ。");

                                UpdateMainMessage("アイン：・・・　・・・　・・・");

                                UpdateMainMessage("アイン：・・・　・・・");

                                UpdateMainMessage("アイン：・・・");

                                UpdateMainMessage("アイン：看板、見に行こうぜ。");

                                UpdateMainMessage("アイン：すまねえな、ちょっと気になってるんだ。すぐソコだし良いだろ？");

                                UpdateMainMessage("ラナ：ホントかしら・・・まあ、アインがそういうなら。");

                                UpdateMainMessage("アイン：すまねえな。じゃ、看板見に行くとするか！");
                            }
                        }
                        else if (we.dungeonEvent219)
                        {
                            UpdateMainMessage("　　　　『  レバーはもう動かない  』", true);
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  レバーがある  』");

                            if (!we.dungeonEvent215)
                            {
                                UpdateMainMessage("アイン：（どうすっかな・・・やっぱ挑戦してみるべきか・・・）");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：（情報も揃ったことだし、挑戦みるか！）");
                            }

                            using (YesNoRequest yesno = new YesNoRequest())
                            {
                                yesno.StartPosition = FormStartPosition.CenterScreen;
                                yesno.ShowDialog();
                                if (yesno.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                {
                                    if (we.dungeonEvent215)
                                    {
                                        if (!we.dungeonEvent217_2)
                                        {
                                            we.dungeonEvent217_2 = true;

                                            UpdateMainMessage("アイン：ええっと、何々。注意書きがあるな。");

                                            UpdateMainMessage("　　　　『  レバーの回数を示せ  』");

                                            UpdateMainMessage("ラナ：えっと、分かってるわよね？さっきのヒントで。");

                                            UpdateMainMessage("アイン：ああ、任せておけ！　回数は・・・");
                                        }
                                        else
                                        {

                                            UpdateMainMessage("ラナ：あれ？またやってみるわけ？");

                                            UpdateMainMessage("アイン：あ、ああ、任せておけ！　回数は・・・");
                                        }
                                    }
                                    else
                                    {
                                        if (!we.dungeonEvent217_2)
                                        {
                                            we.dungeonEvent217_2 = true;
                                            UpdateMainMessage("ラナ：あれ？試してみるわけ？");

                                            UpdateMainMessage("アイン：ああ、ちょっとだけな。");

                                            UpdateMainMessage("アイン：ええっと、何々。注意書きがあるな。");

                                            UpdateMainMessage("　　　　『  レバーの回数を示せ  』");

                                            UpdateMainMessage("アイン：ッゲ、回数なんてあるのかよ？");

                                            UpdateMainMessage("ラナ：あっ、言ってなかったっけ？");

                                            UpdateMainMessage("アイン：回数入力なんてマジかよ。じゃあ・・・");
                                        }
                                        else
                                        {
                                            UpdateMainMessage("ラナ：また、やってみるわけ？");

                                            UpdateMainMessage("アイン：ああ・・・");

                                            UpdateMainMessage("　　　　『  レバーの回数を示せ  』");

                                            UpdateMainMessage("アイン：回数か。じゃあ・・・");
                                        }
                                    }

                                    using (RequestInput request = new RequestInput())
                                    {
                                        request.StartPosition = FormStartPosition.CenterScreen;
                                        request.InputData = "1";
                                        request.ShowDialog();
                                        if (request.InputData == "8")
                                        {
                                            we.dungeonEvent217 = true;
                                        }
                                        else
                                        {
                                            we.dungeonEvent217 = false;
                                        }
                                    }

                                    UpdateMainMessage("　　　【ッガチャン】");

                                    if (we.dungeonEvent216 && we.dungeonEvent217 && we.dungeonEvent218)
                                    {
                                        we.dungeonEvent219 = true;

                                        UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                                        blueWallBottom[7 * Database.TRUTH_DUNGEON_COLUMN + 38] = false;
                                        blueWallTop[8 * Database.TRUTH_DUNGEON_COLUMN + 38] = false;
                                        blueWallLeft[11 * Database.TRUTH_DUNGEON_COLUMN + 50] = false;
                                        blueWallRight[11 * Database.TRUTH_DUNGEON_COLUMN + 49] = false;
                                        blueWallLeft[14 * Database.TRUTH_DUNGEON_COLUMN + 59] = false;
                                        blueWallRight[14 * Database.TRUTH_DUNGEON_COLUMN + 58] = false;
                                        dungeonField.Invalidate();

                                        UpdateMainMessage("アイン：っしゃ！来たぜ、ラナ！　ッハッハッハ！！");

                                        UpdateMainMessage("ラナ：まあ順当って感じよね♪");

                                        UpdateMainMessage("アイン：また、どっかの青扉が開いているだろうし、行ってみようぜ！");

                                        UpdateMainMessage("ラナ：じゃあ、引き続き探索と行きますか♪");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：・・・");

                                        UpdateMainMessage("ラナ：・・・何も起こらないけど？");

                                        if (we.dungeonEvent215)
                                        {
                                            UpdateMainMessage("アイン：いや、合ってるはずだが・・・");
                                        }
                                        else
                                        {
                                            UpdateMainMessage("アイン：やっぱ、探索を続けるか・・・");
                                        }
                                    }
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：何ボーっとしてんのよ？");

                                    UpdateMainMessage("アイン：あ、いやいや。ッハッハッハ！");
                                }
                            }
                        }
                        break;
                    case 13:
                        if (!we.dungeonEvent214)
                        {
                            we.dungeonEvent214 = true;

                            if (!we.dungeonEvent212 && !we.dungeonEvent213)
                            {

                                UpdateMainMessage("アイン：ん？なんだこのレバーは。");

                                UpdateMainMessage("ラナ：見たところ、駆動部は１箇所だけね。");

                                UpdateMainMessage("アイン：どうする？");

                                UpdateMainMessage("ラナ：う〜〜ん・・・アインはどう思うわけ？");

                                UpdateMainMessage("アイン：そうだなあ・・・");

                                UpdateMainMessage("アイン：まだ開いてるとこ、あるんじゃねえかな。");

                                UpdateMainMessage("ラナ：そういえば、青扉っていくつかあったわね。");

                                UpdateMainMessage("アイン：他の場所をもう少し探索が要る。そう俺は思うぜ。");

                                UpdateMainMessage("ラナ：テキトーにレバー引かないワケ？");

                                UpdateMainMessage("アイン：場合によるな。今回は引かない。");

                                UpdateMainMessage("ラナ：ふーん。そう・・・まあ良いけど。");

                                UpdateMainMessage("ラナ：じゃあ、他の場所でも探索してみる？");

                                UpdateMainMessage("アイン：ああ、行ってみようぜ。");
                            }
                            else if ((!we.dungeonEvent212 && we.dungeonEvent213) ||
                                     (we.dungeonEvent212 && !we.dungeonEvent213))
                            {
                                UpdateMainMessage("アイン：おっ、レバー発見発見！");

                                UpdateMainMessage("ラナ：やっぱり同じようなレバーね。特徴もまったく一緒よ。");

                                UpdateMainMessage("ラナ：どうするの？もうレバー引いちゃうわけ？");

                                UpdateMainMessage("アイン：俺はバカではない。今回も見送りだ。");

                                UpdateMainMessage("ラナ：ふ〜ん、やけに慎重ね。頭でも打ったの？");

                                UpdateMainMessage("アイン：違うっつうの。ただ、今回はアレだ。");

                                UpdateMainMessage("アイン：看板の文字がさ。もう消えてるだろ？");

                                UpdateMainMessage("ラナ：・・・っえ！？");

                                UpdateMainMessage("アイン：あの看板。役割を終えたのかどうかがハッキリしねえ。");

                                UpdateMainMessage("アイン：普通さ。役割終えたら、そのままにしておくと思わねえか？");

                                UpdateMainMessage("ラナ：う〜ん、どうかしら。役割終えたから、文字が消えたんじゃないの？");

                                UpdateMainMessage("アイン：今までそうだったか？");

                                UpdateMainMessage("ラナ：えっと、う〜ん、全然気にしてなかったわよ、そんなの。");

                                UpdateMainMessage("アイン：だろ？じゃあ、多分まだ何かあるんだぜ。きっと。");

                                UpdateMainMessage("ラナ：っちょ、だからどうしてそうなるのよ。");

                                UpdateMainMessage("アイン：まあ、良いじゃねえか。っしゃ、引き続き探索と行こうぜ！");

                                UpdateMainMessage("ラナ：何か無理やり切り上げてるし・・・もう・・・");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：レバーがあったわよ？どうするの？アイン。");

                                UpdateMainMessage("アイン：・・・そうだなあ。・・・ちょっと待ってくれ。");

                                UpdateMainMessage("アイン：・・・　・・・　・・・");

                                UpdateMainMessage("アイン：・・・　・・・");

                                UpdateMainMessage("アイン：・・・");

                                UpdateMainMessage("アイン：看板、見に行こうぜ。");

                                UpdateMainMessage("アイン：ちょっと気になってるんだ。すぐソコだし良いだろ？");

                                UpdateMainMessage("ラナ：ホントかしら・・・まあ、アインがそういうなら。");

                                UpdateMainMessage("アイン：すまねえな。じゃ、看板見に行くとするか！");
                            }
                        }
                        else if (we.dungeonEvent219)
                        {
                            UpdateMainMessage("　　　　『  レバーはもう動かない  』", true);
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  レバーがある  』");

                            if (!we.dungeonEvent215)
                            {
                                UpdateMainMessage("アイン：（どうすっかな・・・やっぱ挑戦してみるべきか・・・）");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：（情報も揃ったことだし、挑戦みるか！）");
                            }

                            using (YesNoRequest yesno = new YesNoRequest())
                            {
                                yesno.StartPosition = FormStartPosition.CenterScreen;
                                yesno.ShowDialog();
                                if (yesno.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                {
                                    if (we.dungeonEvent215)
                                    {
                                        if (!we.dungeonEvent218_2)
                                        {
                                            we.dungeonEvent218_2 = true;

                                            UpdateMainMessage("アイン：ええっと、何々。注意書きがあるな。");

                                            UpdateMainMessage("　　　　『  レバーの回数を示せ  』");

                                            UpdateMainMessage("ラナ：えっと、分かってるわよね？さっきのヒントで。");

                                            UpdateMainMessage("アイン：ああ、任せておけ！　回数は・・・");
                                        }
                                        else
                                        {

                                            UpdateMainMessage("ラナ：あれ？またやってみるわけ？");

                                            UpdateMainMessage("アイン：あ、ああ、任せておけ！　回数は・・・");
                                        }
                                    }
                                    else
                                    {
                                        if (!we.dungeonEvent218_2)
                                        {
                                            we.dungeonEvent218_2 = true;
                                            UpdateMainMessage("ラナ：あれ？試してみるわけ？");

                                            UpdateMainMessage("アイン：ああ、ちょっとだけな。");

                                            UpdateMainMessage("アイン：ええっと、何々。注意書きがあるな。");

                                            UpdateMainMessage("　　　　『  レバーの回数を示せ  』");

                                            UpdateMainMessage("アイン：ッゲ、回数なんてあるのかよ？");

                                            UpdateMainMessage("ラナ：あっ、言ってなかったっけ？");

                                            UpdateMainMessage("アイン：回数入力なんてマジかよ。じゃあ・・・");
                                        }
                                        else
                                        {
                                            UpdateMainMessage("ラナ：また、やってみるわけ？");

                                            UpdateMainMessage("アイン：ああ・・・");

                                            UpdateMainMessage("　　　　『  レバーの回数を示せ  』");

                                            UpdateMainMessage("アイン：回数か。じゃあ・・・");
                                        }
                                    }

                                    using (RequestInput request = new RequestInput())
                                    {
                                        request.StartPosition = FormStartPosition.CenterScreen;
                                        request.InputData = "1";
                                        request.ShowDialog();
                                        if (request.InputData == "3")
                                        {
                                            we.dungeonEvent218 = true;
                                        }
                                        else
                                        {
                                            we.dungeonEvent218 = false;
                                        }
                                    }

                                    UpdateMainMessage("　　　【ッガチャン】");

                                    if (we.dungeonEvent216 && we.dungeonEvent217 && we.dungeonEvent218)
                                    {
                                        we.dungeonEvent219 = true;

                                        UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                                        blueWallBottom[7 * Database.TRUTH_DUNGEON_COLUMN + 38] = false;
                                        blueWallTop[8 * Database.TRUTH_DUNGEON_COLUMN + 38] = false;
                                        blueWallLeft[11 * Database.TRUTH_DUNGEON_COLUMN + 50] = false;
                                        blueWallRight[11 * Database.TRUTH_DUNGEON_COLUMN + 49] = false;
                                        blueWallLeft[14 * Database.TRUTH_DUNGEON_COLUMN + 59] = false;
                                        blueWallRight[14 * Database.TRUTH_DUNGEON_COLUMN + 58] = false;
                                        dungeonField.Invalidate();

                                        UpdateMainMessage("アイン：っしゃ！来たぜ、ラナ！　ッハッハッハ！！");

                                        UpdateMainMessage("ラナ：まあ順当って感じよね♪");

                                        UpdateMainMessage("アイン：また、どっかの青扉が開いているだろうし、行ってみようぜ！");

                                        UpdateMainMessage("ラナ：じゃあ、引き続き探索と行きますか♪");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：・・・");

                                        UpdateMainMessage("ラナ：・・・何も起こらないけど？");

                                        if (we.dungeonEvent215)
                                        {
                                            UpdateMainMessage("アイン：いや、合ってるはずだが・・・");
                                        }
                                        else
                                        {
                                            UpdateMainMessage("アイン：やっぱ、探索を続けるか・・・");
                                        }
                                    }
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：何ボーっとしてんのよ？");

                                    UpdateMainMessage("アイン：あ、いやいや。ッハッハッハ！");
                                }
                            }
                        }
                        break;
                    #endregion
                    #region "知の部屋、フェーズ３"
                    case 14:
                        UpdateUnknownTileArea24();
                        if (!we.dungeonEvent221)
                        {
                            we.dungeonEvent221 = true;

                            if (!we.dungeonEvent222 && !we.dungeonEvent223)
                            {
                                UpdateMainMessage("ラナ：・・・何も無いわね。");

                                UpdateMainMessage("アイン：・・・何か・・・");

                                UpdateMainMessage("ラナ：どしたの？");

                                UpdateMainMessage("アイン：この部屋、何かそこらじゅうに文字が刻まれてねえか？");

                                UpdateMainMessage("ラナ：え？？　ウソ、どこに！？");

                                UpdateMainMessage("アイン：読むぜ。");

                                UpdateMainMessage("アイン：【鳥が歌い、木々が囁き始める】");

                                UpdateMainMessage("アイン：【天は青く照らし、地は新緑を謳歌する】");

                                UpdateMainMessage("アイン：【闇が夜へと誘い、光が昼へと道を示す】");

                                UpdateMainMessage("アイン：【水、流れ落ち、偉大なる海、天へと還り、無限循環】");

                                UpdateMainMessage("アイン：【火、あらゆる場所、可能な場を生めつくし、創元浄化】");

                                UpdateMainMessage("アイン：と、以上だな。");

                                UpdateMainMessage("アイン：いったい何なんだこれは・・・ぜんぜん分かんねえな。");

                                UpdateMainMessage("ラナ：・・・え？　え？");

                                UpdateMainMessage("ラナ：ちょっとアイン、大丈夫？アンタ、正真正銘のバカになったんじゃない？");

                                UpdateMainMessage("アイン：ラナこそ、どこ見てんだ？　見えないのか？　そこら中に書いてあるだろ。");

                                UpdateMainMessage("ラナ：いや、ホントぜんぜん見えないけど。");

                                UpdateMainMessage("アイン：じゃあ、俺だけが見えてるってワケか。");

                                UpdateMainMessage("ラナ：ふ〜ん、何か私の出る幕なさそうね。");

                                UpdateMainMessage("アイン：あ、いやいや。。。");

                                UpdateMainMessage("ラナ：良いわよ、そんな気を使わなくても♪");

                                UpdateMainMessage("アイン：そっか、悪いな。");

                                UpdateMainMessage("アイン：よし、意味ありげな内容だからな。キッチリココは記憶していくぜ。");

                                UpdateMainMessage("ラナ：大丈夫？メモなら貸してあげるけど。");

                                UpdateMainMessage("アイン：大丈夫だ。バッチリ記憶したぜ。");

                                UpdateMainMessage("ラナ：じゃあ、引き続き探索と行きましょ♪");

                                UpdateMainMessage("アイン：オーケー！");
                            }
                            else if ((!we.dungeonEvent222 && we.dungeonEvent223) ||
                                     (we.dungeonEvent222 && !we.dungeonEvent223))
                            {
                                UpdateMainMessage("ラナ：・・・どう？");

                                UpdateMainMessage("アイン：・・・ああ、この部屋も同じだせ。ビッシリと書いてある。");

                                UpdateMainMessage("アイン：読むぜ。");

                                UpdateMainMessage("アイン：【鳥が歌い、木々が囁き始める】");

                                UpdateMainMessage("アイン：【天は青く照らし、地は新緑を謳歌する】");

                                UpdateMainMessage("アイン：【闇が夜へと誘い、光が昼へと道を示す】");

                                UpdateMainMessage("アイン：【水、流れ落ち、偉大なる海、天へと還り、無限循環】");

                                UpdateMainMessage("アイン：【火、あらゆる場所、可能な場を生めつくし、創元浄化】");

                                UpdateMainMessage("アイン：と、以上だな。");

                                UpdateMainMessage("アイン：前の部屋もそうだが、まったくもって分からねえ。");

                                UpdateMainMessage("ラナ：・・・そう・・・");

                                UpdateMainMessage("ラナ：ねえ、何か見たことあるんじゃないの？実は。");

                                UpdateMainMessage("アイン：いや？初めてだぜ、こんな詩を見るのは。");

                                UpdateMainMessage("ラナ：詩って何で分かるわけ？");

                                UpdateMainMessage("アイン：そりゃあ・・・");

                                UpdateMainMessage("アイン：・・・　・・・　あれ？　何でだ？？");

                                UpdateMainMessage("ラナ：バカアインはこれだから・・・ハアアアァァァ・・・");

                                UpdateMainMessage("アイン：い、いやいや、そうじゃねえって。あれ、何でだっけ・・・");

                                UpdateMainMessage("ラナ：まあ良いわよ。ッホラ、とっとと記憶しちゃいなさいよ♪");

                                UpdateMainMessage("アイン：そんなサクサク記憶出来るかつうの。まあ、待て待て。");

                                UpdateMainMessage("アイン：え〜っと・・・　・・・");

                                UpdateMainMessage("アイン：大丈夫だ。バッチリ記憶したぜ。");

                                UpdateMainMessage("ラナ：じゃあ、引き続き探索と行きましょ♪");

                                UpdateMainMessage("アイン：オーケー！");
                            }
                            else if (we.dungeonEvent222 && we.dungeonEvent223)
                            {
                                UpdateMainMessage("ラナ：・・・この部屋も書いてあるの？");

                                UpdateMainMessage("アイン：ああ、読むぜ。");

                                UpdateMainMessage("アイン：【鳥が歌い、木々が囁き始める】");

                                UpdateMainMessage("アイン：【天は青く照らし、地は新緑を謳歌する】");

                                UpdateMainMessage("アイン：【闇が夜へと誘い、光が昼へと道を示す】");

                                UpdateMainMessage("アイン：【水、流れ落ち、偉大なる海、天へと還り、無限循環】");

                                UpdateMainMessage("アイン：【火、あらゆる場所、可能な場を生めつくし、創元浄化】");

                                UpdateMainMessage("アイン：以上だ。");

                                UpdateMainMessage("アイン：っふううううぅぅ・・・。");

                                UpdateMainMessage("ラナ：アイン、なんだか汗ビッショリよ。大丈夫なの？");

                                UpdateMainMessage("アイン：ああ、ちょっと記憶量が多いだけだ。大丈夫だ。");

                                UpdateMainMessage("ラナ：記憶量が多いって・・・そういう問題なのかしら。");

                                UpdateMainMessage("アイン：大丈夫だって。任せろ！ッハッハッハ！！");

                                UpdateMainMessage("ラナ：何か心配だけど・・・");

                                UpdateMainMessage("アイン：気にするな。汗ぐらいどうって事ねえよ。");

                                UpdateMainMessage("アイン：っさてと、次行くぜ！");

                                UpdateMainMessage("ラナ：どこに行くのよ？");

                                UpdateMainMessage("アイン：看板に決まってるだろ？");

                                UpdateMainMessage("ラナ：っえ、あの看板、また見るの？");

                                UpdateMainMessage("アイン：ああ、そうだ。きっと答えが出る。出せるようになるハズだ。");

                                UpdateMainMessage("ラナ：まあ、あんまり無理しないでよね。");

                                UpdateMainMessage("アイン：ああ。");
                            }
                        }
                        else
                        {
                            UpdateMainMessage("        【鳥が歌い、木々が囁き始める】");

                            UpdateMainMessage("        【天は青く照らし、地は新緑を謳歌する】");

                            UpdateMainMessage("        【闇が夜へと誘い、光が昼へと道を示す】");

                            UpdateMainMessage("        【水、流れ落ち、偉大なる海、天へと還り、無限循環】");

                            UpdateMainMessage("        【火、あらゆる場所、可能な場を生めつくし、創元浄化】");
                        }
                        break;

                    case 15:
                        UpdateUnknownTileArea25();

                        if (!we.dungeonEvent222)
                        {
                            we.dungeonEvent222 = true;

                            if (!we.dungeonEvent221 && !we.dungeonEvent223)
                            {
                                UpdateMainMessage("ラナ：・・・何も無いわね。");

                                UpdateMainMessage("アイン：・・・何か・・・");

                                UpdateMainMessage("ラナ：どしたの？");

                                UpdateMainMessage("アイン：この部屋、何かそこらじゅうに文字が刻まれてねえか？");

                                UpdateMainMessage("ラナ：え？？　ウソ、どこに！？");

                                UpdateMainMessage("アイン：読むぜ。");

                                UpdateMainMessage("アイン：【嵐、万物なる生成要素、一から零へと変化させる】");

                                UpdateMainMessage("アイン：【死、この世における絶対的な平等の象徴】");

                                UpdateMainMessage("アイン：【生、偉大なる母、厳格なる父より永久の確約】");

                                UpdateMainMessage("アイン：【神、全創生、全法則、全にして無条件の存在】");

                                UpdateMainMessage("アイン：【人、誤り、恐れ、喚き、屈し、失い、揺らぎ続ける存在】");

                                UpdateMainMessage("アイン：と、以上だな。");

                                UpdateMainMessage("アイン：いったい何なんだこれは・・・ぜんぜん分かんねえな。");

                                UpdateMainMessage("ラナ：・・・え？　え？");

                                UpdateMainMessage("ラナ：ちょっとアイン、大丈夫？アンタ、正真正銘のバカになったんじゃない？");

                                UpdateMainMessage("アイン：ラナこそ、どこ見てんだ？　見えないのか？　そこら中に書いてあるだろ。");

                                UpdateMainMessage("ラナ：いや、ホントぜんぜん見えないけど。");

                                UpdateMainMessage("アイン：じゃあ、俺だけが見えてるってワケか。");

                                UpdateMainMessage("ラナ：ふ〜ん、何か私の出る幕なさそうね。");

                                UpdateMainMessage("アイン：あ、いやいや。。。");

                                UpdateMainMessage("ラナ：良いわよ、そんな気を使わなくても♪");

                                UpdateMainMessage("アイン：そっか、悪いな。");

                                UpdateMainMessage("アイン：よし、意味ありげな内容だからな。キッチリココは記憶していくぜ。");

                                UpdateMainMessage("ラナ：大丈夫？メモなら貸してあげるけど。");

                                UpdateMainMessage("アイン：大丈夫だ。バッチリ記憶したぜ。");

                                UpdateMainMessage("ラナ：じゃあ、引き続き探索と行きましょ♪");

                                UpdateMainMessage("アイン：オーケー！");
                            }
                            else if ((!we.dungeonEvent221 && we.dungeonEvent223) ||
                                     (we.dungeonEvent221 && !we.dungeonEvent223))
                            {
                                UpdateMainMessage("ラナ：・・・どう？");

                                UpdateMainMessage("アイン：・・・ああ、この部屋も同じだせ。ビッシリと書いてある。");

                                UpdateMainMessage("アイン：読むぜ。");

                                UpdateMainMessage("アイン：【嵐、万物なる生成要素、一から零へと変化させる】");

                                UpdateMainMessage("アイン：【死、この世における絶対的な平等の象徴】");

                                UpdateMainMessage("アイン：【生、偉大なる母、厳格なる父より永久の確約】");

                                UpdateMainMessage("アイン：【神、全創生、全法則、全にして無条件の存在】");

                                UpdateMainMessage("アイン：【人、誤り、恐れ、喚き、屈し、失い、揺らぎ続ける存在】");

                                UpdateMainMessage("アイン：と、以上だな。");

                                UpdateMainMessage("アイン：前の部屋もそうだが、まったくもって分からねえ。");

                                UpdateMainMessage("ラナ：・・・そう・・・");

                                UpdateMainMessage("ラナ：ねえ、何か見たことあるんじゃないの？実は。");

                                UpdateMainMessage("アイン：いや？初めてだぜ、こんな詩を見るのは。");

                                UpdateMainMessage("ラナ：詩って何で分かるわけ？");

                                UpdateMainMessage("アイン：そりゃあ・・・");

                                UpdateMainMessage("アイン：・・・　・・・　あれ？　何でだ？？");

                                UpdateMainMessage("ラナ：バカアインはこれだから・・・ハアアアァァァ・・・");

                                UpdateMainMessage("アイン：い、いやいや、そうじゃねえって。あれ、何でだっけ・・・");

                                UpdateMainMessage("ラナ：まあ良いわよ。ッホラ、とっとと記憶しちゃいなさいよ♪");

                                UpdateMainMessage("アイン：そんなサクサク記憶出来るかつうの。まあ、待て待て。");

                                UpdateMainMessage("アイン：え〜っと・・・　・・・");

                                UpdateMainMessage("アイン：大丈夫だ。バッチリ記憶したぜ。");

                                UpdateMainMessage("ラナ：じゃあ、引き続き探索と行きましょ♪");

                                UpdateMainMessage("アイン：オーケー！");
                            }
                            else if (we.dungeonEvent221 && we.dungeonEvent223)
                            {
                                UpdateMainMessage("ラナ：・・・この部屋も書いてあるの？");

                                UpdateMainMessage("アイン：ああ、読むぜ。");

                                UpdateMainMessage("アイン：【嵐、万物なる生成要素、一から零へと変化させる】");

                                UpdateMainMessage("アイン：【死、この世における絶対的な平等の象徴】");

                                UpdateMainMessage("アイン：【生、偉大なる母、厳格なる父より永久の確約】");

                                UpdateMainMessage("アイン：【神、全創生、全法則、全にして無条件の存在】");

                                UpdateMainMessage("アイン：【人、誤り、恐れ、喚き、屈し、失い、揺らぎ続ける存在】");

                                UpdateMainMessage("アイン：以上だ。");

                                UpdateMainMessage("アイン：っふううううぅぅ・・・。");

                                UpdateMainMessage("ラナ：アイン、なんだか汗ビッショリよ。大丈夫なの？");

                                UpdateMainMessage("アイン：ああ、ちょっと記憶量が多いだけだ。大丈夫だ。");

                                UpdateMainMessage("ラナ：記憶量が多いって・・・そういう問題なのかしら。");

                                UpdateMainMessage("アイン：大丈夫だって。任せろ！ッハッハッハ！！");

                                UpdateMainMessage("ラナ：何か心配だけど・・・");

                                UpdateMainMessage("アイン：気にするな。汗ぐらいどうって事ねえよ。");

                                UpdateMainMessage("アイン：っさてと、次行くぜ！");

                                UpdateMainMessage("ラナ：どこに行くのよ？");

                                UpdateMainMessage("アイン：看板に決まってるだろ？");

                                UpdateMainMessage("ラナ：っえ、あの看板、また見るの？");

                                UpdateMainMessage("アイン：ああ、そうだ。きっと答えが出る。出せるようになるハズだ。");

                                UpdateMainMessage("ラナ：まあ、あんまり無理しないでよね。");

                                UpdateMainMessage("アイン：ああ。");
                            }
                        }
                        else
                        {
                            UpdateMainMessage("        【嵐、万物なる生成要素、一から零へと変化させる】");

                            UpdateMainMessage("        【死、この世における絶対的な平等の象徴】");

                            UpdateMainMessage("        【生、偉大なる母、厳格なる父より永久の確約】");

                            UpdateMainMessage("        【神、全創生、全法則、全にして無条件の存在】");

                            UpdateMainMessage("        【人、誤り、恐れ、喚き、屈し、失い、揺らぎ続ける存在】", true);
                        }
                        break;

                    case 16:
                        UpdateUnknownTileArea26();
                        if (!we.dungeonEvent223)
                        {
                            we.dungeonEvent223 = true;

                            if (!we.dungeonEvent221 && !we.dungeonEvent222)
                            {
                                UpdateMainMessage("ラナ：・・・何も無いわね。");

                                UpdateMainMessage("アイン：・・・何か・・・");

                                UpdateMainMessage("ラナ：どしたの？");

                                UpdateMainMessage("アイン：この部屋、何かそこらじゅうに文字が刻まれてねえか？");

                                UpdateMainMessage("ラナ：え？？　ウソ、どこに！？");

                                UpdateMainMessage("アイン：読むぜ。");

                                UpdateMainMessage("アイン：【理、神と人、鳥、木々、全生物における連続の理そこに見つけたり】");

                                UpdateMainMessage("アイン：【空、在るべきもの、成るべくして成り、在るべくして現存と見つけたり】");

                                UpdateMainMessage("アイン：【相、完全調和への導き、交わることの無い絶対双極、見つけたり】");

                                UpdateMainMessage("アイン：【永遠、終わらない所へ、終わりと始まりが連続する永遠環】");

                                UpdateMainMessage("アイン：【世界、あなた、そしてわたしが居た場所へ。無限に続くこの世界】");

                                UpdateMainMessage("アイン：と、以上だな。");

                                UpdateMainMessage("アイン：いったい何なんだこれは・・・ぜんぜん分かんねえな。");

                                UpdateMainMessage("ラナ：・・・え？　え？");

                                UpdateMainMessage("ラナ：ちょっとアイン、大丈夫？アンタ、正真正銘のバカになったんじゃない？");

                                UpdateMainMessage("アイン：ラナこそ、どこ見てんだ？　見えないのか？　そこら中に書いてあるだろ。");

                                UpdateMainMessage("ラナ：いや、ホントぜんぜん見えないけど。");

                                UpdateMainMessage("アイン：じゃあ、俺だけが見えてるってワケか。");

                                UpdateMainMessage("ラナ：ふ〜ん、何か私の出る幕なさそうね。");

                                UpdateMainMessage("アイン：あ、いやいや。。。");

                                UpdateMainMessage("ラナ：良いわよ、そんな気を使わなくても♪");

                                UpdateMainMessage("アイン：そっか、悪いな。");

                                UpdateMainMessage("アイン：よし、意味ありげな内容だからな。キッチリココは記憶していくぜ。");

                                UpdateMainMessage("ラナ：大丈夫？メモなら貸してあげるけど。");

                                UpdateMainMessage("アイン：大丈夫だ。バッチリ記憶したぜ。");

                                UpdateMainMessage("ラナ：じゃあ、引き続き探索と行きましょ♪");

                                UpdateMainMessage("アイン：オーケー！");
                            }
                            else if ((!we.dungeonEvent221 && we.dungeonEvent222) ||
                                     (we.dungeonEvent221 && !we.dungeonEvent222))
                            {
                                UpdateMainMessage("ラナ：・・・どう？");

                                UpdateMainMessage("アイン：・・・ああ、この部屋も同じだせ。ビッシリと書いてある。");

                                UpdateMainMessage("アイン：読むぜ。");

                                UpdateMainMessage("アイン：【理、神と人、鳥、木々、全生物における連続の理そこに見つけたり】");

                                UpdateMainMessage("アイン：【空、在るべきもの、成るべくして成り、在るべくして現存と見つけたり】");

                                UpdateMainMessage("アイン：【相、完全調和への導き、交わることの無い絶対双極、見つけたり】");

                                UpdateMainMessage("アイン：【永遠、終わらない所へ、終わりと始まりが連続する永遠環】");

                                UpdateMainMessage("アイン：【世界、あなた、そしてわたしが居た場所へ。無限に続くこの世界】");

                                UpdateMainMessage("アイン：と、以上だな。");

                                UpdateMainMessage("アイン：前の部屋もそうだが、まったくもって分からねえ。");

                                UpdateMainMessage("ラナ：・・・そう・・・");

                                UpdateMainMessage("ラナ：ねえ、何か見たことあるんじゃないの？実は。");

                                UpdateMainMessage("アイン：いや？初めてだぜ、こんな詩を見るのは。");

                                UpdateMainMessage("ラナ：詩って何で分かるわけ？");

                                UpdateMainMessage("アイン：そりゃあ・・・");

                                UpdateMainMessage("アイン：・・・　・・・　あれ？　何でだ？？");

                                UpdateMainMessage("ラナ：バカアインはこれだから・・・ハアアアァァァ・・・");

                                UpdateMainMessage("アイン：い、いやいや、そうじゃねえって。あれ、何でだっけ・・・");

                                UpdateMainMessage("ラナ：まあ良いわよ。ッホラ、とっとと記憶しちゃいなさいよ♪");

                                UpdateMainMessage("アイン：そんなサクサク記憶出来るかつうの。まあ、待て待て。");

                                UpdateMainMessage("アイン：え〜っと・・・　・・・");

                                UpdateMainMessage("アイン：大丈夫だ。バッチリ記憶したぜ。");

                                UpdateMainMessage("ラナ：じゃあ、引き続き探索と行きましょ♪");

                                UpdateMainMessage("アイン：オーケー！");
                            }
                            else if (we.dungeonEvent221 && we.dungeonEvent222)
                            {
                                UpdateMainMessage("ラナ：・・・この部屋も書いてあるの？");

                                UpdateMainMessage("アイン：ああ、読むぜ。");

                                UpdateMainMessage("アイン：【理、神と人、鳥、木々、全生物における連続の理そこに見つけたり】");

                                UpdateMainMessage("アイン：【空、在るべきもの、成るべくして成り、在るべくして現存と見つけたり】");

                                UpdateMainMessage("アイン：【相、完全調和への導き、交わることの無い絶対双極、見つけたり】");

                                UpdateMainMessage("アイン：【永遠、終わらない所へ、終わりと始まりが連続する永遠環】");

                                UpdateMainMessage("アイン：【世界、あなた、そしてわたしが居た場所へ。無限に続くこの世界】");

                                UpdateMainMessage("アイン：以上だ。");

                                UpdateMainMessage("アイン：っふううううぅぅ・・・。");

                                UpdateMainMessage("ラナ：アイン、なんだか汗ビッショリよ。大丈夫なの？");

                                UpdateMainMessage("アイン：ああ、ちょっと記憶量が多いだけだ。大丈夫だ。");

                                UpdateMainMessage("ラナ：記憶量が多いって・・・そういう問題なのかしら。");

                                UpdateMainMessage("アイン：大丈夫だって。任せろ！ッハッハッハ！！");

                                UpdateMainMessage("ラナ：何か心配だけど・・・");

                                UpdateMainMessage("アイン：気にするな。汗ぐらいどうって事ねえよ。");

                                UpdateMainMessage("アイン：っさてと、次行くぜ！");

                                UpdateMainMessage("ラナ：どこに行くのよ？");

                                UpdateMainMessage("アイン：看板に決まってるだろ？");

                                UpdateMainMessage("ラナ：っえ、あの看板、また見るの？");

                                UpdateMainMessage("アイン：ああ、そうだ。きっと答えが出る。出せるようになるハズだ。");

                                UpdateMainMessage("ラナ：まあ、あんまり無理しないでよね。");

                                UpdateMainMessage("アイン：ああ。");
                            }
                        }
                        else
                        {
                            UpdateMainMessage("        【理、神と人、鳥、木々、全生物における連続の理そこに見つけたり】");

                            UpdateMainMessage("        【空、在るべきもの、成るべくして成り、在るべくして現存と見つけたり】");

                            UpdateMainMessage("        【相、完全調和への導き、交わることの無い絶対双極、見つけたり】");

                            UpdateMainMessage("        【永遠、終わらない所へ、終わりと始まりが連続する永遠環】");

                            UpdateMainMessage("        【世界、あなた、そしてわたしが居た場所へ。無限に続くこの世界】");
                        }
                        break;
                    #endregion
                    #region "知の部屋、正しき順序看板"
                    case 17:
                        if ((knownTileInfo2[11 * Database.TRUTH_DUNGEON_COLUMN + 38]) &&
                            (knownTileInfo2[11 * Database.TRUTH_DUNGEON_COLUMN + 39]) &&
                            (knownTileInfo2[11 * Database.TRUTH_DUNGEON_COLUMN + 40]) &&
                            (knownTileInfo2[11 * Database.TRUTH_DUNGEON_COLUMN + 41]) &&
                            (knownTileInfo2[11 * Database.TRUTH_DUNGEON_COLUMN + 42]) &&
                            (knownTileInfo2[11 * Database.TRUTH_DUNGEON_COLUMN + 43]) &&
                            (knownTileInfo2[11 * Database.TRUTH_DUNGEON_COLUMN + 44]) &&
                            (knownTileInfo2[11 * Database.TRUTH_DUNGEON_COLUMN + 45]) &&
                            (knownTileInfo2[11 * Database.TRUTH_DUNGEON_COLUMN + 46]) &&

                            (knownTileInfo2[12 * Database.TRUTH_DUNGEON_COLUMN + 38]) &&
                            (knownTileInfo2[12 * Database.TRUTH_DUNGEON_COLUMN + 40]) &&
                            (knownTileInfo2[12 * Database.TRUTH_DUNGEON_COLUMN + 42]) &&
                            (knownTileInfo2[12 * Database.TRUTH_DUNGEON_COLUMN + 44]) &&
                            (knownTileInfo2[12 * Database.TRUTH_DUNGEON_COLUMN + 46]) &&

                            (knownTileInfo2[13 * Database.TRUTH_DUNGEON_COLUMN + 38]) &&
                            (knownTileInfo2[13 * Database.TRUTH_DUNGEON_COLUMN + 39]) &&
                            (knownTileInfo2[13 * Database.TRUTH_DUNGEON_COLUMN + 40]) &&
                            (knownTileInfo2[13 * Database.TRUTH_DUNGEON_COLUMN + 41]) &&
                            (knownTileInfo2[13 * Database.TRUTH_DUNGEON_COLUMN + 42]) &&
                            (knownTileInfo2[13 * Database.TRUTH_DUNGEON_COLUMN + 43]) &&
                            (knownTileInfo2[13 * Database.TRUTH_DUNGEON_COLUMN + 44]) &&
                            (knownTileInfo2[13 * Database.TRUTH_DUNGEON_COLUMN + 45]) &&
                            (knownTileInfo2[13 * Database.TRUTH_DUNGEON_COLUMN + 46]) &&

                            (knownTileInfo2[14 * Database.TRUTH_DUNGEON_COLUMN + 38]) &&
                            (knownTileInfo2[14 * Database.TRUTH_DUNGEON_COLUMN + 40]) &&
                            (knownTileInfo2[14 * Database.TRUTH_DUNGEON_COLUMN + 42]) &&
                            (knownTileInfo2[14 * Database.TRUTH_DUNGEON_COLUMN + 44]) &&
                            (knownTileInfo2[14 * Database.TRUTH_DUNGEON_COLUMN + 46]) &&

                            (knownTileInfo2[15 * Database.TRUTH_DUNGEON_COLUMN + 38]) &&
                            (knownTileInfo2[15 * Database.TRUTH_DUNGEON_COLUMN + 39]) &&
                            (knownTileInfo2[15 * Database.TRUTH_DUNGEON_COLUMN + 40]) &&
                            (knownTileInfo2[15 * Database.TRUTH_DUNGEON_COLUMN + 41]) &&
                            (knownTileInfo2[15 * Database.TRUTH_DUNGEON_COLUMN + 42]) &&
                            (knownTileInfo2[15 * Database.TRUTH_DUNGEON_COLUMN + 43]) &&
                            (knownTileInfo2[15 * Database.TRUTH_DUNGEON_COLUMN + 44]) &&
                            (knownTileInfo2[15 * Database.TRUTH_DUNGEON_COLUMN + 45]) &&
                            (knownTileInfo2[15 * Database.TRUTH_DUNGEON_COLUMN + 46]) &&

                            (knownTileInfo2[16 * Database.TRUTH_DUNGEON_COLUMN + 38]) &&
                            (knownTileInfo2[16 * Database.TRUTH_DUNGEON_COLUMN + 40]) &&
                            (knownTileInfo2[16 * Database.TRUTH_DUNGEON_COLUMN + 42]) &&
                            (knownTileInfo2[16 * Database.TRUTH_DUNGEON_COLUMN + 44]) &&
                            (knownTileInfo2[16 * Database.TRUTH_DUNGEON_COLUMN + 46]) &&

                            (knownTileInfo2[17 * Database.TRUTH_DUNGEON_COLUMN + 38]) &&
                            (knownTileInfo2[17 * Database.TRUTH_DUNGEON_COLUMN + 39]) &&
                            (knownTileInfo2[17 * Database.TRUTH_DUNGEON_COLUMN + 40]) &&
                            (knownTileInfo2[17 * Database.TRUTH_DUNGEON_COLUMN + 41]) &&
                            (knownTileInfo2[17 * Database.TRUTH_DUNGEON_COLUMN + 42]) &&
                            (knownTileInfo2[17 * Database.TRUTH_DUNGEON_COLUMN + 43]) &&
                            (knownTileInfo2[17 * Database.TRUTH_DUNGEON_COLUMN + 44]) &&
                            (knownTileInfo2[17 * Database.TRUTH_DUNGEON_COLUMN + 45]) &&
                            (knownTileInfo2[17 * Database.TRUTH_DUNGEON_COLUMN + 46]) &&

                            (knownTileInfo2[18 * Database.TRUTH_DUNGEON_COLUMN + 38]) &&
                            (knownTileInfo2[18 * Database.TRUTH_DUNGEON_COLUMN + 40]) &&
                            (knownTileInfo2[18 * Database.TRUTH_DUNGEON_COLUMN + 42]) &&
                            (knownTileInfo2[18 * Database.TRUTH_DUNGEON_COLUMN + 44]) &&
                            (knownTileInfo2[18 * Database.TRUTH_DUNGEON_COLUMN + 46]) &&

                            (knownTileInfo2[19 * Database.TRUTH_DUNGEON_COLUMN + 38]) &&
                            (knownTileInfo2[19 * Database.TRUTH_DUNGEON_COLUMN + 39]) &&
                            (knownTileInfo2[19 * Database.TRUTH_DUNGEON_COLUMN + 40]) &&
                            (knownTileInfo2[19 * Database.TRUTH_DUNGEON_COLUMN + 41]) &&
                            (knownTileInfo2[19 * Database.TRUTH_DUNGEON_COLUMN + 42]) &&
                            (knownTileInfo2[19 * Database.TRUTH_DUNGEON_COLUMN + 43]) &&
                            (knownTileInfo2[19 * Database.TRUTH_DUNGEON_COLUMN + 44]) &&
                            (knownTileInfo2[19 * Database.TRUTH_DUNGEON_COLUMN + 45]) &&
                            (knownTileInfo2[19 * Database.TRUTH_DUNGEON_COLUMN + 46]) &&
                            !we.dungeonEvent229)
                        {
                            we.dungeonEvent229 = true;
                            if (!we.dungeonEvent228)
                            {
                                we.dungeonEvent228 = true;
                                UpdateMainMessage("アイン：ん、看板があるな。");

                                UpdateMainMessage("　　　　『  正しき順序、正しき道筋を示せ。  』");
                            }

                            UpdateMainMessage("ラナ：数字が床に刻まれていたわね。");

                            UpdateMainMessage("アイン：おっ、ラナ。ひょっとして何か分かったのか？");

                            UpdateMainMessage("ランディス：（ッオイ、てめぇ）");

                            UpdateMainMessage("アイン：（んだよ、良いじゃねえか）");

                            UpdateMainMessage("ラナ：床にある数字があるじゃない？　あれを順序良く踏んで行けば良いのよ♪");

                            UpdateMainMessage("アイン：俺はこういう「正しき」って表現はぜんっぜん駄目だ。");

                            UpdateMainMessage("アイン：ここはお前に任せたぜ、ラナ。");

                            UpdateMainMessage("ラナ：失敗しても文句言わないでよね？");

                            UpdateMainMessage("アイン：良いって良いって。じゃあ、頼んだぜ！");

                            we.dungeonEvent230_0 = true;
                            we.dungeonEvent230_01 = false;
                            we.dungeonEvent230_1 = false;
                            we.dungeonEvent230_11 = false;
                            we.dungeonEvent230_12 = false;
                            we.dungeonEvent230_2 = false;
                            we.dungeonEvent230_21 = false;
                            we.dungeonEvent230_3 = false;
                            we.dungeonEvent230_31 = false;
                            we.dungeonEvent230_32 = false;
                            we.dungeonEvent230_4 = false;
                            we.dungeonEvent230_41 = false;
                            we.dungeonEvent230_42 = false;
                            we.dungeonEvent230_5 = false;
                            we.dungeonEvent230_51 = false;
                            we.dungeonEvent230_52 = false;
                            we.dungeonEvent230_6 = false;
                            we.dungeonEvent230_61 = false;
                            we.dungeonEvent230_62 = false;
                            we.dungeonEvent230_63 = false;
                            we.dungeonEvent230_64 = false;
                            we.dungeonEvent230_7 = false;
                            we.dungeonEvent230_71 = false;
                            we.dungeonEvent230_72 = false;
                            we.dungeonEvent230_8 = false;
                        }
                        else
                        {
                            if (!we.dungeonEvent228)
                            {
                                we.dungeonEvent228 = true;
                                UpdateMainMessage("アイン：ん、看板があるな。");

                                UpdateMainMessage("　　　　『  正しき順序、正しき道筋を示せ。  』");

                                UpdateMainMessage("アイン：正しき順序・・・か・・・");

                                UpdateMainMessage("ラナ：ねえ、周りを探索してみない？このままじゃ分からないわよ。");

                                UpdateMainMessage("アイン：ああ、そうだな。");
                            }
                            else
                            {
                                UpdateMainMessage("　　　　『  正しき順序、正しき道筋を示せ。  』", true);
                            }

                            we.dungeonEvent230_0 = true;
                            we.dungeonEvent230_01 = false;
                            we.dungeonEvent230_1 = false;
                            we.dungeonEvent230_11 = false;
                            we.dungeonEvent230_12 = false;
                            we.dungeonEvent230_2 = false;
                            we.dungeonEvent230_21 = false;
                            we.dungeonEvent230_3 = false;
                            we.dungeonEvent230_31 = false;
                            we.dungeonEvent230_32 = false;
                            we.dungeonEvent230_4 = false;
                            we.dungeonEvent230_41 = false;
                            we.dungeonEvent230_42 = false;
                            we.dungeonEvent230_5 = false;
                            we.dungeonEvent230_51 = false;
                            we.dungeonEvent230_52 = false;
                            we.dungeonEvent230_6 = false;
                            we.dungeonEvent230_61 = false;
                            we.dungeonEvent230_62 = false;
                            we.dungeonEvent230_63 = false;
                            we.dungeonEvent230_64 = false;
                            we.dungeonEvent230_7 = false;
                            we.dungeonEvent230_71 = false;
                            we.dungeonEvent230_72 = false;
                            we.dungeonEvent230_8 = false;
                        }
                        break;
                    #endregion
                    #region "知の部屋、正しき順序フラグ"
                    case 18:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && !we.dungeonEvent230_01)
                            {
                                we.dungeonEvent230_01 = true;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;
                    case 19:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                !we.dungeonEvent230_1)
                            {
                                we.dungeonEvent230_1 = true;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;
                    case 20:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && !we.dungeonEvent230_11)
                            {
                                we.dungeonEvent230_11 = true;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;
                    case 21:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && !we.dungeonEvent230_12)
                            {
                                we.dungeonEvent230_12 = true;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;
                    case 22:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                !we.dungeonEvent230_2)
                            {
                                we.dungeonEvent230_2 = true;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;
                    case 23:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && !we.dungeonEvent230_21)
                            {
                                we.dungeonEvent230_21 = true;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;
                    case 24:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                !we.dungeonEvent230_3)
                            {
                                we.dungeonEvent230_3 = true;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;
                    case 25:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && !we.dungeonEvent230_31)
                            {
                                we.dungeonEvent230_31 = true;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 26:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && !we.dungeonEvent230_32)
                            {
                                we.dungeonEvent230_32 = true;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 27:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                !we.dungeonEvent230_4)
                            {
                                we.dungeonEvent230_4 = true;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 28:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && !we.dungeonEvent230_41)
                            {
                                we.dungeonEvent230_41 = true;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 29:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && !we.dungeonEvent230_42)
                            {
                                we.dungeonEvent230_42 = true;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 30:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                !we.dungeonEvent230_5)
                            {
                                we.dungeonEvent230_5 = true;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 31:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                we.dungeonEvent230_5 && !we.dungeonEvent230_51)
                            {
                                we.dungeonEvent230_51 = true;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 32:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                we.dungeonEvent230_5 && we.dungeonEvent230_51 && !we.dungeonEvent230_52)
                            {
                                we.dungeonEvent230_52 = true;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 33:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                we.dungeonEvent230_5 && we.dungeonEvent230_51 && we.dungeonEvent230_52 &&
                                !we.dungeonEvent230_6)
                            {
                                we.dungeonEvent230_6 = true;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 34:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                we.dungeonEvent230_5 && we.dungeonEvent230_51 && we.dungeonEvent230_52 &&
                                we.dungeonEvent230_6 && !we.dungeonEvent230_61)
                            {
                                we.dungeonEvent230_61 = true;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 35:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                we.dungeonEvent230_5 && we.dungeonEvent230_51 && we.dungeonEvent230_52 &&
                                we.dungeonEvent230_6 && we.dungeonEvent230_61 && !we.dungeonEvent230_62)
                            {
                                we.dungeonEvent230_62 = true;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 36:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                we.dungeonEvent230_5 && we.dungeonEvent230_51 && we.dungeonEvent230_52 &&
                                we.dungeonEvent230_6 && we.dungeonEvent230_61 && we.dungeonEvent230_62 && !we.dungeonEvent230_63)
                            {
                                we.dungeonEvent230_63 = true;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 37:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                we.dungeonEvent230_5 && we.dungeonEvent230_51 && we.dungeonEvent230_52 &&
                                we.dungeonEvent230_6 && we.dungeonEvent230_61 && we.dungeonEvent230_62 && we.dungeonEvent230_63 && !we.dungeonEvent230_64)
                            {
                                we.dungeonEvent230_64 = true;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 38:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                we.dungeonEvent230_5 && we.dungeonEvent230_51 && we.dungeonEvent230_52 &&
                                we.dungeonEvent230_6 && we.dungeonEvent230_61 && we.dungeonEvent230_62 && we.dungeonEvent230_63 && we.dungeonEvent230_64 &&
                                !we.dungeonEvent230_7)
                            {
                                we.dungeonEvent230_7 = true;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 39:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                we.dungeonEvent230_5 && we.dungeonEvent230_51 && we.dungeonEvent230_52 &&
                                we.dungeonEvent230_6 && we.dungeonEvent230_61 && we.dungeonEvent230_62 && we.dungeonEvent230_63 && we.dungeonEvent230_64 &&
                                we.dungeonEvent230_7 && !we.dungeonEvent230_71)
                            {
                                we.dungeonEvent230_71 = true;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;

                    case 40:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                we.dungeonEvent230_5 && we.dungeonEvent230_51 && we.dungeonEvent230_52 &&
                                we.dungeonEvent230_6 && we.dungeonEvent230_61 && we.dungeonEvent230_62 && we.dungeonEvent230_63 && we.dungeonEvent230_64 &&
                                we.dungeonEvent230_7 && we.dungeonEvent230_71 && !we.dungeonEvent230_72)
                            {
                                we.dungeonEvent230_72 = true;
                                we.dungeonEvent230_8 = false;
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;
                    #endregion
                    #region "知の部屋、正しき順序解答"
                    case 41:
                        if (we.dungeonEvent229 && !we.dungeonEvent230)
                        {
                            if (we.dungeonEvent230_0 && we.dungeonEvent230_01 &&
                                we.dungeonEvent230_1 && we.dungeonEvent230_11 && we.dungeonEvent230_12 &&
                                we.dungeonEvent230_2 && we.dungeonEvent230_21 &&
                                we.dungeonEvent230_3 && we.dungeonEvent230_31 && we.dungeonEvent230_32 &&
                                we.dungeonEvent230_4 && we.dungeonEvent230_41 && we.dungeonEvent230_42 &&
                                we.dungeonEvent230_5 && we.dungeonEvent230_51 && we.dungeonEvent230_52 &&
                                we.dungeonEvent230_6 && we.dungeonEvent230_61 && we.dungeonEvent230_62 && we.dungeonEvent230_63 && we.dungeonEvent230_64 &&
                                we.dungeonEvent230_7 && we.dungeonEvent230_71 && we.dungeonEvent230_72 &&
                                !we.dungeonEvent230_8)
                            {
                                we.dungeonEvent230_8 = true;
                                we.dungeonEvent230 = true;

                                UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");
                                blueWallLeft[15 * Database.TRUTH_DUNGEON_COLUMN + 47] = false;
                                blueWallRight[15 * Database.TRUTH_DUNGEON_COLUMN + 46] = false;
                                blueWallLeft[2 * Database.TRUTH_DUNGEON_COLUMN + 50] = false;
                                blueWallRight[2 * Database.TRUTH_DUNGEON_COLUMN + 49] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：やったわ！　正解だったみたいね♪");

                                UpdateMainMessage("アイン：やるじゃねえか！　今のどういう仕組みだったんだよ？");

                                UpdateMainMessage("ラナ：簡単よ、１〜８までの数字タイルを順序良く踏めば良かったのよ♪");

                                UpdateMainMessage("アイン：へえ、なるほどな・・・確かにそういやそうだな。");

                                UpdateMainMessage("ラナ：あっ、ホラホラ。こっちに何かあるわよ。");

                                UpdateMainMessage("アイン：本当だな。どれどれ？");

                                UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);

                                UpdateMainMessage("アイン：ん？　これは・・・？");

                                GetTreasure(Database.RARE_SOUJUTENSHI_NO_GOFU, true);

                                UpdateMainMessage("アイン：何だこれ・・・");

                                UpdateMainMessage("ラナ：あっ♪　蒼授天使の護符じゃない、やったわねアイン♪");

                                UpdateMainMessage("アイン：何だ知ってるのかよ？");

                                UpdateMainMessage("ラナ：って、知らないアンタの方がどーかしてるわよ・・・");

                                UpdateMainMessage("ラナ：ウェクスラー大陸では、このシリーズ物は有名でしょ？");

                                UpdateMainMessage("アイン：いや、俺そういうの全然知らないんだって、教えてくれよ？");

                                UpdateMainMessage("ラナ：ホンット疎いわねそういうの・・・ハアアアァァァ・・・");

                                UpdateMainMessage("ラナ：この大陸には、神の使い手として４種の天使が遣わされた");

                                UpdateMainMessage("ラナ：炎授天使、蒼授天使、断罪天使、珀流天使");

                                UpdateMainMessage("ラナ：今回見つけたのは、その中の蒼授天使。");

                                UpdateMainMessage("ラナ：蒼授天使さまは我々に大気・生命・水の恩恵を与えてくれてるわけよ。");

                                UpdateMainMessage("アイン：へえそうなんだ。　全然知らなかったぜ。");

                                UpdateMainMessage("ラナ：バカアインは勉強もそうだけど、もう少し世の中の事を知った方が良いわよ。");

                                UpdateMainMessage("アイン：あ、ああ。分かったわかった。");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：ッカッカッカ、小娘。その雰囲気じゃ、今の話も右から左になってるぞ。");

                                    UpdateMainMessage("ラナ：っえ！？そうなんですか！？　ちょっとアイン！？");

                                    UpdateMainMessage("アイン：い、いやいや！　聞いてます、聞いてますって。");
                                }

                                UpdateMainMessage("アイン：ま、まあ何かしらの防衛的効果が高いって話だよな？");

                                UpdateMainMessage("ラナ：ハアアァァ・・・");
                            }
                            else
                            {
                                we.dungeonEvent230_0 = false;
                                we.dungeonEvent230_01 = false;
                                we.dungeonEvent230_1 = false;
                                we.dungeonEvent230_11 = false;
                                we.dungeonEvent230_12 = false;
                                we.dungeonEvent230_2 = false;
                                we.dungeonEvent230_21 = false;
                                we.dungeonEvent230_3 = false;
                                we.dungeonEvent230_31 = false;
                                we.dungeonEvent230_32 = false;
                                we.dungeonEvent230_4 = false;
                                we.dungeonEvent230_41 = false;
                                we.dungeonEvent230_42 = false;
                                we.dungeonEvent230_5 = false;
                                we.dungeonEvent230_51 = false;
                                we.dungeonEvent230_52 = false;
                                we.dungeonEvent230_6 = false;
                                we.dungeonEvent230_61 = false;
                                we.dungeonEvent230_62 = false;
                                we.dungeonEvent230_63 = false;
                                we.dungeonEvent230_64 = false;
                                we.dungeonEvent230_7 = false;
                                we.dungeonEvent230_71 = false;
                                we.dungeonEvent230_72 = false;
                                we.dungeonEvent230_8 = false;
                            }
                        }
                        break;
                    #endregion
                    #region "技の部屋、エリアＡ"
                    case 45:
                        if (!we.dungeonEvent233)
                        {
                            we.dungeonEvent233 = true;

                            UpdateMainMessage("アイン：看板があるぜ。なになに？");

                            UpdateMainMessage("　　　　『  財宝を求める挑戦者、俊足を持って挑め。』");

                            UpdateMainMessage("アイン：おっしゃ、来たぜ！　お宝だ！！");

                            UpdateMainMessage("ラナ：なんだか、ありきたりな内容ね。");

                            UpdateMainMessage("ラナ：挑戦者って事は・・・誰か一人選ぶって事かしら？");

                            UpdateMainMessage("アイン：じゃ、頼んだぜ、ラナ！　ッハッハッハ！");

                            UpdateMainMessage("ラナ：っちょ、何で私なわけ？");

                            UpdateMainMessage("ラナ：こういうのは、バカアインが適役じゃないかしら♪");

                            UpdateMainMessage("アイン：マジかよ？　俺は絶対ラナの方が良いと思うんだが。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ラナ：ランディスさんは、どちらが行くのが適任だと思いますか？");

                                UpdateMainMessage("アイン：っあ！！");

                                UpdateMainMessage("ランディス：ザコが先頭切っていく。　当然だろ。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：私はこういう挑戦とかそういった類は苦手なのよ。");
                            }

                            UpdateMainMessage("アイン：ッグ・・・はいはい、分かりましたよ。　俺が行きますよ。");

                            UpdateMainMessage("ラナ：っよし、決まりね♪　応援してるわ♪");

                            UpdateMainMessage("アイン：要は、サクサクと進めって事だろ？　やってやるさ！");

                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  挑戦者、俊足を持って挑め。』", true);
                        }
                        if (!we.dungeonEvent233_Complete)
                        {
                            agilityRoomTimer.Stop();
                        }
                        break;

                    case 46:
                        if (!we.dungeonEvent233_Complete)
                        {
                            agilityRoomTimer.Stop();
                            agilityRoomTimer.Interval = 90;
                            agilityRoomTimer.Start();
                        }
                        else
                        {
                            EncountEnemy();
                        }
                        break;

                    case 47:
                        if (!we.dungeonEvent233_Complete)
                        {
                            agilityRoomTimer.Stop();
                            we.dungeonEvent233_Complete = true;

                            UpdateMainMessage("　　　　『　ピンポン　ピンポン　』");

                            UpdateMainMessage("アイン：っしゃ！！");

                            UpdateMainMessage("アイン：どうだ見たか！？　俺のスーパーダッシュ！！");

                            if (!we.dungeonEvent233_Fail1 && !we.dungeonEvent233_Fail2 && !we.dungeonEvent233_Fail3)
                            {
                                UpdateMainMessage("ラナ：すごいじゃない！！　よくあんな早く動けたわね？");

                                UpdateMainMessage("アイン：まあな。これも日々精進していた結果さ！　ハッハッハ！");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：くだらねぇトコで自慢してんじゃねえ。");

                                    UpdateMainMessage("アイン：たまには良いじゃねえか。　ッハッハッハ！");
                                }

                                UpdateMainMessage("アイン：よし、クリアしたわけだ。さっさとお宝ゲットしようぜ！！");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：何言ってんのよ。結構失敗してたじゃない。");

                                UpdateMainMessage("アイン：いやいや、さすがに最初は分からなかったけどな。");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：やるんなら１発で解け。");

                                    UpdateMainMessage("アイン：分かったって。　ったく、手厳しいよな。");
                                }

                                UpdateMainMessage("アイン：よし、クリアしたわけだ。さっさとお宝ゲットしようぜ！！");
                            }
                        }
                        break;
                    #endregion
                    #region "技の部屋、エリアＢ"
                    case 48:
                        if (!we.dungeonEvent234)
                        {
                            we.dungeonEvent234 = true;
                            UpdateMainMessage("アイン：看板があるぜ。読んでみるか。");

                            UpdateMainMessage("　　　　『  財宝を求める挑戦者、即断即決を持って挑め。』");

                            UpdateMainMessage("ラナ：即断即決って、これも何だかありきたりね。");

                            UpdateMainMessage("アイン：１タイル進む毎に判断を煽るような内容じゃねえだろうな？");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：冴えてるじゃねぇか。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：多分そんな所じゃないかしら♪");
                            }

                            UpdateMainMessage("アイン：じゃあ、誰が行くかだが・・・");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディスとラナ：『ザコ（バカ）アインで決定』");

                                UpdateMainMessage("アイン：何でそんなトコでハモってんだよ・・・");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：バカアインで決定♪");
                            }

                            UpdateMainMessage("アイン：くそぉ・・・有無を言わさずだな。");

                            UpdateMainMessage("ラナ：良いじゃない、アインお宝好きなんだし♪");

                            UpdateMainMessage("アイン：まあ、そうだな。　っじゃ、俺が行くか！！");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  財宝を求める挑戦者、即断即決を持って挑め。』", true);
                        }
                        if (!we.dungeonEvent234_Complete)
                        {
                            this.ShadowTileNumber = -1;
                            this.BeforeDirectionNumber = 0;
                            agilityRoomTimer.Stop();
                        }
                        break;

                    case 49:
                        if (!we.dungeonEvent234_Complete)
                        {
                            agilityRoomTimer.Stop();

                            if (!JudgeCorrectDirection())
                            {
                                DungeonTwoAgilityRoomTwoFailMessage();


                                return true;
                            }

                            int tileNum = GetTileNumber(this.Player.Location);
                            int row = tileNum / Database.TRUTH_DUNGEON_COLUMN;

                            // 1:左 2:上 3:下
                            int direction = AP.Math.RandomInteger(3) + 1;
                            if (direction == 1)
                            {
                                UpdateMainMessage("左 ！", true);
                                this.BeforeDirectionNumber = 1;
                            }
                            else if (direction == 2)
                            {
                                if (row == 26)
                                {
                                    UpdateMainMessage("下 ！", true);
                                    this.BeforeDirectionNumber = 3;
                                }
                                else
                                {
                                    UpdateMainMessage("上 ！", true);
                                    this.BeforeDirectionNumber = 2;
                                }
                            }
                            else
                            {
                                if (row == 28)
                                {
                                    UpdateMainMessage("上 ！", true);
                                    this.BeforeDirectionNumber = 2;
                                }
                                else
                                {
                                    UpdateMainMessage("下 ！", true);
                                    this.BeforeDirectionNumber = 3;
                                }
                            }
                            this.ShadowTileNumber = GetTileNumber(this.Player.Location);

                            if (!we.dungeonEvent234_Fail1)
                            {
                                agilityRoomTimer.Interval = 500;
                            }
                            else if (!we.dungeonEvent234_Fail2)
                            {
                                agilityRoomTimer.Interval = 750;
                            }
                            else if (!we.dungeonEvent234_Fail3)
                            {
                                agilityRoomTimer.Interval = 1000;
                            }
                            else
                            {
                                agilityRoomTimer.Interval = 1500;
                            }
                            agilityRoomTimer.Start();
                        }
                        else
                        {
                            EncountEnemy();
                        }
                        break;
                    case 50:
                        if (!we.dungeonEvent234_Complete)
                        {
                            agilityRoomTimer.Stop();
                            we.dungeonEvent234_Complete = true;

                            UpdateMainMessage("　　　　『　ピンポン　ピンポン　』");

                            UpdateMainMessage("アイン：よっしゃ、クリアー！！");

                            UpdateMainMessage("アイン：見てたか！？　この見事な素早く的確な判断力！！");

                            UpdateMainMessage("ラナ：正直な所、忙しなく動いてるようには見えたけど・・・");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：良いザコっぷりだった。　たいしたもんだ。");
                            }

                            UpdateMainMessage("アイン：くそお・・・しょうがねえだろ？　あんな風に動くしかねえんだから。");

                            UpdateMainMessage("アイン：っまあ良いか！　さて、お宝お宝っと！　ッハッハッハ！！");
                        }
                        break;
                    #endregion
                    #region "技の部屋、エリアＣ"
                    case 51:
                        if (!we.dungeonEvent235)
                        {
                            we.dungeonEvent235 = true;
                            UpdateMainMessage("アイン：次々と看板が出てくるな。");

                            UpdateMainMessage("ラナ：読んでみるわね。");

                            UpdateMainMessage("　　　　『  財宝を求める挑戦者、呼吸を置かずして挑め。』");

                            UpdateMainMessage("アイン：呼吸を置かずって・・・");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("　　　『ドバキィィィ！！！』（ラナのスラッシングキックが飛んだ）");

                            UpdateMainMessage("アイン：イッツツツ・・・しかし、どういう意味だよ。");

                            UpdateMainMessage("ラナ：息を止めて進めって事だと、技らしく無いわよね。");

                            UpdateMainMessage("アイン：まあ、いいや！！");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：分かったのかよ。");

                                UpdateMainMessage("アイン：ああ、分かったぜ！！");
                            }

                            UpdateMainMessage("ラナ：本当？　何かそのノリひょっとして・・・");

                            UpdateMainMessage("アイン：大丈夫大丈夫、ここは任せておけって！");

                            UpdateMainMessage("アイン：じゃあ、行ってくるぜ！　ッハッハッハ！");

                            UpdateMainMessage("ラナ：どこに行くのかしら・・・ハアアァァァ・・・");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  財宝を求める挑戦者、呼吸を置かずして挑め。』", true);
                        }
                        if (!we.dungeonEvent235_Complete)
                        {
                            agilityRoomTimer.Stop();
                        }
                        break;

                    case 52:
                        if (!we.dungeonEvent235_Complete)
                        {
                            agilityRoomTimer.Stop();
                            agilityRoomTimer.Interval = 100;
                            agilityRoomTimer.Start();
                        }
                        else
                        {
                            EncountEnemy();
                        }
                        break;

                    case 53:
                        if (!we.dungeonEvent235_Complete)
                        {
                            agilityRoomTimer.Stop();
                            we.dungeonEvent235_Complete = true;

                            UpdateMainMessage("　　　　『　ピンポン　ピンポン　』");

                            UpdateMainMessage("アイン：よっしゃ、クリアー！！");

                            UpdateMainMessage("アイン：見てだろ！？　俺のこの呼吸のしなさっぷり！！");

                            if (!we.dungeonEvent235_Fail1 && !we.dungeonEvent235_Fail2 && !we.dungeonEvent235_Fail3)
                            {
                                UpdateMainMessage("ラナ：へぇ、一発クリアって事はホントに理解してたのね♪");

                                UpdateMainMessage("アイン：当たり前だろ？　このぐらい当然さ！");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：どぉでも良い内容には、能力を発揮できるみてぇだな。");

                                    UpdateMainMessage("アイン：ああ！どうでも良い内容なら任せとけ！！");

                                    UpdateMainMessage("ラナ：微妙に自慢セリフになってないわよ・・・");
                                }

                                UpdateMainMessage("アイン：ッハッハッハッハ！！");

                                UpdateMainMessage("ラナ：調子に乗っちゃって、変なバカが深化しなきゃ良いけど・・・");

                                UpdateMainMessage("アイン：っさ！　続けて、お宝っと！　ッハッハッハ！！");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：しなさっぷりって・・・");

                                UpdateMainMessage("アイン：まあ、ちょっと失敗したけどな。結果オーライで！");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：何でも１発で決めろよ？　わかったな。");

                                    UpdateMainMessage("アイン：あ、ああ。了解了解！");
                                }

                                UpdateMainMessage("アイン：っさてと！　続けて、お宝だ！　ッハッハッハ！！");
                            }
                        }
                        break;
                    #endregion
                    #region "技の部屋、エリアＤ"
                    case 54:
                        if (!we.dungeonEvent236)
                        {
                            we.dungeonEvent236 = true;

                            UpdateMainMessage("アイン：っしゃ、看板だぜ！　お宝お宝っと！！");

                            UpdateMainMessage("　　　　『  財宝を求める挑戦者、浮き上がる道筋を探し求めよ。』");

                            UpdateMainMessage("アイン：っしゃ！　オーケーオーケー！");

                            UpdateMainMessage("ラナ：何がオーケーなのよ？");

                            UpdateMainMessage("アイン：浮き上がってくるんだろ？楽勝さ！　ッハッハッハ！");

                            UpdateMainMessage("ラナ：調子に乗りまくっちゃって・・・大丈夫なのかしら。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：放っておけ。　もともとコイツはこんなもんだ。");
                            }

                            UpdateMainMessage("アイン：ここまでやってきてんだ、もう何でもオッケーさ！");

                            UpdateMainMessage("アイン：今回も俺だよな？　じゃ、早速行ってくるぜ！");

                            UpdateMainMessage("ラナ：失敗しても面倒見ないからね。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  財宝を求める挑戦者、浮き上がる道筋を探し求めよ。』", true);
                        }
                        if (!we.dungeonEvent236_Complete)
                        {
                            agilityRoomTimer.Stop();
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 36].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_26);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 41].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 42].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 43].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 44].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_30);

                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 36].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 41].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 42].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 43].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 44].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);

                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 36].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_17);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 41].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 42].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 43].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 44].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_22);

                            dungeonField.Invalidate();
                        }
                        if (!we.dungeonEvent236_Complete)
                        {
                            this.Area4_InnerTimerCount = 0;
                            this.Area4_ShadowTileNum = -1;
                            agilityRoomTimer.Stop();
                        }

                        break;
                    case 55:
                        if (!we.dungeonEvent236_Complete)
                        {
                            UpdateUnknownTileArea27();

                            agilityRoomTimer.Stop();
                            agilityRoomTimer.Interval = 10;
                            agilityRoomTimer.Start();
                        }
                        else
                        {
                            EncountEnemy();
                        }
                        break;
                    case 56:
                        if (!we.dungeonEvent236_Complete)
                        {
                            we.dungeonEvent236_Complete = true;

                            agilityRoomTimer.Stop();
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 36].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_26);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 41].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 42].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 43].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            dungeonTile[33 * Database.TRUTH_DUNGEON_COLUMN + 44].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);

                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 36].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 41].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 42].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 43].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 44].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);

                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 36].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_17);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 41].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 42].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 43].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
                            dungeonTile[35 * Database.TRUTH_DUNGEON_COLUMN + 44].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);

                            dungeonField.Invalidate();


                            UpdateMainMessage("　　　　『　ピンポン　ピンポン　』");

                            UpdateMainMessage("アイン：おおおおし、クリアー！！");

                            UpdateMainMessage("アイン：きたきたきた！　俺のこの浮かれ上がりっぷりを見たか！！");

                            if (!we.dungeonEvent235_Fail1 && !we.dungeonEvent235_Fail2 && !we.dungeonEvent235_Fail3)
                            {
                                UpdateMainMessage("ラナ：喜び方間違えてるけど・・・でも、大したものね♪");

                                UpdateMainMessage("アイン：まあ、見えた瞬間を狙うだけだったからな。");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：ほぉ、謙虚だな。");

                                    UpdateMainMessage("アイン：ハハハ・・・まあ、なんとなくな。");
                                }

                                UpdateMainMessage("ラナ：ねえ、エリアの感覚からすると、次がラストみたいよ。");

                                UpdateMainMessage("アイン：おし、待ってろよ、最後のお宝！");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：確かにその浮かれっぷりは異常よね。");

                                UpdateMainMessage("アイン：浮かれてなんかいねえさ。");

                                UpdateMainMessage("アイン：全てはお宝のためさ！");

                                UpdateMainMessage("アイン：ハーッハッハッハッハ！");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：何度も失敗してたヤツが自慢してんじゃねぇ。　しばくぞ。");

                                    UpdateMainMessage("アイン：わ、わりいわりぃ・・・ハハハ・・・");
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：ちょっと、ホントいい加減にしてよね。ミスしてたくせに。");

                                    UpdateMainMessage("アイン：っとと・・・わりいわりぃ・・・ハハ");
                                }

                                UpdateMainMessage("ラナ：ねえ、エリアの感覚からすると、次がラストみたいよ。");

                                UpdateMainMessage("アイン：おし、待ってろよ、最後のお宝！");
                            }

                        }
                        break;
                    #endregion
                    #region "技の部屋、エリアＥ
                    case 57:
                        if (!we.dungeonEvent237)
                        {
                            we.dungeonEvent237 = true;

                            UpdateMainMessage("アイン：これで最後の看板ってワケだな。　っしゃ、何でも来い！");

                            UpdateMainMessage("　　　　『  財宝を求める挑戦者、神速で駆け巡れ。』");

                            UpdateMainMessage("【　アイン達の前方マップに光が照らされた　】");

                            UpdateUnknownTileArea28();

                            UpdateMainMessage("【　透明な壁が張られており、ゴールまで目視ができるようになった　】");

                            UpdateMainMessage("アイン：・・・ッハッハッハッハッハ！");

                            UpdateMainMessage("アイン：良いじゃねえかこれ！　っな！？");

                            UpdateMainMessage("ラナ：何かアイン、調子おかしくない？");

                            UpdateMainMessage("アイン：そうか？いつもと同じノリだろ！");

                            UpdateMainMessage("アイン：まあ、任せておけって！　ッハッハッハ！");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ラナ：何か妙にハイテンションだけど");

                                UpdateMainMessage("ラナ：あんな雰囲気のバカは見たこと無いわね。");

                                UpdateMainMessage("ランディス：ああ見えて、楽しんでるんだろ。");

                                UpdateMainMessage("ラナ：お宝目当てが効いてるんですかね？");

                                UpdateMainMessage("ランディス：さぁな。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：((( アインってあんな雰囲気にもなるんだ・・・)))");

                                UpdateMainMessage("アイン：オーイ、そこでちゃんと見てろよ！");

                                UpdateMainMessage("ラナ：ハイハイ、とっととコケて落ちて来なさいよ。");
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  財宝を求める挑戦者、神速で駆け巡れ。』", true);
                        }
                        if (!we.dungeonEvent237_Complete)
                        {
                            agilityRoomTimer.Stop();
                        }
                        break;
                    case 58:
                        if (!we.dungeonEvent237_Complete)
                        {
                            UpdateUnknownTileArea28();
                            agilityRoomTimer.Stop();
                            if (we.dungeonEvent237_Fail3)
                            {
                                agilityRoomTimer.Interval = 4700;
                            }
                            else if (we.dungeonEvent237_Fail2)
                            {
                                agilityRoomTimer.Interval = 4400;
                            }
                            else if (we.dungeonEvent237_Fail1)
                            {
                                agilityRoomTimer.Interval = 4100;
                            }
                            else
                            {
                                agilityRoomTimer.Interval = 3800;
                            }
                            agilityRoomTimer.Start();
                        }
                        else
                        {
                            EncountEnemy();
                        }
                        break;
                    case 59:
                        if (!we.dungeonEvent237_Complete)
                        {
                            we.dungeonEvent237_Complete = true;
                            agilityRoomTimer.Stop();

                            UpdateMainMessage("　　　　『　ピンポン　ピンポン　』");

                            UpdateMainMessage("アイン：っしゃあぁ！　クリアー！！");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("アイン：やったぜ！ラナ！師匠！ ッハッハッハ！");

                                UpdateMainMessage("ランディス：暑苦しい。離れろ。");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：やったぜ！ラナ！　ッハッハッハ！");

                                UpdateMainMessage("ラナ：物凄い喜びっぷりね。　まあオメデト♪");
                            }

                            UpdateMainMessage("ラナ：でも、そんなにお宝が欲しかったわけ？");

                            UpdateMainMessage("アイン：ええ？ああ、いやいや、まあそれもあるが");

                            UpdateMainMessage("アイン：何か楽しかったぜ、ココ。");

                            UpdateMainMessage("ラナ：ふ〜ん、そうなんだ。　ちょっと意外だったわ。");

                            UpdateMainMessage("ラナ：っで、お宝は良いわけ？");

                            UpdateMainMessage("アイン：っあ、そうだった！　おっ宝お宝！！");

                            UpdateMainMessage("アイン：ッハッハッハ！");
                        }
                        break;
                    case 109:
                        // 何も記載してないが、これで戦闘発生を回避する
                        break;
                    #endregion
                    #region "技の部屋、エリアＦ（最後一個前）"
                    case 60:
                        if (!we.dungeonEvent257)
                        {
                            we.dungeonEvent257 = true;

                            UpdateMainMessage("アイン：っお！？まだ看板があるじゃねえか。ひょっとして！！");

                            UpdateMainMessage("　　　　『  財宝以外を求める挑戦者、次の部屋へ』");

                            UpdateMainMessage("アイン：んだ、これ・・・財宝以外？");

                            UpdateMainMessage("ラナ：もう財宝は無いって事かしら？");

                            UpdateMainMessage("アイン：そうなのかも・・・（ガックリ）");

                            UpdateMainMessage("ラナ：かもって・・・諦めが悪いわね。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：・・・てめぇはどう思ってんだ、その看板。");

                                UpdateMainMessage("アイン：どう思うと言われても、どうもこうも・・・");

                                UpdateMainMessage("アイン：次の部屋って事はもう・・・");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：いや・・・いやいやいや・・・");

                                UpdateMainMessage("ラナ：意外としぶといわね。何か思いついた？");

                                UpdateMainMessage("アイン：次の部屋・・・次の部屋・・・");
                            }

                            UpdateMainMessage("アイン：！！！　待てよ！？　次の部屋！？");

                            UpdateMainMessage("アイン：ッハッハッハ！！　そのまんまじゃねえか！！");

                            UpdateMainMessage("ラナ：いきなり何笑い出してんのよ、びっくりするじゃない。");

                            UpdateMainMessage("アイン：ある！　これはまだあるぜ！");

                            UpdateMainMessage("アイン：どっかどうせこの辺だろ！？任せておけって！！");

                            UpdateMainMessage("ラナ：ま、まあそこまで言うなら・・・好きにすれば良いわよ。");

                            UpdateMainMessage("アイン：っしゃ、探索探索っと！");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  財宝以外を求める挑戦者、次の部屋へ』", true);
                        }
                        break;
                    #endregion
                    #region "心の部屋、ヒント１"
                    case 61:
                        if (!we.dungeonEvent238)
                        {
                            we.dungeonEvent238 = true;

                            UpdateUnknownTileArea29();

                            UpdateViewAndLocation(0, 12, 0, 0);
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：うぉ・・・なんだココは・・・");

                            UpdateMainMessage("ラナ：わぁ。。。奥の方が良く見えないわね。");

                            UpdateMainMessage("アイン：なんつうか・・・");

                            UpdateMainMessage("アイン：何もねえな、この部屋。");

                            UpdateMainMessage("ラナ：調べても無いのに、分かるわけ？");

                            UpdateMainMessage("アイン：いやあ、そういうわけじゃねえけどさ・・・");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：どぉするつもりだ？");

                                UpdateMainMessage("アイン：どうするったって・・・");

                                UpdateMainMessage("アイン：調べてみるしかねえよな、実際。");

                                UpdateMainMessage("ランディス：何もねぇんだろ？");

                                UpdateMainMessage("アイン：まあ、そうだと思うけどさ、実際。");

                                UpdateMainMessage("ランディス：ハッキリしろ。");

                                UpdateMainMessage("アイン：まあ、何も無いと思うんだけどさ・・・");

                                UpdateMainMessage("ランディス：ハッキリしねぇやつだな。");

                                UpdateMainMessage("ラナ：何だったら私が壁伝いに調べてみようか？");

                                UpdateMainMessage("ラナ：で、アインは中央の下壁、上壁をまんべんなく探す。");

                                UpdateMainMessage("ラナ：ランディスさんには壊せそうな薄壁を探してもらう。");

                                UpdateMainMessage("アイン：いや、良い良い。一緒に調べてみようぜ。");

                                UpdateMainMessage("ラナ：そう？　まあ、アインがそう言うんなら。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：う〜ん、何も無いなら調べる必要無いわよね。");

                                UpdateMainMessage("アイン：いや、いやいや、何かあるかもしれねえ。");

                                UpdateMainMessage("ラナ：え？だってさっき何もなさそうって。");

                                UpdateMainMessage("アイン：ああ、いやいやそう言う意味じゃねえ。");

                                UpdateMainMessage("アイン：そう思ったけどさ、実際なんかあるかもしれねえだろ？");

                                UpdateMainMessage("ラナ：う、うんまあね・・・");
                            }

                            UpdateMainMessage("アイン：じゃ、少し探索してみようぜ。");

                        }
                        break;
                    #endregion
                    #region "心の部屋、題材１"
                    case 62:
                        if (!we.dungeonEvent239)
                        {
                            we.dungeonEvent239 = true;

                            UpdateMainMessage("アイン：こういう壁とかに、何かねえのかな。");

                            UpdateMainMessage("ラナ：う〜ん、特に何もなさそうだけど・・・");

                            UpdateMainMessage("ラナ：っあ、何か変なくぼみがあるわよ？");

                            UpdateMainMessage("アイン：マジかよ！？　見せてみろ。");

                            UpdateMainMessage("アイン：・・・いや、単なるくぼみだな");

                            UpdateMainMessage("ラナ：そう・・・");

                            UpdateMainMessage("アイン：あ、いやいや！");

                            UpdateMainMessage("ラナ：良いわよ別に。そんなに気を使わなくても。");

                            UpdateMainMessage("アイン：・・・すまねえ。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：ボケが、謝ってんじゃねぇ。");

                                UpdateMainMessage("アイン：あ、あぁ・・・");
                            }

                            UpdateMainMessage("アイン：悪い。次からは気をつける。");

                            UpdateMainMessage("ラナ：良いって言ってるじゃない。");

                            UpdateMainMessage("ラナ：それよりホラ、他を探索してみましょ♪");

                            UpdateMainMessage("アイン：ああ、そうだな。");
                        }
                        break;
                    #endregion
                    #region "心の部屋、題材２"
                    case 63:
                        if (!we.dungeonEvent240)
                        {
                            we.dungeonEvent240 = true;

                            UpdateMainMessage("アイン：ん、この辺の壁、何か波の絵が書いてあるな。");

                            UpdateMainMessage("ラナ：そう？　私には何か書いてあるようには見えないけど。");

                            UpdateMainMessage("アイン：何でだよ。　ほら、ここからこう・・・連続した曲線が綺麗に・・・");

                            UpdateMainMessage("アイン：って、関係ねえか・・・");

                            UpdateMainMessage("ラナ：たまにアインって、本当のバカなのかどうか分からなくなるわよね。");

                            UpdateMainMessage("アイン：俺は断じてバカではない。");

                            UpdateMainMessage("ラナ：でも、そこの単なる壁の線が何かに見えたんでしょ？");

                            UpdateMainMessage("アイン：ま、まあそうだが・・・");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：認めちまえ。");

                                UpdateMainMessage("アイン：だっ、何を認めるってんだよ。");

                                UpdateMainMessage("アイン：何度も言うが、俺は決してバカじゃねえ。");

                                UpdateMainMessage("ランディス：ほざいてろ。");
                            }

                            UpdateMainMessage("ラナ：ま、まあ・・・見間違えは誰にでもあるわよ♪");

                            UpdateMainMessage("アイン：いやあ、何かあると思ったんだけどな。他を探すか・・・");
                        }
                        break;
                    #endregion
                    #region "心の部屋、題材３"
                    case 64:
                        if (!we.dungeonEvent241)
                        {
                            we.dungeonEvent241 = true;

                            UpdateMainMessage("アイン：こういう角の隅ってのは良くあったりするんだけどな。");

                            UpdateMainMessage("ラナ：でも、何の変哲も無いわね。");

                            UpdateMainMessage("アイン：ふう・・・まいったな、何もねえんだな。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：どうする。");

                                UpdateMainMessage("アイン：どうするったって・・・止めるわけにもいかねえだろ。");
                            }

                            UpdateMainMessage("ラナ：ねえ、アインはこういう時って");

                            UpdateMainMessage("アイン：ん？");

                            UpdateMainMessage("ラナ：何でもないわ。");

                            UpdateMainMessage("アイン：何だよ、聞かせろよ？");

                            UpdateMainMessage("ラナ：う〜ん・・・　・・・");

                            UpdateMainMessage("ラナ：こういう時って、どう考えてるわけ？");

                            UpdateMainMessage("アイン：どう？　どうったって、そりゃまあ・・・");

                            UpdateMainMessage("アイン：在るか、無いか。　ってトコだな。");

                            UpdateMainMessage("ラナ：それってどういう意味？");

                            UpdateMainMessage("アイン：何か在るんなら、何か出るだろ？");

                            UpdateMainMessage("アイン：元々何も無いなら、何も出ないだろ？");

                            UpdateMainMessage("ラナ：・・・えぇ〜〜〜？？");

                            UpdateMainMessage("ラナ：駄目、やっぱり聞いた私がバカだったわ。");

                            UpdateMainMessage("アイン：ま、待て待て。何でワカンねえんだよ？");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：てめぇの説明がオカシイんだろ、ボケが。");

                                UpdateMainMessage("アイン：わかりやすく説明してるだろ？");

                                UpdateMainMessage("ランディス：的を得てねぇ。");

                                UpdateMainMessage("アイン：っくそう・・・");
                            }

                            UpdateMainMessage("ラナ：う〜ん・・・ねえ、もう少しだけ聞かせて。");

                            UpdateMainMessage("アイン：あ、ああ。　何だ？");

                            UpdateMainMessage("ラナ：その、この角っこにも何も無いとするじゃない。");

                            UpdateMainMessage("アイン：ああ、この角はな。");

                            UpdateMainMessage("ラナ：だからこの広い部屋には、もう何も無いって思った方が良いのかしら？");

                            UpdateMainMessage("アイン：ああ、おそらくな。");

                            UpdateMainMessage("ラナ：じゃあ、もうこの部屋を出ましょ。");

                            UpdateMainMessage("アイン：まあ、待てって。");

                            UpdateMainMessage("ラナ：何でよ？");

                            UpdateMainMessage("アイン：何て言うかわかんねえけどさ・・・");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：ハッキリしねぇヤツだな。");

                                UpdateMainMessage("アイン：んな事言ったって、まだハッキリできねえし。");
                            }

                            UpdateMainMessage("ラナ：まあ・・・じゃあ、もう少し探索を続けようか？");

                            UpdateMainMessage("アイン：ああ、他に何か無いか探してみよう。");
                        }
                        break;
                    #endregion
                    #region "心の部屋、題材４"
                    case 65:
                        if (!we.dungeonEvent242)
                        {
                            we.dungeonEvent242 = true;

                            UpdateMainMessage("ラナ：あっ！");

                            UpdateMainMessage("アイン：お、どうした？");

                            UpdateMainMessage("ラナ：ゴメン・・・何かに躓いたみたい。");

                            UpdateMainMessage("アイン：大丈夫かよ。");

                            UpdateMainMessage("ラナ：うん、大丈夫よ。　でも、何に引っかかったのかしら。");

                            UpdateMainMessage("アイン：何か床にスイッチの様なモノでもあったか？");

                            UpdateMainMessage("ラナ：ううん、ちょっとでっぱりがあるぐらいね。");

                            UpdateMainMessage("アイン：ッハハハ、懐かしいな。");

                            UpdateMainMessage("ラナ：え、何がよ？");

                            UpdateMainMessage("アイン：小さい頃は、ラナの方が先頭を歩いてた頃だよ。");

                            UpdateMainMessage("アイン：ラナはたまにコケていたしな。　それを思い出したのさ。");

                            UpdateMainMessage("ラナ：ええぇ！？　私コケてなんかいないわよ！");

                            UpdateMainMessage("アイン：いーや、コケてた。絶対に");

                            UpdateMainMessage("ラナ：あーーーーーーー！！");

                            UpdateMainMessage("アイン：うわ、うっせぇな・・・");

                            UpdateMainMessage("ラナ：あの時のヤツでしょ！？　アゼランの丘陵地であった");

                            UpdateMainMessage("ラナ：違うわよ！！　あれはゲジゲジ君が居たから避けただけよ！！　");

                            UpdateMainMessage("ラナ：アンタちょっとあんな昔の事ぐらい、とっとと忘れなさいよね！！");

                            UpdateMainMessage("アイン：うぁ、分かったって、そんな怒るなっつうの。");

                            UpdateMainMessage("ラナ：っぷ・・・フフフ、でもまさかそんな時の事を思い出すなんてね。");

                            UpdateMainMessage("アイン：な、何だよ、怒ったり笑ったりと。");

                            UpdateMainMessage("ラナ：ううん、良いのよ。何でもない♪");

                            UpdateMainMessage("ラナ：ホラホラ、他の所に行ってみましょ♪");

                            UpdateMainMessage("アイン：あ、ああぁ・・・");
                        }
                        break;
                    #endregion
                    #region "心の部屋、題材５"
                    case 66:
                        if (!we.dungeonEvent243)
                        {
                            we.dungeonEvent243 = true;

                            UpdateMainMessage("アイン：さてと、この辺も少しみておくか。");

                            UpdateMainMessage("ラナ：ねえ、バカアイン。");

                            UpdateMainMessage("アイン：バカじゃねえ。何だ？");

                            UpdateMainMessage("ラナ：こんな事してて意味あると思う？");

                            UpdateMainMessage("アイン：意味があるかって言われてもなあ・・・");

                            UpdateMainMessage("ラナ：はっきりしないわね。");

                            UpdateMainMessage("アイン：ッハハ、確かにハッキリしねえな。");

                            UpdateMainMessage("ラナ：何笑ってんのよ、気持ち悪いわね。");

                            UpdateMainMessage("アイン：いや、確かに昔から比べるとハッキリしねえと思ってな。");

                            UpdateMainMessage("ラナ：う〜ん、どうかしら。");

                            UpdateMainMessage("アイン：ん？");

                            UpdateMainMessage("ラナ：昔っからじゃない？　そういうトコ。");

                            UpdateMainMessage("アイン：そんな事ないだろ。昔はこうズバズバっとだな。");

                            UpdateMainMessage("ラナ：ウソ、変なトコで結構グズグズ言ってたわよ？");

                            UpdateMainMessage("アイン：そうか？いやいや、そんな事は・・・");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：迷ってんじゃねぇ。ボケが。");

                                UpdateMainMessage("アイン：いや、今必死に思い出してたんだって。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：ホラ、また始まったー");

                                UpdateMainMessage("アイン：いやいや、昔をいろいろ思い出してたトコだ。");
                            }

                            UpdateMainMessage("ラナ：まあ良いけど。あんまり煮詰めすぎないでよ？");

                            UpdateMainMessage("アイン：あ、あぁ。了解了解。");
                        }
                        break;
                    #endregion
                    #region "心の部屋、題材６"
                    case 67:
                        if (!we.dungeonEvent244)
                        {
                            we.dungeonEvent244 = true;

                            UpdateMainMessage("アイン：こういう何気ない所に、何かあるかも知れねえな。");

                            UpdateMainMessage("ラナ：ここって、何気ないトコなわけ？");

                            UpdateMainMessage("アイン：その通り！");

                            UpdateMainMessage("ラナ：ふーん・・・");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：自慢になってねぇ。");

                                UpdateMainMessage("アイン：ッグ・・・");
                            }

                            UpdateMainMessage("アイン：しかし、マジで何もねえな・・・");

                            UpdateMainMessage("ラナ：何気無い所ってのは正解だったみたいね。");

                            UpdateMainMessage("アイン：他を探すか・・・");
                        }
                        break;
                    #endregion
                    #region "心の部屋、題材７"
                    case 68:
                        if (!we.dungeonEvent245)
                        {
                            we.dungeonEvent245 = true;

                            UpdateMainMessage("アイン：タイム！");

                            UpdateMainMessage("ラナ：何よ突然？");

                            UpdateMainMessage("アイン：この辺、ちょうど部屋の中央近辺だろ？");

                            UpdateMainMessage("ラナ：まあ、大体この辺がそうね。それがどうしたのよ？");

                            UpdateMainMessage("アイン：何かあるかも知れねえ。念入りに調べてみようぜ。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：くだらねぇ発想だな。");

                                UpdateMainMessage("アイン：良いじゃねえか。大概こういうのは真ん中なんだよ。");

                                UpdateMainMessage("ランディス：好きにしろ。");
                            }

                            UpdateMainMessage("ラナ：でも、調べるとしても、ホンット何もないわよ。");

                            UpdateMainMessage("アイン：この命探偵アイン様に任せておけって。");

                            UpdateMainMessage("ラナ：ハイハイ・・・");

                            UpdateMainMessage("アイン：まずは天井だよな。");

                            UpdateMainMessage("アイン：ッハ！");

                            UpdateMainMessage("ラナ：どうしたの？");

                            UpdateMainMessage("アイン：いや、勢い良く上を向いただけだ。");

                            UpdateMainMessage("　　　『ドスゥゥゥン！！』（ラナのアダーカーブローがアインに炸裂）　　");

                            UpdateMainMessage("アイン：ッグ・・・天井には特に何もねえか・・・");

                            UpdateMainMessage("アイン：ま、となれば床しかねえよな！");

                            UpdateMainMessage("アイン：どれどれ・・・床のタイルの隙間とかに・・・");

                            UpdateMainMessage("アイン：くそ、何かねえのかよ・・・");

                            UpdateMainMessage("アイン：ッイデ！！");

                            UpdateMainMessage("アイン：ッツツツ・・・よし、何かにぶつかったって事は！？");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：・・・おい。そこのザコ");

                                UpdateMainMessage("アイン：・・・ハハハ、何でしょう。");

                                UpdateMainMessage("ランディス：いっぺん死んでこいやああぁぁぁぁ！！！");

                                UpdateMainMessage("　（アインは天井へと旅立った）　");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：・・・ちょっと");

                                UpdateMainMessage("アイン：あ・・・と、ハイハイ？");

                                UpdateMainMessage("ラナ：人の足に何ぶつかってんのよ！　バカじゃないの！！？");

                                UpdateMainMessage("　　　『ドバコォォォン！！』（ラナのファイナリティ・キックがアインに炸裂）　　");

                                UpdateMainMessage("　（アインは再度、床と相対する事となった)　");
                            }
                        }
                        break;
                    #endregion
                    #region "心の部屋、題材８"
                    case 69:
                        if (!we.dungeonEvent246 || !we.dungeonEvent249)
                        {
                            bool tempFirst = we.dungeonEvent246;

                            we.dungeonEvent246 = true;

                            if (!tempFirst)
                            {
                                UpdateMainMessage("アイン：ふう、まいったな。");

                                UpdateMainMessage("ラナ：ここの壁、見てみたけど何の変哲も無いわね。");

                                UpdateMainMessage("アイン：ああ、特に仕掛けとかもなさそうだ。");
                            }

                            if (!we.AvailableThirdCharacter)
                            {
                                // オル・ランディスがパーティに居なければ、この壁は見破れない。
                                if (!tempFirst)
                                {
                                    UpdateMainMessage("ラナ：他を探してみましょ。");

                                    UpdateMainMessage("アイン：ああ。");
                                }
                                return true;
                            }

                            UpdateMainMessage("ランディス：在るとしたらココだ。");

                            UpdateMainMessage("アイン：ああ。");

                            UpdateMainMessage("アイン：・・・ええ！？　マジかよ！？");

                            UpdateMainMessage("ラナ：えっ、ココに仕掛けがあるんですか？");

                            UpdateMainMessage("ランディス：あぁ。");

                            UpdateMainMessage("ラナ：ウソ・・・私見破れなかったわ。");

                            UpdateMainMessage("アイン：師匠、どこら辺を見て気づいたんだ？");

                            UpdateMainMessage("ランディス：そういうのは特にねぇ。");

                            UpdateMainMessage("ラナ：え、でも気になる仕掛けがどこかにあったんですよね？");

                            UpdateMainMessage("ランディス：そうのも特にねぇ。");

                            UpdateMainMessage("アイン：じゃ、じゃあどうやって？");

                            UpdateMainMessage("ランディス：さぁな。自分で");

                            UpdateMainMessage("ラナ：あ、あの！　教えてもらえませんか！？");

                            UpdateMainMessage("アイン：(((わ、ッバ、バカ！ラナ！)))");

                            UpdateMainMessage("ランディス：・・・");

                            UpdateMainMessage("ランディス：小娘、仕掛けには種類がある。");

                            UpdateMainMessage("ラナ：ハ、ハイ。");

                            UpdateMainMessage("ランディス：今回の仕掛けは、分かるか？");

                            UpdateMainMessage("ラナ：えっと・・・");

                            UpdateMainMessage("ランディス：仕掛けにも幾つモノ種類がある。");

                            UpdateMainMessage("ランディス：順当");

                            UpdateMainMessage("ランディス：設問");

                            UpdateMainMessage("ランディス：誘導");

                            UpdateMainMessage("ランディス：隠蔽");

                            UpdateMainMessage("ランディス：交錯");

                            UpdateMainMessage("ランディス：言っててもキリはねぇ。");

                            UpdateMainMessage("ランディス：でだ。今回はどれだか分かるか？");

                            UpdateMainMessage("ラナ：えっと・・・　・・・");

                            UpdateMainMessage("ラナ：迷いとか・・・引っ掛けとか・・・かしら？");

                            UpdateMainMessage("ランディス：まぁ、良いだろ。");

                            UpdateMainMessage("ランディス：看板の内容は覚えてんな？");

                            UpdateMainMessage("ラナ：えっと、『心を示す者、無間の部屋、存在しない解への選択』");

                            UpdateMainMessage("ランディス：心を示す者、つまり心に関する設問だ。");

                            UpdateMainMessage("ランディス：テクニックや細工、知恵や知識、力押しに関する設問じゃねぇ。");

                            UpdateMainMessage("ランディス：無間の部屋。言葉通りこのクソでけぇ部屋を指してる。");

                            UpdateMainMessage("ランディス：存在しない解。言って見りゃ、答えなんてねぇって事だ。");

                            UpdateMainMessage("ランディス：今回は看板にしっかり『設問』がある。つまりだ。");

                            UpdateMainMessage("ランディス：答えはこの部屋に存在しねぇって事だ。");

                            UpdateMainMessage("ラナ：で、でもですよ！？");

                            UpdateMainMessage("アイン：(((だああぁぁ、「でも」とか聞いてんじゃねえ！ラナ！)))");

                            UpdateMainMessage("ラナ：そうだとしても！　何でココが正解だって分かるんですか！？");

                            UpdateMainMessage("ラナ：っあ！・・・ゴメンなさい、つい勢いで・・・");

                            UpdateMainMessage("ランディス：良い調子じゃねぇか。悪かねぇ。");

                            UpdateMainMessage("アイン：(((　・・・ハラハラハラ・・・)))");

                            UpdateMainMessage("ランディス：マップ見てみろ。");

                            UpdateMainMessage("ラナ：えっと・・・");

                            UpdateMainMessage("ランディス：そっちはそうだ。っで、コッチはこうだろ。");

                            UpdateMainMessage("ラナ：・・・あーーーーーー！！！！！");

                            UpdateMainMessage("アイン：((( ヒエエェェェェ・・・ )))");

                            UpdateMainMessage("ランディス：分かったのか、良いセンスしてるじゃねぇか。小娘。");

                            UpdateMainMessage("ラナ：わ、分かったけど・・・で、でもこんなのって・・・");

                            UpdateMainMessage("ラナ：っちょ、ちょっとアイン。");

                            UpdateMainMessage("アイン：な、何で俺が出てきてんだよ？");

                            UpdateMainMessage("ラナ：アンタの師匠って何かムチャクチャじゃない？");

                            UpdateMainMessage("アイン：ッバババババ、何言ってんだよ！");

                            UpdateMainMessage("アイン：いやいやいや、師匠スイマセン！　何か本当に！");

                            UpdateMainMessage("ランディス：ムチャクチャってか、違ぇねえな確かに。ッカッカッカ。");

                            UpdateMainMessage("ラナ：あ！スイマセン何か私いろいろと教えてもらって・・・");

                            UpdateMainMessage("ランディス：好きにしろ。");

                            UpdateMainMessage("ラナ：あ、はい。ありがとうございます！");

                            UpdateMainMessage("ランディス：まあ、ここまでは良い。");

                            UpdateMainMessage("ランディス：おい、そこのザコアイン。");

                            UpdateMainMessage("アイン：だから、俺はザコじゃねえって。　何だよ？");

                            UpdateMainMessage("ランディス：心の部屋つうぐらいだ。テメェが開けろ。");

                            UpdateMainMessage("アイン：え？俺が？どうやって？");

                            UpdateMainMessage("ランディス：早くやれっつってんだろ！");

                            UpdateMainMessage("アイン：わーーー分かった分かった！　分かりました！");

                            UpdateMainMessage("アイン：えっと・・・この辺りの壁か？");

                            UpdateMainMessage("アイン：特に取っ手とか、目印がねえけど。");

                            UpdateMainMessage("ランディス：手をかざして集中しろ。");

                            UpdateMainMessage("アイン：よ、よし・・・");

                            UpdateMainMessage("アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　【　アイン・ウォーレンス本人と認識　】");

                            UpdateMainMessage("ラナ：え！！");

                            UpdateMainMessage("　　【　適正ボーダーをクリア。心層の壁を解除　】");

                            UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ガコン！』");

                            we.dungeonEvent249 = true;

                            dungeonTile[5 * Database.TRUTH_DUNGEON_COLUMN + 28].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[5 * Database.TRUTH_DUNGEON_COLUMN + 28].Name = Database.TILEINFO_13;
                            tileInfo2[5 * Database.TRUTH_DUNGEON_COLUMN + 28] = dungeonTile[5 * Database.TRUTH_DUNGEON_COLUMN + 28].Name;

                            dungeonTile[6 * Database.TRUTH_DUNGEON_COLUMN + 28].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[6 * Database.TRUTH_DUNGEON_COLUMN + 28].Name = Database.TILEINFO_13;
                            tileInfo2[6 * Database.TRUTH_DUNGEON_COLUMN + 28] = dungeonTile[6 * Database.TRUTH_DUNGEON_COLUMN + 28].Name;

                            dungeonTile[7 * Database.TRUTH_DUNGEON_COLUMN + 28].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                            dungeonTile[7 * Database.TRUTH_DUNGEON_COLUMN + 28].Name = Database.TILEINFO_13;
                            tileInfo2[7 * Database.TRUTH_DUNGEON_COLUMN + 28] = dungeonTile[7 * Database.TRUTH_DUNGEON_COLUMN + 28].Name;

                            UpdateUnknownTileArea2_10();

                            UpdateUnknownTile();
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：ふう・・・開いたぜ。");

                            UpdateMainMessage("ラナ：えっと・・・何で開いたわけ？");

                            UpdateMainMessage("アイン：正直わかんねぇ。集中してただけだ。");

                            UpdateMainMessage("ラナ：何か変な音声も聞こえてたけど・・・");

                            UpdateMainMessage("ランディス：本人にだけは聞こえてねぇはずだ。");

                            UpdateMainMessage("ラナ：そうなんでしょうか？");

                            UpdateMainMessage("アイン：っま、開いた事は開いた！　オッケーオッケー！");

                            UpdateMainMessage("アイン：っさてと、そこの小部屋を調べてみるとするか！");

                            UpdateMainMessage("ラナ：うん、そうね。");

                            return true;
                        }
                        break;
                    #endregion
                    #region "心の部屋、題材９"
                    case 70:
                        if (!we.dungeonEvent247)
                        {
                            we.dungeonEvent247 = true;

                            UpdateMainMessage("アイン：ふ〜い、どっこいせっと。");

                            UpdateMainMessage("ラナ：あっ、ちょっと何座り込んでるのよ？");

                            UpdateMainMessage("アイン：いや、ちょっと疲れちまってな。一休憩だ。");

                            UpdateMainMessage("ラナ：テクテク歩いてるだけじゃない。どこが疲れるのよ？");

                            UpdateMainMessage("アイン：ま、まあまあ座れよ。");

                            UpdateMainMessage("ラナ：え〜〜〜、こんなトコで！？");

                            UpdateMainMessage("アイン：まあ、良いじゃねえか。");

                            UpdateMainMessage("ラナ：う〜ん・・・それじゃ。");

                            UpdateMainMessage("ラナ：よいしょ♪");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：行くようになったら呼べ");

                                UpdateMainMessage("アイン：あ、あぁ。");
                            }

                            UpdateMainMessage("ラナ：でも、この部屋見れば見るほど何も無いわね。");

                            UpdateMainMessage("アイン：不思議だよな。この部屋。");

                            UpdateMainMessage("ラナ：何がよ？");

                            UpdateMainMessage("アイン：こう、心が広々としてこねえか？");

                            UpdateMainMessage("ラナ：そう？　単にだだっ広いだけとしか思えないわ。");

                            UpdateMainMessage("アイン：ッガク・・・");

                            UpdateMainMessage("ラナ：だって、こんな殺風景のどこを見てそう思えるのよ？");

                            UpdateMainMessage("アイン：いやあ、何もないってのがポイントなんだよ。");

                            UpdateMainMessage("アイン：目の前にいろいろあるとさ。目がそっちに行ってしまうだろ？");

                            UpdateMainMessage("アイン：こう、何も無いとさ。全体が眺められる感じがして良いんだよ。");

                            UpdateMainMessage("ラナ：ふ〜ん・・・");

                            UpdateMainMessage("アイン：って、やっはオカシイかな。俺");

                            UpdateMainMessage("ラナ：う〜ん。そう思うんだったら、別に良いと思うけど。");

                            UpdateMainMessage("ラナ：普段からいろいろ考えすぎなんじゃない？");

                            UpdateMainMessage("アイン：んな事ねえって。いつもテキトーだろ。");

                            UpdateMainMessage("ラナ：そうだと良いんだけど。");

                            UpdateMainMessage("ラナ：でも、あからさまなテキトー行動は謹んでよね、ホント。");

                            UpdateMainMessage("アイン：ああ、気をつけるって。");

                            UpdateMainMessage("アイン：よし、じゃあこの辺も特に何もねえし、行くとするか！");

                            UpdateMainMessage("ラナ：あ、ちょっと待ってよ。");

                            UpdateMainMessage("アイン：ん？何だ？");

                            UpdateMainMessage("ラナ：何か考えてるんだったら、ちゃんと言いなさいよね？");

                            UpdateMainMessage("アイン：ああ、勿論さ！　了解了解！");
                        }
                        break;
                    #endregion
                    #region "心の部屋、題材１０"
                    case 71:
                        if (!we.dungeonEvent248)
                        {
                            we.dungeonEvent248 = true;

                            UpdateMainMessage("ラナ：う〜ん、コッチの壁も、特に何も無いわね。");

                            UpdateMainMessage("アイン：いや、待てよ！？");

                            UpdateMainMessage("ラナ：っえ、何かあったの？");

                            UpdateMainMessage("アイン：いや、何かこう雰囲気を出してみたかっただけだ。");

                            UpdateMainMessage("　　　『バグシイィィィ！！』（ラナのオラトリオ・キックがアインに炸裂）　　");

                            UpdateMainMessage("ラナ：もう、こっちだって必死に探してるんだから。");

                            UpdateMainMessage("アイン：グボ・・・いや、悪ぃ。");

                            UpdateMainMessage("アイン：しかし、壁をひとつひとつチェックなんて地味に面倒だよな。");

                            UpdateMainMessage("ラナ：アインが面倒くさがりなだけじゃない。");

                            UpdateMainMessage("アイン：俺は面倒くさがりじゃねえ。　理論派と呼べ、理論派と");

                            UpdateMainMessage("　　　『ッズドオオォォン！！』（ラナのフィリング・ブローがアインに炸裂）　　");

                            UpdateMainMessage("ラナ：アンッタが理論って言うと、この世のバランスが乱れるわ。");

                            UpdateMainMessage("アイン：イッツツツ・・・い、いやしかしだな。");

                            UpdateMainMessage("アイン：そもそも、こっち側は入り口通路に近いだろ？");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：ほぉ");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：え？　ええ。");
                            }

                            UpdateMainMessage("アイン：だったらこの近辺に隠し何とかがある確率は低いと思わないか？");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：協調も大事にしとけ。無けりゃ無いで良い。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：でも、隙間に１つ部屋とかあるかも知れないじゃない。");
                            }

                            UpdateMainMessage("アイン：ま、まあそうなんだけどさ。");

                            UpdateMainMessage("ラナ：壁伝いの探索は基本でしょ？　もう少し調べましょ。");

                            UpdateMainMessage("アイン：ああ。");
                        }
                        break;
                    #endregion
                    #region "力の部屋、ボス１"
                    case 72:
                        if (!we.dungeonEvent250)
                        {
                            we.dungeonEvent250 = true;

                            UpdateUnknownTileArea2_11();
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：っお、何か居るぜ。");

                            UpdateMainMessage("ラナ：あら、輝ける海の王子じゃない。アイン覚えてない？");

                            UpdateMainMessage("アイン：ん？なんだって？");

                            UpdateMainMessage("ラナ：もう臨戦態勢ってわけね・・・人の話、聞いてないし。");

                            UpdateMainMessage("アイン：ああ、そうだな。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：後で話してやれ。");

                                UpdateMainMessage("ラナ：え、ええっと、ハイ。");
                            }

                            UpdateMainMessage("ラナ：ハアアァァァ・・・もう、勝てなくても知らないわよ。");
                        }

                        if (!we.dungeonEvent250_SlayBoss)
                        {
                            UpdateMainMessage("アイン：ボスとの戦闘だ！気を引き締めていくぜ！", true);

                            bool result = EncountBattle(Database.ENEMY_BRILLIANT_SEA_PRINCE, String.Empty, String.Empty, false, false, false, false);
                            if (!result)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN, false);
                                this.dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                we.dungeonEvent250_SlayBoss = true;

                                UpdateMainMessage("アイン：っしゃ、やったぜ！");

                                blueWallBottom[34 * Database.TRUTH_DUNGEON_COLUMN + 21] = false;
                                blueWallTop[35 * Database.TRUTH_DUNGEON_COLUMN + 21] = false;
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：ふう・・・辛かったわね。");

                                UpdateMainMessage("アイン：ああ、さすが力の部屋というだけあるな。");

                                UpdateMainMessage("ラナ：アイン、ところでさっきのボスに見覚えはない？");

                                UpdateMainMessage("アイン：ん？そういや戦闘前にも言ってたな。");

                                UpdateMainMessage("ラナ：聞こえてるんなら答えなさいよね、もう。");

                                UpdateMainMessage("アイン：正直違和感はあった。");

                                UpdateMainMessage("アイン：しかし、覚えてねえんだ。悪いな。");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：違和感の元は何だ？");
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：違和感って何よ？");
                                }

                                UpdateMainMessage("アイン：ん〜と、どう言うんだ。");

                                UpdateMainMessage("アイン：何か覚えてるような気もするんだが");

                                UpdateMainMessage("アイン：ハッキリとは思い出せねえ。そんな感じだ。");

                                UpdateMainMessage("ラナ：【ヴェルガスの海底神殿】");

                                UpdateMainMessage("アイン：おおおおおお！！！");

                                UpdateMainMessage("アイン：マジかよ！？　今のマジだな！？");

                                UpdateMainMessage("ラナ：何動転しちゃってんのよ・・・面白かったけど♪");

                                UpdateMainMessage("ラナ：マジに決まってるじゃない。忘れてたの？");

                                UpdateMainMessage("アイン：いや、ぜんぜん覚えてるぜ！");

                                UpdateMainMessage("アイン：輝ける海の王子、あのグングニルがすげえ強力だったよな。");

                                UpdateMainMessage("アイン：しかもたまに波にのってスピードUPとかありえねえ。");

                                UpdateMainMessage("アイン：声を出してきただけで、ヤケにパワーアップもしてたよな。");

                                UpdateMainMessage("アイン：いやあ、マジで苦労したぜ！あれは。");

                                UpdateMainMessage("アイン：しかし・・・何で思い出せなかったんだ？？");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：寝ぼけてたんだろ。");

                                    UpdateMainMessage("アイン：いや、決して寝ぼけてたワケじゃねえんだが・・・");
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：忘れっぽいだけでしょ、ホンットバカよね。");

                                    UpdateMainMessage("アイン：いや、マジで何で忘れてたんだ・・・？");
                                }

                                UpdateMainMessage("ラナ：思い出すのと実際の行動がまるで逆よね・・・ハアァァ");

                                UpdateMainMessage("アイン：い、いやいや悪かったって！　次から気をつけるって。");

                                UpdateMainMessage("ラナ：次からは戦略思い出してからにするわよ？いいわね？");

                                UpdateMainMessage("アイン：ああ了解了解！");

                                UpdateMainMessage("アイン：っさ、次行こうぜ！　ッハッハッハ！！");

                                UpdateMainMessage("ラナ：こんなノリで本当に大丈夫かしら・・・");
                            }
                            UpdateMainMessage("", true);
                            return true;
                        }
                        break;
                    #endregion
                    #region "力の部屋、ボス２"
                    case 73:
                        if (!we.dungeonEvent251)
                        {
                            we.dungeonEvent251 = true;

                            UpdateUnknownTileArea2_12();
                            this.dungeonField.Invalidate();

                            UpdateMainMessage("アイン：っと、ボスとの戦闘だ、気を引き締めて・・・");

                            UpdateMainMessage("ラナ：ちょっと待ってよ、アイン");

                            UpdateMainMessage("アイン：ああ、分かってる分かってる。ボスの特徴だろ？");

                            UpdateMainMessage("アイン：珊瑚の女王。主に魔法攻撃を主力とするヤツだ。");

                            UpdateMainMessage("アイン：とは言っても、魔法主力は物理防御が低いなんて言うのは間違いだな。");

                            UpdateMainMessage("アイン：コイツは、海底神殿に祀られている２つの神を信仰している。");

                            UpdateMainMessage("アイン：武の神、アンダート。");

                            UpdateMainMessage("アイン：アンダートへの忠誠の祈りを捧げることでかなり高い物理防御を展開してくる。");

                            UpdateMainMessage("アイン：この時点で物理攻撃によるダメージは諦めた方がいいだろうな。");

                            UpdateMainMessage("アイン：って、おい聞いてるのかよラナ？");

                            UpdateMainMessage("ラナ：え、ええ、もちろん聞いてるわよ。バカアインみたいに寝たりしないわ。");

                            UpdateMainMessage("アイン：っしゃ、じゃあ続けて行くぞ。");

                            UpdateMainMessage("アイン：生命の神、サルマン。");

                            UpdateMainMessage("アイン：サルマンへの忠誠も行うことで、魔法防御系統の効果を発揮してくる。");

                            UpdateMainMessage("アイン：単なる魔法防御上昇なら良いが、確かミラーイメージが混じってたはずだ。");

                            UpdateMainMessage("アイン：あれが張られた状態で攻撃魔法をぶっ放すとかなり危ないから気をつけるぜ。");

                            UpdateMainMessage("アイン：それから最後だが、フローズンランスが通常攻撃だ。");

                            UpdateMainMessage("アイン：純粋にダメージを持っていかれるからパワー負けしないようにな。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：ほぉ、それなりにやる気になってるみてぇだな。ッカッカッカ。");

                                UpdateMainMessage("アイン：当たり前だろ。小ボスとは言え、適当な戦術じゃ勝てそうもないしな。");
                            }

                            UpdateMainMessage("ラナ：ねえ、結局戦術はどうするの？");

                            UpdateMainMessage("アイン：・・・");

                            UpdateMainMessage("アイン：任せた！！　ッハッハッハ！");

                            UpdateMainMessage("ラナ：う〜ん、ここでビシっと戦術指南まであると頼り甲斐もあるのに・・・ハアアァァァ");
                        }

                        if (!we.dungeonEvent251_SlayBoss)
                        {
                            UpdateMainMessage("アイン：っしゃ、ボスとの戦闘だ！気を引き締めていくぜ！", true);

                            bool result = EncountBattle(Database.ENEMY_ORIGIN_STAR_CORAL_QUEEN, String.Empty, String.Empty, false, false, false, false);
                            if (!result)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN, false);
                                this.dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                we.dungeonEvent251_SlayBoss = true;

                                UpdateMainMessage("アイン：っしゃ、やったぜ！");

                                UpdateMainMessage("ラナ：分かってはいたけど、結構面倒な相手だったわね。");

                                UpdateMainMessage("アイン：いや、戦術パターンさえ見抜いてればそうでもなかっただろ。");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：その割には、結構あぶねぇ場面もあった。もっとしっかりしろ。");

                                    UpdateMainMessage("アイン：うわっっつつ・・・わ、分かったって。");
                                }

                                UpdateMainMessage("ラナ：ねえ、アインって海底神殿のこと、全部思い出せてるワケ？");

                                UpdateMainMessage("アイン：ん〜、全部かどうかと言われてもな。");

                                UpdateMainMessage("アイン：なんかこの、小ボスが次々湧いてくるのは覚えてるな。");

                                UpdateMainMessage("ラナ：ふうん、全部思い出せてるわけじゃないみたいね。");

                                UpdateMainMessage("アイン：何だよ、何か他に忘れてる事でもあったか？");

                                UpdateMainMessage("ラナ：ううん、そういうワケじゃないけどね♪");

                                UpdateMainMessage("アイン：んん？何だよ、ヤケに気になる言い方じゃねえか。");

                                UpdateMainMessage("ラナ：まあ、先に進めましょ♪　ッホラホラ♪");

                                UpdateMainMessage("アイン：あ、ああそうだな。　じゃあ次へ進むとするか！");

                                blueWallBottom[23 * Database.TRUTH_DUNGEON_COLUMN + 21] = false;
                                blueWallTop[24 * Database.TRUTH_DUNGEON_COLUMN + 21] = false;
                                dungeonField.Invalidate();
                            }
                            UpdateMainMessage("", true);
                            return true;
                        }
                        break;
                    #endregion
                    #region "力の部屋、ボス３"
                    case 74:
                        if (!we.dungeonEvent252)
                        {
                            we.dungeonEvent252 = true;

                            UpdateUnknownTileArea2_13();
                            this.dungeonField.Invalidate();

                            UpdateMainMessage("アイン：っしゃ、続けてボスだな。");

                            UpdateMainMessage("アイン：あの格好・・・シェル・ザ・ソードナイトだな。");

                            UpdateMainMessage("アイン：戦闘はスピード感のある攻撃スタイルで攻めてくる。");

                            UpdateMainMessage("アイン：きっちり固めて勝つ方法も無いわけじゃねえが");

                            UpdateMainMessage("アイン：あいにくそういうのをやってるうちに負けちまう可能性もある。");

                            UpdateMainMessage("アイン：ヤツが優勢かこちらが優勢かよりも、単純なダメージレースに持っていった方が良いだろう。");

                            UpdateMainMessage("ラナ：今度は唐突に戦術理論の方を展開してるわね。特徴はどうなのよ？");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：ヤツの特徴も添えつけろ。");
                            }

                            UpdateMainMessage("アイン：あ、ああぁ、そうだな。");

                            UpdateMainMessage("アイン：特徴の一つは、シーストライプ。");

                            UpdateMainMessage("アイン：攻撃と同時に急激に行動ゲージのスピード上昇があるせいかテンポのズレに気をつけた方がいい。");

                            UpdateMainMessage("アイン：あと、深海の渦だな。コイツは全体効果としてスロウをかけてくる。");

                            UpdateMainMessage("アイン：仕掛けとしてはシンプルだが、タイミングがやべぇと相手が２回行動みたいな感じに繋がる");

                            UpdateMainMessage("アイン：アンラッキーな組み合わせにならないよう、ライフには常に気を配った方が良い。");

                            UpdateMainMessage("アイン：それから極めつけが、ジュエル・ブレイク。コイツが非常に厄介だ。");

                            UpdateMainMessage("アイン：インスタントで仕掛けてくるダメージ系で、加えて増強効果の魔法打ち消しが入っている。");

                            UpdateMainMessage("アイン：散々増強してもディスペルされるんだったら、最初から増強しない選択でやったほうが良いかも知れないな。");

                            UpdateMainMessage("ラナ：そういうトコだけは、ホンットよく覚えてるわよね・・・");

                            UpdateMainMessage("アイン：そりゃ、そうだろ。これを知ってないと勝てるものも勝てなくなるからな");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：ッオイ、そろそろ始めるぞ。");

                                UpdateMainMessage("アイン：ああ、了解！");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：でもこういうのは助かるわ。次からもお願いね。");

                                UpdateMainMessage("アイン：ああ、任せておけ！");
                            }

                        }

                        if (!we.dungeonEvent252_SlayBoss)
                        {
                            UpdateMainMessage("アイン：ボスとの戦闘だ！気を引き締めていくぜ！", true);

                            bool result = EncountBattle(Database.ENEMY_SHELL_SWORD_KNIGHT, String.Empty, String.Empty, false, false, false, false);
                            if (!result)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y, false);
                                this.dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                we.dungeonEvent252_SlayBoss = true;

                                UpdateMainMessage("アイン：っしゃ、やったぜ！");

                                UpdateMainMessage("ラナ：っふう、間一髪って感じだったわね。");

                                UpdateMainMessage("アイン：さてと、ラナ。教えてもらうぜ。前回ボスの最後で言いかけてたのをな。");

                                UpdateMainMessage("ラナ：何の話よ？");

                                UpdateMainMessage("アイン：え？そりゃお前、何か「全部思い出した？」とか何とか聞いてたじゃねえか。");

                                UpdateMainMessage("ラナ：ああ、あの話はね。そんな大した事じゃないわよ♪");

                                UpdateMainMessage("アイン：何だよ、だから余計気になるって言ってるじゃねえか。");

                                UpdateMainMessage("ラナ：慌てない慌てない♪　このまま先へ進めましょ♪");

                                UpdateMainMessage("アイン：くそう・・・覚えてろよ、この借りはいつか必ず・・・");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：女性相手にムキんなってんじゃねぇ、ボケが");

                                    UpdateMainMessage("アイン：ッイデ！　わわ、分かったって・・・ちくしょう・・・");
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：借りじゃなくて、アインが単に忘れてるだけだからね、フフフ♪");

                                    UpdateMainMessage("アイン：っちぇ、分かったよ。最後のボスまで倒したら教えてくれよな。");
                                }

                                blueWallRight[18 * Database.TRUTH_DUNGEON_COLUMN + 10] = false;
                                blueWallLeft[18 * Database.TRUTH_DUNGEON_COLUMN + 11] = false;
                                dungeonField.Invalidate();
                            }
                            UpdateMainMessage("", true);
                            return true;
                        }
                        break;
                    #endregion
                    #region "力の部屋、ボス４"
                    case 75:
                        if (!we.dungeonEvent253)
                        {
                            we.dungeonEvent253 = true;

                            UpdateUnknownTileArea2_14();
                            this.dungeonField.Invalidate();

                            UpdateMainMessage("アイン：っしゃ、続けてボスだな。");

                            UpdateMainMessage("ラナ：何か目玉みたいなのが２つ居るわね。");

                            UpdateMainMessage("アイン：左側が赤色のジェリーアイ【熱光】だな。");

                            UpdateMainMessage("アイン：攻撃形態は火が基本だが、厄介なのはフラッシュ・バーンだ。");

                            UpdateMainMessage("アイン：ッパっと一瞬閃光が走るため、暗闇のステータスが付いちまう。");

                            UpdateMainMessage("アイン：解除する方法を持っておくのも良いだろう。ただ面倒ならそのままって方法もアリだ。");

                            UpdateMainMessage("アイン：後は、火攻撃がひたすらウザイ。何とか耐えながらやるしかないな。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：もう一方の方も、簡潔に説明してみろ。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：もう一方の方はどうなの？");
                            }

                            UpdateMainMessage("アイン：ああ、もう一方はジェリーアイ【流冷】だ。");

                            UpdateMainMessage("アイン：反対属性だからメインは水系統になる。");

                            UpdateMainMessage("アイン：水系統の攻撃もかなり面倒くせえが、本当にウザいのがハルシネイト・アイだ。");

                            UpdateMainMessage("アイン：これを食らっちまうと、スタン状態に陥ってしまう。");

                            UpdateMainMessage("アイン：ダメージレースで大丈夫かと思っていても、すぐに崩されるからライフ配分は細心の注意が必要だ。");

                            UpdateMainMessage("ラナ：う〜ん、結構面倒くさそうね・・・まあ、分かったわアリガト♪");

                            UpdateMainMessage("アイン：待て、まだ大事な点が残ってる。");

                            UpdateMainMessage("アイン：赤い方は、火耐性があり、青い方は水耐性がある。");

                            UpdateMainMessage("アイン：それに加えて、赤い側が青い方へ火耐性を付与してくる。");

                            UpdateMainMessage("アイン：その逆も当然あって、赤い側に水耐性が付与されちまう。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：ッケ、魔法系統はほぼ無効って事か。");

                                UpdateMainMessage("アイン：ああ、物理で攻めていくしか無いな。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：じゃあ、物理で攻めていくようにするしか無いわね。");

                                UpdateMainMessage("アイン：ああ、そういう事になるな。");
                            }

                            UpdateMainMessage("アイン：っしゃ、そろそろ始めるとするか。準備は良いよな？");

                            UpdateMainMessage("ラナ：ええ、いつでもイイわよ。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：いつでも始めろ。");
                            }
                            UpdateMainMessage("アイン：っしゃ、了解！");
                        }

                        if (!we.dungeonEvent253_SlayBoss)
                        {
                            UpdateMainMessage("アイン：ボスとの戦闘だ！気を引き締めていくぜ！", true);

                            bool result = EncountBattle(Database.ENEMY_JELLY_EYE_BRIGHT_RED, Database.ENEMY_JELLY_EYE_DEEP_BLUE, String.Empty, false, false, false, false);
                            if (!result)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN, false);
                                this.dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                we.dungeonEvent253_SlayBoss = true;

                                UpdateMainMessage("アイン：っしゃ、やったぜ！");

                                UpdateMainMessage("アイン：しかし、どれだけいるんだよ、ここのボスは");

                                UpdateMainMessage("ラナ：マップの進み具合を見るかぎり、まだありそうね。");

                                UpdateMainMessage("アイン：ふう・・・休む暇も無しって所か・・・");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：ッオラ、何ボーっとしてやがる");

                                    UpdateMainMessage("アイン：いや、そういうわけじゃねえけどさ。");
                                }


                                UpdateMainMessage("アイン：俺、何でこんな所に来てるんだろうな。");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：テメェが行くと言ったんだろぉが。");
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：何言ってんのよ、行くって言ったのはアイン本人じゃない。");
                                }

                                UpdateMainMessage("アイン：ま、まあそうなんだけどさ。");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：見失ってんじゃねぇぞ、ボケが。");

                                    UpdateMainMessage("アイン：そんなんじゃねえって。ちょっと考えてただけだって。");

                                    UpdateMainMessage("ランディス：そういうのが見失ってる状態なんだろぉが、ザコが。");

                                    UpdateMainMessage("アイン：わ、わわわ分かったって、そうまくし立てるなよ。");

                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：っえ・・・ひょっとして臆したわけ？");

                                    UpdateMainMessage("アイン：いや、そういうわけじゃねえって、心配するな。");
                                }

                                UpdateMainMessage("ラナ：まあ、まだ先はあるみたいだし、先へ進みましょ♪");

                                UpdateMainMessage("アイン：ああ了解！");

                                blueWallBottom[27 * Database.TRUTH_DUNGEON_COLUMN + 6] = false;
                                blueWallTop[28 * Database.TRUTH_DUNGEON_COLUMN + 6] = false;
                                dungeonField.Invalidate();
                            }
                            UpdateMainMessage("", true);
                            return true;
                        }
                        break;
                    #endregion
                    #region "力の部屋、ボス５"
                    case 76:
                        if (!we.dungeonEvent254)
                        {
                            we.dungeonEvent254 = true;

                            UpdateUnknownTileArea2_15();
                            this.dungeonField.Invalidate();

                            UpdateMainMessage("アイン：っしゃ、続けてボスだな。");

                            UpdateMainMessage("ラナ：アイン、見てあれ。");

                            UpdateMainMessage("アイン：ああ、玉座に一人、そして付き添いの騎士が２人いる。");

                            UpdateMainMessage("アイン：まずは玉座に居るのが、海星源の王。");

                            UpdateMainMessage("アイン：ヤツは基本的に聖魔法を駆使してくるだけだ、それほど問題にはならねえ。");

                            UpdateMainMessage("アイン：問題なのは、付き添いの２人、海星騎士エーギルとアマラって事になる。");

                            UpdateMainMessage("アイン：まずエーギルだが、こいつが振るってくるのはスターソード『煌』");

                            UpdateMainMessage("アイン：ヤツは王に対して、かなり高い物理防御フィールドを展開してくる。");

                            UpdateMainMessage("アイン：つまり、コイツが居る間は王へ物理攻撃は効かないって事だ。");

                            UpdateMainMessage("アイン：逆も同様、アマラの方は魔法防御フィールドを展開してくるってワケだ。");

                            UpdateMainMessage("ラナ：じゃあ、王を先に倒そうとするのはかなり無理があるわね。");

                            UpdateMainMessage("アイン：ああ、しかもそれだけじゃねえ。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("アイン：アイツらは、ラナや師匠を目掛けて攻撃してくる。気をつけてくれ。");

                                UpdateMainMessage("ランディス：望むところだ。");

                                UpdateMainMessage("ラナ：分かったわ。");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：アイツらは、ラナを目掛けて攻撃してくる。気をつけてくれ。");

                                UpdateMainMessage("ラナ：分かったわ。");
                            }

                            UpdateMainMessage("アイン：攻撃に関しても単なる直接攻撃じゃねえ。暗闇やスタン、結構面倒なのが混ざってたはずだ。");

                            UpdateMainMessage("アイン：戦術は各々に任せる。頼んだぜ。");

                            UpdateMainMessage("アイン：また、当然だが、王自身は聖魔法フレッシュヒールを使ってくる。");

                            UpdateMainMessage("アイン：下手な長期戦はいたずらに消耗するだけだ。あまり良い作戦とは言えねえ。");

                            UpdateMainMessage("アイン：ある程度整った状態なら、臆せず攻撃に転じるようにもっていくぜ。いいな？");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：任せろ。");

                                UpdateMainMessage("ラナ：ええ、了解よ。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：ええ、了解よ。");
                            }

                            UpdateMainMessage("アイン：っしゃ、じゃあ行くぜ！");
                        }

                        if (!we.dungeonEvent254_SlayBoss)
                        {
                            UpdateMainMessage("アイン：ボスとの戦闘だ！気を引き締めていくぜ！", true);

                            bool result = EncountBattle(Database.ENEMY_SEA_STAR_ORIGIN_KING, Database.ENEMY_SEA_STAR_KNIGHT_AEGIRU, Database.ENEMY_SEA_STAR_KNIGHT_AMARA, false, false, false, false);
                            if (!result)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN, false);
                                this.dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                we.dungeonEvent254_SlayBoss = true;

                                UpdateMainMessage("アイン：っしゃ、やったぜ！");

                                UpdateMainMessage("アイン：っふううぅぅ、今度ばかりは本当に駄目かと思ったぜ。");

                                UpdateMainMessage("ラナ：騎士を一人倒すのが本当に辛かったわ。");

                                UpdateMainMessage("アイン：まあ、実質あいつらの護衛が主戦力だったな。");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：王の統率力、そこのボケアインも見習うべきだ。");

                                    UpdateMainMessage("アイン：ハハハ・・・確かに、あんだけ統率できりゃ大したもんだ。");
                                }

                                UpdateMainMessage("アイン：さてっと、どうだラナ？");

                                UpdateMainMessage("ラナ：っえ！？　何がよ？");

                                UpdateMainMessage("アイン：マップだよ。ひょっとしたらそろそろ最後なんじゃねえのか？");

                                UpdateMainMessage("ラナ：あー、マップの事ね。びっくりするじゃない突然聞いてくるから。");

                                UpdateMainMessage("ラナ：・・・そうね。このまま進めば、力の部屋の中央エリアに突入しそうよ。");

                                UpdateMainMessage("アイン：おし、ここまで来たんだ。キッチリ気を引き締めていくぜ！");

                                UpdateMainMessage("ラナ：フフフ、やけに気合入ってるじゃない♪");

                                UpdateMainMessage("アイン：当たり前だろ。もう何でも来いって感じだぜ。");

                                UpdateMainMessage("ラナ：勢いは良いけど、ライフ・マナの消耗が激しい場合は一旦戻った方がイイわよ。");

                                UpdateMainMessage("アイン：分かってるって。それじゃ、行くぜ！");

                                blueWallBottom[37 * Database.TRUTH_DUNGEON_COLUMN + 5] = false;
                                blueWallTop[38 * Database.TRUTH_DUNGEON_COLUMN + 5] = false;
                                dungeonField.Invalidate();
                            }
                            UpdateMainMessage("", true);
                            return true;
                        }

                        break;
                    #endregion
                    #region "力の部屋、ボス６"
                    case 77:
                        if (!we.dungeonEvent255)
                        {
                            we.dungeonEvent255 = true;

                            UpdateUnknownTileArea2_16();
                            this.dungeonField.Invalidate();

                            UpdateMainMessage("アイン：っしゃ、最後のボスか・・・");

                            UpdateMainMessage("アイン：って・・・デカ・・・");

                            UpdateMainMessage("ラナ：大海蛇のリヴィアサン。さすがに見てるだけでも引いちゃうわね。");

                            UpdateMainMessage("アイン：っと、気圧されてる場合じゃねえ。俺が覚えてる事を述べるから、聞いてくれ。");

                            UpdateMainMessage("アイン：まず、猛突進してくる「大激衝」だが・・・");

                            UpdateMainMessage("アイン：マジでダメージが半端じゃねえ。即死レベルだから俺が倒れても文句は言うな。");

                            UpdateMainMessage("ラナ：ダメよ。ちゃんと耐えなさいよね。");

                            UpdateMainMessage("アイン：だから、即死レベルなんだって・・・防衛援護頼むぜ。");

                            UpdateMainMessage("アイン：それから、大きな巨体のくせに柔軟に絡んでくるのがサージェティックバインド。");

                            UpdateMainMessage("アイン：威力自体は普通だが、巻きつき効果によるスタンと出血ダメージは防ぎようがねえ。");

                            UpdateMainMessage("アイン：対象はランダムだから、本当に気をつけてくれ。");

                            if (mc.RumbleShout)
                            {
                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：おい、てめぇが対象になる方法を探せ。");

                                    UpdateMainMessage("アイン：ッゲ・・・それだけは・・・");

                                    UpdateMainMessage("ランディス：ッカ・・・ヘタレアインが。まあ、好きにしろ。");

                                    UpdateMainMessage("アイン：いや、まあ考えておくって。了解了解。");
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：あれ、アインって対象を自分に向けるのって覚えてなかった？");

                                    UpdateMainMessage("アイン：ッゲ・・・それだけは・・・");

                                    UpdateMainMessage("ラナ：うーん、でもスタン状態で「大激衝」を食らっても困るわね、まあ好きにすれば良いわ。");

                                    UpdateMainMessage("アイン：いや、まあ考えておくって。了解了解。");
                                }
                            }

                            UpdateMainMessage("アイン：それから、これが結構大事なんだが・・・");

                            UpdateMainMessage("アイン：ライフが減ってくると、唐突に吠え始める。");

                            UpdateMainMessage("アイン：物理攻撃アップ、魔法攻撃アップ、戦闘反応アップ。正直勘弁してくれって感じだ。");

                            UpdateMainMessage("アイン：中でも最もひでえのは戦闘反応アップにある。");

                            UpdateMainMessage("ラナ：どうしてそうなるのよ？");

                            UpdateMainMessage("アイン：溜め技・・・みたいなイメージかな。とにかく大技を出力するゲージが急速に早くなるんだよ。");

                            UpdateMainMessage("アイン：コイツの決め技は確か・・・タイダルウェイブだ。");

                            UpdateMainMessage("アイン：全員に大津波ダメージが入る。極めて致命傷だから絶対に食らいたくはねえ。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：よぉは、速攻で片付けろって話だろ。");

                                UpdateMainMessage("アイン：ああ、できればそうしたい。頼んだぜ師匠。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：要するに、ライフが良い感じに減ってきたら、後は早めに倒したいって事？");

                                UpdateMainMessage("アイン：ああ、できればそうしたい。頼んだぜ。");
                            }

                            UpdateMainMessage("アイン：解説は大体こんな所だ。っしゃ準備は良いよな？");

                            UpdateMainMessage("ラナ：ええ、いつでもいいわよ。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：とっとと始めろ。");
                            }

                            UpdateMainMessage("アイン：オーケー、じゃあ行くぜ。");
                        }

                        if (!we.dungeonEvent255_SlayBoss)
                        {
                            UpdateMainMessage("アイン：ボスとの戦闘だ！気を引き締めていくぜ！", true);

                            bool result = EncountBattle(Database.ENEMY_BOSS_LEVIATHAN, String.Empty, String.Empty, false, false, false, false);
                            if (!result)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN, false);
                                this.dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                we.dungeonEvent255_SlayBoss = true;

                                UpdateMainMessage("アイン：おおっしゃ！　やっと倒せたぜ！！");

                                UpdateMainMessage("ラナ：もう二度とこういうのは相手したくないわね・・・");

                                UpdateMainMessage("アイン：ラナ、ところでどうだ？");

                                UpdateMainMessage("ラナ：え？　ああ、マップならもう後少ししか残ってないわよ。");

                                UpdateMainMessage("アイン：そうじゃなくて、結構前に話してたやつだよ。");

                                UpdateMainMessage("ラナ：ああ、アレ？　まだ覚えてたんだ、フフフ♪");

                                UpdateMainMessage("アイン：最後のボス、倒したぜ。だから頼む！　教えてくれ！");

                                UpdateMainMessage("ラナ：う〜ん、もう分かったわよ。");

                                UpdateMainMessage("ラナ：教えてあげるわ、でもそんな面白くないわよ、良いわね？");

                                UpdateMainMessage("アイン：ああ、教えてくれ頼むぜ。");

                                UpdateMainMessage("ラナ：じゃあ話すけど・・・実はね・・・"); ;

                                UpdateMainMessage("ラナ：海底神殿ってね、実は私達、行ってないのよ。覚えてた？");

                                UpdateMainMessage("アイン：・・・マジかよ！？");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("ランディス：ッカッカッカ、どうやら本当に覚えてなかったようだな。");

                                    UpdateMainMessage("アイン：いや、マジで知らなかったぜ。ってか覚えてなかったワケだが・・・。");
                                }

                                UpdateMainMessage("アイン：じゃ・・・ここは一体何なんだよ！？");

                                UpdateMainMessage("ラナ：海底神殿ゲート前。つまり言ってみれば、入り口みたいなものね。");

                                UpdateMainMessage("ラナ：海底神殿はこのリヴィアサンを倒した先に突然海底から沸き上がってきたわ。");

                                UpdateMainMessage("アイン：じゃ、じゃあ、ソコには行けてないって事かよ？");

                                UpdateMainMessage("ラナ：アンタがバテたから帰りたいって言ったんじゃないの。覚えてないわけ？");

                                UpdateMainMessage("アイン：いや、だからさ。覚えてねえって・・・さっきから言ってるじゃねえか。");

                                UpdateMainMessage("アイン：待てよ・・・すると、その海底神殿には結局何があるんだ？");

                                UpdateMainMessage("ラナ：分からないわよ。　あれから結局行ってないじゃない。");

                                UpdateMainMessage("アイン：何で行ってねえんだよ？");

                                UpdateMainMessage("ラナ：バカアインが一旦帰った後で、そのまま忘れてたからでしょ！？　ホンット覚えてないのね！");

                                UpdateMainMessage("ラナ：って・・・っぷ・・・フフフ♪");

                                UpdateMainMessage("アイン：な、何で怒った直後に笑ってんだよ、気味が悪いな・・・");

                                UpdateMainMessage("ラナ：だって、オカシイじゃない、ッフフフ、あ〜オカシイ♪");

                                UpdateMainMessage("アイン：おいおい、説明してくれよ、意味がわかんねえぞ。");

                                UpdateMainMessage("ラナ：秘密♪");

                                UpdateMainMessage("アイン：マジかよ！？！？　何でソコが秘密なんだよ！？");

                                UpdateMainMessage("ラナ：悪い話じゃないことだけは確かよ♪");

                                if (we.AvailableThirdCharacter)
                                {
                                    UpdateMainMessage("アイン：おいおいおい、師匠なら何か知ってるんじゃねえのか！？");

                                    UpdateMainMessage("ランディス：ッカッカッカ、知らねえなぁ。");
                                }

                                UpdateMainMessage("アイン：っくそおぉぉぉ・・・思いだせねえ・・・");

                                UpdateMainMessage("ラナ：もういいじゃない。過ぎた話なんだし、このままにしときましょ、フフフ♪");

                                UpdateMainMessage("アイン：くそぉ・・・まあ悪い話じゃないみたいだし、しょうがねえ。この辺にしとくか。");

                                UpdateMainMessage("ラナ：っささ、いよいよ大詰めよね。早いとこ進めましょ♪");

                                blueWallBottom[28 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;
                                blueWallTop[29 * Database.TRUTH_DUNGEON_COLUMN + 14] = false;
                                dungeonField.Invalidate();
                            }
                            UpdateMainMessage("", true);
                            return true;
                        }
                        break;
                    #endregion
                    #region "宝箱"
                    case 78:
                        we.TruthTreasure21 = GetTreasure(Database.COMMON_PUZZLE_BOX);
                        break;
                    case 79:
                        we.TruthTreasure22 = GetTreasure(Database.COMMON_CHIENOWA_RING);
                        break;
                    case 80:
                        we.TruthTreasure23 = GetTreasure(Database.RARE_MASTER_PIECE);
                        break;
                    case 81:
                        we.TruthTreasure24 = GetTreasure(Database.COMMON_TUMUJIKAZE_BOX);
                        break;
                    case 82:
                        we.TruthTreasure25 = GetTreasure(Database.COMMON_ROCKET_DASH);
                        break;
                    case 83:
                        we.TruthTreasure26 = GetTreasure(Database.COMMON_CLAW_OF_SPRING);
                        break;
                    case 84:
                        we.TruthTreasure27 = GetTreasure(Database.COMMON_SOUKAI_DRINK_SS);
                        break;
                    case 85:
                        we.TruthTreasure28 = GetTreasure(Database.COMMON_BREEZE_CROSS);
                        break;
                    case 86:
                        we.TruthTreasure29 = GetTreasure(Database.COMMON_GUST_SWORD);
                        break;
                    case 87:
                        we.TruthTreasure210 = GetTreasure(Database.RARE_PURE_GREEN_WATER);
                        break;
                    case 88:
                        we.TruthTreasure211 = GetTreasure(Database.COMMON_BLANK_BOX);
                        break;
                    case 89:
                        we.TruthTreasure212 = GetTreasure(Database.RARE_SPIRIT_OF_HEART);
                        break;
                    case 90:
                        we.TruthTreasure213 = GetTreasure(Database.COMMON_FUSION_BOX);
                        break;
                    case 91:
                        we.TruthTreasure214 = GetTreasure(Database.COMMON_WAR_DRUM);
                        break;
                    case 92:
                        we.TruthTreasure215 = GetTreasure(Database.COMMON_KOBUSHI_OBJE);
                        break;
                    case 93:
                        we.TruthTreasure216 = GetTreasure(Database.COMMON_TIGER_BLADE);
                        break;
                    case 94:
                        we.TruthTreasure217 = GetTreasure(Database.COMMON_TUUKAI_DRINK_DD);
                        break;
                    case 95:
                        we.TruthTreasure218 = GetTreasure(Database.RARE_ROD_OF_STRENGTH);
                        break;
                    #endregion
                    #region "知の部屋、複合レバーの看板１"
                    case 42:
                        if (!we.dungeonEvent231)
                        {
                            we.dungeonEvent231 = true;
                            UpdateMainMessage("アイン：看板があるな。どれどれ？");

                            UpdateMainMessage("　　　　『  終わりなるは、心　』");

                            UpdateMainMessage("ラナ：っちょ・・・何よこれ・・・");

                            UpdateMainMessage("アイン：待て・・・");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：（これは問いかけじゃねえな・・・）");

                            UpdateMainMessage("アイン：（だとすると・・・）");

                            UpdateMainMessage("アイン：師匠、教えてくれ。");

                            UpdateMainMessage("ランディス：言ってみろ。");

                            UpdateMainMessage("アイン：問いじゃないとすれば、繋ぎ合わせか？");

                            UpdateMainMessage("ランディス：好きに考えれば良い。");

                            UpdateMainMessage("アイン：っそうか・・・そうだよな。サンキュー。");

                            UpdateMainMessage("ラナ：えっと・・・どういう意味なんですか？");

                            UpdateMainMessage("ランディス：自信持たせてやった。それだけだ。");

                            UpdateMainMessage("ラナ：バカアインって、たまに意味分からないけど・・・");

                            UpdateMainMessage("ラナ：っその、ランディスさんなら分かるんですか？");

                            UpdateMainMessage("アイン：おい、何やってんだラナ、師匠！");

                            UpdateMainMessage("アイン：両隣にレバーがあるみたいだ。さっそくやってみようぜ！");

                            UpdateMainMessage("ランディス：調子に乗ってんじゃねぇ、ザコが。");

                            UpdateMainMessage("ラナ：何かヤケにハイテンションね・・・ハイハイ。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  終わりなるは、心　』", true);
                        }
                        break;
                    #endregion
                    #region "知の部屋、複合レバー１−１"
                    case 43:
                        if (!we.dungeonEvent232)
                        {
                            we.dungeonEvent232 = true;
                            if (!we.dungeonEvent256)
                            {
                                we.dungeonEvent256 = true;
                                UpdateMainMessage("アイン：ん、これは・・・レバーか？");

                                UpdateMainMessage("ラナ：中央から上下左右の４方向にレバーが倒せるみたいね。");

                                UpdateMainMessage("アイン：っしゃ、じゃあ早速・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：うぉ！？　何かすげえ音が！！");

                                UpdateMainMessage("ラナ：見て！　何か空中に文字が浮かび上がってるわよ？");

                                UpdateMainMessage("アイン：マジかよ！？　すげぇなおい・・・");

                                UpdateMainMessage("ランディス：オラ。さっさとやれ、ザコが。");

                                UpdateMainMessage("アイン：って、分かったって。ええっと・・・");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：ここもレバーか・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：出たな浮遊文字が・・・ええっと・・・");
                            }
                        }

                        if (!GroundOne.WE2.TruthAnswer2_OK)
                        {
                            CancelKeyDownMovement();
                            using (TruthDecision2 td = new TruthDecision2())
                            {
                                td.StartPosition = FormStartPosition.CenterScreen;
                                td.Description = "歌い、木々が囁き始める";
                                td.AnswerTop = "鳥";
                                td.AnswerLeft = "空";
                                td.AnswerRight = "樹";
                                td.AnswerBottom = "霊";
                                td.ShowDialog();
                                if (td.Answer == TruthDecision2.AnswerType.Top)
                                {
                                    GroundOne.WE2.TruthAnswer2_1 = true;
                                }
                                else
                                {
                                    GroundOne.WE2.TruthAnswer2_1 = false;
                                }
                            }
                            JudgeEightAnswer(false);
                        }
                        else
                        {
                            UpdateMainMessage("　　　レバーはもう動かない。", true);
                        }
                        break;
                    #endregion
                    #region "知の部屋、複合レバー１−２"
                    case 44:
                        if (!we.dungeonEvent232)
                        {
                            we.dungeonEvent232 = true;

                            if (!we.dungeonEvent256)
                            {
                                we.dungeonEvent256 = true;
                                UpdateMainMessage("アイン：ん、これは・・・レバーか？");

                                UpdateMainMessage("ラナ：中央から上下左右の４方向にレバーが倒せるみたいね。");

                                UpdateMainMessage("アイン：っしゃ、じゃあ早速・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：うぉ！？　何かすげえ音が！！");

                                UpdateMainMessage("ラナ：見て！　何か空中に文字が浮かび上がってるわよ？");

                                UpdateMainMessage("アイン：マジかよ！？　すげぇなおい・・・");

                                UpdateMainMessage("ランディス：オラ。さっさとやれ、ザコが。");

                                UpdateMainMessage("アイン：って、分かったって。ええっと・・・");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：ここもレバーか・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：出たな浮遊文字が・・・ええっと・・・");
                            }
                        }

                        if (!GroundOne.WE2.TruthAnswer2_OK)
                        {
                            CancelKeyDownMovement();
                            using (TruthDecision2 td = new TruthDecision2())
                            {
                                td.StartPosition = FormStartPosition.CenterScreen;
                                td.Description = "青く照らし、地は新緑を謳歌する";
                                td.AnswerTop = "湖";
                                td.AnswerLeft = "人";
                                td.AnswerRight = "天";
                                td.AnswerBottom = "海";
                                td.ShowDialog();
                                if (td.Answer == TruthDecision2.AnswerType.Right)
                                {
                                    GroundOne.WE2.TruthAnswer2_2 = true;
                                }
                                else
                                {
                                    GroundOne.WE2.TruthAnswer2_2 = false;
                                }
                            }
                            JudgeEightAnswer(false);
                        }
                        else
                        {
                            UpdateMainMessage("　　　レバーはもう動かない。", true);
                        }
                        break;
                    #endregion
                    #region "技の部屋、複合レバーの看板１"
                    case 96:
                        if (!we.dungeonEvent259)
                        {
                            we.dungeonEvent259 = true;
                            UpdateMainMessage("アイン：っと、看板だな。どれどれ・・・");

                            UpdateMainMessage("　　　　『  始まりなるは、知　』");

                            UpdateMainMessage("ラナ：ねえ、アインはこれ分かる？");

                            UpdateMainMessage("アイン：言っている意味がよく分かんねえな・・・");

                            UpdateMainMessage("アイン：設問とも少しニュアンスが違うみたいだ。");

                            UpdateMainMessage("アイン：（しかし、何だこれ・・・）");

                            UpdateMainMessage("アイン：（始まり？　「知」って「知の部屋」の事か？）");

                            UpdateMainMessage("アイン：う〜ん・・・");

                            UpdateMainMessage("ラナ：分からないものは無理にひねっても無駄よ。");

                            UpdateMainMessage("アイン：まあ、そうかもな。");

                            UpdateMainMessage("ラナ：一応メモしておいたから。");

                            UpdateMainMessage("アイン：ああ、サンキュー");

                            UpdateMainMessage("アイン：・・・両隣にレバーがある事はあるが・・・");

                            UpdateMainMessage("ラナ：ッホラ、さっさと進めるわよ。");

                            UpdateMainMessage("アイン：あ、ああぁ。じゃあレバーと行きますか！");

                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  始まりなるは、知　』", true);
                        }
                        break;
                    #endregion
                    #region "技の部屋、複合レバー２−１"
                    case 97:
                        if (!we.dungeonEvent232)
                        {
                            we.dungeonEvent232 = true;

                            if (!we.dungeonEvent256)
                            {
                                we.dungeonEvent256 = true;
                                UpdateMainMessage("アイン：ん、これは・・・レバーか？");

                                UpdateMainMessage("ラナ：中央から上下左右の４方向にレバーが倒せるみたいね。");

                                UpdateMainMessage("アイン：っしゃ、じゃあ早速・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：うぉ！？　何かすげえ音が！！");

                                UpdateMainMessage("ラナ：見て！　何か空中に文字が浮かび上がってるわよ？");

                                UpdateMainMessage("アイン：マジかよ！？　すげぇなおい・・・");

                                UpdateMainMessage("ランディス：オラ。さっさとやれ、ザコが。");

                                UpdateMainMessage("アイン：って、分かったって。ええっと・・・");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：ここもレバーか・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：出たな浮遊文字が・・・ええっと・・・");
                            }
                        }

                        if (!GroundOne.WE2.TruthAnswer2_OK)
                        {
                            CancelKeyDownMovement();
                            using (TruthDecision2 td = new TruthDecision2())
                            {
                                td.StartPosition = FormStartPosition.CenterScreen;
                                td.Description = "流れ落ち、偉大なる海、天へと還り、無限循環";
                                td.AnswerTop = "生";
                                td.AnswerLeft = "水";
                                td.AnswerRight = "死";
                                td.AnswerBottom = "光";
                                td.ShowDialog();
                                if (td.Answer == TruthDecision2.AnswerType.Left)
                                {
                                    GroundOne.WE2.TruthAnswer2_3 = true;
                                }
                                else
                                {
                                    GroundOne.WE2.TruthAnswer2_3 = false;
                                }
                            }
                            JudgeEightAnswer(false);
                        }
                        else
                        {
                            UpdateMainMessage("　　　レバーはもう動かない。", true);
                        }
                        break;
                    #endregion
                    #region "技の部屋、複合レバー２−２"
                    case 98:
                        if (!we.dungeonEvent232)
                        {
                            we.dungeonEvent232 = true;

                            if (!we.dungeonEvent256)
                            {
                                we.dungeonEvent256 = true;
                                UpdateMainMessage("アイン：ん、これは・・・レバーか？");

                                UpdateMainMessage("ラナ：中央から上下左右の４方向にレバーが倒せるみたいね。");

                                UpdateMainMessage("アイン：っしゃ、じゃあ早速・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：うぉ！？　何かすげえ音が！！");

                                UpdateMainMessage("ラナ：見て！　何か空中に文字が浮かび上がってるわよ？");

                                UpdateMainMessage("アイン：マジかよ！？　すげぇなおい・・・");

                                UpdateMainMessage("ランディス：オラ。さっさとやれ、ザコが。");

                                UpdateMainMessage("アイン：って、分かったって。ええっと・・・");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：ここもレバーか・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：出たな浮遊文字が・・・ええっと・・・");
                            }
                        }

                        if (!GroundOne.WE2.TruthAnswer2_OK)
                        {
                            CancelKeyDownMovement();
                            using (TruthDecision2 td = new TruthDecision2())
                            {
                                td.StartPosition = FormStartPosition.CenterScreen;
                                td.Description = "あらゆる場所、可能な場を生めつくし、創元浄化";
                                td.AnswerTop = "天";
                                td.AnswerLeft = "災";
                                td.AnswerRight = "灰";
                                td.AnswerBottom = "火";
                                td.ShowDialog();
                                if (td.Answer == TruthDecision2.AnswerType.Bottom)
                                {
                                    GroundOne.WE2.TruthAnswer2_4 = true;
                                }
                                else
                                {
                                    GroundOne.WE2.TruthAnswer2_4 = false;
                                }
                            }
                            JudgeEightAnswer(false);
                        }
                        else
                        {
                            UpdateMainMessage("　　　レバーはもう動かない。", true);
                        }
                        break;
                    #endregion
                    #region "力の部屋、複合レバーの看板１"
                    case 99:
                        if (!we.dungeonEvent260)
                        {
                            we.dungeonEvent260 = true;
                            UpdateMainMessage("アイン：お、ここに来て看板かよ。どれどれ・・・");

                            UpdateMainMessage("　　　　『  次に求められるは、技　』");

                            UpdateMainMessage("ラナ：次に求められる・・・一体どういう事かしら、ここにきて");

                            UpdateMainMessage("アイン：技って言われてもな・・・技の部屋の事って事だよな？");

                            UpdateMainMessage("ラナ：う〜ん、私もそう思うんだけど。");

                            UpdateMainMessage("アイン：今ひとつ、ハッキリしねえんだよな、これが。");

                            UpdateMainMessage("アイン：オマケに両隣にはレバーと来てる。");

                            UpdateMainMessage("ラナ：まあそのレバーを操作してみるしかないんでしょ？");

                            UpdateMainMessage("アイン：ああ、まずは触ってみるとするか。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  次に求められるは、技　』", true);
                        }
                        break;
                    #endregion
                    #region "力の部屋、複合レバー３−１"
                    case 100:
                        if (!we.dungeonEvent232)
                        {
                            we.dungeonEvent232 = true;

                            if (!we.dungeonEvent256)
                            {
                                we.dungeonEvent256 = true;
                                UpdateMainMessage("アイン：ん、これは・・・レバーか？");

                                UpdateMainMessage("ラナ：中央から上下左右の４方向にレバーが倒せるみたいね。");

                                UpdateMainMessage("アイン：っしゃ、じゃあ早速・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：うぉ！？　何かすげえ音が！！");

                                UpdateMainMessage("ラナ：見て！　何か空中に文字が浮かび上がってるわよ？");

                                UpdateMainMessage("アイン：マジかよ！？　すげぇなおい・・・");

                                UpdateMainMessage("ランディス：オラ。さっさとやれ、ザコが。");

                                UpdateMainMessage("アイン：って、分かったって。ええっと・・・");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：ここもレバーか・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：出たな浮遊文字が・・・ええっと・・・");
                            }
                        }

                        if (!GroundOne.WE2.TruthAnswer2_OK)
                        {
                            CancelKeyDownMovement();
                            using (TruthDecision2 td = new TruthDecision2())
                            {
                                td.StartPosition = FormStartPosition.CenterScreen;
                                td.Description = "この世における絶対的な平等の象徴";
                                td.AnswerTop = "死";
                                td.AnswerLeft = "母";
                                td.AnswerRight = "父";
                                td.AnswerBottom = "命";
                                td.ShowDialog();
                                if (td.Answer == TruthDecision2.AnswerType.Top)
                                {
                                    GroundOne.WE2.TruthAnswer2_5 = true;
                                }
                                else
                                {
                                    GroundOne.WE2.TruthAnswer2_5 = false;
                                }
                            }
                            JudgeEightAnswer(true);
                        }
                        else
                        {
                            UpdateMainMessage("　　　レバーはもう動かない。", true);
                        }
                        break;
                    #endregion
                    #region "力の部屋、複合レバー３−２"
                    case 101:
                        if (!we.dungeonEvent232)
                        {
                            we.dungeonEvent232 = true;

                            if (!we.dungeonEvent256)
                            {
                                we.dungeonEvent256 = true;
                                UpdateMainMessage("アイン：ん、これは・・・レバーか？");

                                UpdateMainMessage("ラナ：中央から上下左右の４方向にレバーが倒せるみたいね。");

                                UpdateMainMessage("アイン：っしゃ、じゃあ早速・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：うぉ！？　何かすげえ音が！！");

                                UpdateMainMessage("ラナ：見て！　何か空中に文字が浮かび上がってるわよ？");

                                UpdateMainMessage("アイン：マジかよ！？　すげぇなおい・・・");

                                UpdateMainMessage("ランディス：オラ。さっさとやれ、ザコが。");

                                UpdateMainMessage("アイン：って、分かったって。ええっと・・・");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：ここもレバーか・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：出たな浮遊文字が・・・ええっと・・・");
                            }
                        }

                        if (!GroundOne.WE2.TruthAnswer2_OK)
                        {
                            CancelKeyDownMovement();
                            using (TruthDecision2 td = new TruthDecision2())
                            {
                                td.StartPosition = FormStartPosition.CenterScreen;
                                td.Description = "偉大なる母、厳格なる父より永久の確約";
                                td.AnswerTop = "源";
                                td.AnswerLeft = "生";
                                td.AnswerRight = "滅";
                                td.AnswerBottom = "諭";
                                td.ShowDialog();
                                if (td.Answer == TruthDecision2.AnswerType.Left)
                                {
                                    GroundOne.WE2.TruthAnswer2_6 = true;
                                }
                                else
                                {
                                    GroundOne.WE2.TruthAnswer2_6 = false;
                                }
                            }
                            JudgeEightAnswer(true);
                        }
                        else
                        {
                            UpdateMainMessage("　　　レバーはもう動かない。", true);
                        }
                        break;
                    #endregion
                    #region "心の部屋、複合レバーの看板１"
                    case 102:
                        if (!we.dungeonEvent261)
                        {
                            we.dungeonEvent261 = true;
                            UpdateMainMessage("アイン：おっと、ようやくそれらしき看板だな。");

                            UpdateMainMessage("　　　　『  終わりの前、すなわち、力　』");

                            UpdateMainMessage("アイン：終わりの・・・前？");

                            UpdateMainMessage("ラナ：終わる前って事よね。");

                            UpdateMainMessage("アイン：・・・何だろうな、こういうのはしっくりこねえ。");

                            UpdateMainMessage("アイン：両隣にはレバーがあるみたいだが。");

                            UpdateMainMessage("ラナ：この看板はちょっと謎がありそうよね。");

                            UpdateMainMessage("アイン：ああ、解けるかどうかは正直分からないな。");

                            UpdateMainMessage("アイン：まあレバーの方も探ってみるとするか。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『  終わりの前、すなわち、力　』", true);
                        }
                        break;
                    #endregion
                    #region "心の部屋、複合レバー４−１"
                    case 103:
                        if (!we.dungeonEvent232)
                        {
                            we.dungeonEvent232 = true;

                            if (!we.dungeonEvent256)
                            {
                                we.dungeonEvent256 = true;
                                UpdateMainMessage("アイン：ん、これは・・・レバーか？");

                                UpdateMainMessage("ラナ：中央から上下左右の４方向にレバーが倒せるみたいね。");

                                UpdateMainMessage("アイン：っしゃ、じゃあ早速・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：うぉ！？　何かすげえ音が！！");

                                UpdateMainMessage("ラナ：見て！　何か空中に文字が浮かび上がってるわよ？");

                                UpdateMainMessage("アイン：マジかよ！？　すげぇなおい・・・");

                                UpdateMainMessage("ランディス：オラ。さっさとやれ、ザコが。");

                                UpdateMainMessage("アイン：って、分かったって。ええっと・・・");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：ここもレバーか・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：出たな浮遊文字が・・・ええっと・・・");
                            }
                        }

                        if (!GroundOne.WE2.TruthAnswer2_OK)
                        {
                            CancelKeyDownMovement();
                            using (TruthDecision2 td = new TruthDecision2())
                            {
                                td.StartPosition = FormStartPosition.CenterScreen;
                                td.Description = "誤り、恐れ、喚き、屈し、失い、揺らぎ続ける存在";
                                td.AnswerTop = "敵";
                                td.AnswerLeft = "僧";
                                td.AnswerRight = "人";
                                td.AnswerBottom = "神";
                                td.ShowDialog();
                                if (td.Answer == TruthDecision2.AnswerType.Right)
                                {
                                    GroundOne.WE2.TruthAnswer2_7 = true;
                                }
                                else
                                {
                                    GroundOne.WE2.TruthAnswer2_7 = false;
                                }
                            }
                            JudgeEightAnswer(false);
                        }
                        else
                        {
                            UpdateMainMessage("　　　レバーはもう動かない。", true);
                        }
                        break;
                    #endregion
                    #region "心の部屋、複合レバー４−２"
                    case 104:
                        if (!we.dungeonEvent232)
                        {
                            we.dungeonEvent232 = true;

                            if (!we.dungeonEvent256)
                            {
                                we.dungeonEvent256 = true;
                                UpdateMainMessage("アイン：ん、これは・・・レバーか？");

                                UpdateMainMessage("ラナ：中央から上下左右の４方向にレバーが倒せるみたいね。");

                                UpdateMainMessage("アイン：っしゃ、じゃあ早速・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：うぉ！？　何かすげえ音が！！");

                                UpdateMainMessage("ラナ：見て！　何か空中に文字が浮かび上がってるわよ？");

                                UpdateMainMessage("アイン：マジかよ！？　すげぇなおい・・・");

                                UpdateMainMessage("ランディス：オラ。さっさとやれ、ザコが。");

                                UpdateMainMessage("アイン：って、分かったって。ええっと・・・");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：ここもレバーか・・・");

                                UpdateMainMessage("　　　【アインがレバーを掴んだ瞬間！】　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("アイン：出たな浮遊文字が・・・ええっと・・・");
                            }
                        }

                        if (!GroundOne.WE2.TruthAnswer2_OK)
                        {
                            CancelKeyDownMovement();
                            using (TruthDecision2 td = new TruthDecision2())
                            {
                                td.StartPosition = FormStartPosition.CenterScreen;
                                td.Description = "神と人、鳥、木々、全生物における連続の理そこに見つけたり";
                                td.AnswerTop = "虚";
                                td.AnswerLeft = "真";
                                td.AnswerRight = "心";
                                td.AnswerBottom = "理";
                                td.ShowDialog();
                                if (td.Answer == TruthDecision2.AnswerType.Bottom)
                                {
                                    GroundOne.WE2.TruthAnswer2_8 = true;
                                }
                                else
                                {
                                    GroundOne.WE2.TruthAnswer2_8 = false;
                                }
                            }
                            JudgeEightAnswer(false);
                        }
                        else
                        {
                            UpdateMainMessage("　　　レバーはもう動かない。", true);
                        }
                        break;
                    #endregion
                    #region "技の部屋、隠し通路発見"
                    case 105:
                        if (!we.dungeonEvent258)
                        {
                            we.dungeonEvent258 = true;

                            UpdateMainMessage("アイン：よおし来た！　隠し通路発見っと！！");

                            UpdateMainMessage("ラナ：驚いたわ・・・見事な執念よね。");

                            UpdateMainMessage("アイン：あると思ったぜ、さすがにここはな。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：一旦諦めかけてたヤツがほざいてんじゃねぇ。");

                                UpdateMainMessage("アイン：っぐ・・・確かに・・・");

                                UpdateMainMessage("ランディス：この先、てめぇ次第な面がある。何とかしてみろ。");

                                UpdateMainMessage("アイン：あ、あぁ分かった。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：何であるって思ったのよ？");

                                UpdateMainMessage("アイン：そりゃあ・・・何というか・・・");

                                UpdateMainMessage("ラナ：答えにくいなら別にいいわよ。何となくでしょ。");

                                UpdateMainMessage("アイン：あ、あぁ。そうそう、何となくだ。");

                                UpdateMainMessage("ラナ：せっかく見つけたんだし、進みましょ♪");

                                UpdateMainMessage("アイン：ああ、行ってみようぜ！");
                            }

                            // ２階、技の部屋、隠し通路の壁解除
                            dungeonTile[36 * Database.TRUTH_DUNGEON_COLUMN + 59].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_21);
                            dungeonField.Invalidate();
                        }
                        break;
                    #endregion
                    #region "３階階段直前"
                    case 106:
                        if (!we.dungeonEvent262)
                        {
                            we.dungeonEvent262 = true;
                            GroundOne.StopDungeonMusic();
                            GroundOne.PlayDungeonMusic(Database.BGM16, Database.BGM16LoopBegin);
                            UpdateMainMessage("アイン：っな・・・扉！？");

                            UpdateMainMessage("ラナ：ボスは倒したわよね？");

                            UpdateMainMessage("アイン：あ、ああ。どう考えてもあのデカイ海主が最後だろうな。");

                            UpdateMainMessage("ラナ：私もマップを作ってきたけど、この先あるとしたら階段しか考えられないわ。");

                            UpdateMainMessage("アイン：（・・・どうする・・・）");

                            using (TruthDecision td = new TruthDecision())
                            {
                                td.MainMessage = "　【　扉を開けますか？　】";
                                td.FirstMessage = "扉を開ける。";
                                td.SecondMessage = "扉を開けず、他を探す。";
                                td.StartPosition = FormStartPosition.CenterParent;
                                td.ShowDialog();
                                if (td.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                {
                                    GroundOne.StopDungeonMusic();

                                    UpdateMainMessage("アイン：ひょっとしてのまさかが、無いとは言い切れないが・・・");

                                    UpdateMainMessage("アイン：よし、開けるぜ！");

                                    UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                    blueWallRight[26 * Database.TRUTH_DUNGEON_COLUMN + 16] = false;
                                    blueWallLeft[26 * Database.TRUTH_DUNGEON_COLUMN + 17] = false;
                                    UpdateUnknownTile();
                                    dungeonField.Invalidate();

                                    UpdateMainMessage("    【【【　その瞬間、アインは凄まじい精神干渉を感じ取った！　】】】");

                                    UpdateMainMessage("アイン：っな！？　何だこいつは！？");

                                    UpdateMainMessage("　　　　【　汝、何を願う？　】");

                                    EncountBattle(Database.ENEMY_DRAGON_TINKOU_DEEPSEA, String.Empty, string.Empty, false, false, false, false);

                                    GroundOne.StopDungeonMusic();

                                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                                    if (we.AvailableThirdCharacter)
                                    {
                                        UpdateMainMessage("   （ランディスはスゥっとした目でアインを遠くから見ている・・・）");
                                    }

                                    UpdateMainMessage("ラナ：アイン・・・？ちょっと、そこのバカアイン！？");

                                    UpdateMainMessage("アイン：・・・え・・・？");

                                    UpdateMainMessage("アイン：っと・・・よお、ラナ。");

                                    UpdateMainMessage("ラナ：えっと・・・アンタひょっとして本当におかしくなったんじゃない？");

                                    UpdateMainMessage("アイン：いや、ラナ。今さ、無茶苦茶デカイ竜が俺の前に現れたんだよ。");

                                    UpdateMainMessage("ラナ：そんなものどこにも居ないわよ。アンタがそこでボーっとしてただけよ。");

                                    UpdateMainMessage("アイン：ああ、何かそんな気はしたんだが、やっぱりそうなのか。");

                                    UpdateMainMessage("アイン：何かこう・・・デカイ竜がさ。声をかけてきたんだよ。");

                                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                                    UpdateMainMessage("ラナ：ちょっと、本当に大丈夫なの？　少し心配なんだけど。");

                                    UpdateMainMessage("アイン：・・・いや。");

                                    UpdateMainMessage("アイン：いやいや、悪い悪い。");

                                    GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);

                                    UpdateMainMessage("アイン：っさてと、行こうぜ階段！");

                                    UpdateMainMessage("ラナ：え、大丈夫なの？　ホントに？");

                                    UpdateMainMessage("アイン：ああ、見ての通りカラっと元気さ！　ッハッハッハ！");

                                    UpdateMainMessage("ラナ：カラっとねえ・・・心配して損しちゃったかも、ハアァァ・・・");

                                    UpdateMainMessage("アイン：いやいや悪かったって。本当に何ともねえから。　っさ、行こうぜ！");

                                    UpdateMainMessage("ラナ：う〜ん、まあ分かったわ。早く降りて、街に戻りましょ♪");

                                    if (we.AvailableThirdCharacter)
                                    {
                                        UpdateMainMessage("ランディス：ボーっとしてて、足踏み外すのがオチだな。");

                                        UpdateMainMessage("アイン：な、わけねえって！っさ、師匠も行こうぜ！");

                                        UpdateMainMessage("ランディス：ッカ、急に元気になりやがって、好きにしろ。");

                                        UpdateMainMessage("アイン：悪い悪い！　ッハッハッハ！");

                                    }
                                    UpdateMainMessage("アイン：おし、じゃあ階段を降りるとするぜ！");

                                    we.dungeonEvent263_KeyOpen = true;
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：・・・　・・・");

                                    UpdateMainMessage("アイン：もう少し周りを探索してみるか。");

                                    if (we.AvailableThirdCharacter)
                                    {
                                        UpdateMainMessage("ランディス：的外れな探索するんじゃねぇぞ。分かってんな？");

                                        UpdateMainMessage("アイン：あ、ああ分かってるって。");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("ラナ：そう？まあ、アインがそう言うなら別に構わないわよ。");

                                        UpdateMainMessage("アイン：すまねえな。じゃあ他を探索するか！");
                                    }
                                    GroundOne.StopDungeonMusic();
                                    GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                                }
                            }
                        }
                        else
                        {
                            if (!we.dungeonEvent263_KeyOpen)
                            {
                                GroundOne.StopDungeonMusic();
                                GroundOne.PlayDungeonMusic(Database.BGM16, Database.BGM16LoopBegin);

                                UpdateMainMessage("アイン：・・・　・・・");

                                using (TruthDecision td = new TruthDecision())
                                {
                                    td.MainMessage = "　【　扉を開けますか？　】";
                                    td.FirstMessage = "扉を開ける。";
                                    td.SecondMessage = "扉を開けず、他を探す。";
                                    td.StartPosition = FormStartPosition.CenterParent;
                                    td.ShowDialog();
                                    if (td.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                    {
                                        GroundOne.StopDungeonMusic();

                                        UpdateMainMessage("アイン：ひょっとしてのまさかが、無いとは言い切れないが・・・");

                                        UpdateMainMessage("アイン：よし、開けるぜ！");

                                        UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                        blueWallRight[26 * Database.TRUTH_DUNGEON_COLUMN + 16] = false;
                                        blueWallLeft[26 * Database.TRUTH_DUNGEON_COLUMN + 17] = false;
                                        UpdateUnknownTile();
                                        dungeonField.Invalidate();

                                        UpdateMainMessage("    【【【　その瞬間、アインは凄まじい精神干渉を感じ取った！　】】】");

                                        UpdateMainMessage("アイン：っな！？　何だこいつは！？");

                                        UpdateMainMessage("　　　　【　汝、何を願う？　】");

                                        EncountBattle(Database.ENEMY_DRAGON_TINKOU_DEEPSEA, String.Empty, string.Empty, false, false, false, false);

                                        GroundOne.StopDungeonMusic();

                                        UpdateMainMessage("アイン：・・・　・・・　・・・");

                                        if (we.AvailableThirdCharacter)
                                        {
                                            UpdateMainMessage("   （ランディスはスゥっとした目でアインを遠くから見ている・・・）");
                                        }

                                        UpdateMainMessage("ラナ：アイン・・・？ちょっと、そこのバカアイン！？");

                                        UpdateMainMessage("アイン：・・・え・・・？");

                                        UpdateMainMessage("アイン：っと・・・よお、ラナ。");

                                        UpdateMainMessage("ラナ：えっと・・・アンタひょっとして本当におかしくなったんじゃない？");

                                        UpdateMainMessage("アイン：いや、ラナ。今さ、無茶苦茶デカイ竜が俺の前に現れたんだよ。");

                                        UpdateMainMessage("ラナ：そんなものどこにも居ないわよ。アンタがそこでボーっとしてただけよ。");

                                        UpdateMainMessage("アイン：ああ、何かそんな気はしたんだが、やっぱりそうなのか。");

                                        UpdateMainMessage("アイン：何かこう・・・デカイ竜がさ。声をかけてきたんだよ。");

                                        UpdateMainMessage("アイン：・・・　・・・　・・・");

                                        UpdateMainMessage("ラナ：ちょっと、本当に大丈夫なの？　少し心配なんだけど。");

                                        UpdateMainMessage("アイン：・・・いや。");

                                        UpdateMainMessage("アイン：いやいや、悪い悪い。");

                                        GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);

                                        UpdateMainMessage("アイン：っさてと、行こうぜ階段！");

                                        UpdateMainMessage("ラナ：え、大丈夫なの？　ホントに？");

                                        UpdateMainMessage("アイン：ああ、見ての通りカラっと元気さ！　ッハッハッハ！");

                                        UpdateMainMessage("ラナ：カラっとねえ・・・心配して損しちゃったかも、ハアァァ・・・");

                                        UpdateMainMessage("アイン：いやいや悪かったって。本当に何ともねえから。　っさ、行こうぜ！");

                                        UpdateMainMessage("ラナ：う〜ん、まあ分かったわ。早く降りて、街に戻りましょ♪");

                                        if (we.AvailableThirdCharacter)
                                        {
                                            UpdateMainMessage("ランディス：ボーっとしてて、足踏み外すのがオチだな。");

                                            UpdateMainMessage("アイン：な、わけねえって！っさ、師匠も行こうぜ！");

                                            UpdateMainMessage("ランディス：ッカ、急に元気になりやがって、好きにしろ。");

                                            UpdateMainMessage("アイン：悪い悪い！　ッハッハッハ！");

                                        }
                                        UpdateMainMessage("アイン：おし、じゃあ階段を降りるとするぜ！");
                                        we.dungeonEvent263_KeyOpen = true;
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：・・・　・・・");

                                        UpdateMainMessage("アイン：もう少し周りを探索してみるか。");

                                        if (we.AvailableThirdCharacter)
                                        {
                                            UpdateMainMessage("ランディス：的外れな探索するんじゃねぇぞ。分かってんな？");

                                            UpdateMainMessage("アイン：あ、ああ分かってるって。");
                                        }
                                        else
                                        {
                                            UpdateMainMessage("ラナ：そう？まあ、アインがそう言うなら別に構わないわよ。");

                                            UpdateMainMessage("アイン：すまねえな。じゃあ他を探索するか！");
                                        }
                                        GroundOne.StopDungeonMusic();
                                        GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                                    }
                                }
                            }
                        }
                        break;
                    #endregion
                    #region "下り階段"
                    case 107:
                        UpdateMainMessage("アイン：下り階段発見！さっそく降りるとするか？", true);
                        using (YesNoRequest ynr = new YesNoRequest())
                        {
                            bool tempCompleteArea = we.TruthCompleteArea2;
                            ynr.StartPosition = FormStartPosition.CenterParent;
                            ynr.ShowDialog();
                            if (ynr.DialogResult == DialogResult.Yes)
                            {
                                UpdateViewPoint(-Database.DUNGEON_MOVE_LEN * 0, -Database.DUNGEON_MOVE_LEN * 10);
                                UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * (0 - 0), Database.DUNGEON_MOVE_LEN * (19 - 10));
                                SetupDungeonMapping(3);
                                dungeonField.Invalidate();
                                UpdateUnknownTile();
                                UpdateMainMessage("", true);

                                if (!tempCompleteArea)
                                {
                                    UpdateMainMessage("アイン：おし、２階制覇した事だし、一度ユングの町へ戻るとするか。");
                                    CallHomeTown();
                                }
                            }
                            else
                            {
                                UpdateMainMessage("", true);
                            }

                        }
                        return true;
                    #endregion
                    #region "記憶の回想"
                    case 108:
                        if (GroundOne.WE2.TruthRecollection2 == false)
                        {
                            GroundOne.WE2.TruthRecollection2 = true;

                            GroundOne.StopDungeonMusic();

                            Story_TruthRecollection2_1();

                            UpdateMainMessage("ラナ：ちょっと、アイン？　アインってば！？");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：ッハ！！！");

                            UpdateMainMessage("ラナ：ホンットこんな所でなにッボーーーっとしてんのよ！？");

                            UpdateMainMessage("アイン：い、いやいや、悪い悪い。");

                            UpdateMainMessage("ラナ：妙に汗ビッショリになっちゃって、大丈夫なワケ？");

                            UpdateMainMessage("アイン：何か急に頭痛が激しくなってさ。");

                            UpdateMainMessage("アイン：過去の記憶が一気に蘇ってた。");

                            UpdateMainMessage("ラナ：そうなの。");

                            UpdateMainMessage("アイン：変な事言ってるかも知れないけどさ。");

                            UpdateMainMessage("ラナ：・・・");

                            UpdateMainMessage("アイン：俺、ヴェルゼ・アーティって人を知ってる気がする。");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：アーティの事か。");

                                UpdateMainMessage("アイン：あ、ああ・・・ていうか面識はほとんどないんだけど");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：いや、面識はほとんどないんだけど");
                            }

                            UpdateMainMessage("アイン：かすかに覚えてるというか・・・");

                            UpdateMainMessage("ラナ：何処で出会ったのよ？");

                            UpdateMainMessage("アイン：道草くってる時にその辺の通りでフラフラっと・・・");

                            UpdateMainMessage("ラナ：ええ、そんなテキトーなわけ！？");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：その印象。確かなんだろうな？");

                                UpdateMainMessage("アイン：あ、ああ・・・すまねえ・・・");

                                UpdateMainMessage("ランディス：いや、上等だ。");

                                UpdateMainMessage("ランディス：アイツの気配殺しは常人の域を超えてる。");

                                UpdateMainMessage("ランディス：テメェの力量じゃかすかに覚えてるのでやっとだろ。");

                                UpdateMainMessage("アイン：そうなのか・・・");
                            }

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：コンタクトの目的は？");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：何でそのアーティさんと出くわしてたのよ？");
                            }

                            UpdateMainMessage("アイン：何だっけ・・・確か・・");

                            UpdateMainMessage("アイン：風だ。　優しい風が触れたかと感じた瞬間。");

                            UpdateMainMessage("アイン：隣に居たんだ、確か。");

                            UpdateMainMessage("アイン：ダンジョンゲートの裏じゃなかったかな・・・どうだったっけ・・・");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：目的を聞いてんだぞボケ。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：う〜ん、そうじゃなくて目的よ、目的。");
                            }

                            UpdateMainMessage("アイン：あ、ああそっか・・・う〜ん・・・");

                            UpdateMainMessage("　　　『ヴェルゼ：アイン君、はじめまして。』");

                            UpdateMainMessage("　　　『本名はVerze Artieって言うんだ。よろしくね。』　　");

                            UpdateMainMessage("アイン：とか何とか・・・");

                            UpdateMainMessage("ラナ：普通の挨拶じゃない。何よそれ？？？");

                            UpdateMainMessage("アイン：・・・うおおぉぉぉ・・・そんな事言われても");

                            UpdateMainMessage("アイン：すまねえ・・・");

                            if (we.AvailableThirdCharacter)
                            {
                                UpdateMainMessage("ランディス：いや、十分だ。");

                                UpdateMainMessage("アイン：ラナ、師匠。すまねえ、何か変な話になっちまって。");
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：う〜ん、別に良いけど。あんまり会って無いみたいだし。");
                            }

                            UpdateMainMessage("ラナ：う〜ん・・・");

                            UpdateMainMessage("ラナ：ねえ。ボスも倒してるワケだし、先に進みましょ？");

                            UpdateMainMessage("ラナ：３階への階段ってマップ上から見て、すぐソコよ。");

                            UpdateMainMessage("ラナ：早い所３階に降りて、それで一回街に戻りましょ♪");

                            UpdateMainMessage("アイン：そうか、そうだよな。");

                            UpdateMainMessage("アイン：せっかく２階も終わりって所だ。３階行って一旦戻るとするか！");

                            UpdateMainMessage("ラナ：私もさすがに疲れちゃった、アインあとはお願いね♪");

                            UpdateMainMessage("アイン：ああ、了解！");

                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                }
            }
            #endregion
            #region "３階"
            else if (area == 3)
            {
                switch (ii)
                {
                    #region "２階へ戻る階段"
                    case 0:
                        UpdateMainMessage("アイン：２階へ戻る階段だな。ここは一旦戻るか？", true);
                        using (YesNoRequest ynr = new YesNoRequest())
                        {
                            ynr.StartPosition = FormStartPosition.CenterParent;
                            ynr.ShowDialog();
                            if (ynr.DialogResult == DialogResult.Yes)
                            {
                                UpdateViewPoint(-Database.DUNGEON_MOVE_LEN * 0, -Database.DUNGEON_MOVE_LEN * 17);
                                UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * (17 - 0), Database.DUNGEON_MOVE_LEN * (26 - 17));
                                SetupDungeonMapping(2);
                                dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                UpdateMainMessage("", true);
                            }
                        }
                        break;
                    #endregion
                    #region "入り口看板への誘導
                    case 1:
                        if (!we.dungeonEvent301)
                        {
                            we.dungeonEvent301 = true;

                            UpdateUnknownTileArea3_1();

                            UpdateMainMessage("アイン：へえ・・・入り口は何かスッキリとした感じだな。");

                            UpdateMainMessage("ラナ：ねえ、見て。向こう側に看板が見えるわよ♪");

                            UpdateMainMessage("アイン：っしゃ、早速だしそちらへ向かってみるとするか！");
                        }
                        break;
                    #endregion
                    #region "始めの誘導縛り"
                    case 2:
                        if (we.dungeonEvent301 && !we.dungeonEvent302_3)
                        {
                            UpdateMainMessage("ヴェルゼ：アイン君、まずは看板を見てみませんか？");

                            UpdateMainMessage("アイン：ああ、そうだな。");

                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                            this.dungeonField.Invalidate();
                        }
                        break;
                    case 3:
                        if (we.dungeonEvent301 && !we.dungeonEvent302_3)
                        {
                            UpdateMainMessage("ヴェルゼ：アイン君、まずは看板を見てみませんか？");

                            UpdateMainMessage("アイン：ああ、そうだな。");

                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                            this.dungeonField.Invalidate();
                        }
                        break;
                    #endregion
                    #region "始まりの看板１"
                    case 4:
                        if (we.dungeonEvent327)
                        {
                            if (!we.dungeonEvent333)
                            {
                                we.dungeonEvent333 = true;

                                UpdateMainMessage("アイン：ラナ、ズバリ教えてくれ。");

                                UpdateMainMessage("ラナ：なによ、やぶからぼうに。");

                                UpdateMainMessage("アイン：あの台座が出現した一本道までのルートなんだが");

                                UpdateMainMessage("ラナ：えっ、まさかこの看板にもあるんじゃないかって言いたいわけ？");

                                UpdateMainMessage("アイン：頼むよ、ちょっと調べてみてくれないか！");

                                UpdateMainMessage("ラナ：しょうがないわね・・・ホントに・・・");

                                UpdateMainMessage("ラナ：・・・う〜ん・・・");

                                UpdateMainMessage("アイン：ど、どうだ？");

                                UpdateMainMessage("ラナ：・・・");

                                UpdateMainMessage("ラナ：あっ");

                                UpdateMainMessage("ラナ：あったわよ、確かに小さい鏡が隠れてるわ♪");

                                UpdateMainMessage("アイン：お、マジか！やったぜ！");

                                UpdateMainMessage("ラナ：一本道に直接ワープ出来るみたいね♪");

                                UpdateMainMessage("アイン：ラッキーラッキー、ッハッハッハ！");

                                UpdateMainMessage("ラナ：じゃあ、さっそく使ってみる？");

                                UpdateMainMessage("アイン：ああ、頼むぜ。");
                            }

                            UpdateMainMessage("ラナ：台座ルートまで通じる鏡にワープできるわ。使ってみる？", true);
                            using (YesNoRequest ynr = new YesNoRequest())
                            {
                                ynr.StartPosition = FormStartPosition.CenterParent;
                                ynr.ShowDialog();
                                if (ynr.DialogResult == DialogResult.Yes)
                                {
                                    JumpByMirror(1, 22);
                                }
                                else
                                {
                                    UpdateMainMessage("", true);
                                }
                            }
                        }
                        else if (!we.dungeonEvent302_1)
                        {
                            we.dungeonEvent302_1 = true;

                            UpdateMainMessage("アイン：おし、看板読むぜ。");

                            UpdateMainMessage("　　　　『鏡、　それは本人の迷い・思考・判断を整理する。』");

                            UpdateMainMessage("アイン：・・・んんん？");

                            UpdateMainMessage("ヴェルゼ：どうやら何かの教えの様にも見えますが。");

                            UpdateMainMessage("アイン：ラナ、お前心当たりはあるか？");

                            UpdateMainMessage("ラナ：【心当たりがある】の使い方、微妙に間違えてるわよ・・・");

                            UpdateMainMessage("ラナ：鏡は自分を映し出すとも言われてるけど");

                            UpdateMainMessage("ラナ：この看板の場合、ちょっとニュアンスが違うのは確かね。");

                            UpdateMainMessage("アイン：いまいち言っている意味が理解出来ないな。");

                            UpdateMainMessage("アイン：（しかし・・・これは本当にどういう意味だ？）");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("ラナ：・・・（ジィ〜〜）");

                            UpdateMainMessage("アイン：・・・ッハ！");

                            UpdateMainMessage("アイン：いやぁ、悪い悪い！");

                            UpdateMainMessage("ラナ：ホント、しっかりしてよね。考え過ぎよ、バカアインは。");

                            UpdateMainMessage("ヴェルゼ：アイン君、先へ進めば何か分かるかもしれませんよ。");

                            UpdateMainMessage("アイン：そうだな、まあココは看板通り迷いを絶ち切って進むか！");

                            UpdateMainMessage("アイン：ッハッハッハッハ！");

                            UpdateMainMessage("ラナ：そんな事書いてないはずなんだけど、ハアァァァ〜・・・");

                            if (we.dungeonEvent302_1 && we.dungeonEvent302_2)
                            {
                                we.dungeonEvent302_3 = true;

                                UpdateMainMessage("ヴェルゼ：どうやら、ここの看板を２つ読んだ感じでは。");

                                UpdateMainMessage("ラナ：っえ？");

                                UpdateMainMessage("ヴェルゼ：何らかのある法則に従った上で、鏡を探し求め");

                                UpdateMainMessage("ヴェルゼ：鏡を使って次へ進めるよう示唆されている感じがしますね。");

                                UpdateMainMessage("ラナ：そうですよね♪");

                                UpdateMainMessage("アイン：確かに、そんな感じではあるな。");

                                UpdateMainMessage("ラナ：じゃあ、法則性を見つけつつ、鏡を使って進めば良いんですよね？");

                                UpdateMainMessage("ヴェルゼ：はい、そうなりますね。");

                                UpdateMainMessage("ラナ：何かヴェルゼさんが喋ると凄くわかりやすいわ、バカアインの解説とは大違いね♪");

                                UpdateMainMessage("アイン：ハイハイ、どうせ俺の解説は分かりにくいですよ。。。");

                                UpdateMainMessage("ヴェルゼ：いや、アイン君の懸念も一理あります。何となく分かりますよ。");

                                UpdateMainMessage("アイン：だろ！？やっぱ何か引っかかるだろ！？");

                                UpdateMainMessage("ラナ：それをちゃんと説明してくれないと、何に引っかかってるのかが分からないわよ。");

                                UpdateMainMessage("アイン：それが言えりゃ苦労はしねえんだって。");

                                UpdateMainMessage("ラナ：まあいいわ。看板はとりあえず読んだ事だし、進めてみましょ♪");

                                UpdateMainMessage("ヴェルゼ：何か思いついたら、また話しましょう。");

                                UpdateMainMessage("アイン：ああ、了解了解、じゃ進めるぜ！");
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『鏡、　それは本人の迷い・思考・判断を整理する。』", true);
                        }
                        break;
                    #endregion
                    #region "始まりの看板２"
                    case 5:
                        if (we.dungeonEvent327)
                        {
                            if (!we.dungeonEvent333)
                            {
                                we.dungeonEvent333 = true;

                                UpdateMainMessage("アイン：ラナ、ズバリ教えてくれ。");

                                UpdateMainMessage("ラナ：なによ、やぶからぼうに。");

                                UpdateMainMessage("アイン：あの台座が出現した一本道までのルートなんだが");

                                UpdateMainMessage("ラナ：えっ、まさかこの看板にもあるんじゃないかって言いたいわけ？");

                                UpdateMainMessage("アイン：頼むよ、ちょっと調べてみてくれないか！");

                                UpdateMainMessage("ラナ：しょうがないわね・・・ホントに・・・");

                                UpdateMainMessage("ラナ：・・・う〜ん・・・");

                                UpdateMainMessage("アイン：ど、どうだ？");

                                UpdateMainMessage("ラナ：・・・");

                                UpdateMainMessage("ラナ：あっ");

                                UpdateMainMessage("ラナ：あったわよ、確かに小さい鏡が隠れてるわ♪");

                                UpdateMainMessage("アイン：お、マジか！やったぜ！");

                                UpdateMainMessage("ラナ：一本道に直接ワープ出来るみたいね♪");

                                UpdateMainMessage("アイン：ラッキーラッキー、ッハッハッハ！");

                                UpdateMainMessage("ラナ：じゃあ、さっそく使ってみる？");

                                UpdateMainMessage("アイン：ああ、頼むぜ。");
                            }

                            UpdateMainMessage("ラナ：台座ルートまで通じる鏡にワープできるわ。使ってみる？", true);
                            using (YesNoRequest ynr = new YesNoRequest())
                            {
                                ynr.StartPosition = FormStartPosition.CenterParent;
                                ynr.ShowDialog();
                                if (ynr.DialogResult == DialogResult.Yes)
                                {
                                    JumpByMirror(1, 22);
                                }
                                else
                                {
                                    UpdateMainMessage("", true);
                                }
                            }
                        }
                        else if (!we.dungeonEvent302_2)
                        {
                            we.dungeonEvent302_2 = true;

                            UpdateMainMessage("アイン：看板だ。読んでみるぜ。");

                            UpdateMainMessage("　　　　『鏡から鏡へ。感じたままに触れよ。感じたままに進め。』");

                            UpdateMainMessage("アイン：鏡から鏡へ・・・・・・");

                            UpdateMainMessage("アイン：感じたままに進め？　一体どういう意味だ。");

                            UpdateMainMessage("ラナ：鏡から先に進めるって意味じゃないの？");

                            UpdateMainMessage("アイン：そうか？");

                            UpdateMainMessage("ラナ：何で【そうか？】なのよ、普通そう思わない？");

                            UpdateMainMessage("アイン：ま、まあそうかも知れないけどさ。");

                            UpdateMainMessage("ヴェルゼ：アイン君は、どう捉えたんですか？");

                            UpdateMainMessage("アイン：そうだなあ・・・");

                            UpdateMainMessage("アイン：【感じたまま】って所に、ポイントが一つある気がする。");

                            UpdateMainMessage("アイン：感じないままに進めるわけじゃねえって事だよな。");

                            UpdateMainMessage("ラナ：感じないままってどういうニュアンスなわけよ、意味が分からないわ。");

                            UpdateMainMessage("アイン：い、いやいや。何か思う所がないと、進めなくなるんじゃねえか、って思っただけさ。");

                            UpdateMainMessage("アイン：後は、【鏡から鏡へ】");

                            UpdateMainMessage("アイン：これ、どういう意味だよ？");

                            UpdateMainMessage("ラナ：だからそれを今アンタに聞いてるんでしょ！？");

                            UpdateMainMessage("ラナ：バカアインってホンットバカよね！？");

                            UpdateMainMessage("ヴェルゼ：まあまあ、ラナさんもそう責め立てず。");

                            UpdateMainMessage("ラナ：もう・・・まあヴェルゼさんがそういうなら、良いけど。");

                            if (we.dungeonEvent302_1 && we.dungeonEvent302_2)
                            {
                                we.dungeonEvent302_3 = true;

                                UpdateMainMessage("ヴェルゼ：どうやら、ここの看板を２つ読んだ感じでは。");

                                UpdateMainMessage("ラナ：っえ？");

                                UpdateMainMessage("ヴェルゼ：何らかのある法則に従った上で、鏡を探し求め");

                                UpdateMainMessage("ヴェルゼ：鏡を使って次へ進めるよう示唆されている感じがしますね。");

                                UpdateMainMessage("ラナ：そうですよね♪");

                                UpdateMainMessage("アイン：確かに、そんな感じではあるな。");

                                UpdateMainMessage("ラナ：じゃあ、法則性を見つけつつ、鏡を使って進めば良いんですよね？");

                                UpdateMainMessage("ヴェルゼ：はい、そうなりますね。");

                                UpdateMainMessage("ラナ：何かヴェルゼさんが喋ると凄くわかりやすいわ、バカアインの解説とは大違いね♪");

                                UpdateMainMessage("アイン：ハイハイ、どうせ俺の解説は分かりにくいですよ。。。");

                                UpdateMainMessage("ヴェルゼ：いや、アイン君の懸念も一理あります。何となく分かりますよ。");

                                UpdateMainMessage("アイン：だろ！？やっぱ何か引っかかるだろ！？");

                                UpdateMainMessage("ラナ：それをちゃんと説明してくれないと、何に引っかかってるのかが分からないわよ。");

                                UpdateMainMessage("アイン：それが言えりゃ苦労はしねえんだって。");

                                UpdateMainMessage("ラナ：まあいいわ。看板はとりあえず読んだ事だし、進めてみましょ♪");

                                UpdateMainMessage("ヴェルゼ：何か思いついたら、また話しましょう。");

                                UpdateMainMessage("アイン：ああ、了解了解、じゃ進めるぜ！");
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『鏡から鏡へ。感じたままに触れよ。感じたままに進め。』", true);
                        }
                        break;
                    #endregion
                    #region "鏡解説(1)"
                    case 6:
                    case 7:
                        if (!we.dungeonEvent303)
                        {
                            we.dungeonEvent303 = true;

                            UpdateMainMessage("アイン：っお！　鏡を発見！");

                            UpdateMainMessage("ラナ：へぇ・・・かなり綺麗ね。ダンジョンの中に放置とは思えないぐらいだわ。");

                            UpdateMainMessage("アイン：問題はこれをどうやって使って、先に進むかなんだが・・・");

                            UpdateMainMessage("アイン：何かレバーみたいなのは？");

                            UpdateMainMessage("ラナ：う〜ん、特に無いみたいだけど。");

                            UpdateMainMessage("ラナ：って、アレ？　この鏡ひょっとして。");

                            UpdateMainMessage("ヴェルゼ：・・・驚きましたね。秤の三面鏡ですよ、これは。");

                            UpdateMainMessage("ラナ：そうですよね？　ちょっと意外すぎて気づけなかったわ。");

                            UpdateMainMessage("ヴェルゼ：この鏡だったら、少しは理解が及びそうですね。");

                            UpdateMainMessage("アイン：っな、何だよお前ら。２人して良く知ってる風な言い回しじゃないか。");

                            UpdateMainMessage("ヴェルゼ：ハハハ、失礼致しました。アイン君はご存知ありませんでしたか？");

                            UpdateMainMessage("アイン：ああ、全然聞いた事はねえな。初めて見る鏡だ。");

                            UpdateMainMessage("ヴェルゼ：では、秤の三面鏡に関して、少し説明いたしましょう。");

                            UpdateMainMessage("ヴェルゼ：この鏡は、悩み・迷いが多い女性に対してよく用いられます。");

                            UpdateMainMessage("アイン：女性専用って事か？");

                            UpdateMainMessage("ヴェルゼ：いえ、そういう事ではありません、悩みや迷いが多い者であれば対象となります。");

                            UpdateMainMessage("ヴェルゼ：ただ、一般的には女性の方が多いという事にはなりますね。");

                            UpdateMainMessage("アイン：どういう使われ方をするんだ？");

                            UpdateMainMessage("ヴェルゼ：悩みを抱えている者がこの鏡の前に立つと、ある事が起こります。");

                            UpdateMainMessage("ヴェルゼ：その人にとって一番良く知りうる、または悩みの対象となっている人物が３人現れます。");

                            UpdateMainMessage("ヴェルゼ：その人物は対象となる人によって様々です。周囲の人からの特定は行えません。");

                            UpdateMainMessage("ヴェルゼ：ただ、鏡の対象となっている本人は、ある程度、予測出来ているでしょうね。");

                            UpdateMainMessage("アイン：ちょっと待ってくれよ。鏡の中に３人現れるってそれは実像なのか？");

                            UpdateMainMessage("ヴェルゼ：いえ、幻視です。");

                            UpdateMainMessage("ヴェルゼ：ただし、その幻視は曖昧な幻視ではありません。");

                            UpdateMainMessage("ヴェルゼ：ハッキリと映しだされた人物が、本人に対して語りかけてきます。");

                            UpdateMainMessage("ヴェルゼ：それも自己意志を持った状態で映されるため、ほぼ実像と言って差し支えはありません。");

                            UpdateMainMessage("アイン：ちょっ、っちょっと本当に待ってくれよ！！！");

                            UpdateMainMessage("　　　【【【　アインは得体の知れない不可解かつ不気味な感情に襲われた　】】】");

                            UpdateMainMessage("ラナ：ど、どうしたのよ？　いきなり大声出しちゃって");

                            UpdateMainMessage("アイン：い、いやなんか・・・何でもねえ、気のせいだ。");

                            UpdateMainMessage("ラナ：お化けの話じゃあるまいし、変な所で驚いたりしないでよね。");

                            UpdateMainMessage("アイン：悪い悪い、続けてくれ。");

                            UpdateMainMessage("ヴェルゼ：鏡の中に現れた３人と対象の本人は、そこから会話を始める事となります。");

                            UpdateMainMessage("ヴェルゼ：その会話が終われば、対象の本人の悩みや迷いは、綺麗にクリアされます。");

                            UpdateMainMessage("アイン：つまり、その。");

                            UpdateMainMessage("アイン：【お悩み解決相談所】って所か？");

                            UpdateMainMessage("ヴェルゼ：ハハハハ、アイン君は本当に面白いですね、その通りです。");

                            UpdateMainMessage("ラナ：実も蓋もない言い方ね・・・バカアインが意訳しないでよねホント。");

                            UpdateMainMessage("ヴェルゼ：ただ、その現象が現れるためには、幾つかステップがあります。");

                            UpdateMainMessage("アイン：へえ、どんなステップなんだ？");

                            UpdateMainMessage("ヴェルゼ：鏡の前に立ち、手で触れる。それだけです。");

                            UpdateMainMessage("アイン：幾つかっていうのはどういう意味だ？");

                            UpdateMainMessage("ヴェルゼ：触れるのは１回ではありません、本人が納得の行くまで何度か触れる事となります。");

                            UpdateMainMessage("アイン：なるほど、そうやって何度か触れる内に３人の像が決まってくるってワケか。");

                            UpdateMainMessage("ヴェルゼ：はい、そうなりますね。");

                            UpdateMainMessage("アイン：っしゃ、そうとわかれば早速やってみるとするか！");

                            UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：この鏡に手をかざして・・・");

                            UpdateMainMessage("アイン：・・・・・・");

                            UpdateMainMessage("アイン：ダメだ、なんにも起きねえな。");

                            UpdateMainMessage("ラナ：悩みや苦しみが無い人って羨ましいわね。");

                            UpdateMainMessage("アイン：いやいや、俺だって時として悩んだりしてだな。");

                            UpdateMainMessage("ラナ：具体的にどういう時よ？　言ってご覧なさいよ。");

                            UpdateMainMessage("アイン：そ、そりゃあ・・・お前・・・");

                            UpdateMainMessage("アイン：・・・");

                            UpdateMainMessage("アイン：ッホラ！今悩んでるじゃねえか！？");

                            UpdateMainMessage("ラナ：ハアアァァァァ・・・、そつなくバカよね。");

                            UpdateMainMessage("ヴェルゼ：すみません、どうやらボクでも反応はしませんでした。");

                            UpdateMainMessage("ラナ：ヴェルゼさんみたいに卓越してる人には合わないって事よね♪");

                            UpdateMainMessage("アイン：物凄い勢いで正反対な感想出たな・・・");

                            UpdateMainMessage("アイン：って事はやっぱり・・・女性の・・・");

                            UpdateMainMessage("アイン：・・・いや、女性かどうかは置いといてだな。");

                            UpdateMainMessage("　　　『ヴォグシイィィィァア！！！』（ラナのアフィニティーブローがアインに炸裂した）　　");

                            UpdateMainMessage("アイン：・・・ッヴモォ・・・ぐ、苦しい・・・");

                            UpdateMainMessage("アイン：か・・・可憐で繊細な女性、ラナ様にお願いいたします。");

                            UpdateMainMessage("ラナ：そんな滅茶苦茶な言い方も無いんじゃない、余計失礼よ？　ホンットにもう。");

                            UpdateMainMessage("ラナ：でも・・・う〜ん・・・");

                            UpdateMainMessage("ヴェルゼ：大丈夫ですよ。");

                            UpdateMainMessage("ラナ：っえ？");

                            UpdateMainMessage("ヴェルゼ：仮に三面鏡の対象になったとしても、三面鏡に映る像は他者には認識は出来ません。");

                            UpdateMainMessage("ヴェルゼ：実際その時になったら、ラナさん本人だけが像を認識する事となります。");

                            UpdateMainMessage("ラナ：っあ、そうなんだ♪　ありがとうございます。");

                            UpdateMainMessage("ラナ：じゃあ、ちょっと不安だけど・・・やってみるわね。");

                            UpdateMainMessage("　　『　ラナはそっと触れるように鏡に手を添えた　』　　");

                            UpdateMainMessage("　　『　その瞬間、辺りは白く光り始めた！　』　　");

                            UpdateMainMessage("ラナ：っわ、眩し・・・");

                            if (ii == 6)
                            {
                                JumpByMirror(26, 11, 0, 10, true);
                            }
                            else if (ii == 7)
                            {
                                JumpByMirror(4, 14, 0, 0, true);
                            }

                            UpdateMainMessage("　　　『ッバシュ！！！』　　");

                            UpdateMainMessage("アイン：・・・ん？何か周りの景色が変わったな。");

                            UpdateMainMessage("ヴェルゼ：どうやら、成功したようですね。");

                            UpdateMainMessage("ラナ：どうやら、違う場所にワープさせられたみたいね。");

                            UpdateMainMessage("アイン：ッゲ、それじゃあマップ通りに進むってわけには行かなくなったな。");

                            UpdateMainMessage("アイン：あっつっとと！！『マップそのもの』は役に立つからな！頼んだぜ！？");

                            UpdateMainMessage("ラナ：ッププ・・・何を変な所で気を使ってるのよ、フフ♪");

                            UpdateMainMessage("アイン：っくそう、笑わすために言ってるワケじゃねえんだが。");

                            UpdateMainMessage("アイン：まあいい。とっとと先に進めるぜ！");
                        }
                        break;
                    #endregion
                    #region "鏡ワープ area 1"
                    case 8:
                        JumpByMirror(22, 16, 5, 10);
                        UpdateUnknownTileArea3_0_1();
                        break;
                    case 9:
                        JumpByMirror(33, 0, 0, 20);
                        // 通路
                        break;
                    case 10:
                        JumpByMirror_1_3();
                        break;
                    case 11:
                        JumpByMirror(12, 8, 0, 3);
                        UpdateUnknownTileArea3_0_3();
                        break;
                    case 12:
                        JumpByMirror(23, 8, 0, 15);
                        UpdateUnknownTileArea3_0_4();
                        break;
                    case 13:
                        JumpByMirror(26, 11, 0, 10);
                        // 通路
                        break;
                    case 14:
                        JumpByMirror(4, 14, 0, 0);
                        // 通路
                        break;
                    case 15:
                        JumpByMirror(2, 2, 0, 0);
                        // 通路（左隅)
                        break;
                    case 16:
                        JumpByMirror(13, 16, 4, 0);
                        UpdateUnknownTileArea3_0_5();
                        break;
                    case 17:
                        JumpByMirror_1_10();
                        break;
                    case 18:
                        JumpByMirror_1_11();
                        break;
                    case 19:
                        JumpByMirror(4, 8, 0, 0);
                        UpdateUnknownTileArea3_0_8();
                        break;
                    case 20:
                        JumpByMirror(13, 0, 0, 5);
                        // 通路
                        break;
                    case 21:
                        JumpByMirror(7, 13, 1, 0);
                        UpdateUnknownTileArea3_0_9();
                        break;
                    case 22:
                        JumpByMirror(21, 10, 0, 8);
                        // 通路
                        break;
                    case 23:
                        JumpByMirror(37, 8, 0, 20);
                        UpdateUnknownTileArea3_0_10();
                        break;
                    case 24:
                        JumpByMirror_1_17();
                        break;
                    case 25:
                        JumpByMirror(32, 12, 0, 20);
                        UpdateUnknownTileArea3_0_12();
                        break;
                    case 26:
                        JumpByMirror(33, 9, 0, 20);
                        UpdateUnknownTileArea3_0_13();
                        break;
                    case 27:
                        JumpByMirror(7, 12, 0, 0);
                        UpdateUnknownTileArea3_0_9();
                        break;
                    case 28:
                        JumpByMirror_1_21();
                        break;
                    case 29:
                        JumpByMirror(0, 19, 7, 0);
                        // 通路（中央左の上）
                        break;
                    case 30:
                        JumpByMirror(39, 19, 7, 20);
                        // 通路（中央左の下）
                        break;
                    case 31:
                        JumpByMirror(33, 12, 0, 20);
                        UpdateUnknownTileArea3_0_12();
                        break;
                    case 32:
                        JumpByMirror(12, 18, 6, 0);
                        // 通路
                        break;
                    case 33:
                        JumpByMirror(37, 2, 0, 20);
                        // 通路（左下）
                        break;
                    case 34:
                        JumpByMirror(34, 9, 0, 20);
                        UpdateUnknownTileArea3_0_13();
                        break;
                    case 35:
                        JumpByMirror(7, 16, 4, 0);
                        UpdateUnknownTileArea3_0_15();
                        break;
                    case 36:
                        JumpByMirror_1_29();
                        break;
                    case 37:
                        JumpByMirror(23, 7, 0, 12);
                        break;
                    case 38:
                        JumpByMirror(31, 4, 0, 20);
                        break;
                    case 39:
                        JumpByMirror(21, 12, 0, 10);
                        UpdateUnknownTileArea3_0_7();
                        break;
                    case 40:
                        JumpByMirror_1_33();
                        break;
                    case 41:
                        JumpByMirror(37, 7, 0, 20);
                        UpdateUnknownTileArea3_0_10();
                        break;
                    case 42:
                        JumpByMirror(0, 6, 0, 0);
                        // 通路
                        break;
                    case 43:
                        JumpByMirror(12, 7, 0, 0);
                        UpdateUnknownTileArea3_0_3();
                        break;
                    case 44:
                        JumpByMirror_1_37();
                        // 左小部屋１
                        break;
                    case 45: // clear
                        JumpByMirror(19, 18, 6, 8);

                        if (!we.dungeonEvent305)
                        {
                            we.dungeonEvent305 = true;
                            blueWallLeft[19 * Database.TRUTH_DUNGEON_COLUMN + 19] = false;
                            blueWallRight[18 * Database.TRUTH_DUNGEON_COLUMN + 19] = false;
                            dungeonField.Invalidate();
                            UpdateMainMessage("    『ゴゴゴォ・・・ゴオオォォン！！』");

                            UpdateMainMessage("アイン：やった！扉が開いたぜ！！");

                            UpdateMainMessage("ヴェルゼ：やりましたね、ラナさん。");

                            UpdateMainMessage("ラナ：・・・");

                            UpdateMainMessage("ラナ：えっと・・・");

                            UpdateMainMessage("ラナ：ウン、やったわ♪");

                            UpdateMainMessage("アイン：・・・うん？何か微妙にノリが悪いな。");

                            UpdateMainMessage("ラナ：あ、ううん。解けた事に対して少し驚いてただけよ♪");

                            UpdateMainMessage("アイン：そうか、なら良いんだ。良かったじゃねえか！ッハッハッハ！");

                            // 304_1が無い場合初回突破。
                            if (!we.dungeonEvent304_1)
                            {
                                UpdateMainMessage("アイン：いやでもさ。マジで初見突破だもんな、ホントすげぇぜ！！");

                                UpdateMainMessage("ラナ：ッフフ、ありがとね♪");
                            }

                            UpdateMainMessage("ラナ：さて、このまま次に進めましょ♪");

                            UpdateMainMessage("        『この時、ラナの眼は普段のトパーズ色から薄白色になっていた。』");

                            if (!we.dungeonEvent304_5)
                            {
                                UpdateMainMessage("アイン：っな！？ラナ、お前目が・・・");

                                UpdateMainMessage("ラナ：っえ？");

                                UpdateMainMessage("アイン：い・・・いやいやいや・・・え〜と何て言うんだ。");

                                UpdateMainMessage("アイン：（目のカラーが変わってる事がすげぇ気になるが・・・）");

                                UpdateMainMessage("アイン：なんていうかさ、何で正解ルートが分かったんだよ？");

                                UpdateMainMessage("ラナ：それがね、鏡に触れると、自然と伝わってきてたのよ。");

                                UpdateMainMessage("アイン：何がだ？");

                                UpdateMainMessage("ラナ：どこからともなく声がしてきたのよ。それを何となく察知する感じだったわ。");

                                UpdateMainMessage("アイン：・・・へぇ・・・マジでか・・・");

                                UpdateMainMessage("ヴェルゼ：鏡に何度か触れた場合、初期段階としてそういった現象に本人は遭遇します。");

                                UpdateMainMessage("ヴェルゼ：その声は触れた本人にのみ微弱に伝播されますので、本人のみが知りうるという事になります。");

                                UpdateMainMessage("アイン：何かすげえ仕組みだったんだな・・・まあ、了解了解。");
                            }

                            if (!we.dungeonEvent304_6)
                            {
                                UpdateMainMessage("　　　＜＜＜　ラナが少し進んだ後・・・＞＞＞");

                                UpdateMainMessage("アイン（小声）：（おい、ヴェルゼ）");

                                UpdateMainMessage("ヴェルゼ（小声）：（なんでしょう？）");

                                UpdateMainMessage("アイン（小声）：（ヴェルゼは何か知ってるのか？）");

                                UpdateMainMessage("ヴェルゼ（小声）：（何をですか？）");

                                UpdateMainMessage("アイン（小声）：（ラナの目の色が変わってる件に関して、何か知ってるか？）");

                                UpdateMainMessage("ヴェルゼ（小声）：（・・・ええ、知ってます。）");

                                UpdateMainMessage("アイン（小声）：（危険は無いのか？）");

                                UpdateMainMessage("ヴェルゼ（小声）：（・・・無いわけではありません。）");

                                UpdateMainMessage("アイン（小声）：（っな！！）");

                                UpdateMainMessage("ヴェルゼ（小声）：（大丈夫です。明らかに危険だとなればボクが制止を試みます。）");

                                UpdateMainMessage("ヴェルゼ（小声）：（それに、ラナさんならきっと大丈夫でしょう。）");

                                UpdateMainMessage("アイン（小声）：（そうなのか？なら良いんだが・・・）");

                                UpdateMainMessage("アイン（小声）：（でもちょっと心配なんだよな。今日は一旦戻らせても良いか？）");

                                UpdateMainMessage("ヴェルゼ（小声）：（ええ、構いませんよ。アイン君の考えた通りに進めてください。）");

                                UpdateMainMessage("アイン（小声）：（ああ、悪いな。）");
                            }

                            UpdateMainMessage("アイン：ラナ、待て。");

                            UpdateMainMessage("アイン：一旦戻るぞ。今日はここまでだ。");

                            UpdateMainMessage("ラナ：え、せっかく開いたのに戻るってワケ！？　バカアインらしくない発言ね。");

                            UpdateMainMessage("アイン：まあ、俺らしくないってのは確かにそうなんだが・・・");

                            UpdateMainMessage("ヴェルゼ：すみません、ボクも少しだけ疲れてしまいました。せっかくなので一度戻らせてもらっても構いませんか？");

                            UpdateMainMessage("ラナ：あ、そうだったんですね、すみません。じゃあ喜んでお受けいたします♪");

                            UpdateMainMessage("アイン：すげえ勢いで態度が正反対だな・・・");

                            UpdateMainMessage("アイン：じゃまあ、悪いけど一旦戻りだ。青水晶を使うぜ？");

                            UpdateMainMessage("ラナ：ええ、良いわよ。");

                            UpdateMainMessage("アイン：じゃあ使うぜ。っそれ！");

                            CallHomeTown();
                        }
                        break;
                    case 46: // 失敗戻り
                        JumpByMirror(19, 3, 0, 10);
                        if (!we.dungeonEvent306)
                        {
                            if (!we.dungeonEvent304_1)
                            {
                                we.dungeonEvent304_1 = true;

                                UpdateMainMessage("アイン：あれ？向こうに看板が２つ見えるな・・・これはひょっとして。");

                                UpdateMainMessage("ラナ：どうやら一番初めの位置に戻ってしまったみたいね。");

                                UpdateMainMessage("ヴェルゼ：どうやら失敗ルートを踏んだようですね。");

                                UpdateMainMessage("アイン：まあ、最初だからな。もう１回ぐらい回ってみようぜ。");

                                UpdateMainMessage("ラナ：そうね、もう一度試してみるわ。");
                            }
                            else if (!we.dungeonEvent304_2)
                            {
                                we.dungeonEvent304_2 = true;
                                UpdateMainMessage("アイン：おっと、また元の場所か・・・");

                                UpdateMainMessage("アイン：しかしまいったな。ヒントらしいヒントが全く無いよな。");

                                UpdateMainMessage("ラナ：・・・う〜ん。");

                                UpdateMainMessage("ヴェルゼ：どうかしましたか？");

                                UpdateMainMessage("ラナ：あ、いえ。なんでもないんです。");

                                UpdateMainMessage("アイン：出たな、ラナの「なんでもない」攻撃が炸裂。");

                                UpdateMainMessage("ラナ：ちょっと、失礼な言い方ね。ホントに何でもないんだから。");

                                UpdateMainMessage("ヴェルゼ：分かりました。どうしても何か気になる事があれば言ってくださいね。");

                                UpdateMainMessage("ラナ：あ、ハイ♪");
                            }
                            else if (!we.dungeonEvent304_3)
                            {
                                we.dungeonEvent304_3 = true;
                                UpdateMainMessage("アイン：おっと、また元の場所か・・・");

                                UpdateMainMessage("アイン：本当、鏡だらけだな。どうしろってんだこんなの。");

                                UpdateMainMessage("ラナ：ヴェルゼさん、一つだけ教えて。");

                                UpdateMainMessage("ヴェルゼ：はい、何でしょう？");

                                UpdateMainMessage("ラナ：鏡に写る像は、私に必ず関連してる人？　無関係の人が映し出される可能性はあるのかしら？");

                                UpdateMainMessage("アイン：っな、お前一体何を聞いて・・・");

                                UpdateMainMessage("ヴェルゼ：ラナさんとは無関係の人が映し出される可能性はありませんよ。");

                                UpdateMainMessage("ヴェルゼ：必ずラナさんと何かしら関係がある人が映し出されます。");

                                UpdateMainMessage("アイン：っな、何だ何だ？何か思いついたのか！？");

                                UpdateMainMessage("ラナ：バカアインうるさい、ちょっと黙ってて、あんたホントバカなんだから。");

                                UpdateMainMessage("アイン：ちぇ・・・了解了解。");

                                UpdateMainMessage("ラナ：思いついたワケじゃないわ。ただ・・・");

                                UpdateMainMessage("アイン：・・・ただ・・・？");

                                UpdateMainMessage("ラナ：あ〜〜もう、何でもないって言ってるでしょ！！！");

                                UpdateMainMessage("　　　『シュッドォォォン！！！』（ラナのエクスプロード・ブローがアインに炸裂）　　");

                                UpdateMainMessage("アイン：・・・（ッパタ・・・）");

                                UpdateMainMessage("ヴェルゼ：ラナさん、焦らずに自分のペースで構いませんからね。");

                                UpdateMainMessage("ラナ：はい♪");
                            }
                            else if (!we.dungeonEvent304_4)
                            {
                                we.dungeonEvent304_4 = true;

                                UpdateMainMessage("アイン：おっと、また元の場所か・・・");

                                UpdateMainMessage("アイン：どうだ、ラナ。何かヒントらしきものでも掴めそうか？");

                                UpdateMainMessage("ラナ：・・・ええ、何とか掴めそうよ。");

                                UpdateMainMessage("アイン：そうか・・・");

                                UpdateMainMessage("アイン：あれ、今掴めそうって言ったのか！？");

                                UpdateMainMessage("ラナ：そうよ♪");

                                UpdateMainMessage("アイン：どこらへんが掴めそうなんだよ！？俺には全然わかんねえぞ。");

                                UpdateMainMessage("ラナ：まあまあ、良いじゃない♪");

                                UpdateMainMessage("ラナ：ねえ、後一回だけ回らせて。");

                                UpdateMainMessage("アイン：まあ、そりゃ何回でも良いけどさ。");

                                UpdateMainMessage("アイン：ヴェルゼ、お前何か知ってるんじゃないのか？");

                                UpdateMainMessage("ヴェルゼ：いえ、ボクにも正解ルートは皆目検討が付きません。");

                                UpdateMainMessage("ヴェルゼ：ただし、ラナさんが正解に至る理由は知っています。");

                                UpdateMainMessage("アイン：どういう意味だ？");

                                UpdateMainMessage("ラナ：鏡に触れると、自然と伝わってくるのよ。");

                                UpdateMainMessage("アイン：何がだ？");

                                UpdateMainMessage("ラナ：どこからともなく声がしてくるのよ。それを何となく察知する感じね。");

                                UpdateMainMessage("アイン：・・・へぇ・・・マジでか・・・");

                                UpdateMainMessage("ヴェルゼ：鏡に何度か触れた場合、初期段階としてそういった現象に本人は遭遇します。");

                                UpdateMainMessage("ヴェルゼ：その声は触れた本人にのみ微弱に伝播されますので、本人のみが知りうるという事になります。");

                                UpdateMainMessage("アイン：何かすげえ仕組みだな・・・まあ、了解了解。");

                                UpdateMainMessage("アイン：ラナ、ここはお前が居ないとダメみたいだな。本当頼んだぜ。");

                                UpdateMainMessage("ラナ：ええ、任せておいて♪");
                            }
                            else if (!we.dungeonEvent304_5)
                            {
                                we.dungeonEvent304_5 = true;

                                UpdateMainMessage("アイン：おっと、また元の場所か・・・");

                                UpdateMainMessage("アイン：どうだ、ラナ？");

                                UpdateMainMessage("ラナ：・・・う〜ん、多分だけどね。");

                                UpdateMainMessage("ラナ：少し通ってみたから、分かるとおもうんだけど。");

                                UpdateMainMessage("ラナ：四角部屋の中を辿っていくんだと思うわ。");

                                UpdateMainMessage("ラナ：細長くつながってる通路側に出ちゃうとダメみたいね。");

                                UpdateMainMessage("アイン：・・・なるほど。言われてみりゃ、そうかもな。");

                                UpdateMainMessage("ラナ：あと、もう一つ・・・");

                                UpdateMainMessage("        『ラナの眼は普段のトパーズ色から薄白色になっていた。』");

                                UpdateMainMessage("ラナ：初めは、４の３２よ。間違いないわ。");

                                UpdateMainMessage("アイン：っな！？ラナ、お前目が・・・");

                                UpdateMainMessage("アイン：って、４の３２？？　ラナ、何を言ってるんだ？？");

                                UpdateMainMessage("ヴェルゼ：今のはおそらく、本ダンジョンのXY座標位置ですね。");

                                UpdateMainMessage("ヴェルゼ：０から数えてＸ方向に４、Ｙ方向に３２の位置にある鏡を潜るという意味でしょう。");

                                UpdateMainMessage("ラナ：その先は・・・ゴメン、まだ見えないわ。");

                                UpdateMainMessage("アイン：い・・・いやいやいや・・・え〜と何て言うんだ。");

                                UpdateMainMessage("アイン：（目のカラーが変わってる事がすげぇ気になるが・・・）");

                                UpdateMainMessage("アイン：なんていうかさ、何でそんなのが分かるんだよ？");

                                UpdateMainMessage("ラナ：何となくよ。");

                                UpdateMainMessage("ラナ：ッササ、もう１回潜ってみましょ♪");

                                UpdateMainMessage("アイン：あっ、ああ。。。まあ良いが・・・");
                            }
                            else if (!we.dungeonEvent304_6)
                            {
                                we.dungeonEvent304_6 = true;

                                UpdateMainMessage("アイン：おっと、また元の場所か・・・");

                                UpdateMainMessage("アイン：ええと・・・ラナ？");

                                UpdateMainMessage("        『ラナの眼は普段のトパーズ色から薄白色になっている。』");

                                UpdateMainMessage("ラナ：ハッキリ見えたわ♪");

                                UpdateMainMessage("ラナ：４−３２");

                                UpdateMainMessage("ラナ：１７−３５");

                                UpdateMainMessage("ラナ：１１−９");

                                UpdateMainMessage("ラナ：１０−３１");

                                UpdateMainMessage("ラナ：間違いないわ、やってみましょ♪");

                                UpdateMainMessage("アイン：えっと・・・ちょっと良いかラナ？");

                                UpdateMainMessage("ラナ：何？");

                                UpdateMainMessage("アイン：だから何で分かるんだよ？");

                                UpdateMainMessage("ラナ：だから何となくよ♪");

                                UpdateMainMessage("アイン：どう何となくなんだよ。全然わかんねえぞ。");

                                UpdateMainMessage("アイン：方角とか位置からそういうのが何かヒントでもあったか？");

                                UpdateMainMessage("ラナ：う〜ん、そんなんじゃないわよ。");

                                UpdateMainMessage("ラナ：何となく聞こえてくるのよ、鏡から♪");

                                UpdateMainMessage("アイン：そうか・・・ならまあ、やっぱり鏡に触れてるラナにだけ何か伝わってるって話で本当みたいだな。");

                                UpdateMainMessage("ラナ：行きましょ♪");

                                UpdateMainMessage("　　　＜＜＜　ラナが少し進んだ後・・・＞＞＞");

                                UpdateMainMessage("アイン（小声）：（おい、ヴェルゼ）");

                                UpdateMainMessage("ヴェルゼ（小声）：（なんでしょう？）");

                                UpdateMainMessage("アイン（小声）：（ヴェルゼは何か知ってるのか？）");

                                UpdateMainMessage("ヴェルゼ（小声）：（何をですか？）");

                                UpdateMainMessage("アイン（小声）：（ラナの目の色が変わってる件に関して、何か知ってるか？）");

                                UpdateMainMessage("ヴェルゼ（小声）：（・・・ええ、知ってます。）");

                                UpdateMainMessage("アイン（小声）：（危険は無いのか？）");

                                UpdateMainMessage("ヴェルゼ（小声）：（・・・無いわけではありません。）");

                                UpdateMainMessage("アイン（小声）：（っな！！）");

                                UpdateMainMessage("ヴェルゼ（小声）：（大丈夫です。明らかに危険だとなればボクが制止を試みます。）");

                                UpdateMainMessage("ヴェルゼ（小声）：（それに、ラナさんならきっと大丈夫でしょう。）");

                                UpdateMainMessage("アイン（小声）：（そうなのか？なら良いんだが・・・）");

                                UpdateMainMessage("ヴェルゼ（小声）：（・・・少し離れすぎましたね。行きましょう。）");

                                UpdateMainMessage("アイン（小声）：（ん？あ、あぁ。）");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：おっと、また元の場所か・・・");

                                UpdateMainMessage("ラナ：おかしいわね・・・どこかで間違えたかしら。");

                                UpdateMainMessage("アイン：ええと・・・ラナが前に言ってたやつをもう1回言って見るな。");

                                UpdateMainMessage("アイン：４−３２");

                                UpdateMainMessage("アイン：１７−３５");

                                UpdateMainMessage("アイン：１１−９");

                                UpdateMainMessage("アイン：１０−３１");

                                UpdateMainMessage("アイン：どうだ、合ってるか？");

                                UpdateMainMessage("ラナ：う〜ん、合ってると思ったんだけど。");

                                UpdateMainMessage("ヴェルゼ：鏡を通じてラナさんが発した言葉にミスは無いと思いますよ。");

                                UpdateMainMessage("ヴェルゼ：自信を持って進めてみましょう。きっと大丈夫ですから。");

                                UpdateMainMessage("ラナ：はい、ありがとうございます。");

                                UpdateMainMessage("アイン：っしゃ。じゃあ頼んだぜ、ラナ。");
                            }
                        }
                        break;
                    #endregion
                    #region "真実解のイベント１【記憶の回想】"
                    case 47:
                        if (GroundOne.WE2.TruthRecollection3_1 == false)
                        {
                            GroundOne.WE2.TruthRecollection3_1 = true;

                            GroundOne.StopDungeonMusic();

                            Story_TruthRecollection3_1();

                            UpdateMainMessage("ラナ：・・・バカアイン？");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：ッハイー！ハイハイハイ、何でしょうか！！");

                            UpdateMainMessage("　　　『ッシャゴオォォオォォ！！！』（ラナのライトニングキックがアインに炸裂）　　");

                            if (GroundOne.WE2.TruthRecollection1 || GroundOne.WE2.TruthRecollection2)
                            {
                                UpdateMainMessage("アイン：悪ぃ、例の頭痛だ。すまねえすまねえ。");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：いつつつ・・・何かむちゃくちゃ変な頭痛がしてたんだよ。すまねえすまねえ。");
                            }

                            UpdateMainMessage("ラナ：まあいいけど、汗びっしょりなのも何とかしなさいよね。");

                            UpdateMainMessage("ヴェルゼ：アイン君、この現象はいつ頃からあるんですか？");

                            UpdateMainMessage("アイン：あ、ああ・・・何ていうかな・・・");

                            if (GroundOne.WE2.TruthRecollection1)
                            {
                                UpdateMainMessage("アイン：何か１階の最後の隠し部屋を見つけた時からだな。");
                            }
                            else if (GroundOne.WE2.TruthRecollection2)
                            {
                                UpdateMainMessage("アイン：何か２階の最後の隠し部屋を見つけた時からだな。");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：今がはじめてだ。");
                            }

                            UpdateMainMessage("ヴェルゼ：・・・ラナさんにはこの現象は？");

                            UpdateMainMessage("ラナ：私はバカアインみたいな現象は起きてないわね。");

                            UpdateMainMessage("ヴェルゼ：そうですか。分かりました。");

                            UpdateMainMessage("ヴェルゼ：アイン君、汗の量が少し異常ですので、もし具合が悪いのであれば必ず言ってください。体調が芳しくない場合は、ちゃんと休むべきです。");

                            UpdateMainMessage("アイン：あ、ああ。悪い悪い、大丈夫だ。心配かけてすまねえ。");

                            UpdateMainMessage("ラナ：まあ、鏡のエリアも突破したと思うし、この小さい区画を進むだけだと思うわ、はやく出てしまいましょ♪");

                            UpdateMainMessage("アイン：ああ、了解！");

                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "鏡ワープ area2"
                    case 48: // 38
                        JumpByMirror_2_38();
                        return true;
                    case 49: // 39
                        JumpByMirror_2_39();
                        return true;
                    case 50: // 40
                        JumpByMirror_2_40();
                        return true;
                    case 51: // 41
                        JumpByMirror_2_41();
                        return true;
                    case 52: // 42
                        JumpByMirror_2_42();
                        return true;
                    case 53: // 43
                        JumpByMirror_2_43();
                        return true;
                    case 54: // 44
                        JumpByMirror_2_44();
                        return true;
                    case 55: // 45
                        JumpByMirror_2_45();
                        return true;
                    case 56: // 46
                        JumpByMirror_2_46();
                        return true;
                    case 57: // 47
                        JumpByMirror_2_47();
                        return true;
                    case 58: // 48
                        JumpByMirror_2_48();
                        return true;
                    case 59: // 49
                        JumpByMirror_2_49();
                        return true;
                    case 60: // 50
                        JumpByMirror_2_50();
                        return true;
                    case 61: // 51
                        JumpByMirror_2_51();
                        return true;
                    case 62: // 52
                        JumpByMirror_2_52();
                        return true;
                    case 63: // 53
                        JumpByMirror_2_53();
                        return true;
                    case 64: // 54
                        JumpByMirror_2_54();
                        return true;
                    case 65: // 55
                        JumpByMirror_2_55();
                        return true;
                    case 66: // 56
                        JumpByMirror_2_56();
                        return true;
                    case 67: // 57
                        JumpByMirror_2_57();
                        return true;
                    case 68: // 58
                        JumpByMirror_2_58();
                        return true;
                    case 69: // 59
                        JumpByMirror_2_59();
                        return true;
                    case 70: // 60
                        JumpByMirror_2_60();
                        return true;
                    case 71: // 61
                        JumpByMirror_2_61();
                        return true;
                    case 72: // 62
                        JumpByMirror_2_62();
                        return true;
                    case 73: // 63
                        JumpByMirror_2_63();
                        return true;
                    case 74: // 64
                        JumpByMirror_2_64();
                        return true;
                    case 75: // 65
                        JumpByMirror_2_65();
                        return true;
                    case 76: // 66
                        JumpByMirror_2_66();
                        return true;
                    case 77: // 67
                        JumpByMirror_2_67();
                        return true;
                    case 78: // 68
                        JumpByMirror_2_68();
                        return true;
                    case 79: // 69
                        JumpByMirror_2_69();
                        return true;
                    case 80: // 70
                        JumpByMirror_2_70();
                        return true;
                    case 81: // 71
                        JumpByMirror_2_71();
                        return true;
                    case 82: // 72
                        JumpByMirror_2_72();
                        return true;
                    case 83: // 73
                        JumpByMirror_2_73();
                        return true;
                    case 84: // 74
                        JumpByMirror_2_74();
                        return true;
                    case 85: // 75
                        JumpByMirror_2_75();
                        return true;
                    case 86: // 76
                        JumpByMirror_2_76();
                        return true;
                    case 87: // 77
                        JumpByMirror_2_77();
                        return true;
                    case 88: // 78
                        JumpByMirror_2_78();
                        return true;
                    case 89: // 79
                        JumpByMirror_2_79();
                        return true;
                    case 90: // 80
                        JumpByMirror_2_80();
                        return true;
                    case 91: // 81
                        JumpByMirror_2_81();
                        return true;
                    case 92: // 82
                        JumpByMirror_2_82();
                        return true;
                    case 93: // 83
                        JumpByMirror_2_83();
                        return true;
                    case 94: // 84
                        JumpByMirror_2_84();
                        return true;
                    // ５段階目以降、ルート通過順序によって可変。
                    // 36 43
                    // 17 53
                    // 26 24
                    // 38 21
                    // 24 21

                    // １箇所グループ
                    case 95: // 85
                    case 96: // 86
                    case 97: // 87
                    case 105: // 95
                    case 112: // 102
                    case 113: // 103
                    case 121: // 111
                    case 124: // 114
                    case 125: // 115
                    case 133: // 123
                    case 138: // 128
                    case 144: // 134
                    // ２箇所グループ
                    case 122: // 112
                    case 123: // 113
                    case 142: // 132
                    case 143: // 133
                    case 145: // 135
                    case 146: // 136
                    // ３箇所グループ
                    case 98: // 88
                    case 99: // 89
                    case 100: // 90
                    case 106: // 96
                    case 107: // 97
                    case 108: // 98
                    case 109: // 99
                    case 110: // 100
                    case 111: // 101
                    case 114: // 104
                    case 115: // 105
                    case 116: // 106
                    case 130: // 120
                    case 131: // 121
                    case 132: // 122
                    case 139: // 129
                    case 140: // 130
                    case 141: // 131
                    // ４箇所グループ
                    case 101: // 91
                    case 102: // 92
                    case 103: // 93
                    case 104: // 94
                    case 117: // 107
                    case 118: // 108
                    case 119: // 109
                    case 120: // 110
                    case 126: // 116
                    case 127: // 117
                    case 128: // 118
                    case 129: // 119
                    case 134: // 124
                    case 135: // 125
                    case 136: // 126
                    case 137: // 127
                    case 147: // 137
                    case 148: // 138
                    case 149: // 139
                    case 150: // 140
                        // 正解ルート
                        if ((GroundOne.WE2.TruthWay3_1 == ii) ||
                            (GroundOne.WE2.TruthWay3_2 == ii) ||
                            (GroundOne.WE2.TruthWay3_3 == ii) ||
                            (GroundOne.WE2.TruthWay3_4 == ii) ||
                            (GroundOne.WE2.TruthWay3_5 == ii))
                        {
                            // 何もせず、下へ抜ける。
                        }
                        // WrongAnswerルート
                        else
                        {
                            if ((GroundOne.WE2.TruthWay95 == -1 && ii == 95) ||
                                (GroundOne.WE2.TruthWay96 == -1 && ii == 96) ||
                                (GroundOne.WE2.TruthWay97 == -1 && ii == 97) ||
                                (GroundOne.WE2.TruthWay98 == -1 && ii == 98) ||
                                (GroundOne.WE2.TruthWay99 == -1 && ii == 99) ||
                                (GroundOne.WE2.TruthWay100 == -1 && ii == 100) ||
                                (GroundOne.WE2.TruthWay101 == -1 && ii == 101) ||
                                (GroundOne.WE2.TruthWay102 == -1 && ii == 102) ||
                                (GroundOne.WE2.TruthWay103 == -1 && ii == 103) ||
                                (GroundOne.WE2.TruthWay104 == -1 && ii == 104) ||
                                (GroundOne.WE2.TruthWay105 == -1 && ii == 105) ||
                                (GroundOne.WE2.TruthWay106 == -1 && ii == 106) ||
                                (GroundOne.WE2.TruthWay107 == -1 && ii == 107) ||
                                (GroundOne.WE2.TruthWay108 == -1 && ii == 108) ||
                                (GroundOne.WE2.TruthWay109 == -1 && ii == 109) ||
                                (GroundOne.WE2.TruthWay110 == -1 && ii == 110) ||
                                (GroundOne.WE2.TruthWay111 == -1 && ii == 111) ||
                                (GroundOne.WE2.TruthWay112 == -1 && ii == 112) ||
                                (GroundOne.WE2.TruthWay113 == -1 && ii == 113) ||
                                (GroundOne.WE2.TruthWay114 == -1 && ii == 114) ||
                                (GroundOne.WE2.TruthWay115 == -1 && ii == 115) ||
                                (GroundOne.WE2.TruthWay116 == -1 && ii == 116) ||
                                (GroundOne.WE2.TruthWay117 == -1 && ii == 117) ||
                                (GroundOne.WE2.TruthWay118 == -1 && ii == 118) ||
                                (GroundOne.WE2.TruthWay119 == -1 && ii == 119) ||
                                (GroundOne.WE2.TruthWay120 == -1 && ii == 120) ||
                                (GroundOne.WE2.TruthWay121 == -1 && ii == 121) ||
                                (GroundOne.WE2.TruthWay122 == -1 && ii == 122) ||
                                (GroundOne.WE2.TruthWay123 == -1 && ii == 123) ||
                                (GroundOne.WE2.TruthWay124 == -1 && ii == 124) ||
                                (GroundOne.WE2.TruthWay125 == -1 && ii == 125) ||
                                (GroundOne.WE2.TruthWay126 == -1 && ii == 126) ||
                                (GroundOne.WE2.TruthWay127 == -1 && ii == 127) ||
                                (GroundOne.WE2.TruthWay128 == -1 && ii == 128) ||
                                (GroundOne.WE2.TruthWay129 == -1 && ii == 129) ||
                                (GroundOne.WE2.TruthWay130 == -1 && ii == 130) ||
                                (GroundOne.WE2.TruthWay131 == -1 && ii == 131) ||
                                (GroundOne.WE2.TruthWay132 == -1 && ii == 132) ||
                                (GroundOne.WE2.TruthWay133 == -1 && ii == 133) ||
                                (GroundOne.WE2.TruthWay134 == -1 && ii == 134) ||
                                (GroundOne.WE2.TruthWay135 == -1 && ii == 135) ||
                                (GroundOne.WE2.TruthWay136 == -1 && ii == 136) ||
                                (GroundOne.WE2.TruthWay137 == -1 && ii == 137) ||
                                (GroundOne.WE2.TruthWay138 == -1 && ii == 138) ||
                                (GroundOne.WE2.TruthWay139 == -1 && ii == 139) ||
                                (GroundOne.WE2.TruthWay140 == -1 && ii == 140) ||
                                (GroundOne.WE2.TruthWay141 == -1 && ii == 141) ||
                                (GroundOne.WE2.TruthWay142 == -1 && ii == 142) ||
                                (GroundOne.WE2.TruthWay143 == -1 && ii == 143) ||
                                (GroundOne.WE2.TruthWay144 == -1 && ii == 144) ||
                                (GroundOne.WE2.TruthWay145 == -1 && ii == 145) ||
                                (GroundOne.WE2.TruthWay146 == -1 && ii == 146) ||
                                (GroundOne.WE2.TruthWay147 == -1 && ii == 147) ||
                                (GroundOne.WE2.TruthWay148 == -1 && ii == 148) ||
                                (GroundOne.WE2.TruthWay149 == -1 && ii == 149) ||
                                (GroundOne.WE2.TruthWay150 == -1 && ii == 150))
                            {
                                JumpByMirror_TurnBack();
                                return true;
                            }
                            else
                            {
                                // 正解ルートを全て通った後、最後の一つが原点解となる。
                                if ((GroundOne.WE2.TruthWay3_1 != 0) &&
                                    (GroundOne.WE2.TruthWay3_2 != 0) &&
                                    (GroundOne.WE2.TruthWay3_3 != 0) &&
                                    (GroundOne.WE2.TruthWay3_4 != 0) &&
                                    (GroundOne.WE2.TruthWay3_5 != 0))
                                {
                                    if ((GroundOne.WE2.TruthWay95 == 0 && ii == 95) ||
                                        (GroundOne.WE2.TruthWay96 == 0 && ii == 96) ||
                                        (GroundOne.WE2.TruthWay97 == 0 && ii == 97) ||
                                        (GroundOne.WE2.TruthWay98 == 0 && ii == 98) ||
                                        (GroundOne.WE2.TruthWay99 == 0 && ii == 99) ||
                                        (GroundOne.WE2.TruthWay100 == 0 && ii == 100) ||
                                        (GroundOne.WE2.TruthWay101 == 0 && ii == 101) ||
                                        (GroundOne.WE2.TruthWay102 == 0 && ii == 102) ||
                                        (GroundOne.WE2.TruthWay103 == 0 && ii == 103) ||
                                        (GroundOne.WE2.TruthWay104 == 0 && ii == 104) ||
                                        (GroundOne.WE2.TruthWay105 == 0 && ii == 105) ||
                                        (GroundOne.WE2.TruthWay106 == 0 && ii == 106) ||
                                        (GroundOne.WE2.TruthWay107 == 0 && ii == 107) ||
                                        (GroundOne.WE2.TruthWay108 == 0 && ii == 108) ||
                                        (GroundOne.WE2.TruthWay109 == 0 && ii == 109) ||
                                        (GroundOne.WE2.TruthWay110 == 0 && ii == 110) ||
                                        (GroundOne.WE2.TruthWay111 == 0 && ii == 111) ||
                                        (GroundOne.WE2.TruthWay112 == 0 && ii == 112) ||
                                        (GroundOne.WE2.TruthWay113 == 0 && ii == 113) ||
                                        (GroundOne.WE2.TruthWay114 == 0 && ii == 114) ||
                                        (GroundOne.WE2.TruthWay115 == 0 && ii == 115) ||
                                        (GroundOne.WE2.TruthWay116 == 0 && ii == 116) ||
                                        (GroundOne.WE2.TruthWay117 == 0 && ii == 117) ||
                                        (GroundOne.WE2.TruthWay118 == 0 && ii == 118) ||
                                        (GroundOne.WE2.TruthWay119 == 0 && ii == 119) ||
                                        (GroundOne.WE2.TruthWay120 == 0 && ii == 120) ||
                                        (GroundOne.WE2.TruthWay121 == 0 && ii == 121) ||
                                        (GroundOne.WE2.TruthWay122 == 0 && ii == 122) ||
                                        (GroundOne.WE2.TruthWay123 == 0 && ii == 123) ||
                                        (GroundOne.WE2.TruthWay124 == 0 && ii == 124) ||
                                        (GroundOne.WE2.TruthWay125 == 0 && ii == 125) ||
                                        (GroundOne.WE2.TruthWay126 == 0 && ii == 126) ||
                                        (GroundOne.WE2.TruthWay127 == 0 && ii == 127) ||
                                        (GroundOne.WE2.TruthWay128 == 0 && ii == 128) ||
                                        (GroundOne.WE2.TruthWay129 == 0 && ii == 129) ||
                                        (GroundOne.WE2.TruthWay130 == 0 && ii == 130) ||
                                        (GroundOne.WE2.TruthWay131 == 0 && ii == 131) ||
                                        (GroundOne.WE2.TruthWay132 == 0 && ii == 132) ||
                                        (GroundOne.WE2.TruthWay133 == 0 && ii == 133) ||
                                        (GroundOne.WE2.TruthWay134 == 0 && ii == 134) ||
                                        (GroundOne.WE2.TruthWay135 == 0 && ii == 135) ||
                                        (GroundOne.WE2.TruthWay136 == 0 && ii == 136) ||
                                        (GroundOne.WE2.TruthWay137 == 0 && ii == 137) ||
                                        (GroundOne.WE2.TruthWay138 == 0 && ii == 138) ||
                                        (GroundOne.WE2.TruthWay139 == 0 && ii == 139) ||
                                        (GroundOne.WE2.TruthWay140 == 0 && ii == 140) ||
                                        (GroundOne.WE2.TruthWay141 == 0 && ii == 141) ||
                                        (GroundOne.WE2.TruthWay142 == 0 && ii == 142) ||
                                        (GroundOne.WE2.TruthWay143 == 0 && ii == 143) ||
                                        (GroundOne.WE2.TruthWay144 == 0 && ii == 144) ||
                                        (GroundOne.WE2.TruthWay145 == 0 && ii == 145) ||
                                        (GroundOne.WE2.TruthWay146 == 0 && ii == 146) ||
                                        (GroundOne.WE2.TruthWay147 == 0 && ii == 147) ||
                                        (GroundOne.WE2.TruthWay148 == 0 && ii == 148) ||
                                        (GroundOne.WE2.TruthWay149 == 0 && ii == 149) ||
                                        (GroundOne.WE2.TruthWay150 == 0 && ii == 150))
                                    {
                                        JumpByMirror_Recollection3();
                                        return true;
                                    }
                                }
                                else
                                {
                                    // 何もせず、下へ抜ける。
                                }
                            }
                        }
                        if (GroundOne.WE2.TruthWay3_1 == 0)
                        {
                            GroundOne.WE2.TruthWay3_1 = ii;
                            MakeCorrectAnswer(ii);
                            JumpByMirror_TruthWay1A();                           
                        }
                        else if (GroundOne.WE2.TruthWay3_1 == ii)
                        {
                            JumpByMirror_TruthWay1A();
                        }
                        else if (GroundOne.WE2.TruthWay3_2 == 0)
                        {
                            GroundOne.WE2.TruthWay3_2 = ii;
                            MakeCorrectAnswer(ii);
                            JumpByMirror_TruthWay2A();
                        }
                        else if (GroundOne.WE2.TruthWay3_2 == ii)
                        {
                            JumpByMirror_TruthWay2A();
                        }
                        else if (GroundOne.WE2.TruthWay3_3 == 0)
                        {
                            GroundOne.WE2.TruthWay3_3 = ii;
                            MakeCorrectAnswer(ii);
                            JumpByMirror_TruthWay3A();
                        }
                        else if (GroundOne.WE2.TruthWay3_3 == ii)
                        {
                            JumpByMirror_TruthWay3A();
                        }
                        else if (GroundOne.WE2.TruthWay3_4 == 0)
                        {
                            GroundOne.WE2.TruthWay3_4 = ii;
                            MakeCorrectAnswer(ii);
                            JumpByMirror_TruthWay4A();
                        }
                        else if (GroundOne.WE2.TruthWay3_4 == ii)
                        {
                            JumpByMirror_TruthWay4A();
                        }
                        else if (GroundOne.WE2.TruthWay3_5 == 0)
                        {
                            GroundOne.WE2.TruthWay3_5 = ii;
                            MakeCorrectAnswer(ii);
                            JumpByMirror_TruthWay5A();
                            // 最後はすべて通過済みとし、原点解ルートを見破れなくする。
                            UpdateUnknownTileArea3_Area1();
                            UpdateUnknownTileArea3_Area2();
                            UpdateUnknownTileArea3_Area3();
                            UpdateUnknownTileArea3_Area4();
                            UpdateUnknownTileArea3_Area5();
                            UpdateUnknownTileArea3_Area6();
                            UpdateUnknownTileArea3_Area7();
                            UpdateUnknownTileArea3_Area8();
                            UpdateUnknownTileArea3_Area9();
                            UpdateUnknownTileArea3_Area10();
                            UpdateUnknownTileArea3_Area11();
                            UpdateUnknownTileArea3_Area12();
                            UpdateUnknownTileArea3_Area13();
                            UpdateUnknownTileArea3_Area14();
                            UpdateUnknownTileArea3_Area15();
                            UpdateUnknownTileArea3_Area16();
                            UpdateUnknownTileArea3_Area17();
                            UpdateUnknownTileArea3_Area18();
                            UpdateUnknownTileArea3_Area19();
                            UpdateUnknownTileArea3_Area20();
                            UpdateUnknownTileArea3_Area21();
                            UpdateUnknownTileArea3_Area22();
                            UpdateUnknownTileArea3_Area23();
                            UpdateUnknownTileArea3_Area24();
                            UpdateUnknownTileArea3_Area25();
                            UpdateUnknownTileArea3_Area26();
                            UpdateUnknownTileArea3_Area27();
                            UpdateUnknownTileArea3_Area28();
                            UpdateUnknownTileArea3_Area29();
                            UpdateUnknownTileArea3_Area30();
                            UpdateUnknownTileArea3_Area31();
                            UpdateUnknownTileArea3_Area32();
                            UpdateUnknownTileArea3_Area33();
                            UpdateUnknownTileArea3_Area34();
                            UpdateUnknownTileArea3_Area35();
                            UpdateUnknownTileArea3_Area36();
                            UpdateUnknownTileArea3_Area37();
                            UpdateUnknownTileArea3_Area38();
                            UpdateUnknownTileArea3_Area39();
                            UpdateUnknownTileArea3_Area40();
                            UpdateUnknownTileArea3_Area41();
                            UpdateUnknownTileArea3_Area42();
                            UpdateUnknownTileArea3_Area43();
                            UpdateUnknownTileArea3_Area44();
                            UpdateUnknownTileArea3_Area45();
                            UpdateUnknownTileArea3_Area46();
                            UpdateUnknownTileArea3_Area47();
                            UpdateUnknownTileArea3_Area48();
                        }
                        else if (GroundOne.WE2.TruthWay3_5 == ii)
                        {
                            JumpByMirror_TruthWay5A();
                        }
                        else
                        {
                            JumpByMirror_TurnBack();
                        }

                        return true;
                    case 151: // X1B
                        JumpByMirror_TruthWay1B();
                        return true;
                    case 152: // X1C
                        JumpByMirror_TruthWay1C();
                        return true;
                    case 153: // X1D
                        JumpByMirror_TruthWay1D();
                        if (!we.dungeonEvent308)
                        {
                            we.dungeonEvent308 = true;
                            UpdateMainMessage("ラナ：来たみたいね、正解ルート。");

                            UpdateMainMessage("アイン：っお、なんでわかるんだよ？");

                            UpdateMainMessage("ラナ：目の前に看板があるじゃない、それを見てみましょ♪");

                            UpdateMainMessage("アイン：あ、ああ。");

                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                            this.dungeonField.Invalidate();

                            UpdateMainMessage("アイン：ええと、なになに・・・");

                            UpdateMainMessage("　　　　『　進んではならない、ならざれば、散るがよい　』");

                            UpdateMainMessage("アイン：っな！！！");

                            UpdateMainMessage("ヴェルゼ：これは・・・脅しでしょうか？");

                            UpdateMainMessage("アイン：・・・ックソ・・・なんだこれ。");

                            UpdateMainMessage("ラナ：アイン、進みましょ。道は見えてるわよ。");

                            UpdateMainMessage("アイン：いや、しかし・・・");

                            UpdateMainMessage("ラナ：【罠】だとでも言いたいのかしら？");

                            UpdateMainMessage("アイン：ああ、そうだ。");

                            UpdateMainMessage("ラナ：ッフフ、それ分かってて進んだんでしょ？");

                            UpdateMainMessage("アイン：・・・いや・・・");

                            UpdateMainMessage("ラナ：アンタって、ホントバカよね。");

                            UpdateMainMessage("ラナ：そういうの私には絶対に気付かれないとでも思ってたんでしょ。");

                            UpdateMainMessage("アイン：いや、止めて悪かった。");

                            UpdateMainMessage("アイン：進むって決めたのは俺だ。");

                            UpdateMainMessage("アイン：どんな結果であれ、進むぜ。");

                            UpdateMainMessage("ラナ：ッフフ、そうこなくちゃ♪");

                            UpdateMainMessage("アイン：ラナ、お前が思うように鏡を選択してくれ。　頼んだぜ。");

                            UpdateMainMessage("ラナ：ええ、任せておいて♪");
                        }
                        return true;
                    case 154: // X2B
                        JumpByMirror_TruthWay2B();
                        return true;
                    case 155: // X2C
                        JumpByMirror_TruthWay2C();
                        return true;
                    case 156: // X2D
                        JumpByMirror_TruthWay2D();
                        return true;
                    case 157: // X3B
                        JumpByMirror_TruthWay3B();
                        return true;
                    case 158: // X3C
                        JumpByMirror_TruthWay3C();
                        return true;
                    case 159: // X3D
                        JumpByMirror_TruthWay3D();
                        return true;
                    case 160: // X4B
                        JumpByMirror_TruthWay4B();
                        return true;
                    case 161: // X4C
                        JumpByMirror_TruthWay4C();
                        return true;
                    case 162: // X4D
                        JumpByMirror_TruthWay4D();
                        return true;
                    case 163: // X5B
                        JumpByMirror_TruthWay5B();
                        return true;
                    case 164: // X5C
                        JumpByMirror_TruthWay5C();
                        return true;
                    case 165: // X5D
                        JumpByMirror_TruthWay5D();
                        return true;
                    // Z1-Z4ルート
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                    case 181:
                    case 182:
                    case 183:
                    case 184:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 190:
                        if (GroundOne.WE2.StartSeeker)
                        {
                            JumpByMirror_TurnBack();
                        }
                        // ここにWorldEnvironment2のデータを自動書き込みする。
                        else if (!we.dungeonEvent314)
                        {
                            we.dungeonEvent314 = true;

                            UpdateMainMessage("ラナ：・・・聞こえる？");

                            UpdateMainMessage("アイン：ん？");

                            UpdateMainMessage("ラナ：私よ、ラナよ。");

                            UpdateMainMessage("        『ラナの眼の色は今、完全に薄白色に完全統合している。』");

                            UpdateMainMessage("アイン：おい、誰に言ってるんだ。ラナ？");

                            UpdateMainMessage("ヴェルゼ：っし、しばらく静かに。大丈夫ですから。");

                            UpdateMainMessage("アイン：あ、ああ・・・");

                            UpdateMainMessage("　　　＜　ラナはどこに対してでもなく、鏡と自分の間に対して、何かを語り始めた　＞");

                            UpdateMainMessage("『ラナ：私が迷ったわけじゃない。私が迷ってるわけがない。』");

                            UpdateMainMessage("『（呼び声）：でもあなたが迷ったのでしょう？あなたが迷い続けるのが原因なのですよ、ラナ・アミリア』");

                            UpdateMainMessage("『ラナ：この事に関しては、他人から一方的に決められたくないし、自分自身で決めたくもないの。』");

                            UpdateMainMessage("『ラナ：もし決定しまったとして、受け入れられるかしら？決められないわよこんなの。』");

                            UpdateMainMessage("『（呼び声）：だとすれば、あなたはどうしたいのですか？明確に決定した上で、答えなさい、ラナ・アミリア』");

                            UpdateMainMessage("『ラナ：・・・・・・』");

                            UpdateMainMessage("『ラナ：ええ、決めたわ。』");

                            UpdateMainMessage("『ラナ：決めた。もう決めたのよ。』");

                            UpdateMainMessage("『（呼び声）：そう、よくやりましたね、ラナ・アミリア』");

                            UpdateMainMessage("『ラナ：今私が決めた事。それを受け入れるわ。』");

                            UpdateMainMessage("『（呼び声）：それがあなた自身、そして、あなたの周りに居る人達にとって決定された事実になるのよ。』");

                            UpdateMainMessage("『ラナ：ええ。決定した事、それを私は受け入れるわ・・・』");

                            UpdateMainMessage("　　　＜　ラナは語りを終えると、その場で倒れこんだ　＞");

                            UpdateMainMessage("アイン：おい！ラナ！！　大丈夫か！？");

                            UpdateMainMessage("ラナ：う・・・");

                            UpdateMainMessage("アイン：ひでえ汗だ・・・一体何が起きたっていうんだ。");

                            UpdateMainMessage("アイン：おい、青水晶を使って町に戻るぞ。いいな、ラナ！？");

                            UpdateMainMessage("ラナ：べ・・・別に・・・");

                            UpdateMainMessage("ヴェルゼ：アイン君、ここはボクも戻るべきだと思います。");

                            UpdateMainMessage("アイン：そうだよな。こんな状態で続けられるわけがねえ。");

                            UpdateMainMessage("アイン：っしゃ、待ってろ。今すぐ戻ってやるからな。");

                            UpdateMainMessage("アイン：っそれ！");

                            CallHomeTown();
                        }
                        else if (!we.dungeonEvent315)
                        {
                            we.dungeonEvent315 = true;

                            UpdateMainMessage("ラナ：・・・私・・・私じゃないわよ！！");

                            UpdateMainMessage("アイン：のわ！　何がだ、何がどうしたんだ！？");

                            UpdateMainMessage("ラナ：私じゃない・・・");

                            UpdateMainMessage("        『ラナの眼の色は完全に薄白色に完全統合している。』");

                            UpdateMainMessage("アイン：まさか・・・また例の・・・");

                            UpdateMainMessage("ヴェルゼ：ココは静かに待っているしかありません。");

                            UpdateMainMessage("アイン：ックソ・・・");

                            UpdateMainMessage("　　　＜　ラナはどこに対してでもなく、鏡と自分の間に対して、何かを語り始めた　＞");

                            UpdateMainMessage("『ラナ：私じゃない・・・』");

                            UpdateMainMessage("『（呼び声）：いいえ、あなた自身が決めた事でしょう？』");

                            UpdateMainMessage("『ラナ：違うわ、確かに私が決めた事なのは事実だけど・・・』");

                            UpdateMainMessage("『（呼び声）：そう、あなた自身が決めた事。』");

                            UpdateMainMessage("『ラナ：こんな結末になるなんて聞いてなかったわ！！』");

                            UpdateMainMessage("『（呼び声）：それでも決めたのはあなた。  あなた自身が決めてしまった事なのでしょう？』");

                            UpdateMainMessage("『ラナ：そんな・・・』");

                            UpdateMainMessage("『（呼び声）：決定は事実になる。あなたが決めた事なのよ。』");

                            UpdateMainMessage("『ラナ：・・・・・・』");

                            UpdateMainMessage("『ラナ：そうね、私が自分で決めた事。』");

                            UpdateMainMessage("『ラナ：自分自身の判断で決めた事、これは私の意志よ。』");

                            UpdateMainMessage("『呼び声：そう、それであなたはようやく楽になれる。』");

                            UpdateMainMessage("『呼び声：不安も消え去る。』");

                            UpdateMainMessage("『呼び声：確定した安心も得る。』");

                            UpdateMainMessage("『呼び声：あなたは今、ようやく迷わなくてすむようになるの。』");

                            UpdateMainMessage("『ラナ：・・・自分自身で決めた事、受け入れる事で少し楽になれたわ。』");

                            UpdateMainMessage("『ラナ：そうね、不安も迷いも今はもう捨てるわ。』");

                            UpdateMainMessage("『ラナ：たとえ結末を知っていようと私は受け入れるわ。』");

                            UpdateMainMessage("『呼び声：そう、決定する事で、ヒトは不安を払拭し、迷いが消え去るもの。』");

                            UpdateMainMessage("『呼び声：その事、決して忘れないよう・・・』");

                            UpdateMainMessage("　　　＜　ラナは語りを終えると、その場で倒れこんだ　＞");

                            UpdateMainMessage("ヴェルゼ：終わったようですね。");

                            UpdateMainMessage("アイン：ラナ、大丈夫か！？");

                            UpdateMainMessage("ラナ：う・・・うん・・・");

                            UpdateMainMessage("アイン：また汗がビッショリだぞ、すぐ町に戻るか？");

                            UpdateMainMessage("ラナ：ううん、少し休めば大丈夫だと思うけど・・・");

                            UpdateMainMessage("アイン：・・・いや、悪いがココは戻らせてもらうぜ。");

                            UpdateMainMessage("ラナ：ごめんなさいね・・・");

                            UpdateMainMessage("アイン：変なトコで謝るな。ラナは悪くねえんだし。");

                            UpdateMainMessage("アイン：っさてと、じゃあ戻るぜ！　っそれ！");

                            CallHomeTown();
                        }
                        else if (!we.dungeonEvent316)
                        {
                            we.dungeonEvent316 = true;

                            UpdateMainMessage("ラナ：・・・う・・・");

                            UpdateMainMessage("アイン：ん？どうした？");

                            UpdateMainMessage("        『ラナの眼の色は完全に薄白色に完全統合している。』");

                            UpdateMainMessage("アイン：っくそ・・・例の現象か・・・");

                            UpdateMainMessage("アイン：ヴェルゼ、これはどうにもならないのか？");

                            UpdateMainMessage("ヴェルゼ：ラナさんが意識している以上、避けようはありません。");

                            UpdateMainMessage("ヴェルゼ：無理に引き剥がそうとすれば、確実に取り返しのつかない結果を生みます。");

                            UpdateMainMessage("アイン：・・・分かった。見守るしかないようだな。");

                            UpdateMainMessage("　　　＜　ラナはどこに対してでもなく、鏡と自分の間に対して、何かを語り始めた　＞");

                            UpdateMainMessage("『ラナ：どこで間違えたのかしら。』");

                            UpdateMainMessage("『（呼び声）：決定という行為自体にミスや誤りはないのですよ、ラナ・アミリア』");

                            UpdateMainMessage("『ラナ：違う・・・だから失敗するの』");

                            UpdateMainMessage("『ラナ：だからミスをするの』");

                            UpdateMainMessage("『ラナ：だから駄目なのよ・・・ダメなの！』");

                            UpdateMainMessage("『ラナ：駄目・・・わかってるけど、もうどうにも・・・暗闇しか見えないわ・・・』");

                            UpdateMainMessage("『（呼び声）：ラナ・アミリア、あなたが起因しているのですよ。それは分かっていますか？』");

                            UpdateMainMessage("『ラナ：アインがひとりでダンジョンに行くなんて言い出したわ。』");

                            UpdateMainMessage("『ラナ：FiveSeeker以外まともな状態で帰った人なんて居ないと聞いているわ。』");

                            UpdateMainMessage("『ラナ：そんなトコへ行こうとしたアインが悪いんじゃない！！』");

                            UpdateMainMessage("アイン：っな！・・・");

                            UpdateMainMessage("『（呼び声）：それは違いますよ、ラナ・アミリア。』");

                            UpdateMainMessage("『（呼び声）：彼の意志は独断ではなく、あなたを気遣っての事。』");

                            UpdateMainMessage("『（呼び声）：彼自身の強さの証明があなたへの安心につながる。彼はそう考えての行為。』");

                            UpdateMainMessage("『ラナ：分かってるわよ！！そんなことぐらい！！』");

                            UpdateMainMessage("『（呼び声）：その理解の上での行為。そう、あなたが決定したその意志もまた、あなた自身のもの』");

                            UpdateMainMessage("『（呼び声）：あなた以外の誰が悪いのでしょうか？ラナ・アミリアよ』");

                            UpdateMainMessage("『ラナ：・・・ッフフ、おかしいわね。』");

                            UpdateMainMessage("『ラナ：自分で決めておいて言うのもなんだけど・・・』");

                            UpdateMainMessage("『ラナ：そうよ、私のせいよ。』");

                            UpdateMainMessage("『ラナ：ダンジョンへ付いていくと決めた私自身の決定が全て悪いの。』");

                            UpdateMainMessage("『ラナ：誰も悪くない。周りの人は誰も悪くないの。』");

                            UpdateMainMessage("アイン：ッバ！　バカな事を！　何て事を言うんだ！！！");

                            UpdateMainMessage("『（呼び声）：分かったでしょう？　結果的にはこれで良かった事となる、わかるでしょう？ラナ・アミリア』");

                            UpdateMainMessage("『ラナ：・・・ええ、そうね。』");

                            UpdateMainMessage("『ラナ：この結果なら最善だわ、誰も傷つかないし、誰も嫌な思いはしない。』");

                            UpdateMainMessage("『呼び声：不幸と幸福は等しきもの。失敗も成功も等しきもの。良いも悪いも等しきもの。』");

                            UpdateMainMessage("『呼び声：そのまま進めなさい、ラナ・アミリア。』");

                            UpdateMainMessage("　　　＜　ラナは語りを終えると、その場で倒れこんだ　＞");

                            UpdateMainMessage("アイン：ラナがどうしてこんな事をしなくちゃならないんだ・・・っくそ。");

                            UpdateMainMessage("ラナ：・・・う・・・");

                            UpdateMainMessage("ヴェルゼ：ラナさん・・・これは・・・酷い状態です。");

                            UpdateMainMessage("アイン：すぐに町に戻るぜ。異論はないな？");

                            UpdateMainMessage("ヴェルゼ：もちろんです、すぐに戻りましょう。");

                            UpdateMainMessage("アイン：じゃあ、使うぜ。っそれ！");

                            CallHomeTown();
                        }
                        else if (!we.dungeonEvent317)
                        {
                            we.dungeonEvent317 = true;

                            UpdateMainMessage("ラナ：・・・光が・・・");

                            UpdateMainMessage("アイン：ん？光どうかしたのか？");

                            UpdateMainMessage("        『ラナの眼の色は完全に薄白色に完全統合している。』");

                            UpdateMainMessage("アイン：まだあるのか・・・負けるなよ、ラナ・・・");

                            UpdateMainMessage("　　　＜　ラナはどこに対してでもなく、鏡と自分の間に対して、何かを語り始めた　＞");

                            UpdateMainMessage("『ラナ：誰も嫌な思いはさせない、そう思い始めてからは光が見え始めたの。』");

                            UpdateMainMessage("『（呼び声）：光を求めなさい、ラナ・アミリア』");

                            UpdateMainMessage("『ラナ：ええ。』");

                            UpdateMainMessage("『（呼び声）：光を見出し、同時に全ての暗闇を抱えなさい、ラナ・アミリア。』");

                            UpdateMainMessage("『ラナ：ええ。』");

                            UpdateMainMessage("『（呼び声）：何も無い所に全てを詰めるのよ、ラナ・アミリア。』");

                            UpdateMainMessage("『ラナ：ええ。』");

                            UpdateMainMessage("『（呼び声）：全てを終わらせたくなければ、全てを抱えなさい、ラナ・アミリア。』");

                            UpdateMainMessage("『ラナ：ええ。』");

                            UpdateMainMessage("『呼び声：あなたの居ない場所、あなたが居た場所。』");

                            UpdateMainMessage("『ラナ：あなたが来る場所、あなたが来た場所へ。』");

                            UpdateMainMessage("　　　＜　ラナは語りを終えると、その場で倒れこんだ　＞");

                            UpdateMainMessage("ラナ：・・・すぅ・・・すぅ・・・");

                            UpdateMainMessage("アイン：ラナ・・・気絶と同時に寝てしまったのか。");

                            UpdateMainMessage("ヴェルゼ：アイン君、戻りましょう。");

                            UpdateMainMessage("アイン：ああ、そうだな。");

                            UpdateMainMessage("アイン：じゃあ、使うぜ。っそれ！");

                            CallHomeTown();
                        }
                        else
                        {
                            JumpByMirror_TurnBack();
                        }
                        return true;
                    #endregion
                    #region "ボス戦闘"
                    case 251:
                        UpdateUnknownTileArea3_Last0();
                        // ボス戦闘
                        if (!we.dungeonEvent3_SlayBoss)
                        {
                            UpdateMainMessage("アイン：ボスとの戦闘だ！気を引き締めていくぜ！", true);
                            bool result = EncountBattle(Database.ENEMY_BOSS_HOWLING_SEIZER, String.Empty, String.Empty, false, false, false, false);
                            if (!result)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y, false);
                                this.dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                we.dungeonEvent3_SlayBoss = true;
                                UpdateMainMessage("アイン：っしゃ、撃破撃破っと！");

                                UpdateMainMessage("ラナ：部屋中ムチャクチャしてたわね、この生き物は・・・");

                                UpdateMainMessage("アイン：ああ、無理やり掴んできたり、踏んづけたり、見境なくぶん回したり・・・大変だったぜホント！");

                                UpdateMainMessage("アイン：その割に・・・この看板さ。");

                                UpdateMainMessage("ラナ：う〜ん、カスリ傷ひとつないわね、この看板。");

                                UpdateMainMessage("アイン：本当どうなってんだろうな。あの怪物打撃の巻き添えは食ってたハズだが。");

                                UpdateMainMessage("ヴェルゼ：知りたいですか？");

                                UpdateMainMessage("アイン：ああ。");

                                UpdateMainMessage("アイン：・・・え・・・知ってるのか？");

                                UpdateMainMessage("ヴェルゼ：はい。");

                                UpdateMainMessage("アイン：ええと・・・なぜ？");

                                UpdateMainMessage("ヴェルゼ：以前入った時に少し素材分析をしてみたことがありますから。");

                                UpdateMainMessage("ラナ：さすがヴェルゼさん、どこかそのへんでボーっとしているオバカと大違いよね♪");

                                UpdateMainMessage("アイン：はいはい、どうせ俺は博学じゃありませんよ・・・");

                                UpdateMainMessage("ヴェルゼ：それではまず、素材成分のリストをお教えしましょう。");

                                UpdateMainMessage("アイン：タイム。いやいや、サンキューな。");

                                UpdateMainMessage("ヴェルゼ：止めておきますか、少し長いですからね。");

                                UpdateMainMessage("ラナ：それが懸命です、それにソコにいる【アイン初心者研修生】は必ず寝てしまいますから♪");

                                UpdateMainMessage("ヴェルゼ：ッハハ、ラナさんも面白い言い方をしますね。");

                                UpdateMainMessage("アイン：笑うなっつうの・・・イイから、看板見てみるぜ。");

                                UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                this.dungeonField.Invalidate();

                                UpdateMainMessage("アイン：ええと、なになに・・・");

                                UpdateMainMessage("　　　　『　正解を導きし者、無限解の探求にて永遠に彷徨い、原点を知ること無く、回り続けるがよい　』");

                                if (!we.dungeonEvent328)
                                {
                                    UpdateMainMessage("アイン：こ・・・これは・・・・");

                                    UpdateMainMessage("　　【【【　アインは自分の体内にある全ての血が引いていく感じがした。　】】】");

                                    UpdateMainMessage("アイン：・・・");

                                    UpdateMainMessage("アイン：（・・・しまっ・・・た・・・）");

                                    UpdateMainMessage("ラナ：ちょっと、何マジな顔しちゃってんのよ？");

                                    UpdateMainMessage("ラナ：ボスも倒したんだし、目の前に階段もあるわ。");

                                    UpdateMainMessage("ラナ：鏡もあるから、それはそれでいつもみたいに試してみれば良いんじゃない？");

                                    UpdateMainMessage("アイン：・・・いや");

                                    UpdateMainMessage("ラナ：？");

                                    UpdateMainMessage("アイン：・・・・・・");

                                    UpdateMainMessage("ラナ：っちょ、っちょっと本当にどうしたのよ、らしくないわね。");

                                    UpdateMainMessage("ヴェルゼ：見誤った。");

                                    UpdateMainMessage("アイン：！！");

                                    UpdateMainMessage("ヴェルゼ：そう感じているのですか？");

                                    UpdateMainMessage("アイン：・・・・・・");

                                    UpdateMainMessage("アイン：ああ");

                                    UpdateMainMessage("ラナ：何を見誤ったのよ？");

                                    UpdateMainMessage("アイン：看板の意味だ。");

                                    UpdateMainMessage("ラナ：あの立て続けに出てきた脅し看板の事？");

                                    UpdateMainMessage("アイン：違う、そこじゃねえ。");

                                    UpdateMainMessage("ラナ：じゃあどれの事よ？");

                                    UpdateMainMessage("アイン：・・・");

                                    UpdateMainMessage("ヴェルゼ：アイン君。");

                                    UpdateMainMessage("ヴェルゼ：例え、それが見誤った感触だったとしても");

                                    UpdateMainMessage("ヴェルゼ：戻る事は許されていません。");

                                    UpdateMainMessage("ヴェルゼ：今は進める必要があります。");

                                    UpdateMainMessage("アイン：・・・ああ");

                                    UpdateMainMessage("アイン：ああ、了解了解。すまねえな。");

                                    UpdateMainMessage("アイン：ヴェルゼ、ラナ、いろいろと不安がらせて悪かったな。");

                                    UpdateMainMessage("ラナ：え、別にいいけど。");

                                    UpdateMainMessage("ラナ：で、ヴェルゼさんの言葉で少し考えはまとまった？");

                                    UpdateMainMessage("アイン：ああ。");

                                    UpdateMainMessage("アイン：ラナ、ここは目の前の階段を降りる事にしようぜ。");

                                    UpdateMainMessage("ラナ：え、鏡が並んでるみたいだけど、そっちはいいの？");

                                    UpdateMainMessage("アイン：試してみたければ、やってみてもいいが。");

                                    UpdateMainMessage("ラナ：う〜ん、その言い方。多分駄目だって言いたいのよね？");

                                    UpdateMainMessage("アイン：いやいや・・・そういうわけじゃねえけどさ。");

                                    UpdateMainMessage("ラナ：ッフフ、分かったわ。行かないわよ♪");

                                    UpdateMainMessage("アイン：すまねえな・・・ハハハ。");

                                    UpdateMainMessage("アイン：よし、じゃそういうわけだ。行こうぜ！");
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：・・・やっぱりな。");

                                    UpdateMainMessage("ラナ：驚いたわ・・・");

                                    UpdateMainMessage("ラナ：バカアインってもの凄ーーーく《激稀》だけど、先のトコまで言い当ててる時があるわね。");

                                    UpdateMainMessage("アイン：そこまで稀を強調しなくても良いだろ・・・");

                                    UpdateMainMessage("ラナ：いや本当よ。嫌味なく純粋に感心するわ。");

                                    UpdateMainMessage("ラナ：この看板を一度も見てないのに、どうして無限に彷徨う事になるって予想できてたわけ？");

                                    UpdateMainMessage("ラナ：しかも、原点を知る事無くって、アインが読み切った通りの事が書いてあるじゃないのよ。");

                                    UpdateMainMessage("ラナ：ちょっと本当・・・たまには、アンタの思考パターンを教えなさいよ。");

                                    UpdateMainMessage("アイン：・・・何て言うんだろうなあ・・・");

                                    UpdateMainMessage("アイン：男のカンだ。");

                                    UpdateMainMessage("ラナ：うわ、途端に信頼度０になったわ・・・やっぱバカね・・・");

                                    UpdateMainMessage("ヴェルゼ：アイン君、ここまで来たんです、茶化さないで答えてはいかがですか？");

                                    UpdateMainMessage("ヴェルゼ：女性からの質問には、丁寧に答えるのが男性として当然の努めです。");

                                    UpdateMainMessage("アイン：ッゲ・・・");

                                    UpdateMainMessage("ラナ：そうよ、いくらなんでもこれは真面目に答えてもらいたいわね♪");

                                    UpdateMainMessage("アイン：うーん、そうだなあ・・・");

                                    UpdateMainMessage("アイン：・・・　・・・");

                                    UpdateMainMessage("アイン：原点解の部屋でも言った事なんだが");

                                    UpdateMainMessage("アイン：『正解』か『不正解』かは、関係ねえ。文字通り『原点』を探ったほうが良い");

                                    UpdateMainMessage("アイン：こういう所は伝わるか？");

                                    UpdateMainMessage("ラナ：その時点で全然伝わってないわよ。");

                                    UpdateMainMessage("アイン：どうして伝わらないんだ？");

                                    UpdateMainMessage("ラナ：正解って言ったら、正解以外にないと思うんだけど。");

                                    UpdateMainMessage("ラナ：それ以外に何があるのよ？");

                                    UpdateMainMessage("ラナ：そこに突っかかって論理展開する事自体が、私には分からないわ。");

                                    UpdateMainMessage("アイン：うーん、そういう所か・・・");

                                    UpdateMainMessage("アイン：・・・　・・・");

                                    UpdateMainMessage("アイン：なあ、ラナ。");

                                    UpdateMainMessage("アイン：この世界には、正解とか不正解とかそういったモノは無いんだ。");

                                    UpdateMainMessage("ラナ：え？？");

                                    UpdateMainMessage("アイン：無いんだ。正解なんていうのは、そもそもが。");

                                    UpdateMainMessage("ラナ：・・・え、えーと・・・その・・・");

                                    UpdateMainMessage("ラナ：じゃあ、何が正解になりうるわけ？");

                                    UpdateMainMessage("アイン：俺達人間にとっての理解の範囲内で『正解』と言ってるだけだ。");

                                    UpdateMainMessage("ラナ：・・・　・・・");

                                    UpdateMainMessage("ラナ：ダメ、やっぱ全然わかんないわ、アインの話は。");

                                    UpdateMainMessage("アイン：ッハハ・・・悪いな・・・");

                                    UpdateMainMessage("ラナ：もう良いわ、そこはイイから。");

                                    UpdateMainMessage("ラナ：肝心のトコを教えてちょうだい。");

                                    UpdateMainMessage("アイン：肝心のトコ？");

                                    UpdateMainMessage("ラナ：そうよ、どうして見ても無い看板の内容を言い当てていたのか？　って話よ。");

                                    UpdateMainMessage("ラナ：２が正解、３が無限、１が原点。");

                                    UpdateMainMessage("ラナ：こんなんで、導き出せるアンタって正直どうかしてるわよ。");

                                    UpdateMainMessage("ラナ：答えなさい、私の納得の行く内容で。");

                                    UpdateMainMessage("アイン：あ、ああそういう話か・・・オーケーオーケー・・・");

                                    UpdateMainMessage("アイン：あー・・・えーとだな・・・");

                                    UpdateMainMessage("アイン：・・・　・・・");

                                    UpdateMainMessage("アイン：内容を示すパターン羅列");

                                    UpdateMainMessage("アイン：意味を示す数値");

                                    UpdateMainMessage("アイン：型を成す為の組み合わせ");

                                    UpdateMainMessage("ヴェルゼ：っ・・・！");

                                    UpdateMainMessage("アイン：俺は文章をそう読み解いている。");

                                    UpdateMainMessage("アイン：そしてそれを総合してまとめて、自分自身の中で解釈を行う。");

                                    UpdateMainMessage("アイン：そこから、自分なりの論理を構築して、仮説と検証。");

                                    UpdateMainMessage("アイン：っとと・・・悪ぃ、そこら辺はうまく言えねえが、");

                                    UpdateMainMessage("アイン：とにかく俺は、文章というものを");

                                    UpdateMainMessage("アイン：ラナみたいに普通のセンスでは読めていねえ。");

                                    UpdateMainMessage("アイン：だから変な読み方をしたり、突発的に全然違う方へ読んでしまってる時があるんだ。");

                                    UpdateMainMessage("ラナ：・・・そうなんだ・・・");

                                    UpdateMainMessage("ヴェルゼ：アイン君は、文章をそういうふうに解釈して読んでいるのですか？");

                                    UpdateMainMessage("アイン：ああ・・・なんとなくだけど。");

                                    UpdateMainMessage("ヴェルゼ：信じられない・・・そんな事が・・・");

                                    UpdateMainMessage("アイン：あ、ああ・・・悪い・・・");

                                    UpdateMainMessage("ヴェルゼ：いや、謝る必要はありません。");

                                    UpdateMainMessage("ヴェルゼ：ただ・・・これは・・・驚くばかりですね。");

                                    UpdateMainMessage("ラナ：ねえ、バカアインってたまに私の言ってる事もそう解釈してるわけ？");

                                    UpdateMainMessage("アイン：いや、単なる通常会話じゃ、そういう風には感じないな。");

                                    UpdateMainMessage("ラナ：そう・・・");

                                    UpdateMainMessage("アイン：このダンジョンの看板みたいなやつは特にそう感じられる場合が多いな。");

                                    UpdateMainMessage("アイン：その辺は、なんつって良いかわかんねえけどさ・・・");

                                    UpdateMainMessage("ラナ：ううん、十分よ、ありがと♪");

                                    UpdateMainMessage("アイン：ん？もういいのか？");

                                    UpdateMainMessage("ラナ：ええ、アインはやっぱり、私の予想通りバカアインって事が分かったから♪");

                                    UpdateMainMessage("アイン：おいおい結局そうなるのかよ。");

                                    UpdateMainMessage("ラナ：ッフフ、いいじゃない♪");

                                    UpdateMainMessage("アイン：っちぇ、また今度解説してやるからな。");

                                    UpdateMainMessage("ラナ：ッフフ、まあそれよりも早いとこ解いちゃいましょうよ、ココ。");

                                    UpdateMainMessage("ヴェルゼ：ラナさん、メモの数字を。");

                                    UpdateMainMessage("ラナ：ええと、言うわね。");

                                    UpdateMainMessage("ラナ：『 1 3 4 5 4 2 3 1 4 2 5 5 』");

                                    UpdateMainMessage("アイン：了解了解。");

                                    UpdateMainMessage("アイン：で、そこに鏡が５つあるって事は");

                                    UpdateMainMessage("ラナ：普通のセンスなら、左から順に１，２，３，４，５と見立てると");

                                    UpdateMainMessage("アイン：ああ、ラナがメモしてくれた原点解の順序通り鏡を潜れば");

                                    UpdateMainMessage("ラナ：無限解を突破出来るって事ね、やったじゃない♪");

                                    UpdateMainMessage("アイン：っしゃ、じゃあさっそく潜ってみようぜ！");

                                    UpdateMainMessage("ラナ：エエ、了解よ♪");

                                    we.dungeonEvent330 = true;
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region "鏡エリア２の始めの看板"
                    case 252:
                        if (we.dungeonEvent314 && we.dungeonEvent314_2 &&
                            we.dungeonEvent315 && we.dungeonEvent315_2 &&
                            we.dungeonEvent316 && we.dungeonEvent316_2 &&
                            we.dungeonEvent317 && we.dungeonEvent317_2 &&
                            we.dungeonEvent312 && we.dungeonEvent312_2)
                        {
                            if (!we.dungeonEvent327)
                            {
                                we.dungeonEvent327 = true;

                                UpdateMainMessage("アイン：はあ・・・覚えてねえなあ・・・");

                                UpdateMainMessage("ラナ：どうかしたの？");

                                UpdateMainMessage("アイン：ほら、あの台座が出現した一本道があったじゃねえか？");

                                UpdateMainMessage("ラナ：ええ。あったけど、それがどうかしたの？");

                                UpdateMainMessage("アイン：ラナさ・・・覚えてるか？");

                                UpdateMainMessage("ラナ：う〜ん、覚えてないわね。");

                                UpdateMainMessage("アイン：そうか、まあそりゃそうだよな・・・");

                                UpdateMainMessage("ラナ：でもね、呼び声に教えてもらった事があるの。");

                                UpdateMainMessage("アイン：ッゲ、まだ何かあったのか？");

                                UpdateMainMessage("ラナ：ううん、そうじゃなくて・・・ホラ、この看板の裏の隅っこ、見て♪");

                                UpdateMainMessage("アイン：ん？お、おお！これは、一応これも鏡になってるのか！？");

                                UpdateMainMessage("ラナ：この鏡へ語りかければ、例の一本道に直接ワープ出来るみたいよ♪");

                                UpdateMainMessage("アイン：なんだ、それを最初に言ってくれよ、ッハッハッハ！");

                                UpdateMainMessage("ヴェルゼ：おそらく、ラナさんが例の台座まで到達した事が、この鏡を出現させる仕組みになっていたのでしょう。");

                                UpdateMainMessage("アイン：なるほど・・・解いたから行けるようになったって事か・・・");

                                UpdateMainMessage("ラナ：そういうわけだから、直接ワープしたい場合は言ってちょうだい♪");

                                UpdateMainMessage("アイン：ああ、助かるぜ。");
                            }

                            UpdateMainMessage("ラナ：台座ルートまで通じる鏡にワープできるわ。使ってみる？", true);
                            using (YesNoRequest ynr = new YesNoRequest())
                            {
                                ynr.StartPosition = FormStartPosition.CenterParent;
                                ynr.ShowDialog();
                                if (ynr.DialogResult == DialogResult.Yes)
                                {
                                    JumpByMirror(1, 22);
                                }
                                else
                                {
                                    UpdateMainMessage("", true);
                                }
                            }
                        }
                        else
                        {
                            if (!we.dungeonEvent326)
                            {
                                we.dungeonEvent326 = true;

                                UpdateMainMessage("アイン：っお、看板だな。どれどれ・・・");

                                UpdateMainMessage("　　　　『　２つ目は正解、３つ目は無限解、そして１つ目が原点解　』");

                                UpdateMainMessage("アイン：正解・・・無限解・・・原点解・・・");

                                UpdateMainMessage("ラナ：何か解答が三種類あるって感じなのかしら。");

                                UpdateMainMessage("アイン：・・・　・・・");

                                UpdateMainMessage("アイン：（なんだ・・・これ・・・）");

                                UpdateMainMessage("アイン：（解答そのものに対する警告に見て取れるな・・・）");

                                UpdateMainMessage("アイン：（しかも、２つ目が始めに書いてあるし、書いてある内容は『正解』って事は・・・）");

                                UpdateMainMessage("アイン：（『正解』がまずありきで、見つけ出しそれから・・・いや）");

                                UpdateMainMessage("アイン：（それ以前に、順列通り行くとすれば、１つ目を見つける必要があるんじゃねえのか・・・）");

                                UpdateMainMessage("アイン：（原点・・・正解・・・無限・・・）");

                                UpdateMainMessage("アイン：・・・　・・・");

                                UpdateMainMessage("ヴェルゼ：どうかしましたか？アイン君。");

                                UpdateMainMessage("アイン：・・・ッハ！！");

                                UpdateMainMessage("アイン：いやいやいや、ちょっと意味不明な看板だからさ。意味を紐解こうとしてたんだよ。");

                                UpdateMainMessage("ラナ：意味を紐解くって、微妙に伝わってないわよ、バカアイン。");

                                UpdateMainMessage("アイン：こう、なんつうんだ・・・意味自体が読めねえだろ。この看板。");

                                UpdateMainMessage("ラナ：うーん、そうかしら。そんな意味が分からないわけじゃないと思うんだけど。");

                                UpdateMainMessage("ラナ：原点解と正解と無限解がこのダンジョンのどこかに隠してあるのよね、きっと。");

                                UpdateMainMessage("アイン：いや、そうかもしれねえけどさ。論点はそこじゃねえんだ。");

                                UpdateMainMessage("アイン：正解って何で最初に来てるんだよ？");

                                UpdateMainMessage("ラナ：知らないわよ、そんなの。");

                                UpdateMainMessage("アイン：そもそも、無限解、原点解って何だよ？少なくとも、正解と不正解って話じゃねえって事だよな？");

                                UpdateMainMessage("ラナ：正解不正解じゃなくて、３種類あるなっていうニュアンスで十分じゃないかしら。");

                                UpdateMainMessage("アイン：で、そもそも『２つ目』が冒頭に来てるのって表現としておかしくねえか？？");

                                UpdateMainMessage("ラナ：バカアインが１番表現がおかしいと私は思うけどね。");

                                UpdateMainMessage("アイン：ま・・・まあそりゃそうかも知れないけどさ・・・");

                                UpdateMainMessage("ラナ：そんな事より、ちょっとまってね。");

                                UpdateMainMessage("アイン：ん？あ、ああ・・・");

                                UpdateMainMessage("        『気がつくと、ラナの眼は普段のトパーズ色から薄白色になっていた。』");

                                UpdateMainMessage("ラナ：正解ルートに関してだけど。");

                                UpdateMainMessage("ラナ：ココも良かったら私に任せてもらえないかしら？");

                                UpdateMainMessage("アイン：ああ。ラナがそう言うんだったら、良いぜ。");

                                UpdateMainMessage("アイン：ここのルートは任せた！ッハッハッハ！");

                                UpdateMainMessage("ヴェルゼ：ラナさん、辛くなったりしんどくなったら必ず言って下さい。");

                                UpdateMainMessage("ラナ：ッフフ、ありがとうございます。大丈夫ですから♪");

                                UpdateMainMessage("アイン：じゃあ、まあ考えてもしょうがねえ面もある事だし、進めるとするか！");

                                UpdateMainMessage("ラナ：私が鏡を選んでいくから着いて来てね♪");

                                UpdateMainMessage("アイン：了解了解！");
                            }
                            else
                            {
                                UpdateMainMessage("　　　　『　２つ目は正解、３つ目は無限解、そして１つ目が原点解　』", true);
                            }
                        }
                        break;
                    #endregion
                    #region "宝箱"
                    case 253:
                        we.TruthTreasure301 = GetTreasure(Database.COMMON_ESSENCE_OF_EARTH);
                        break;
                    case 254:
                        we.TruthTreasure302 = GetTreasure(Database.COMMON_KESSYOU_SEA_WATER_SALT);
                        break;
                    case 255:
                        we.TruthTreasure303 = GetTreasure(Database.COMMON_STAR_DUST_RING);
                        break;
                    case 256:
                        we.TruthTreasure304 = GetTreasure(Database.COMMON_RED_ONION);
                        break;
                    case 257:
                        we.TruthTreasure305 = GetTreasure(Database.RARE_TAMATEBAKO_AKIDAMA);
                        break;
                    case 258:
                        we.TruthTreasure306 = GetTreasure(Database.RARE_HARDEST_FIT_BOOTS);
                        break;
                    case 259:
                        we.TruthTreasure307 = GetTreasure(Database.COMMON_WATERY_GROBE);
                        break;
                    case 260:
                        we.TruthTreasure308 = GetTreasure(Database.COMMON_WHITE_POWDER);
                        break;
                    case 261:
                        we.TruthTreasure309 = GetTreasure(Database.COMMON_SILENT_BOWL);
                        break;
                    case 262:
                        we.TruthTreasure310 = GetTreasure(Database.RARE_SEAL_OF_ICE);
                        break;
                    case 263:
                        we.TruthTreasure311 = GetTreasure(Database.RARE_SWORD_OF_DIVIDE);
                        break;
                    case 264:
                        we.TruthTreasure312 = GetTreasure(Database.EPIC_OLD_TREE_MIKI_DANPEN);
                        break;
                    #endregion
                    #region "エリア２　看板X１〜６"
                    case 265:
                        UpdateMainMessage("　　　　『　進んではならない、ならざれば、散るがよい　』", true);
                        return true;
                    case 266:
                        if (!we.dungeonEvent309)
                        {
                            we.dungeonEvent309 = true;
                            UpdateMainMessage("ラナ：続けて正解ルートみたいね。");

                            UpdateMainMessage("アイン：看板だ。読むか？");

                            UpdateMainMessage("ラナ：ええ、お願い。");

                            UpdateMainMessage("アイン：っしゃ、読むぜ。");

                            UpdateMainMessage("　　　　『　避けるべきである、ならざれば、破壊されるがよい　』");

                            UpdateMainMessage("アイン：相変わらずこのノリか。");

                            UpdateMainMessage("ヴェルゼ：ハッタリでしょうか、それとも・・・");

                            UpdateMainMessage("アイン：確認する術がねえワケだし、どっちみち進むしかねえ。");

                            UpdateMainMessage("アイン：そんな事より、ラナ。");

                            UpdateMainMessage("        『ラナの眼の色はより一層薄白色へと変化している。』");

                            UpdateMainMessage("アイン：（・・・前よりヒドイな・・・大丈夫だろうか・・・）");

                            UpdateMainMessage("アイン：その、大丈夫か？体調の方は。");

                            UpdateMainMessage("ラナ：ええ、大丈夫よ。");

                            UpdateMainMessage("アイン：そうか、ならいいんだ。");

                            UpdateMainMessage("アイン：この手の看板は単なる脅しだ。気にすることはねえぜ。");

                            UpdateMainMessage("ラナ：ッフフ、やけに強気ね。");

                            UpdateMainMessage("アイン：ああ、気にしてたら何も出来なくなるしな。");

                            UpdateMainMessage("アイン：っしゃ、進むとするか。　頼んだぜ、ラナ。");

                            UpdateMainMessage("ラナ：ええ、次へ進めましょ。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　避けるべきである、ならざれば、破壊されるがよい　』", true);
                        }
                        return true;
                    case 267:
                        if (!we.dungeonEvent310)
                        {
                            we.dungeonEvent310 = true;
                            UpdateMainMessage("ラナ：ここも正解みたいね。");

                            UpdateMainMessage("アイン：看板もちゃんとあるみたいだな、読むぜ？");

                            UpdateMainMessage("ラナ：ええ。");

                            UpdateMainMessage("　　　　『　変化させるべきである、ならざれば、死に等しき傷跡を　』");

                            UpdateMainMessage("アイン：・・・相変わらず不気味なメッセージだな。");

                            UpdateMainMessage("ラナ：変化・・・何か戦術かパラメタとかを変えてみるといいって事なのかしら？");

                            UpdateMainMessage("アイン：いや、下手に戦術崩す方が余計タチが悪くなる、止めておいた方がいい。");

                            UpdateMainMessage("アイン：パラメタに関しても、途中で変えるなんてそう簡単にできねえだろ。");

                            UpdateMainMessage("アイン：ここのルートで出ている看板のメッセージは、おそらく・・・");

                            UpdateMainMessage("アイン：・・・・・・");

                            UpdateMainMessage("アイン：ハッタリだ。");

                            UpdateMainMessage("アイン：脅しつけて、恐怖心を煽り、引き返させる事を目的とする常套手段ってとこだ。");

                            UpdateMainMessage("ラナ：ねえ、それよりも。");

                            UpdateMainMessage("アイン：ん？どうした。");

                            UpdateMainMessage("        『ラナの眼の色はより鮮明な薄白色へと完全統合されようとしている。』");

                            UpdateMainMessage("ラナ：私、なんで正解が見えてるのかイマイチ分からないのよ。");

                            UpdateMainMessage("アイン：どういった感じなんだ？");

                            UpdateMainMessage("ラナ：・・・対話。");

                            UpdateMainMessage("ラナ：どこの人でも無い誰かと会話をしているような感じよ。");

                            UpdateMainMessage("ラナ：【呼び声】っていう表現が１番適切かしら。");

                            UpdateMainMessage("アイン：その、鏡を潜るたびにそれは聞こえてくるのか？");

                            UpdateMainMessage("ラナ：そうね、色濃くなってきているわ。");

                            UpdateMainMessage("ラナ：その【呼び声】が聞こえる方へと歩を進めると気分が良くなるのよ。");

                            UpdateMainMessage("ラナ：別に私から声をかけているわけじゃないんだけどね。");

                            UpdateMainMessage("ラナ：何となく、聞こえてくるの。導きに近い感じかしら。");

                            UpdateMainMessage("アイン：そうか・・・");

                            UpdateMainMessage("アイン：（・・・ヴェルゼ、どうだ？）");

                            UpdateMainMessage("ヴェルゼ：（まだ行けるとは思います、普通にこちらに応対していますからね。）");

                            UpdateMainMessage("アイン：（そうか、了解）");

                            UpdateMainMessage("アイン：ラナ、辛くなったら言うんだぞ。良いな？");

                            UpdateMainMessage("ラナ：ッフフフ、気を使いすぎよ。どんどん進めましょ♪");

                            UpdateMainMessage("アイン：ッハハ、了解了解！");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　変化させるべきである、ならざれば、死に等しき傷跡を　』", true);
                        }
                        return true;
                    case 268:
                        if (!we.dungeonEvent311)
                        {
                            we.dungeonEvent311 = true;
                            UpdateMainMessage("ラナ：看板があるわね。");

                            UpdateMainMessage("アイン：読むか？");

                            UpdateMainMessage("ラナ：お願い。");

                            UpdateMainMessage("アイン：っしゃ、ええと・・・");

                            UpdateMainMessage("　　　　『　終へと続く道　』");

                            UpdateMainMessage("アイン：・・・");

                            UpdateMainMessage("アイン：（ッグ・・・なんだよ・・・これ・・・）");

                            UpdateMainMessage("ヴェルゼ：アイン君、どうしますか？");

                            UpdateMainMessage("アイン：・・・・・・");

                            UpdateMainMessage("アイン：引くわけにはいかねえ。");

                            UpdateMainMessage("アイン：ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：ええ、了解よ。");

                            UpdateMainMessage("アイン：責任は俺が取る。");

                            UpdateMainMessage("アイン：ラナがピンチな時は俺が助けてやる。");

                            UpdateMainMessage("アイン：だから安心して進めろ。");

                            UpdateMainMessage("ラナ：ッフフ、アリガト♪");

                            UpdateMainMessage("ラナ：じゃあ、鏡を選ぶわね。");

                            UpdateMainMessage("アイン：ああ。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　終へと続く道　』", true);
                        }
                        return true;
                    case 269:
                        if (!we.dungeonEvent312)
                        {
                            UpdateMainMessage("アイン：看板だ。読むぜ。");

                            UpdateMainMessage("ラナ：まって。");

                            UpdateMainMessage("ラナ：私が読むわ、アインはすぐ傍で見ていて。");

                            UpdateMainMessage("アイン：ああ。");

                            GroundOne.StopDungeonMusic();

                            UpdateMainMessage("        『絶対試練：汝、答えを示せ。』");

                            UpdateMainMessage("　　　　『突如台座がラナの前に浮き上がった。直後、真紅の空間にラナが包まれた。』");

                            UpdateMainMessage("アイン：っな！！　っおいラナ！？");

                            GroundOne.PlayDungeonMusic(Database.BGM09, Database.BGM09LoopBegin);

                            using (TruthWill TW = new TruthWill())
                            {
                                TW.StartPosition = FormStartPosition.CenterScreen;
                                TW.ShowDialog();
                                if (TW.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                {
                                    GroundOne.WE2.TruthWillSuccess = true;
                                    we.dungeonEvent312 = true;

                                    UpdateMainMessage("　　　　『空間が激しくフラッシュし、凝縮された空間へと連続的に小さくなる！！！』");

                                    UpdateMainMessage("　　　　『パパパパパパパ！！！！ッバシュウウウゥゥゥン！！！！！！！』");

                                    UpdateMainMessage("　　　　『空間は弾け飛んだ後、台座の前にラナの倒れた姿があった』");

                                    UpdateMainMessage("アイン：ラナ！！！");

                                    UpdateMainMessage("ラナ：・・・う〜ん・・・何で倒れてんのよ・・・");

                                    UpdateMainMessage("アイン：お、おい大丈夫か！！！");

                                    UpdateMainMessage("ラナ：え？え、えぇ・・・大丈夫よ");

                                    UpdateMainMessage("アイン：本当かよ！！心配したんだぞ、マジで大丈夫か！！");

                                    UpdateMainMessage("ラナ：わ、大丈夫だって言ってるじゃない、っちょ、このどいてよ！ホントもう！");

                                    UpdateMainMessage("アイン：良かった・・・無事なんだな・・・ハハハ・・・");

                                    UpdateMainMessage("アイン：お前さ・・・");

                                    UpdateMainMessage("アイン：ここに来るまでの間、ものすごく辛そうだったぜ。");

                                    UpdateMainMessage("アイン：本当に・・・心配だった。");

                                    UpdateMainMessage("アイン：本当に・・・良かった・・・");

                                    UpdateMainMessage("ラナ：え、う、う〜んと・・・");

                                    UpdateMainMessage("ラナ：心配してくれて、どうもありがと♪");

                                    UpdateMainMessage("アイン：本当に・・・");

                                    UpdateMainMessage("ラナ：で、分かった！　分かったから、ちょっとどいてね！");

                                    UpdateMainMessage("アイン：あ、ああ・・・");

                                    using (MessageDisplay md = new MessageDisplay())
                                    {
                                        md.StartPosition = FormStartPosition.CenterParent;
                                        md.Message = "アイン、ラナ、ヴェルゼはしばらくその場で休息を取った。";
                                        md.ShowDialog();
                                    }

                                    UpdateMainMessage("アイン：じゃあ、あれか。覚えていないと？");

                                    UpdateMainMessage("ラナ：う〜ん、何て言うのかしら。覚えてないわけじゃないわ。覚えているわよ。");

                                    UpdateMainMessage("アイン：お前さ。ここに到達するまでの間、かなり無茶苦茶だったぜ。");

                                    UpdateMainMessage("ラナ：う〜ん、そんなに？");

                                    UpdateMainMessage("アイン：鏡が並びまくってるのに、一発で当ててしまったりだな。");

                                    UpdateMainMessage("アイン：何か立ち止まったかと思えば、鏡に向かって独唱を始めたりだな。");

                                    UpdateMainMessage("アイン：ついでに言ってしまえば、眼だよ。");

                                    UpdateMainMessage("ラナ：眼？　それがどうかしたの？");

                                    UpdateMainMessage("アイン：眼が普段のトパーズ色から、薄白色に変化したりもしてた。");

                                    UpdateMainMessage("ラナ：うそ？？　アインの見間違いじゃないの？？");

                                    UpdateMainMessage("アイン：だ、だよな？　ヴェルゼ。");

                                    UpdateMainMessage("ヴェルゼ：ええ、確かに眼球の膜色に変化はありましたね。");

                                    UpdateMainMessage("ラナ：そ、そうなんだ。まあヴェルゼさんが言うなら、間違いはなさそうね。");

                                    UpdateMainMessage("アイン：で・・・色々と思い出せないわけか？");

                                    UpdateMainMessage("ラナ：う〜ん、だから思い出せないって言うのもおかしいんだけど・・・");

                                    UpdateMainMessage("ラナ：なんとなく、喋ってたのは覚えてるのよ。");

                                    UpdateMainMessage("アイン：鏡に向かって何やら妙な対話をしてたのは、覚えているか？");

                                    UpdateMainMessage("ラナ：会話？");

                                    UpdateMainMessage("アイン：そうそう、何か誰かと会話してるような感じでもあったぜ。");

                                    UpdateMainMessage("ラナ：そうね・・・なんとなく覚えてるわ。");

                                    UpdateMainMessage("ラナ：だって、鏡の中に人が現れたんだもの、ビックリしちゃうわよ。");

                                    UpdateMainMessage("アイン：え、それってラナ自身じゃない誰かって事か？？");

                                    UpdateMainMessage("ラナ：ええ、そうよ。確かあれはね・・・");

                                    UpdateMainMessage("ラナ：１人は、私のお母さんね。");

                                    UpdateMainMessage("アイン：神代の叔母さんか。");

                                    UpdateMainMessage("ラナ：うん、とっても懐かしかったわ。");

                                    UpdateMainMessage("ラナ：私が心の中で考えた事を問いかける前にね、何でも初めから答えてくれるのよ。");

                                    UpdateMainMessage("アイン：正解ルートはそれで分かったって事か？");

                                    UpdateMainMessage("ラナ：そうね、分かるっていうよりは教えてもらったって感じの方が近いわ。");

                                    UpdateMainMessage("ヴェルゼ：鏡自体に意志はありませんので、ラナさん本人の意志で選択しているのは事実です。");

                                    UpdateMainMessage("アイン：で、話してたのは、どんな内容だったんだよ？");

                                    UpdateMainMessage("ラナ：うーんとね、私が小さい頃の話だったわ。");

                                    UpdateMainMessage("ラナ：私ね、薬草学と武術学の両方をやりたいって話してたのよ、小さい頃。");

                                    UpdateMainMessage("ラナ：お花を摘んでくるのも楽しいし、身体を動かすのも好きだったし。");

                                    UpdateMainMessage("アイン：ああ、確かそうだったな。");

                                    UpdateMainMessage("ラナ：それでね、母さんが言ってくれたの。");

                                    UpdateMainMessage("ラナ：『やりたい事が沢山あるのね、ラナ、それはとっても良い事よ。』");

                                    UpdateMainMessage("ラナ：『でもね、ラナ、一度決めた事は最後までやってみなさい。』");

                                    UpdateMainMessage("ラナ：『っほら、いってらっしゃい。』");

                                    UpdateMainMessage("ラナ：って・・・言われて、その直後にほんのり鏡が薄く光ったりしてたのよ。");

                                    UpdateMainMessage("アイン：へええぇぇぇ・・・マジかそれ！");

                                    UpdateMainMessage("アイン：お前、それ一体どういう能力だったんだよ？？");

                                    UpdateMainMessage("ヴェルゼ：・・・おそらくですが。");

                                    UpdateMainMessage("ヴェルゼ：鏡が薄く光る事自体は、単なるこのダンジョン空間内での光の当たり方でしかありません。");

                                    UpdateMainMessage("ヴェルゼ：その鏡の中の語り部は、ラナさん自身の象徴的な要素。");

                                    UpdateMainMessage("ヴェルゼ：そして、それを駆使して、並んだ鏡の位置と方向から。");

                                    UpdateMainMessage("ヴェルゼ：ラナさんは感覚的な側面を全て集中させ、敏感に正方向の鏡の位置を感じ取った。");

                                    UpdateMainMessage("アイン：そ、そうなのか・・・？？");

                                    UpdateMainMessage("ラナ：うーん、確かにそうかも。");

                                    UpdateMainMessage("アイン：へえ・・・あるのか、そういうことが・・・");

                                    UpdateMainMessage("ラナ：あ、でもね。聞いて聞いて♪");

                                    UpdateMainMessage("アイン：おお、どうした。");

                                    UpdateMainMessage("ラナ：鏡を通過するうちにね、何度か違う雰囲気にもなってたりしたのよ。");

                                    UpdateMainMessage("アイン：そ、そりゃそうだろうな・・・");

                                    UpdateMainMessage("ラナ：え、なによその言い方は。");

                                    UpdateMainMessage("アイン：いや、だってさ。かなり苦しそうな詰問の雰囲気で喋ってる時もあったぜ。");

                                    UpdateMainMessage("ラナ：えー、そんな風になってたかしら？");

                                    UpdateMainMessage("アイン：で、それでも神代の叔母さんとなのか？");

                                    UpdateMainMessage("ラナ：うーん、それがね。聞いて聞いて♪");

                                    UpdateMainMessage("ラナ：会話してたのは、なんとファラ王妃よ♪");

                                    UpdateMainMessage("アイン：え、マジかよ！？");

                                    UpdateMainMessage("アイン：良いなあ・・・俺も何度か喋ってみたいのにさ。");

                                    UpdateMainMessage("ヴェルゼ：王妃ファラはどのような事を言っていましたか？");

                                    UpdateMainMessage("ラナ：それが実はね、ちょっと言いにくいんだけど・・・");

                                    UpdateMainMessage("アイン：ん？まあ、言いにくい内容なら無理には言う必要は・・・");

                                    UpdateMainMessage("ラナ：ううん、言わせて。");

                                    UpdateMainMessage("ラナ：いつものファラ様らしくない雰囲気だったわ。");

                                    UpdateMainMessage("アイン：え・・・");

                                    UpdateMainMessage("ラナ：何て言うのかしら、ものすごく厳粛な顔つきでね。");

                                    UpdateMainMessage("ラナ：色々と私に確かな詰問をしてくるのよ。");

                                    UpdateMainMessage("アイン：マジか・・・あのファラ様がねえ・・・");

                                    UpdateMainMessage("ラナ：私が迷っていたポイントは、全てお見通しの上での詰問だったわ。");

                                    UpdateMainMessage("ラナ：何でダンジョンについて行こうとしたのか。");

                                    UpdateMainMessage("アイン：な・・・なんだって？");

                                    UpdateMainMessage("ラナ：決定しきれない優柔不断さが命取りだから、ダンジョンへいくかどうかの決意の点。");

                                    UpdateMainMessage("ラナ：その決意は自分自身で本当に決めた事なのかどうかも含めてって話よね。");

                                    UpdateMainMessage("ラナ：そして、その決意の影響で、どのように事実が進んでしまうのかも考え尽くすように。");

                                    UpdateMainMessage("ラナ：決意には完璧なモノはなく、必ず失敗やミスが付きまとっている事も自覚するように。");

                                    UpdateMainMessage("ラナ：そんな考え方や観点をファラ様に問いただされたの。");

                                    UpdateMainMessage("アイン：ダ・・・ダンジョンに付いていく上での決意の点だって？");

                                    UpdateMainMessage("アイン：そんな大それた内容だったって言うのかよ？");

                                    UpdateMainMessage("ラナ：うーん、大それた内容ってワケじゃないんだけどね♪");

                                    UpdateMainMessage("アイン：そうか・・・まあラナ。");

                                    UpdateMainMessage("アイン：お前がそのことで悩んでいたのに、気づけなかったのは悪かったな。");

                                    UpdateMainMessage("ラナ：ッフフフ、私が鏡に触れて初めて出てきている事柄よ、気にしないで♪");

                                    UpdateMainMessage("アイン：そ、そうか・・・");

                                    UpdateMainMessage("アイン：まあ、ダンジョン進行が心配であれば、すぐ引き返したり、一旦解散も行うからな、その時は言ってくれよな。");

                                    UpdateMainMessage("ラナ：ッフフ、アリガト♪");

                                    UpdateMainMessage("アイン：しかし、あのファラ様がそんな風に問い正すとはねえぇ・・・");

                                    UpdateMainMessage("ヴェルゼ：いえ、分かる気はします。");

                                    UpdateMainMessage("アイン：そうなのか？");

                                    UpdateMainMessage("ヴェルゼ：ええ、王妃ファラは面会時では決して見せませんが。");

                                    UpdateMainMessage("ヴェルゼ：国王エルミと、カール爵、そして私含めての場における密談時の雰囲気はそれとなく似ています。");

                                    UpdateMainMessage("ヴェルゼ：心情、繋がり、真意、情感、判断適正、そういった観点を総合して");

                                    UpdateMainMessage("ヴェルゼ：そこから人々の考え方や在り方、思考を浮き彫りにさせてしまうのが彼女の特徴の一つです。");

                                    UpdateMainMessage("アイン：・・・・・・へええぇぇぇ・・・す、すげええぇぇ・・・");

                                    UpdateMainMessage("アイン：ラナ、お前そんなファラ様を見たことはあるのかよ？？");

                                    UpdateMainMessage("ラナ：うーん、ないんだけどね。");

                                    UpdateMainMessage("ラナ：でも、あの絶えない笑顔を見てると、私達一般市民に対して、ものすごく気を使ってる事はわかるわ。");

                                    UpdateMainMessage("ラナ：なんとなくだけど、そういう所からひょっとして別の趣もあるのかなって。");

                                    UpdateMainMessage("アイン：そうなのか・・・俺には見抜けない面だなそういうのは。");

                                    UpdateMainMessage("ラナ：さすがに女性同士じゃないと、分からないわよ、バカアインじゃ無理ね♪");

                                    UpdateMainMessage("アイン：グァ・・・そうきたか、ハハハ・・・。");

                                    UpdateMainMessage("アイン：でさ、三面鏡って言うぐらいだし、3人目も当然・・・？");

                                    UpdateMainMessage("ラナ：うーん、それがね。");

                                    UpdateMainMessage("ラナ：３人目は居たわよ、ただ・・・");

                                    UpdateMainMessage("ヴェルゼ：ラナさん、これは無理強いではありません。気になさるようであれば、");

                                    UpdateMainMessage("ラナ：ううん、大丈夫よ。ただ本当に驚いただけだから。");

                                    UpdateMainMessage("ラナ：3人目はね。");

                                    UpdateMainMessage("ラナ：小さい頃の私が出てきたのよ。");

                                    UpdateMainMessage("アイン：小さい頃の・・・ラナが？");

                                    UpdateMainMessage("ラナ：うん、それでね。自分で言うのも変なんだけど、色々と言われたわ。");

                                    UpdateMainMessage("ラナ：失敗したり、ミスしてたりするのは全部おねえちゃんのせいだって。");

                                    UpdateMainMessage("アイン：『おねえちゃん』っていうのは、ラナ、お前の事を指してか？");

                                    UpdateMainMessage("ラナ：うん、そうよ。");

                                    UpdateMainMessage("ラナ：あとは、その小さい頃の私が、光輝いたり、暗闇に落ちたりもしてたわ。");

                                    UpdateMainMessage("ラナ：その度に、いろんなモノを私が詰め込んだり、その子が放してしまったり。");

                                    UpdateMainMessage("ラナ：多分、自分が昔好きだったモノとか、嫌いだったモノだったと思うの。");

                                    UpdateMainMessage("ラナ：それを一つ一つ・・・得ては失って・・・。");

                                    UpdateMainMessage("アイン：その・・・ほかには？");

                                    UpdateMainMessage("ラナ：こうも言ってたわ。");

                                    UpdateMainMessage("ラナ：良いも、悪いも、『おねえちゃん』の考え方次第。");

                                    UpdateMainMessage("ラナ：失敗するのも、成功するのも、『おねえちゃん』が全て原因。");

                                    UpdateMainMessage("ラナ：幸せも、不幸も、『おねえちゃん』の選択次第。");

                                    UpdateMainMessage("ラナ：それを・・・。");

                                    UpdateMainMessage("ラナ：・・・う〜ん・・・");

                                    UpdateMainMessage("アイン：な、なんだよ？");

                                    UpdateMainMessage("ヴェルゼ：ひょっとして・・・アイン君じゃないですか？");

                                    UpdateMainMessage("アイン：はい？");

                                    UpdateMainMessage("ラナ：ッフフ、バレてるんじゃしょうがないわね。");

                                    UpdateMainMessage("ラナ：どっか、そこのバカは感づかないみたいだけど、しょうがないから言うわね♪");

                                    UpdateMainMessage("ラナ：その子は最後にバカアインに向けて言ったみたいだったのよ。");

                                    UpdateMainMessage("アイン：ッゲ、俺にか！？　何て言ったんだ？？");

                                    UpdateMainMessage("ラナ：そのまま・・・");

                                    UpdateMainMessage("ラナ：『おねえちゃん』がそのまま進めないように。");

                                    UpdateMainMessage("ラナ：『おねえちゃん』が正しい選択をしないように。");

                                    UpdateMainMessage("ラナ：『おねえちゃん』が、今は、大切な人と一緒に歩まないように。");

                                    UpdateMainMessage("ラナ：これで全部だったと思うわ。");

                                    UpdateMainMessage("アイン：何か・・・");

                                    UpdateMainMessage("アイン：何か、変だな。");

                                    UpdateMainMessage("ヴェルゼ：どの辺りがですか？");

                                    UpdateMainMessage("アイン：呼び声みたいな感じで語ってたのと微妙に内容が違う。");

                                    UpdateMainMessage("アイン：確かに流れ的には、そんな様な内容を喋っていたとは思うんだが。");

                                    UpdateMainMessage("アイン：（引っかかるな・・・なんだろうな・・・）");

                                    UpdateMainMessage("ラナ：まあ、その話は一旦戻ってからにしましょ♪");

                                    UpdateMainMessage("アイン：あ、ああ。そうだな。結構疲れちまったし、一旦戻るとするか！");

                                    UpdateMainMessage("ヴェルゼ：アイン君、では水晶をお願いします。");

                                    UpdateMainMessage("アイン：おっしゃ、じゃ、使うぜ！　遠見の青水晶。");

                                    CallHomeTown();
                                }
                                else
                                {
                                    GroundOne.WE2.TruthWillFail = true;

                                    UpdateMainMessage("アイン：（・・・だめだ、ラナを包んでいる球体がいつまでたっても消滅しねえ・・・）");

                                    UpdateMainMessage("アイン：（ラナに資質がなかったのか・・・いや）");

                                    UpdateMainMessage("アイン：（これは、俺のせいだ。）");

                                    UpdateMainMessage("アイン：（うまくいくかどうかも分からないまま進めてしまった俺のせいだ・・・）");

                                    UpdateMainMessage("アイン：（ともかく、俺はココでずっと待ち続けるしかねえ・・・）");

                                    UpdateMainMessage("アイン：（すまねえ、ラナ・・・　・・・　）");

                                    UpdateMainMessage("アイン：（・・・　・・・）");

                                    UpdateMainMessage("アイン：（・・・）");

                                    UpdateMainMessage(" 〜　THE　END　〜　（曲げられた世界）");

                                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                                    //this.dungeonField.Invalidate(); // セーブエンドなので、描画する必要はない。

                                    using (ESCMenu esc = new ESCMenu())
                                    {
                                        esc.MC = this.MC;
                                        esc.SC = this.SC;
                                        esc.TC = this.TC;
                                        esc.WE = this.we;
                                        esc.KnownTileInfo = null;
                                        esc.KnownTileInfo2 = null;
                                        esc.KnownTileInfo3 = null;
                                        esc.KnownTileInfo4 = null;
                                        esc.KnownTileInfo5 = null;
                                        esc.Truth_KnownTileInfo = this.Truth_KnownTileInfo;
                                        esc.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2;
                                        esc.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3;
                                        esc.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4;
                                        esc.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5;
                                        esc.StartPosition = FormStartPosition.CenterParent;
                                        esc.TruthStory = true;
                                        esc.OnlySave = true;
                                        esc.ShowDialog();
                                    }

                                    this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("台座はもうなくなってる", true);
                        }
                        return true;
                    case 270:
                        if (!we.dungeonEvent313)
                        {
                            we.dungeonEvent313 = true;

                            UpdateMainMessage("アイン：看板だ、読んでみるぜ。");

                            UpdateMainMessage("　　　　『　原点解(1 3 4 5 4 2 3 1 4 2 5 5)  左は聖者、右は愚者、究極解を選択せよ』");

                            UpdateMainMessage("アイン：・・・なるほどな。");

                            UpdateMainMessage("ラナ：この左の数字の羅列、アインには分かるわけ？");

                            UpdateMainMessage("アイン：ああ、なんとなくだけどな。");

                            UpdateMainMessage("アイン：おそらく最後に無限解に対する答えを出さなくちゃならねえ。");

                            UpdateMainMessage("アイン：これがそれに対する解答になってるってワケだ。");

                            UpdateMainMessage("ラナ：じゃあ、数字の羅列はダンジョンメモ帳に残しておくわね♪");

                            UpdateMainMessage("アイン：ああ、悪いな。サンキュー。");

                            UpdateMainMessage("ラナ：でも、後ろに引っ付いているのはどういう意味かしら。");

                            UpdateMainMessage("アイン：左は聖者、右は愚者、究極解・・・");

                            UpdateMainMessage("アイン：簡単だ。解けたぜ。");

                            UpdateMainMessage("ラナ：え、もう？？");

                            UpdateMainMessage("アイン：ああ、これはそれほど難しい問いかけじゃねえ。");

                            UpdateMainMessage("アイン：向こうに鏡が二つ左右に見えるだろ？");

                            UpdateUnknownTileArea3_Area69();

                            UpdateMainMessage("ラナ：え、ええ・・・");

                            UpdateMainMessage("アイン：左側が聖者で");

                            UpdateMainMessage("アイン：右側が愚者");

                            UpdateMainMessage("アイン：それを踏まえた上で、究極解を選べ。");

                            UpdateMainMessage("アイン：ここまで考えれば、自明の理だ。");

                            UpdateMainMessage("アイン：後は任せておけって。");

                            UpdateMainMessage("ラナ：うん、分かったわ。じゃあ指定の鏡へ移動して、私が鏡を使ってみるから。");

                            UpdateMainMessage("アイン：っしゃ、じゃあ選ぶぜ。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　原点解(1 3 4 5 4 2 3 1 4 2 5 5)  左は聖者、右は愚者、究極解を選択せよ』", true);
                        }
                        return true;
                    #endregion
                    #region "ボス前の扉"
                    case 271:
                        if (!we.dungeonEvent319KeyOpen)
                        {
                            GroundOne.StopDungeonMusic();

                            if (!we.dungeonEvent319)
                            {
                                UpdateMainMessage("アイン：扉か・・・");

                                UpdateMainMessage("ラナ：ボスはまだよね？確か。");

                                UpdateMainMessage("アイン：ああ、そして間違いなくこの先にいるな。");

                                UpdateMainMessage("ヴェルゼ：アイン君、この扉・・・どうしますか？");

                                UpdateMainMessage("アイン：（・・・どうする・・・）");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：・・・　・・・");
                            }

                            GroundOne.StopDungeonMusic();
                            GroundOne.PlayDungeonMusic(Database.BGM16, Database.BGM16LoopBegin);

                            using (TruthDecision td = new TruthDecision())
                            {
                                td.MainMessage = "　【　扉を開けますか？　】";
                                td.FirstMessage = "扉を開ける。";
                                td.SecondMessage = "扉を開けず、他を探す。";
                                td.StartPosition = FormStartPosition.CenterParent;
                                td.ShowDialog();

                                if (td.DialogResult == System.Windows.Forms.DialogResult.Yes)
                                {
                                    GroundOne.StopDungeonMusic();

                                    UpdateMainMessage("アイン：よし、開けるぜ！");

                                    UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                    blueWallRight[39 * Database.TRUTH_DUNGEON_COLUMN + 54] = false;
                                    blueWallLeft[39 * Database.TRUTH_DUNGEON_COLUMN + 55] = false;
                                    UpdateUnknownTile();
                                    dungeonField.Invalidate();

                                    UpdateMainMessage("　　『その瞬間、部屋の奥底から、地鳴りのような唸り声が響き渡ってきた！！』");

                                    UpdateMainMessage("　　『ッヴオオオオォォォォォォ、グゥウウオォォオォォ！！！！！！』");

                                    UpdateMainMessage("アイン：で・・・デケェ！！");

                                    UpdateMainMessage("ラナ：ちょっとどうするのよ、こんなの・・・");

                                    UpdateMainMessage("アイン：どうするもこうするも・・・");

                                    UpdateMainMessage("アイン：ここまで来たんだ、やるしかないだろ。");

                                    UpdateMainMessage("アイン：ヴェルゼ、ラナ、準備は良いか？");

                                    UpdateMainMessage("ヴェルゼ：ええ、いつでも良いですよ。");

                                    UpdateMainMessage("ラナ：うん、オッケーよ。");

                                    UpdateMainMessage("アイン：よし、じゃあ行くぜ！！");

                                    we.dungeonEvent319KeyOpen = true;
                                }
                                else
                                {
                                    if (!we.dungeonEvent319)
                                    {
                                        UpdateMainMessage("アイン：（・・・　・・・）");

                                        UpdateMainMessage("アイン：（師匠だったらどうするかな、こういう場合）");

                                        UpdateMainMessage("アイン：（正解には辿り着いてる、その感触に間違いはねえと思うんだが・・・）");

                                        UpdateMainMessage("アイン：（だが、そもそも師匠のセンスで言えば、その『正解』という時点で・・・）");

                                        UpdateMainMessage("アイン：（２つ目が正解・・・３つ目が無限解・・・１つ目が原点解・・・）");

                                        UpdateMainMessage("アイン：（・・・　・・・　・・・）");

                                        UpdateMainMessage("ラナ：どうしたの？アイン。");

                                        UpdateMainMessage("アイン：ん？あ、ああ。　いやちょっとな。");

                                        UpdateMainMessage("ヴェルゼ：迷っているようですね、もう少し他を探索しますか？");

                                        UpdateMainMessage("アイン：ああ、悪いな。　もう少しだけそうさせてくれ。");
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：（・・・いや、もう少しだけ探索してみるか・・・）");
                                    }
                                }

                                GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                            }
                            we.dungeonEvent319 = true;
                        }
                        return true;
                    #endregion
                    #region "４階への階段"
                    case 272:
                        if (!we.dungeonEvent325)
                        {
                            we.dungeonEvent325 = true;
                            GroundOne.StopDungeonMusic();

                            UpdateMainMessage("アイン：おし、じゃあ早速階段を・・・");

                            UpdateMainMessage("    【【【　その瞬間、アインは凄まじい精神干渉を感じ取った！　】】】");

                            UpdateMainMessage("アイン：ッグ、っまた！？");

                            UpdateMainMessage("　　　　【　汝、何を目指す？　】");

                            EncountBattle(Database.ENEMY_DRAGON_DESOLATOR_AZOLD, String.Empty, String.Empty, false, false, false, false);

                            GroundOne.StopDungeonMusic();

                            UpdateMainMessage("アイン：・・・　・・・　・・・");

                            UpdateMainMessage("ラナ：アイン・・・？？　ちょっと！？");

                            UpdateMainMessage("アイン：・・・え・・・っとと・・・");

                            UpdateMainMessage("アイン：っとぉぉぉ、階段降りるとするか！ッハッハッハ！");

                            UpdateMainMessage("ラナ：・・・まさかまた何か見えたの？");

                            UpdateMainMessage("アイン：・・・ああ。");

                            UpdateMainMessage("アイン：デカい竜がまた現れた。");

                            UpdateMainMessage("ラナ：うーん、その話にわかには信じられないんだけど。");

                            UpdateMainMessage("ラナ：どの辺りにいたのよ？");

                            UpdateMainMessage("アイン：いや、そんな竜なんて居ないのは分かってるんだよ。");

                            UpdateMainMessage("アイン：俺もそこまでボケちゃいねえ。ココには居ない、それは確かだ。");

                            UpdateMainMessage("ラナ：だから、どの辺りに見えたのかを聞いてるんだけど。");

                            UpdateMainMessage("アイン：・・・す、すまねえ・・・");

                            UpdateMainMessage("ラナ：アンタってホントバカよね。説明不能な行動は謹んでよねホンット。");

                            UpdateMainMessage("ヴェルゼ：・・・不可解ですね。");

                            UpdateMainMessage("ヴェルゼ：アイン君、竜だけが見えたのですか？　景色などはいかがでしたか？");

                            UpdateMainMessage("アイン：いやいや、悪い、全然それが鮮明に思い出せないんだ。");

                            UpdateMainMessage("アイン：ちゃんと目視で見えてはいた筈なんだが。");

                            UpdateMainMessage("アイン：悪い、さすがに俺の勘違いって事もあるし・・・");

                            UpdateMainMessage("ヴェルゼ：そうですか、分かりました。");

                            UpdateMainMessage("ヴェルゼ：それならこの件に関しては止めておきましょう、ラナさん。");

                            UpdateMainMessage("ラナ：えっ・・・ええ。ヴェルゼさんがそう言うなら♪");

                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);

                            UpdateMainMessage("アイン：悶々として悪かったな。とりあえず階段降りて街へ戻るぜ！");

                            UpdateMainMessage("ラナ：いきなり元気になり過ぎないでよね、ホンットに・・・");

                            UpdateMainMessage("アイン：まあまあまあ、良いじゃねえか、行くぜ！！");
                        }
                        else
                        {
                            if (we.dungeonEvent328)
                            {
                                UpdateMainMessage("ラナ：あれ？　原点解が分かったんだから５つ鏡の方に行ってみるんじゃないの？", true);
                                using (YesNoRequest ynr = new YesNoRequest())
                                {
                                    ynr.StartPosition = FormStartPosition.CenterParent;
                                    ynr.ShowDialog();
                                    if (ynr.DialogResult == DialogResult.Yes)
                                    {
                                        UpdateMainMessage("アイン：すまねえ、そうだったな。５つ鏡の方に進んでみるぜ。");
                                        return true;
                                    }
                                    else
                                    {
                                        UpdateMainMessage("アイン：いや、いっぺんこっちから降りてみるぜ。");

                                        UpdateMainMessage("ラナ：ふ〜ん、変なの・・・まあアインがそういうなら良いけど。");

                                        UpdateMainMessage("アイン：ハハ・・・悪いな、混乱させちまって。");

                                        UpdateMainMessage("ラナ：まあ良いわ、行きましょ♪");

                                        UpdateMainMessage("アイン：ああ。");
                                    }
                                }
                            }
                            UpdateMainMessage("アイン：下り階段発見！さっそく降りるとするか？", true);
                            using (YesNoRequest ynr = new YesNoRequest())
                            {
                                bool tempCompleteArea3 = we.TruthCompleteArea3;
                                ynr.StartPosition = FormStartPosition.CenterParent;
                                ynr.ShowDialog();
                                if (ynr.DialogResult == DialogResult.Yes)
                                {
                                    JumpByNormal(18, 52);
                                    SetupDungeonMapping(4);
                                    dungeonField.Invalidate();
                                    UpdateMainMessage("", true);

                                    if (!tempCompleteArea3)
                                    {
                                        UpdateMainMessage("アイン：おし、３階制覇した事だし、一度ユングの町へ戻るとするか。");
                                        CallHomeTown();
                                    }
                                }
                                else
                                {
                                    UpdateMainMessage("", true);
                                }
                            }
                        }
                        return true;
                    #endregion
                    #region "無限回廊の看板"
                    case 273:
                        if (!we.dungeonEvent330)
                        {
                            UpdateMainMessage("　　　　『　正解を導きし者、無限解の探求にて永遠に彷徨い、原点を知ること無く、回り続けるがよい　』", true);
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　正解を導きし者、無限解の探求にて永遠に彷徨い、原点を知ること無く、回り続けるがよい　』");

                            UpdateMainMessage("ラナ：原点解は、1 3 4 5 4 2 3 1 4 2 5 5 の順序よ。");

                            UpdateMainMessage("アイン：オーケー");

                        }
                        return true;
                    #endregion
                    #region "無限回廊"
                    // Final、無限１〜１２組み合わせ
                    case 191:
                    case 192:
                    case 193:
                    case 194:
                    case 195:
                        if (!we.dungeonEvent329)
                        {
                            if (!we.dungeonEvent320)
                            {
                                we.dungeonEvent320 = true;

                                UpdateMainMessage("ラナ：あれ、やっぱり試してみるわけ？");

                                UpdateMainMessage("アイン：ああ、一回だけコッソリ・・・");

                                UpdateMainMessage("ラナ：ッフフ、別に誰かが見てるわけでもないんだから、コッソリする必要は無いんじゃない♪");

                                UpdateMainMessage("ヴェルゼ：ところで、何かヒントらしきモノは掴んでいるのでしょうか？");

                                UpdateMainMessage("アイン：・・・");

                                UpdateMainMessage("アイン：いや、正直ねえ。");

                                UpdateMainMessage("ヴェルゼ：まあ手当たり次第というのも、良いのでは。試しにやってみましょうか。");

                                UpdateMainMessage("アイン：ラナ、お願いできるか？");

                                UpdateMainMessage("ラナ：ええ、任せておいて。");

                                UpdateMainMessage("ラナ：じゃあ、ひとまずここから行ってみるわね。ッハイ。");
                            }
                            // 無限回廊の解をここで再設定する。
                            for (int zz = 0; zz < INFINITE_LOOP_MAX; zz++)
                            {
                                this.infinityLoopNumber[zz] = AP.Math.RandomInteger(5) + 1;
                            }
                        }
                        else
                        {
                            // 原点解を導いている場合は、以下の設定となる。
                            //1 3 4 5 4 2 3 1 4 2 5 5
                            for (int zz = 0; zz < INFINITE_LOOP_MAX; zz++)
                            {
                                this.infinityLoopNumber[zz] = originNumber[zz];
                            }
                        }
                        this.playerLoopNumber[0] = ii - 190;
                        JumpByMirror_Instant(34, 57);
                        UpdateUnknownTileArea3_Last(32);
                        return true;
                    case 196:
                    case 197:
                    case 198:
                    case 199:
                    case 200:
                        this.playerLoopNumber[1] = ii - 195;
                        JumpByMirror_Instant(31, 57);
                        UpdateUnknownTileArea3_Last(29);
                        return true;
                    case 201:
                    case 202:
                    case 203:
                    case 204:
                    case 205:
                        this.playerLoopNumber[2] = ii - 200;
                        JumpByMirror_Instant(28, 57);
                        UpdateUnknownTileArea3_Last(26);
                        return true;
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                        this.playerLoopNumber[3] = ii - 205;
                        JumpByMirror_Instant(25, 57);
                        UpdateUnknownTileArea3_Last(23);
                        return true;
                    case 211:
                    case 212:
                    case 213:
                    case 214:
                    case 215:
                        this.playerLoopNumber[4] = ii - 210;
                        JumpByMirror_Instant(22, 57);
                        UpdateUnknownTileArea3_Last(20);
                        return true;
                    case 216:
                    case 217:
                    case 218:
                    case 219:
                    case 220:
                        this.playerLoopNumber[5] = ii - 215;
                        JumpByMirror_Instant(19, 57);
                        UpdateUnknownTileArea3_Last(17);
                        return true;
                    case 221:
                    case 222:
                    case 223:
                    case 224:
                    case 225:
                        this.playerLoopNumber[6] = ii - 220;
                        JumpByMirror_Instant(16, 57);
                        UpdateUnknownTileArea3_Last(14);
                        return true;
                    case 226:
                    case 227:
                    case 228:
                    case 229:
                    case 230:
                        this.playerLoopNumber[7] = ii - 225;
                        JumpByMirror_Instant(13, 57);
                        UpdateUnknownTileArea3_Last(11);
                        return true;
                    case 231:
                    case 232:
                    case 233:
                    case 234:
                    case 235:
                        this.playerLoopNumber[8] = ii - 230;
                        JumpByMirror_Instant(10, 57);
                        UpdateUnknownTileArea3_Last(8);
                        return true;
                    case 236:
                    case 237:
                    case 238:
                    case 239:
                    case 240:
                        this.playerLoopNumber[9] = ii - 235;
                        JumpByMirror_Instant(7, 57);
                        UpdateUnknownTileArea3_Last(5);
                        return true;
                    case 241:
                    case 242:
                    case 243:
                    case 244:
                    case 245:
                        this.playerLoopNumber[10] = ii - 240;
                        JumpByMirror_Instant(4, 57);
                        UpdateUnknownTileArea3_Last(2);
                        return true;
                    case 246:
                    case 247:
                    case 248:
                    case 249:
                    case 250:
                        this.playerLoopNumber[11] = ii - 245;
                        // 12段階の全正解かどうかをチェック
                        if (CheckInfiniteLoopResult())
                        {
                            if (!we.dungeonEvent328)
                            {
                                JumpByMirror_Instant(1, 55);
                                UpdateUnknownTileArea3_TruthLast();

                                MessageInfiniteLoopResult(1);

                                UpdateMainMessage("アイン：あっ・・・");

                                UpdateMainMessage("アイン：（俺はこの時・・・）");

                                UpdateMainMessage("アイン：（純粋にラナに声をかけようと思った。）");

                                UpdateMainMessage("アイン：（【ひょっとして、あれ階段じゃないか！？】って・・・）");

                                UpdateMainMessage("アイン：（が、急に声が発生できない・・・いや）");

                                UpdateMainMessage("アイン：（発声どころじゃない）");

                                UpdateMainMessage("アイン：（手、足、指先、眼球、毛一本一本に至るまで・・・）");

                                UpdateMainMessage("アイン：（そして心臓さえも）");

                                UpdateMainMessage("アイン：（全てが完全に自分の意志で動かせない、あるいは、動かなくなっていくのを感じた。）");

                                UpdateMainMessage("アイン：（唐突な死）");

                                UpdateMainMessage("アイン：（せっかく、進められた・・・ハズ・・・が・・・）");

                                UpdateMainMessage("アイン：（・・・　・・・）");

                                UpdateMainMessage("アイン：（・・・）");

                                UpdateMainMessage(" 〜　THE　END　〜　（訪れた究極確率）");

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                                //this.dungeonField.Invalidate(); // セーブエンドなので、描画する必要はない。

                                using (ESCMenu esc = new ESCMenu())
                                {
                                    esc.MC = this.MC;
                                    esc.SC = this.SC;
                                    esc.TC = this.TC;
                                    esc.WE = this.we;
                                    esc.KnownTileInfo = null;
                                    esc.KnownTileInfo2 = null;
                                    esc.KnownTileInfo3 = null;
                                    esc.KnownTileInfo4 = null;
                                    esc.KnownTileInfo5 = null;
                                    esc.Truth_KnownTileInfo = this.Truth_KnownTileInfo;
                                    esc.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2;
                                    esc.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3;
                                    esc.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4;
                                    esc.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5;
                                    esc.StartPosition = FormStartPosition.CenterParent;
                                    esc.TruthStory = true;
                                    esc.OnlySave = true;
                                    esc.ShowDialog();
                                }

                                this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                            }
                            else
                            {
                                JumpByMirror_Recollection4();

                                if (!we.dungeonEvent332_1)
                                {
                                    we.dungeonEvent332_1 = true;
                                    UpdateMainMessage("アイン：おっ、何か５つ鏡じゃないトコに出たな。");

                                    UpdateMainMessage("ラナ：アインの狙った通りって事じゃないかしら？");

                                    UpdateMainMessage("ヴェルゼ：近そうですね、気をつけて進めましょう。");

                                    UpdateMainMessage("アイン：ああ・・・");
                                }
                            }
                            return true;
                        }
                        else
                        {
                            JumpByMirror_Instant(39, 56);
                        }

                        if (!we.dungeonEvent328)
                        {
                            if (!we.dungeonEvent321)
                            {
                                we.dungeonEvent321 = true;

                                UpdateMainMessage("アイン：あれ、ひょっとして元に戻ったか？");

                                UpdateMainMessage("ラナ：どうも駄目だったみたいね。");

                                UpdateMainMessage("アイン：・・・いやいやいや。");

                                UpdateMainMessage("アイン：ぶっちゃけ、何の変哲もなく５つの鏡がズラズラだったな・・・");

                                UpdateMainMessage("ヴェルゼ：これは・・・");

                                UpdateMainMessage("アイン：ん？何か分かったのか、ヴェルゼは？");

                                UpdateMainMessage("ヴェルゼ：アイン君、看板に何か追加されていますよ。");

                                UpdateMainMessage("アイン：っお！本当かよ！？ちょっと見せてくれ。");

                                MessageInfiniteLoopResult();

                                UpdateMainMessage("アイン：っな・・・何だこれは・・・");

                                UpdateMainMessage("ヴェルゼ：何かの暗号でしょうか？");

                                UpdateMainMessage("ラナ：どうするアイン？");

                                UpdateMainMessage("アイン：うーん・・・");

                                UpdateMainMessage("アイン：追加された文字は今通ったトコに関連はしてそうなんだがな・・・");

                                UpdateMainMessage("アイン：さすがにもういっぺんぐらい行ってみないと分からねえな。");

                                UpdateMainMessage("ラナ：そう、じゃあアインがもう一回行きたいと思ったら言って頂戴。");

                                UpdateMainMessage("アイン：了解了解。");
                            }
                            else if (!we.dungeonEvent322)
                            {
                                we.dungeonEvent322 = true;

                                UpdateMainMessage("アイン：また元の場所に戻ったのか。");

                                UpdateMainMessage("ラナ：全然何の変化もないわね・・・");

                                UpdateMainMessage("アイン：ラナはもう、呼び声みたいなのは全然聞こえないのか？");

                                UpdateMainMessage("ラナ：うん、あの台座の一件があって以来、全然聞こえなくなったわ。");

                                UpdateMainMessage("アイン：そうか・・・");

                                UpdateMainMessage("ヴェルゼ：・・・これは・・・やはり・・・");

                                UpdateMainMessage("アイン：ん？何だ？");

                                UpdateMainMessage("ヴェルゼ：アイン君、看板を");

                                UpdateMainMessage("アイン：お、おお。");

                                MessageInfiniteLoopResult();

                                UpdateMainMessage("ヴェルゼ：アイン君、計算結果をお教えしましょう。");

                                UpdateMainMessage("アイン：計算結果？？何の・・・");

                                UpdateMainMessage("アイン：まっ、まさか！！！！！");

                                UpdateMainMessage("ヴェルゼ：ハイ、そのまさかです。");

                                UpdateMainMessage("ラナ：え、っちょっと一体何の話よ？");

                                UpdateMainMessage("アイン：５つ並んでいる鏡が12段階。そして、この文字はその結果を指している。合ってるか？");

                                UpdateMainMessage("ヴェルゼ：ええ、さすがはアイン君です。この辺に関しては察しが良いですね。");

                                UpdateMainMessage("ヴェルゼ：という事は、この文字の意味も既に理解したようですね。");

                                UpdateMainMessage("アイン：ああ、正解だったナンバーと、俺達が通ったナンバーが記されている。");

                                UpdateMainMessage("アイン：そして一致していれば○、不一致なら×が記されている。");

                                UpdateMainMessage("アイン：分かっていれば単純な表示だったな。");

                                UpdateMainMessage("ヴェルゼ：そのとおりですね。しかしこれは・・・");

                                UpdateMainMessage("ヴェルゼ：アイン君、ラナさん、絶望させて申し訳ないのですが");

                                UpdateMainMessage("ヴェルゼ：この組み合わせ数は");

                                UpdateMainMessage("ヴェルゼ：　【２４４１４０６２５】　です。");

                                UpdateMainMessage("アイン：２億・・・超えるってか・・・");

                                UpdateMainMessage("ラナ：え・・・２億分の１より確率が悪いって話？");

                                UpdateMainMessage("アイン：ああ、そういう事になるな・・・");

                                UpdateMainMessage("ラナ：・・・冗談でしょ。いくらなんでも当たりっこないわ。");

                                UpdateMainMessage("アイン：やっぱ最初の直感通りだな。");

                                UpdateMainMessage("アイン：無限解ってのは解けない事を指している。");

                                UpdateMainMessage("アイン：【永遠に彷徨う】言葉通りだ。");

                                UpdateMainMessage("ラナ：じゃあ、やっぱり階段に行くしかないみたいね。");

                                UpdateMainMessage("アイン：ああ、ひょっとしたら何かあるのかもしれないが、今のとこどうにもならねえ。");

                                UpdateMainMessage("ヴェルゼ：それでは、階段に向かうとしますか？");

                                UpdateMainMessage("アイン：ああ。すまねえがそうさせてもらうぜ。");
                            }
                            else if (!we.dungeonEvent323)
                            {
                                we.dungeonEvent323 = true;

                                MessageInfiniteLoopResult();

                                UpdateMainMessage("アイン：・・・くそ、やはり駄目か。");

                                UpdateMainMessage("ラナ：２億通りを超えてるのよね・・・さすがにヒントが無いとどうにもならないわね。");

                                UpdateMainMessage("アイン：ラナにも、もう呼び声が聞こえねえってトコだしな・・・");

                                UpdateMainMessage("ラナ：ゴメンね。何とか聞こうとはしてるんだけど。");

                                UpdateMainMessage("ヴェルゼ：いえ");

                                UpdateMainMessage("アイン：ん？");

                                UpdateMainMessage("ヴェルゼ：ラナさんに呼び声が聞こえないのはおそらく、ラナさん本人のせいではありません。");

                                UpdateMainMessage("ラナ：えっ、そうなんですか？");

                                UpdateMainMessage("ヴェルゼ：はい。これはある事実を表しています。");

                                UpdateMainMessage("アイン：ある事実？");

                                UpdateMainMessage("ヴェルゼ：ラナさんに呼び声が聞こえない理由は、シンプルです。");

                                UpdateMainMessage("ヴェルゼ：それは、呼び声自体が発していないからです。");

                                UpdateMainMessage("アイン：呼び声自体が発していない・・・");

                                UpdateMainMessage("ヴェルゼ：呼び声は正解を導くために発せられていたのは覚えていますか？");

                                UpdateMainMessage("アイン：・・・　・・・");

                                UpdateMainMessage("アイン：ッ！！　ひょっとして！！！");

                                UpdateMainMessage("ヴェルゼ：この時点で理解が及びましたか。　アイン君の読み方は本当にすごいですね。");

                                UpdateMainMessage("ラナ：どういうこと？");

                                UpdateMainMessage("アイン：ラナ・・・悪い、本当にココは止めておこう。");

                                UpdateMainMessage("ラナ：う〜ん、別に良いけど教えてちょうだい。");

                                UpdateMainMessage("アイン：呼び声が聞こえないのは当たり前だ。");

                                UpdateMainMessage("アイン：ココは通るたびに、正解ルートが変化している。");

                                UpdateMainMessage("ラナ：・・・え？");

                                UpdateMainMessage("アイン：１２段階鏡を潜るだろ？");

                                UpdateMainMessage("ラナ：え、ええ。");

                                UpdateMainMessage("アイン：１２段階の鏡を潜った直後に、答えが毎回変化してるって事だ。");

                                UpdateMainMessage("アイン：つまり、回数を重ねる事自体に意味はねえ。");

                                UpdateMainMessage("アイン：失敗ルートを一つ一つ確認して積み重ねる方法が通用しねえ。");

                                UpdateMainMessage("ラナ：それって、毎回毎回が２億超えの確率を要求されてるって事？");

                                UpdateMainMessage("アイン：ああ・・・");

                                UpdateMainMessage("ヴェルゼ：アイン君、これは本当に止めておいた方が良いようですね。");

                                UpdateMainMessage("アイン：ああ、時間をかけちまって悪かった。階段へ進めるとしよう。");
                            }
                            else if (!we.dungeonEvent324)
                            {
                                we.dungeonEvent324 = true;

                                MessageInfiniteLoopResult();

                                UpdateMainMessage("アイン：・・・駄目だな。");

                                UpdateMainMessage("ヴェルゼ：アイン君、ラナさんに負担をかけるのは止めて階段へ進みましょう。");

                                UpdateMainMessage("ラナ：・・・っえ？");

                                UpdateMainMessage("アイン：しまった。　ラナすまねえな。");

                                UpdateMainMessage("ラナ：イイわよ、このぐらい。　気にしないで♪");

                                UpdateMainMessage("アイン：いやいや、悪かった。階段へ行こう。");
                            }
                            else
                            {
                                MessageInfiniteLoopResult();

                                UpdateMainMessage("アイン：・・・駄目か。");

                                UpdateMainMessage("ヴェルゼ：アイン君、ラナさんの負担を考えましょう。");

                                UpdateMainMessage("アイン：そうだな、すまねえ・・・階段へ行くとするか。");
                            }
                        }
                        else
                        {
                            if (!we.dungeonEvent331)
                            {
                                we.dungeonEvent331 = true;
                                UpdateMainMessage("アイン：あれ、ひょっとして元に戻ったか？");

                                UpdateMainMessage("ラナ：どうも駄目だったみたいね。");

                                UpdateMainMessage("アイン：・・・いやいやいや。");

                                UpdateMainMessage("アイン：原点解がココの鏡を指し示しているのは間違いねえはず。");

                                UpdateMainMessage("ヴェルゼ：アイン君、看板を");

                                UpdateMainMessage("アイン：ん？看板がどうかしたのか？");

                                UpdateMainMessage("ヴェルゼ：看板に何か追加されていますよ。");

                                UpdateMainMessage("アイン：っお！本当かよ！？ちょっと見せてくれ。");

                                MessageInfiniteLoopResult();

                                UpdateMainMessage("アイン：っな・・・");

                                UpdateMainMessage("ヴェルゼ：どうやら、間違いがあったようですね。");

                                UpdateMainMessage("ラナ：アイン、原点解は ( 1 3 4 5 4 2 3 1 4 2 5 5 )だから間違えないでよねホント。");

                                UpdateMainMessage("アイン：しまった・・・悪い悪い。");

                                UpdateMainMessage("アイン：っしゃ、今度こそ間違えずに通過してやるぜ！");
                            }
                            else
                            {
                                UpdateMainMessage("アイン：あれ！？");

                                UpdateMainMessage("ヴェルゼ：アイン君、看板を。");

                                MessageInfiniteLoopResult();

                                UpdateMainMessage("アイン：・・・・・・");

                                UpdateMainMessage("ラナ：ちょっと・・・そこの本格バカアイン・・・");

                                UpdateMainMessage("アイン：悪い、今度こそ！");
                            }
                        }
                        return true;
                    #endregion
                    #region "鏡エリア２−５、台座ルート入り口"
                    case 274:
                        if (!we.dungeonEvent312)
                        {
                            UpdateMainMessage("アイン：いや、今は先へ進む、それしかねえ。", true);
                        }
                        else
                        {
                            JumpByMirror(19, 20);
                        }
                        return true;
                    #endregion
                    #region "鏡エリア３原点解の入口／出口"
                    case 275:
                        if (!we.dungeonEvent313)
                        {
                            UpdateMainMessage("アイン：いや、今は看板を読もう。", true);
                        }
                        else
                        {
                            if (!we.dungeonEvent328)
                            {
                                we.dungeonEvent328 = true;

                                UpdateMainMessage("ラナ：っえ、これって戻る鏡じゃないの？");

                                UpdateMainMessage("アイン：良いんだって、これで。");

                                UpdateMainMessage("ラナ：聖者か愚者を選べっていう話だと思ったんだけど。");

                                UpdateMainMessage("アイン：どちらが究極解って言われりゃ、そりゃあ聖者だろうな。");

                                UpdateMainMessage("アイン：でも俺はそう言う『神様』みたいな雰囲気がする選択肢は、絶対に間違ってると思う。");

                                UpdateMainMessage("ヴェルゼ：愚者を選ばない理由はなんでしょうか？");

                                UpdateMainMessage("アイン：愚者って言うと、耳障りは悪いが。");

                                UpdateMainMessage("アイン：究極解を得ようとして、貪欲に突き進む事を指すんだろう。");

                                UpdateMainMessage("アイン：終わるまで止めない、ある意味じゃ聖者よりも究極解に近いって所じゃねえかな。");

                                UpdateMainMessage("ラナ：ふうん・・・何か変わった解釈ね。");

                                UpdateMainMessage("アイン：まあ、解釈は置いといてだな。");

                                UpdateMainMessage("アイン：俺はその、どちらにも興味はねえ。");

                                UpdateMainMessage("アイン：原点解は得られた。");

                                UpdateMainMessage("アイン：後は戻るだけさ。ここの部屋にはもう用はねえ。");

                                UpdateMainMessage("ラナ：そうなんだ、ちょっとよく分からないけど。");

                                UpdateMainMessage("ラナ：まあいいわ。戻りましょうか♪");

                                UpdateMainMessage("アイン：ああ、鏡ワープ任せたぜ。");

                                UpdateMainMessage("ラナ：ええ、いくわよ♪");

                                JumpByMirror(19, 20);
                            }
                            else
                            {
                                JumpByMirror(19, 20);
                            }
                        }
                        return true;
                    #endregion
                    #region "聖者ルート（BADEND）"
                    case 276:
                        Story_SeekerEvent907();

                        UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                        //this.dungeonField.Invalidate(); // セーブエンドなので、描画する必要はない。

                        using (ESCMenu esc = new ESCMenu())
                        {
                            esc.MC = this.MC;
                            esc.SC = this.SC;
                            esc.TC = this.TC;
                            esc.WE = this.we;
                            esc.KnownTileInfo = null;
                            esc.KnownTileInfo2 = null;
                            esc.KnownTileInfo3 = null;
                            esc.KnownTileInfo4 = null;
                            esc.KnownTileInfo5 = null;
                            esc.Truth_KnownTileInfo = this.Truth_KnownTileInfo;
                            esc.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2;
                            esc.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3;
                            esc.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4;
                            esc.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5;
                            esc.StartPosition = FormStartPosition.CenterParent;
                            esc.TruthStory = true;
                            esc.OnlySave = true;
                            esc.ShowDialog();
                        }

                        this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                        return true;
                    #endregion
                    #region "愚者ルート（BADEND）"
                    case 277:
                        Story_SeekerEvent908();

                        UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                        //this.dungeonField.Invalidate(); // セーブエンドなので、描画する必要はない。

                        using (ESCMenu esc = new ESCMenu())
                        {
                            esc.MC = this.MC;
                            esc.SC = this.SC;
                            esc.TC = this.TC;
                            esc.WE = this.we;
                            esc.KnownTileInfo = null;
                            esc.KnownTileInfo2 = null;
                            esc.KnownTileInfo3 = null;
                            esc.KnownTileInfo4 = null;
                            esc.KnownTileInfo5 = null;
                            esc.Truth_KnownTileInfo = this.Truth_KnownTileInfo;
                            esc.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2;
                            esc.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3;
                            esc.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4;
                            esc.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5;
                            esc.StartPosition = FormStartPosition.CenterParent;
                            esc.TruthStory = true;
                            esc.OnlySave = true;
                            esc.ShowDialog();
                        }

                        this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                        return true;
                    #endregion
                    #region "４階への階段（２）"
                    case 278:
                        if (!we.dungeonEvent325)
                        {
                            we.dungeonEvent325 = true;
                            GroundOne.StopDungeonMusic();

                            UpdateMainMessage("アイン：おし、じゃあ早速階段を・・・");

                            UpdateMainMessage("    【【【　その瞬間、アインは凄まじい精神干渉を感じ取った！　】】】");

                            UpdateMainMessage("アイン：ッグ、っまた！？");

                            UpdateMainMessage("　　　　【　汝、何を目指す？　】");

                            EncountBattle(Database.ENEMY_DRAGON_DESOLATOR_AZOLD, String.Empty, string.Empty, false, false, false, false);

                            GroundOne.StopDungeonMusic();

                            UpdateMainMessage("アイン：・・・　・・・　・・・");

                            UpdateMainMessage("ラナ：アイン・・・？？　ちょっと！？");

                            UpdateMainMessage("アイン：・・・え・・・っとと・・・");

                            UpdateMainMessage("アイン：っとぉぉぉ、階段降りるとするか！ッハッハッハ！");

                            UpdateMainMessage("ラナ：・・・まさかまた何か見えたの？");

                            UpdateMainMessage("アイン：・・・ああ。");

                            UpdateMainMessage("アイン：デカい竜がまた現れた。");

                            UpdateMainMessage("ラナ：うーん、その話にわかには信じられないんだけど。");

                            UpdateMainMessage("ラナ：どの辺りにいたのよ？");

                            UpdateMainMessage("アイン：いや、そんな竜なんて居ないのは分かってるんだよ。");

                            UpdateMainMessage("アイン：俺もそこまでボケちゃいねえ。ココには居ない、それは確かだ。");

                            UpdateMainMessage("ラナ：だから、どの辺りに見えたのかを聞いてるんだけど。");

                            UpdateMainMessage("アイン：・・・す、すまねえ・・・");

                            UpdateMainMessage("ラナ：アンタってホントバカよね。説明不能な行動は謹んでよねホンット。");

                            UpdateMainMessage("ヴェルゼ：・・・不可解ですね。");

                            UpdateMainMessage("ヴェルゼ：アイン君、竜だけが見えたのですか？　景色などはいかがでしたか？");

                            UpdateMainMessage("アイン：いやいや、悪い、全然それが鮮明に思い出せないんだ。");

                            UpdateMainMessage("アイン：ちゃんと目視で見えてはいた筈なんだが。");

                            UpdateMainMessage("アイン：悪い、さすがに俺の勘違いって事もあるし・・・");

                            UpdateMainMessage("ヴェルゼ：そうですか、分かりました。");

                            UpdateMainMessage("ヴェルゼ：それならこの件に関しては止めておきましょう、ラナさん。");

                            UpdateMainMessage("ラナ：えっ・・・ええ。ヴェルゼさんがそう言うなら♪");

                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);

                            UpdateMainMessage("アイン：悶々として悪かったな。とりあえず階段降りて街へ戻るぜ！");

                            UpdateMainMessage("ラナ：いきなり元気になり過ぎないでよね、ホンットに・・・");

                            UpdateMainMessage("アイン：まあまあまあ、良いじゃねえか、行くぜ！！");
                        }
                        else
                        {
                            UpdateMainMessage("アイン：下り階段だ、降りるとするか？", true);
                            using (YesNoRequest ynr = new YesNoRequest())
                            {
                                bool tempCompleteArea3 = we.TruthCompleteArea3;
                                ynr.StartPosition = FormStartPosition.CenterParent;
                                ynr.ShowDialog();
                                if (ynr.DialogResult == DialogResult.Yes)
                                {
                                    JumpByNormal(28, 31);
                                    SetupDungeonMapping(4);
                                    dungeonField.Invalidate();
                                    UpdateMainMessage("", true);

                                    if (!tempCompleteArea3)
                                    {
                                        UpdateMainMessage("アイン：おし、３階制覇した事だし、一度ユングの町へ戻るとするか。");
                                        CallHomeTown();
                                    }
                                }
                                else
                                {
                                    UpdateMainMessage("", true);
                                }

                            }
                        }
                        break;
                    #endregion
                    #region "無限回廊突破後の看板"
                    case 279:
                        string correct = "○";
                        UpdateMainMessage("　　　　『　原点を知りし者、　　向かうは　【生】【死】　』\r\n　　　　　　"
                                    + this.originNumber[0] + " - " + this.originNumber[0] + " = " + correct + "    "
                                    + this.originNumber[1] + " - " + this.originNumber[1] + " = " + correct + "    "
                                    + this.originNumber[2] + " - " + this.originNumber[2] + " = " + correct + "    "
                                    + this.originNumber[3] + " - " + this.originNumber[3] + " = " + correct + "\r\n　　　　　　"
                                    + this.originNumber[4] + " - " + this.originNumber[4] + " = " + correct + "    "
                                    + this.originNumber[5] + " - " + this.originNumber[5] + " = " + correct + "    "
                                    + this.originNumber[6] + " - " + this.originNumber[6] + " = " + correct + "    "
                                    + this.originNumber[7] + " - " + this.originNumber[7] + " = " + correct + "\r\n　　　　　　"
                                    + this.originNumber[8] + " - " + this.originNumber[8] + " = " + correct + "    "
                                    + this.originNumber[9] + " - " + this.originNumber[9] + " = " + correct + "    "
                                    + this.originNumber[10] + " - " + this.originNumber[10] + " = " + correct + "    "
                                    + this.originNumber[11] + " - " + this.originNumber[11] + " = " + correct + "    "
                                    , true);
                        break;
                    #endregion
                    #region "真実解のイベント２【記憶の回想】"
                    case 280:
                        if (GroundOne.WE2.TruthRecollection3_2 == false)
                        {
                            GroundOne.WE2.TruthRecollection3_2 = true;

                            GroundOne.StopDungeonMusic();

                            Story_TruthRecollection3_2();

                            UpdateMainMessage("ラナ：・・・ちょっと・・・ソコのバカ！！！");

                            UpdateMainMessage("　　　『ッシャゴオォォオォォ！！！』（ラナのライトニングキックがアインに炸裂）　　");

                            UpdateMainMessage("アイン：グオオオォォ・・・");

                            UpdateMainMessage("ラナ：立ったまま寝ぼけないよね、ホント。");

                            UpdateMainMessage("アイン：わ、悪い悪い・・・ハハハ・・・");

                            UpdateMainMessage("ヴェルゼ：アイン君、一体何が起きているのですか？");

                            UpdateMainMessage("アイン：う〜ん・・・記憶・・・って言うかな。");

                            UpdateMainMessage("ヴェルゼ：・・・");

                            UpdateMainMessage("アイン：記憶の回想・・・みたいな感じだ。");

                            UpdateMainMessage("ヴェルゼ：一体どのような内容だったんですか？");

                            UpdateMainMessage("アイン：ああ、それがさ・・・");

                            UpdateMainMessage("アイン：・・・");

                            UpdateMainMessage("　　　＜＜＜　アインはその場で一瞬だけ、考え・・・　＞＞＞ ");

                            UpdateMainMessage("アイン：・・・");

                            UpdateMainMessage("アイン：何か、ラナがボケ師匠と会話した時の話題を、俺が聞き出してるシーンだった。");

                            UpdateMainMessage("ラナ：え、私とランディスさんの会話？？");

                            UpdateMainMessage("アイン：ああ、何か内容はそれほど重要でもねえ、楽しい雑談だったぜ。");

                            UpdateMainMessage("ラナ：ふうん・・・なら良いけど");

                            UpdateMainMessage("ヴェルゼ：アイン君、回想自体はいいのですが、汗が結構出ていますよ。大丈夫ですか？");

                            UpdateMainMessage("アイン：え？あ、本当だ・・・");

                            UpdateMainMessage("アイン：い、いやいや。体調は万全だ、ほらこのとおりだ！");

                            UpdateMainMessage("ヴェルゼ：体調に異変があるときは、必ず連絡してください。青水晶を使いますから。");

                            UpdateMainMessage("アイン：ああ、了解だ。");

                            UpdateMainMessage("ラナ：正解ルートはもうすぐみたいよ、早く進めましょう♪");

                            UpdateMainMessage("アイン：っしゃ、行くとするか！");

                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "記憶の回想２から一本道正解ルートへ鏡ワープ"
                    case 281:
                        JumpByMirror_TruthWay5E();
                        //UpdateUnknownTileArea3_Area68(); X5ルート最後は一歩ずつ進ませる事とする。
                        if (!we.dungeonEvent318)
                        {
                            we.dungeonEvent318 = true;

                            UpdateMainMessage("ラナ：見えたわ、これが最後のルートになるわよ。");

                            UpdateMainMessage("アイン：ああ、この一本道は俺にも何となく伝わってくるぜ。");

                            UpdateMainMessage("ヴェルゼ：ラナさん、体調は大丈夫ですか？");

                            UpdateMainMessage("ラナ：ええ大丈夫よ。特に問題はないわ。");

                            UpdateMainMessage("アイン：本当か？鏡を潜り続けてたワケだが・・・。");

                            UpdateMainMessage("ラナ：大丈夫よ。");

                            UpdateMainMessage("アイン：そか、じゃあわかった！　進むとするぜ！");
                        }
                        break;
                    #endregion
                    #region "真実解のイベント３【記憶の回想】"
                    case 282:
                        if (GroundOne.WE2.TruthRecollection3_3 == false)
                        {
                            GroundOne.WE2.TruthRecollection3_3 = true;

                            GroundOne.StopDungeonMusic();

                            Story_TruthRecollection3_3();

                            UpdateMainMessage("ラナ：・・・（ジィ・・・）");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：ふぅ・・・");

                            UpdateMainMessage("ラナ：終わったみたいね。どうだったの？");

                            UpdateMainMessage("アイン：あ、ああ・・・ああ・・・");

                            UpdateMainMessage("ラナ：あーあーじゃ分からないわよ、もう、ほんっとバカよね。");

                            UpdateMainMessage("ヴェルゼ：アイン君、汗が酷いようですが？");

                            UpdateMainMessage("アイン：いやいや、内容自体は別にひどいわけじゃねえんだ。");

                            UpdateMainMessage("アイン：あれだ。今度は、ファラ王妃と会話してた時の記憶だった。");

                            UpdateMainMessage("ラナ：ファラ様と何か話した事あるの？");

                            UpdateMainMessage("アイン：ああ、何か宮殿に赴いた時に、チラっとな。");

                            UpdateMainMessage("ヴェルゼ：ファラは何と？");

                            UpdateMainMessage("アイン：・・・ええと・・・");

                            UpdateMainMessage("　　　＜＜＜　アインはその場で一瞬だけ、考え・・・　＞＞＞ ");

                            UpdateMainMessage("アイン：・・・");

                            UpdateMainMessage("アイン：俺がダンジョンに向かうことをどうも事前察知してたみたいでさ。");

                            UpdateMainMessage("アイン：それで、それに対して幾つかアドバイスをくれた。");

                            UpdateMainMessage("ラナ：ファラ様は事前にそれが分かってたって言うわけ？　アインがこのダンジョンに向かう事を。");

                            UpdateMainMessage("アイン：ああ・・・そんな感じだったぜ。");

                            UpdateMainMessage("ラナ：凄い、本当に言い当てちゃうのね・・・心を見通すと噂されてるのは本当みたいね。");

                            UpdateMainMessage("ヴェルゼ：ファラは、国王エルミの情報を元に民の心情を一人一人分析されています。");

                            UpdateMainMessage("ヴェルゼ：アイン君の日頃の行動、および、会話内容を元に紡ぎ出せば、それほど難しい事ではないでしょう。");

                            UpdateMainMessage("アイン：いやあ、そうかも知れねえけどさ・・・一人一人って・・・全員分か？");

                            UpdateMainMessage("ヴェルゼ：はい、全員分です。");

                            UpdateMainMessage("アイン：いつ寝て休んでるんだよ・・・国王もそうだけどさ・・・");

                            UpdateMainMessage("ヴェルゼ：ファラは、他に何か言ってませんでしたか？");

                            UpdateMainMessage("アイン：い・・・");

                            UpdateMainMessage("ラナ：？");

                            UpdateMainMessage("アイン：いや、ほかは特に言ってなかったな。");

                            UpdateMainMessage("ヴェルゼ：そうですか、それでは先へ進めましょう。原点解を基にした無限解の答えはすぐそこです。");

                            UpdateMainMessage("アイン：ああ、了解了解。");

                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "原点解発見"
                    case 283:
                        JumpByMirror_ZeroWay();

                        if (!we.dungeonEvent329)
                        {
                            we.dungeonEvent329 = true;
                            UpdateMainMessage("アイン：・・・おっしゃ！！");

                            UpdateMainMessage("アイン：見つけたぜ！　間違いねえ！！！");

                            UpdateMainMessage("ラナ：ど・・・どこよココ？");

                            UpdateMainMessage("ヴェルゼ：・・・驚きましたね、まだこんな所が残っていたとは・・・");

                            UpdateMainMessage("アイン：ラナ、ヴェルゼ、よく聞いてくれ。");

                            UpdateMainMessage("アイン：ここはおそらく原点解に関する場所だ。");

                            UpdateMainMessage("ラナ：・・・どうして分かったの？");

                            UpdateMainMessage("アイン：まず、正解、無限解、原点解の看板だが、ココがずっと引っかかっていたんだ。");

                            UpdateMainMessage("アイン：最初ではなく２番目が正解。");

                            UpdateMainMessage("アイン：つまり最初は２番目を解く事から始まる。");

                            UpdateMainMessage("アイン：最初から原点解は解けねえ、まず２番目を解く必要があるってことさ。");

                            UpdateMainMessage("ラナ：え？");

                            UpdateMainMessage("アイン：まあ聞けよ、次がある。");

                            UpdateMainMessage("アイン：次は無限解という表現を使ってるだろ？");

                            UpdateMainMessage("アイン：無限解は、その名のとおり無限にあるわけだ。");

                            UpdateMainMessage("アイン：順列通り、進めようとすれば、言葉通り無限回の探索をしなくちゃいけなくなる。");

                            UpdateMainMessage("アイン：無限とは文字通り無限、永遠に同じ行動を取らなければいけなくなる。");

                            UpdateMainMessage("アイン：しかし、それじゃあ解けない。当然ながら無限回数を実行するのは不可能だ。");

                            UpdateMainMessage("アイン：それゆえに、無限解へ順列通り読み解くのは駄目だ。");

                            UpdateMainMessage("アイン：これはいわゆる、ひっかけに属する。ボケ師匠によく教えてもらった概念だ。");

                            UpdateMainMessage("アイン：となれば、必ず目を通さなきゃならないのが原点解。");

                            UpdateMainMessage("アイン：無限解にハマらないように、『一つ目』となる原点解。");

                            UpdateMainMessage("アイン：この原点解をまず調べるのが無限解を解く上で重要な面なんだ。");

                            UpdateMainMessage("アイン：その原点解を知り得て初めて、無限解がなんたるかを知る事が許される。");

                            UpdateMainMessage("アイン：意訳すれば、もう少し違う表現になる。");

                            UpdateMainMessage("アイン：手探りで『正解』をたぐり寄せる。");

                            UpdateMainMessage("アイン：『正解』により、道は拓けるが、『無限解』を前にして無限通りをこなさねばならなくなる");

                            UpdateMainMessage("アイン：『無限解』の施行は、永遠の手探りが必要となる。つまり、道は拓けない。");

                            UpdateMainMessage("アイン：その永遠の手探りから抜け出るために、本来探らなければならない『原点解』が浮上する。");

                            UpdateMainMessage("アイン：一旦手にした『正解』が本当に正解なのかどうか、考え直す必要がある。");

                            UpdateMainMessage("アイン：人はよく『正解』を手に入れると、すぐ安心しがちだが、");

                            UpdateMainMessage("アイン：その『正解』という表現自体がそもそも、こういったケースではおかしい。");

                            UpdateMainMessage("アイン：ボケ師匠はよくこういう『正解』を嫌っていたからな。それがなきゃ俺は気付いてねえと思う。");

                            UpdateMainMessage("アイン：それさえ気づけば後は、考え方は一本道だ。");

                            UpdateMainMessage("アイン：『正解』か『不正解』かは、関係ねえ。文字通り『原点』を探る行動をしなければならない。");

                            UpdateMainMessage("アイン：その『原点』を探る行動とはつまり");

                            UpdateMainMessage("アイン：この５６通りの鏡ルートを一つ一つ確かめる行為が必要だって話さ。");

                            UpdateMainMessage("ラナ：ご・・・５６通り？？　そんなの把握してたっていうの？？");

                            UpdateMainMessage("アイン：・・・");

                            UpdateMainMessage("アイン：ああ、そうだ。");

                            UpdateMainMessage("アイン：５６通りの内、４つが正解。そして５つ目が台座ルートだった。");

                            UpdateMainMessage("アイン：じゃあ残る５１通りは果たして不正解だったかどうか、改めて自分の目で見ておく必要がある。");

                            UpdateMainMessage("アイン：正解でないルートが不正解だとは誰も行っていない。");

                            UpdateMainMessage("アイン：つまり、残りの「正解ではない鏡」に、原点が隠されてるんじゃねえか。");

                            UpdateMainMessage("アイン：そう考えたのさ。そしてこれが結果だ。");

                            UpdateMainMessage("アイン：見てみろ、看板がちゃんと向こう側にあるぜ。行ってみようぜ。");

                            UpdateMainMessage("ヴェルゼ：・・・");

                            UpdateMainMessage("ヴェルゼ：なるほど、辿り着くとは。");

                            UpdateMainMessage("　　【【【　その時、アイン　】】】");

                            UpdateMainMessage("アイン：（ッグ・・・こ、これは・・・）");

                            UpdateMainMessage("　　【【【　得たいの知れない死の直感を全体で感じ始めた！　】】】");

                            UpdateMainMessage("アイン：（あの時と・・・一緒の感触だ・・・）");

                            UpdateMainMessage("ヴェルゼ：アイン君はこの原点解をどう手繰り寄せたか、よく分かりました。");

                            UpdateMainMessage("ヴェルゼ：ただ、いくつか質問させてください、いいですか？");

                            UpdateMainMessage("アイン：あ、ああ。何だ？");

                            UpdateMainMessage("ヴェルゼ：ラナさんを正解へ仕向けた時から、気づいてはいましたか？");

                            UpdateMainMessage("アイン：・・・なんとなくだ。そこまで明確じゃねえ。");

                            UpdateMainMessage("ヴェルゼ：では、正解は初めから決定されていたかどうか、ご存知ですか？");

                            UpdateMainMessage("アイン：正解は鏡を通る毎に、その都度、その瞬間で用意された。で、合ってると思うぜ。");

                            UpdateMainMessage("ヴェルゼ：・・・");

                            UpdateMainMessage("　　【【【　アインは死の直感を拭えないでいる・・・！！！　】】】");

                            UpdateMainMessage("アイン：（・・・やべえ・・・何か・・・とてつもない恐怖感が・・・）");

                            UpdateMainMessage("アイン：（なんだこれ・・・どっから湧いてきてんだ、こんな感情・・・）");

                            UpdateMainMessage("ヴェルゼ：では、最後です。");

                            UpdateMainMessage("ヴェルゼ：アイン君、原点解を見つけようとしたのは、これで何度目でしょうか？");

                            UpdateMainMessage("　　【【【　アインの脳に、直接的な死のイメージが拡がる　】】】");

                            UpdateMainMessage("アイン：・・・わ・・・");

                            UpdateMainMessage("アイン：わからねえ・・・");

                            UpdateMainMessage("　　【【【　その死のイメージは何を意味するのか　】】】");

                            UpdateMainMessage("ヴェルゼ：・・・進めましょう。");

                            UpdateMainMessage("　　【【【　アインは得たいの知れない不規則な感情を抱いたまま、歩を進める　】】】");

                            UpdateMainMessage("アイン：あ、ああ・・・");
                        }
                        break;
                    #endregion
                    #region "真実解のイベント４【記憶の回想】"
                    case 284:
                        if (GroundOne.WE2.TruthRecollection3_4 == false)
                        {
                            GroundOne.WE2.TruthRecollection3_4 = true;

                            GroundOne.StopDungeonMusic();

                            Story_TruthRecollection3_4();

                            UpdateMainMessage("アイン：ふぅ・・・っと");

                            UpdateMainMessage("ラナ：また例の現象なの？");

                            UpdateMainMessage("アイン：う〜ん、まあな。");

                            UpdateMainMessage("ラナ：一体どんな内容だったの？今度は。");

                            UpdateMainMessage("アイン：・・・いや、まあ・・・そのなんだ・・・");

                            UpdateMainMessage("ラナ：なんでそこで言いにくそうなのよ、スパスパっと言っちゃってよ。");

                            UpdateMainMessage("アイン：まあ何ていうんだ。");

                            UpdateMainMessage("アイン：ファラ様の昔話がつらつらと、雑談だって。");

                            UpdateMainMessage("ラナ：う〜ん、どうかしら。なんだか怪しいわね。");

                            UpdateMainMessage("アイン：いやいや、本当に何もねえって。");

                            UpdateMainMessage("アイン：最後にダンジョンでは願い事がどうのこうのって、それだけだって。");

                            UpdateMainMessage("ラナ：うわ、何かあからさまに重要そうな内容じゃないの。");

                            UpdateMainMessage("ヴェルゼ：アイン君、その先は思い出せないのですか？");

                            UpdateMainMessage("アイン：ああ、思い出せねえ・・・");

                            UpdateMainMessage("ヴェルゼ：前から何度も言ってますが");

                            UpdateMainMessage("ヴェルゼ：アイン君");

                            UpdateMainMessage("アイン：ん？？");

                            UpdateMainMessage("　　　【【【　アイン、この時　】】】");

                            UpdateMainMessage("ヴェルゼ：汗がびっしょりです。");

                            UpdateMainMessage("　　　【【【　刹那、底知れぬ恐怖感　】】】");

                            UpdateMainMessage("アイン：あ！あぁ！！すまねぇ！！");

                            UpdateMainMessage("　　　【【【　不意に後ずさろうとし、そして、とっさにその行為の制止を行った　】】】");

                            UpdateMainMessage("アイン：！！っと！！ぉぉ！！");

                            UpdateMainMessage("ラナ：・・・何やってんの？？");

                            UpdateMainMessage("アイン：いいやいやいや、立ちくらみだ、すまねぇ！！");

                            UpdateMainMessage("ラナ：ボケに磨きがかかったのかしら・・・本当に大丈夫？");

                            UpdateMainMessage("アイン：ああ、大丈夫だ。すまねえな。");

                            UpdateMainMessage("ヴェルゼ：アイン君、無限解もおそらく解けている事でしょうから、早く先へ行きましょう。");

                            UpdateMainMessage("アイン：ああ、了解了解！");

                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "無限回廊突破後の看板にて"
                    case 285:
                        JumpByMirror(1, 55);
                        UpdateUnknownTileArea3_TruthLast();

                        MessageInfiniteLoopResult(1);

                        if (!we.dungeonEvent332)
                        {
                            we.dungeonEvent332 = true;
                            UpdateMainMessage("アイン：・・・おおおおお！！！　");

                            UpdateMainMessage("アイン：おっしゃ！！　抜けたんだ！！　おっしゃあああ！！！　");

                            UpdateMainMessage("ラナ：やったじゃないアイン、お手柄よ♪");

                            UpdateMainMessage("ヴェルゼ：看板から手繰り寄せてここまで来た以上、何かありそうですね、ここから先は。");

                            UpdateMainMessage("アイン：いやあ、しかし・・・");

                            UpdateMainMessage("アイン：嬉しい事は嬉しいんだが・・・");

                            UpdateMainMessage("ヴェルゼ：看板がありましたね。");

                            UpdateMainMessage("アイン：ああ");

                            UpdateMainMessage("アイン：向かうは・・・【生】【死】・・・");

                            UpdateMainMessage("【【【　アインは、一瞬全細胞が硬直したような感触を受けた】】】");

                            UpdateMainMessage("アイン：（なんだ・・・この感触は・・・）");

                            UpdateMainMessage("アイン：（・・・考えてもしょうがねえか・・・ここは・・・）");

                            UpdateMainMessage("ラナ：・・・アイン？");

                            UpdateMainMessage("アイン：あ、ああ悪い悪い。");

                            UpdateMainMessage("アイン：っしゃ、行こうぜ。");
                        }
                        break;
                    #endregion
                }
            }
            #endregion
            #region "４階"
            else if (area == 4)
            {
                switch (ii)
                {
                    #region "３階へ戻る階段"
                    case 0:
                        UpdateMainMessage("アイン：３階へ戻る階段だな。ここは一旦戻るか？", true);
                        using (YesNoRequest ynr = new YesNoRequest())
                        {
                            ynr.StartPosition = FormStartPosition.CenterParent;
                            ynr.ShowDialog();
                            if (ynr.DialogResult == DialogResult.Yes)
                            {
                                JumpByNormal(39, 59);
                                SetupDungeonMapping(3);
                                dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                UpdateMainMessage("", true);
                            }
                        }
                        break;
                    #endregion
                    #region "始まりの扉"
                    case 1:
                        if (!we.dungeonEvent401)
                        {
                            we.dungeonEvent401 = true;
                            UpdateMainMessage("アイン：ゲッ、いきなり扉かよ。");

                            UpdateMainMessage("ラナ：扉の横にスイッチがあるわよ。");

                            UpdateMainMessage("ヴェルゼ：辺りを見回してみましたが、特に何もなさそうですね。");

                            UpdateMainMessage("アイン：まあ、さすがにまだ何も無いだろ・・・開くしかないか。");

                            UpdateMainMessage("アイン：じゃあ、スイッチを押すぜ！");

                            UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                            blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                            UpdateUnknownTileArea41();
                            UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            blueWallRight[GetTileNumber(this.Player.Location)] = false;
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：おし、開いたぜ。");

                            TurnToBlack();

                            GroundOne.StopDungeonMusic();

                            UpdateMainMessage("　　　【その瞬間、アインは、絶対的な時間と空間のズレを把握した！！！】");

                            UpdateMainMessage("アイン：（・・・っな・・・）");

                            UpdateMainMessage("アイン：（なんだ今の感触・・・）");

                            Method.RemoveParty(we, tc);
                            SetupPlayerStatus();
                            ReturnToNormal();

                            UpdateMainMessage("アイン：っ！おい、ラナ！？");

                            UpdateMainMessage("ラナ：っわ、なによ一体いきなり？");

                            UpdateMainMessage("アイン：いるか・・・良かった・・・");

                            UpdateMainMessage("ラナ：最初から、何いきなりバタバタしてんのよ、まったく。");

                            UpdateMainMessage("アイン：い、いやいや、悪い悪い・・・");

                            UpdateMainMessage("アイン：ヴェルゼは？");

                            UpdateMainMessage("ラナ：え？");

                            UpdateMainMessage("アイン：いやいや、すぐ後ろにいただろ今まで。");

                            UpdateMainMessage("アイン：見当たらないな・・・帰っちまったのか？");

                            UpdateMainMessage("ラナ：ねえ、ちょっとバカアイン、良いかしら。");

                            UpdateMainMessage("アイン：俺はバカじゃねえ、なんだ？");

                            UpdateMainMessage("ラナ：ヴェルゼさんなら、４階に来てないわよ。");

                            UpdateMainMessage("アイン：っな・・・");

                            UpdateMainMessage("ラナ：私、アインに会ってからダンジョンに入るまで、ヴェルゼさんに遭遇してないわよ。");

                            UpdateMainMessage("ラナ：あと、ハンナおばさんにも早朝に話を聞いたの。");

                            UpdateMainMessage("ラナ：ヴェルゼさんが持ってた荷物は確かに受け取ったって。");

                            UpdateMainMessage("ラナ：だから、４階には来てないはずよ。");

                            UpdateMainMessage("ラナ：アインには、ヴェルゼさんから既に伝えてあるものだと思ったけど、聞いてないの？");

                            UpdateMainMessage("アイン：っそ、そんなばかな・・・");

                            UpdateMainMessage("アイン：確かなのか？");

                            UpdateMainMessage("ラナ：ええ、確かよ。");

                            UpdateMainMessage("アイン：そうか・・・俺の見間違いなのか・・・");

                            UpdateMainMessage("アイン：じゃあ、まあ二人で進めるとするか。");

                            UpdateMainMessage("ラナ：いいの？このまま進めても。");

                            UpdateMainMessage("アイン：ああ、大丈夫だ。行くぜ！");
                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "看板１"
                    case 2:
                        if (!we.dungeonEvent402)
                        {
                            we.dungeonEvent402 = true;

                            UpdateMainMessage("アイン：看板があるな、どれどれ。");

                            UpdateMainMessage("　　　　『失われし剣と記憶』");

                            UpdateMainMessage("アイン：失われし・・・か・・・");

                            UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                            blueWallBottom[16 * Database.TRUTH_DUNGEON_COLUMN + 45] = false;
                            blueWallTop[17 * Database.TRUTH_DUNGEON_COLUMN + 45] = false;
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：うぉ、いきなり開いたぜ。何の仕掛けもナシかよ。");

                            UpdateMainMessage("ラナ：特に変わった仕掛けもなさそうね。進んでみましょ。");

                            UpdateMainMessage("アイン：ああ、そうだな。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『失われし剣と記憶』", true);
                        }
                        break;
                    #endregion
                    #region "看板１-１"
                    case 3:
                        if (!we.dungeonEvent403)
                        {
                            we.dungeonEvent403 = true;

                            UpdateMainMessage("　　　　『エスミリア草原区域、森の細道』");

                            UpdateMainMessage("　　（その看板を読んだ瞬間、壁面一体が森の中の風景として映し出された）");

                            UpdateMainMessage("アイン：こ、これは！");

                            UpdateMainMessage("ラナ：エスミリアのちょっと横に行くとある所よね。コレって。");

                            UpdateMainMessage("アイン：すげーな、おいおい・・・どうなってんだよこのダンジョンは。");

                            UpdateMainMessage("ラナ：映像をどこかから投影してるわけでもなさそうね。");

                            UpdateMainMessage("アイン：壁は実際のトコ壁だよな・・・そういうところは変化はねえか。");

                            UpdateMainMessage("アイン：しかし・・・何だってこんな風景が出てくるんだ。");

                            UpdateMainMessage("アイン：ラナ、お前心当たりあるか？");

                            UpdateMainMessage("ラナ：なんで私になるのよ、あるわけないじゃない。");

                            UpdateMainMessage("アイン：そうか・・・");

                            UpdateMainMessage("アイン：まあ、風景が変わったってだけだ。進むとするか！");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『エスミリア草原区域、森の細道』", true);
                        }
                        break;
                    #endregion
                    #region "宝箱（エリア１）"
                    case 4:
                        we.TruthTreasure401 = GetTreasure(Database.COMMON_SOCIETY_SYMBOL);
                        break;
                    case 5:
                        we.TruthTreasure402 = GetTreasure(Database.COMMON_BLACK_SALT);
                        break;
                    case 6:
                        we.TruthTreasure403 = GetTreasure(Database.RARE_ESSENCE_OF_DARK);
                        break;
                    case 7:
                        we.TruthTreasure404 = GetTreasure(Database.COMMON_LIGHT_SERVANT);
                        break;
                    case 8:
                        we.TruthTreasure405 = GetTreasure(Database.COMMON_FEBL_ANIS);
                        break;
                    case 9:
                        we.TruthTreasure406 = GetTreasure(Database.RARE_ASTRAL_VOID_BLADE);
                        break;
                    case 10:
                        we.TruthTreasure407 = GetTreasure(Database.COMMON_SMORKY_HUNNY);
                        break;
                    case 11:
                        we.TruthTreasure408 = GetTreasure(Database.COMMON_SUN_TARAGON);
                        break;
                    #endregion
                    #region "鍵（エリア１）"
                    case 12:
                        if (!we.dungeonEvent4_key1_1)
                        {
                            we.dungeonEvent4_key1_1 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【１】を手に入れました』");

                            UpdateMainMessage("アイン：小さい鍵だな、これならポケットに突っ込んどけばいいな。");

                            UpdateMainMessage("ラナ：ちょっと、落とさないでよね。そんなポケットなんか突っ込んで・・・");

                            UpdateMainMessage("アイン：大丈夫だって、ッハッハッハ！");

                            UpdateMainMessage("    ＜＜＜　・・・チャリン・・・　＞＞＞");

                            UpdateMainMessage("ラナ：・・・（ジィ〜）");

                            UpdateMainMessage("アイン：すまん・・・管理頼む。");
                        }
                        break;
                    case 13:
                        if (!we.dungeonEvent4_key1_2)
                        {
                            we.dungeonEvent4_key1_2 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【２】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    case 14:
                        if (!we.dungeonEvent4_key1_3)
                        {
                            we.dungeonEvent4_key1_3 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【３】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    case 15:
                        if (!we.dungeonEvent4_key1_4)
                        {
                            we.dungeonEvent4_key1_4 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【４】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    case 16:
                        if (!we.dungeonEvent4_key1_5)
                        {
                            we.dungeonEvent4_key1_5 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【５】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    case 17:
                        if (!we.dungeonEvent4_key1_6)
                        {
                            we.dungeonEvent4_key1_6 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【６】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                            
                            UpdateMainMessage("ラナ：あ、見てみて。すぐ側に扉があるわ。");

                            UpdateMainMessage("アイン：おっ、ホントだ。どれどれ・・・");

                            UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                            blueWallRight[GetTileNumber(this.Player.Location)] = false;
                            UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                            UpdateUnknownTile();
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：ひ、開いちまった・・・ハハハ・・・");

                            UpdateMainMessage("ラナ：ちょっと・・・そういうのは気をつけてよねホント。");

                            UpdateMainMessage("ラナ：でも、ココって元の場所に戻ったって事よね。");

                            UpdateMainMessage("アイン：そうなのか？？");

                            UpdateMainMessage("ラナ：ええ、マップを見れば間違いないわね。");

                            UpdateMainMessage("アイン：おし、じゃあ今取ったこの鍵【６】を使って、次へ行けばいいんだな。");

                            UpdateMainMessage("ラナ：そうね、じゃあ進めましょう。");

                            UpdateMainMessage("アイン：了解！");
                        }
                        break;
                    case 18:
                        if (!we.dungeonEvent4_key1_7)
                        {
                            we.dungeonEvent4_key1_7 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【７】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    case 19:
                        if (!we.dungeonEvent4_key1_8)
                        {
                            we.dungeonEvent4_key1_8 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【８】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    case 20:
                        if (!we.dungeonEvent4_key1_9)
                        {
                            we.dungeonEvent4_key1_9 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【９】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    #endregion
                    #region "扉１"
                    case 21:
                        if (!we.dungeonEvent4_key1_1_open)
                        {
                            UpdateMainMessage("アイン：鍵穴があるな・・・番号【１】と書いてある。");

                            if (we.dungeonEvent4_key1_1)
                            {
                                UpdateMainMessage("ラナ：扉の鍵【１】なら持ってるわよ、使ってみる？");

                                UpdateMainMessage("アイン：ああ、頼んだ。");

                                UpdateMainMessage("ラナ：じゃあ、差し込んでみるわね。");

                                UpdateMainMessage(" 　 『ッカチャ』");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallTop[GetTileNumber(this.Player.Location)] = false;
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                                blueWallBottom[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：開いたみたいね。");

                                UpdateMainMessage("アイン：っしゃ、先へ進んでみるとするか。");
                                we.dungeonEvent4_key1_1_open = true;
                            }
                            else if (!we.dungeonEvent404)
                            {
                                UpdateMainMessage("ラナ：扉に、鍵穴らしきものがあるわよ。");

                                UpdateMainMessage("アイン：鍵か・・・少し周りを探索してみるか。");
                                we.dungeonEvent404 = true;
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：鍵を探すんじゃなかったの？");

                                UpdateMainMessage("アイン：悪い悪い。少し周りを探索してみるか。");
                            }
                        }
                        break;
                    #endregion
                    #region "扉２"
                    case 22:
                        if (!we.dungeonEvent4_key1_2_open)
                        {
                            UpdateMainMessage("アイン：鍵穴があるな・・・番号【２】と書いてある。");

                            if (we.dungeonEvent4_key1_2)
                            {
                                UpdateMainMessage("ラナ：扉の鍵【２】なら持ってるわよ、使ってみる？");

                                UpdateMainMessage("アイン：ああ、頼んだ。");

                                UpdateMainMessage("ラナ：じゃあ、差し込んでみるわね。");

                                UpdateMainMessage(" 　 『ッカチャ』");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallTop[GetTileNumber(this.Player.Location)] = false;
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                                blueWallBottom[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：開いたみたいね。");

                                UpdateMainMessage("アイン：っしゃ、先へ進んでみるとするか。");
                                we.dungeonEvent4_key1_2_open = true;
                            }
                            else if (!we.dungeonEvent408)
                            {
                                UpdateMainMessage("ラナ：扉ね。やっぱり、鍵穴がちゃんとついてるわよ。");

                                UpdateMainMessage("アイン：っしゃ、鍵探しと行きますか。");
                                we.dungeonEvent408 = true;
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：鍵を探すんじゃなかったの？");

                                UpdateMainMessage("アイン：悪い悪い。周りを探索してみるか。");
                            }
                        }
                        break;
                    #endregion
                    #region "扉３"
                    case 23:
                        if (!we.dungeonEvent4_key1_3_open)
                        {
                            UpdateMainMessage("アイン：鍵穴があるな・・・番号【３】と書いてある。");

                            if (we.dungeonEvent4_key1_3)
                            {
                                UpdateMainMessage("ラナ：扉の鍵【３】なら持ってるわよ、使ってみる？");

                                UpdateMainMessage("アイン：ああ、頼んだ。");

                                UpdateMainMessage("ラナ：じゃあ、差し込んでみるわね。");

                                UpdateMainMessage(" 　 『ッカチャ』");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：開いたみたいね。");

                                UpdateMainMessage("アイン：っしゃ、先へ進んでみるとするか。");
                                we.dungeonEvent4_key1_3_open = true;
                            }
                            else if (!we.dungeonEvent410)
                            {
                                UpdateMainMessage("ラナ：扉ね。やっぱり、鍵穴がちゃんとついてるわよ。");

                                UpdateMainMessage("アイン：っしゃ、鍵探しと行きますか。");
                                we.dungeonEvent410 = true;
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：鍵を探すんじゃなかったの？");

                                UpdateMainMessage("アイン：悪い悪い。周りを探索してみるか。");
                            }
                        }
                        break;
                    #endregion
                    #region "扉４"
                    case 24:
                        if (!we.dungeonEvent4_key1_4_open)
                        {
                            UpdateMainMessage("アイン：鍵穴があるな・・・番号【４】と書いてある。");

                            if (we.dungeonEvent4_key1_4)
                            {
                                UpdateMainMessage("ラナ：扉の鍵【４】なら持ってるわよ、使ってみる？");

                                UpdateMainMessage("アイン：ああ、頼んだ。");

                                UpdateMainMessage("ラナ：じゃあ、差し込んでみるわね。");

                                UpdateMainMessage(" 　 『ッカチャ』");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallBottom[GetTileNumber(this.Player.Location)] = false;
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                                blueWallTop[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：開いたみたいね。");

                                UpdateMainMessage("アイン：っしゃ、先へ進んでみるとするか。");
                                we.dungeonEvent4_key1_4_open = true;
                            }
                            else if (!we.dungeonEvent412)
                            {
                                UpdateMainMessage("ラナ：扉ね。やっぱり、鍵穴がちゃんとついてるわよ。");

                                UpdateMainMessage("アイン：っしゃ、鍵探しと行きますか。");
                                we.dungeonEvent412 = true;
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：鍵を探すんじゃなかったの？");

                                UpdateMainMessage("アイン：悪い悪い。周りを探索してみるか。");
                            }
                        }
                        break;
                    #endregion
                    #region "扉５"
                    case 25:
                        if (!we.dungeonEvent4_key1_5_open)
                        {
                            UpdateMainMessage("アイン：鍵穴があるな・・・番号【５】と書いてある。");

                            if (we.dungeonEvent4_key1_5)
                            {
                                UpdateMainMessage("ラナ：扉の鍵【５】なら持ってるわよ、使ってみる？");

                                UpdateMainMessage("アイン：ああ、頼んだ。");

                                UpdateMainMessage("ラナ：じゃあ、差し込んでみるわね。");

                                UpdateMainMessage(" 　 『ッカチャ』");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：開いたみたいね。");

                                UpdateMainMessage("アイン：っしゃ、先へ進んでみるとするか。");
                                we.dungeonEvent4_key1_5_open = true;
                            }
                            else if (!we.dungeonEvent414)
                            {
                                UpdateMainMessage("ラナ：扉ね。やっぱり、鍵穴がちゃんとついてるわよ。");

                                UpdateMainMessage("アイン：っしゃ、鍵探しと行きますか。");
                                we.dungeonEvent414 = true;
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：鍵を探すんじゃなかったの？");

                                UpdateMainMessage("アイン：悪い悪い。周りを探索してみるか。");
                            }
                        }
                        break;
                    #endregion
                    #region "扉６"
                    case 26:
                        if (!we.dungeonEvent4_key1_6_open)
                        {
                            UpdateMainMessage("アイン：鍵穴があるな・・・番号【６】と書いてある。");

                            if (we.dungeonEvent4_key1_6)
                            {
                                UpdateMainMessage("ラナ：扉の鍵【６】なら持ってるわよ、使ってみる？");

                                UpdateMainMessage("アイン：ああ、頼んだ。");

                                UpdateMainMessage("ラナ：じゃあ、差し込んでみるわね。");

                                UpdateMainMessage(" 　 『ッカチャ』");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：開いたみたいね。");

                                UpdateMainMessage("アイン：っしゃ、先へ進んでみるとするか。");
                                we.dungeonEvent4_key1_6_open = true;
                            }
                            else if (we.dungeonEvent4_key1_2)
                            {
                                UpdateMainMessage("ラナ：扉の鍵【２】じゃ、キーが合わないみたいね。");

                                UpdateMainMessage("アイン：こっちはまだ行けないって事か。");

                                if (!we.dungeonEvent4_key1_2_open)
                                {
                                    UpdateMainMessage("ラナ：すぐ側にあるそっちの扉なら行けるんじゃないかしら。");

                                    UpdateMainMessage("アイン：そうだな、そっちから調べてみるか。");
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：すぐ側にあるそっちの扉で既に使ったから、こっちのはまた別にあるんじゃないかしら。");

                                    UpdateMainMessage("アイン：そうだな、まあ開けた方を進めるとするか。");
                                }
                            }
                            else if (!we.dungeonEvent407)
                            {
                                UpdateMainMessage("ラナ：扉ね。やっぱり、鍵穴がちゃんとついてるわよ。");

                                UpdateMainMessage("アイン：っしゃ、鍵探しと行きますか。");
                                we.dungeonEvent407 = true;
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：鍵を探すんじゃなかったの？");

                                UpdateMainMessage("アイン：悪い悪い。周りを探索してみるか。");
                            }
                        }
                        break;
                    #endregion
                    #region "扉７"
                    case 27:
                        if (!we.dungeonEvent4_key1_7_open)
                        {
                            UpdateMainMessage("アイン：鍵穴があるな・・・番号【７】と書いてある。");

                            if (we.dungeonEvent4_key1_7)
                            {
                                UpdateMainMessage("ラナ：扉の鍵【７】なら持ってるわよ、使ってみる？");

                                UpdateMainMessage("アイン：ああ、頼んだ。");

                                UpdateMainMessage("ラナ：じゃあ、差し込んでみるわね。");

                                UpdateMainMessage(" 　 『ッカチャ』");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：開いたみたいね。");

                                UpdateMainMessage("アイン：っしゃ、先へ進んでみるとするか。");
                                we.dungeonEvent4_key1_7_open = true;
                            }
                            else if (!we.dungeonEvent417)
                            {
                                UpdateMainMessage("ラナ：扉ね。やっぱり、鍵穴がちゃんとついてるわよ。");

                                UpdateMainMessage("アイン：っしゃ、鍵探しと行きますか。");
                                we.dungeonEvent417 = true;
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：鍵を探すんじゃなかったの？");

                                UpdateMainMessage("アイン：悪い悪い。周りを探索してみるか。");
                            }
                        }
                        break;
                    #endregion
                    #region "扉８"
                    case 28:
                        if (!we.dungeonEvent4_key1_8_open)
                        {
                            UpdateMainMessage("アイン：鍵穴があるな・・・番号【８】と書いてある。");

                            if (we.dungeonEvent4_key1_8)
                            {
                                UpdateMainMessage("ラナ：扉の鍵【８】なら持ってるわよ、使ってみる？");

                                UpdateMainMessage("アイン：ああ、頼んだ。");

                                UpdateMainMessage("ラナ：じゃあ、差し込んでみるわね。");

                                UpdateMainMessage(" 　 『ッカチャ』");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：開いたみたいね。");

                                UpdateMainMessage("アイン：っしゃ、先へ進んでみるとするか。");
                                we.dungeonEvent4_key1_8_open = true;
                            }
                            else if (!we.dungeonEvent419)
                            {
                                UpdateMainMessage("ラナ：扉ね。やっぱり、鍵穴がちゃんとついてるわよ。");

                                UpdateMainMessage("アイン：っしゃ、鍵探しと行きますか。");
                                we.dungeonEvent419 = true;
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：鍵を探すんじゃなかったの？");

                                UpdateMainMessage("アイン：悪い悪い。周りを探索してみるか。");
                            }
                        }
                        break;
                    #endregion
                    #region "扉９"
                    case 29:
                        if (!we.dungeonEvent4_key1_9_open)
                        {
                            UpdateMainMessage("アイン：鍵穴があるな・・・番号【９】と書いてある。");

                            if (we.dungeonEvent4_key1_9)
                            {
                                UpdateMainMessage("ラナ：扉の鍵【９】なら持ってるわよ、使ってみる？");

                                UpdateMainMessage("アイン：ああ、頼んだ。");

                                UpdateMainMessage("ラナ：じゃあ、差し込んでみるわね。");

                                UpdateMainMessage(" 　 『ッカチャ』");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallRight[GetTileNumber(this.Player.Location)] = false;
                                UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                blueWallLeft[GetTileNumber(this.Player.Location)] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：開いたみたいね。");

                                UpdateMainMessage("アイン：っしゃ、先へ進んでみるとするか。");
                                we.dungeonEvent4_key1_9_open = true;
                            }
                            else if (!we.dungeonEvent421)
                            {
                                UpdateMainMessage("ラナ：扉ね。やっぱり、鍵穴がちゃんとついてるわよ。");

                                UpdateMainMessage("アイン：っしゃ、鍵探しと行きますか。");
                                we.dungeonEvent421 = true;
                            }
                            else
                            {
                                UpdateMainMessage("ラナ：鍵を探すんじゃなかったの？");

                                UpdateMainMessage("アイン：悪い悪い。周りを探索してみるか。");
                            }
                        }
                        break;
                    #endregion
                    #region "真実の回想１"
                    case 30:
                        if (!we.dungeonEvent405)
                        {
                            we.dungeonEvent405 = true;

                            GroundOne.StopDungeonMusic();
                            TurnToBlack();
                            UpdateMainMessage("　　　【その瞬間、アインの脳裏に激しい激痛が襲った！周囲の感覚が麻痺する！！】");

                            UpdateMainMessage("　　アイン：・・・暗い場所だ・・・");

                            UpdateMainMessage("　　アイン：俺はまた、ここに来てしまったって事か・・・");

                            UpdateMainMessage("　　アイン：ダンジョンの支配竜よ、教えてくれ。");

                            UpdateMainMessage("　　アイン：このダンジョンを制覇するってのは、どういう事なんだ？");

                            UpdateMainMessage("　　支配竜：・・・終わりを　告げる　場所・・・");

                            UpdateMainMessage("　　支配竜：・・・主に　制覇は　不可・・・");

                            UpdateMainMessage("　　支配竜：・・・アイン・ウォーレンス・・・");

                            UpdateMainMessage("　　支配竜：・・・主は　なにを　望む・・・");

                            UpdateMainMessage("　　アイン：ラナが・・・");

                            UpdateMainMessage("　　アイン：・・・死んでしまった。");

                            UpdateMainMessage("　　アイン：ラナが死んだのは俺のせいだ。");

                            UpdateMainMessage("　　アイン：お、俺の・・・せいで！！");

                            UpdateMainMessage("　　アイン：頼む！ラナを生き返らせてくれ！！");

                            UpdateMainMessage("　　支配竜：・・・　・・・");

                            UpdateMainMessage("　　支配竜：・・・叶わぬ　事・・・");

                            UpdateMainMessage("　　アイン：どうしてだよ！？");
                            
                            UpdateMainMessage("　　アイン：最下層では望みが叶うってのはウソだったのかよ！？");

                            UpdateMainMessage("　　支配竜：・・・条件　の　相違　に　ある・・・");

                            UpdateMainMessage("　　支配竜：・・・主の　当初の願い　それにあらず・・・");

                            UpdateMainMessage("　　アイン：最強の力が欲しかった。そのために、神の遺産とやらを欲しがったのは確かだ。");

                            UpdateMainMessage("　　アイン：でも、ラナが死んでしまった今、そんなことはどうだっていい。");

                            UpdateMainMessage("　　アイン：俺の始めの願いは取り下げてくれ。　今の願いを叶えてくれよ！");

                            UpdateMainMessage("　　支配竜：・・・　・・・");

                            UpdateMainMessage("　　支配竜：・・・　心は　満たず　・・・");

                            UpdateMainMessage("　　支配竜：・・・　満たぬモノに　授けるのは　ただ一つ　・・・");

                            UpdateMainMessage("　　支配竜：・・・　次は　なにを　願う　　・・・");

                            UpdateMainMessage("　　アイン：！！！");

                            UpdateMainMessage("　　アイン：ラナを、生き返らせてくれるのか！？");

                            UpdateMainMessage("　　支配竜：・・・　次なるは　始まり　・・・");

                            UpdateMainMessage("　　支配竜：・・・　完全なる　始まり　始動　・・・");

                            UpdateMainMessage("　　アイン：完全なる・・・始まり？？どういう意味だよ！？");

                            UpdateMainMessage("　　支配竜：・・・　記憶　を　消去　・・・");

                            UpdateMainMessage("　　支配竜：・・・　時間　は　過去　・・・");

                            UpdateMainMessage("　　支配竜：・・・　空間　へ　遷移　・・・");

                            UpdateMainMessage("　　アイン：・・・ま、まさか・・・");

                            UpdateMainMessage("　　アイン：もう一度ダンジョンの始まりから、やれって事なのかよ！？");

                            UpdateMainMessage("　　支配竜：・・・　満たぬ主　最終　選択肢・・・");

                            UpdateMainMessage("　　支配竜：・・・　この最下層　現実とし　世界へ還るか　・・・");

                            UpdateMainMessage("　　支配竜：・・・　完全なる　始まり　始動とするか　・・・");

                            UpdateMainMessage("　　支配竜：・・・　決めよ　アイン・ウォーレンス　・・・");

                            UpdateMainMessage("　　アイン：・・・もし、俺がうまくやれば、ラナは死なずに済むって事だよな！？");

                            UpdateMainMessage("　　支配竜：・・・　心満たぬ主　結果は　同じコト　・・・");

                            UpdateMainMessage("　　アイン：やってみなきゃわからないだろ！？");

                            UpdateMainMessage("　　支配竜：・・・　幼き人間よ　同じコト　・・・");

                            UpdateMainMessage("　　アイン：ッグ・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・た・・・　・・・");

                            UpdateMainMessage("　　アイン：頼む。　それでもやらせてくれ。");

                            UpdateMainMessage("　　アイン：ラナの居ない世界で現実に戻ったとして");

                            UpdateMainMessage("　　アイン：それで人生を過ごすとすれば");

                            UpdateMainMessage("　　アイン：そんな人生、死んだも同然だ。");

                            UpdateMainMessage("　　アイン：このダンジョンに向かったのは俺のせいだ。");
                            
                            UpdateMainMessage("　　アイン：俺さえ変な気を起こさなければ、ラナは死なずに済んだ。");

                            UpdateMainMessage("　　アイン：頼む、支配竜よ。俺にチャンスをくれ、頼む！");

                            UpdateMainMessage("　　支配竜：・・・　主の記憶　これまでの出来事を消滅　受諾せよ　・・・");

                            UpdateMainMessage("　　アイン：ああ、受諾する。完全に消し去ってくれて構わねえ。");

                            UpdateMainMessage("　　支配竜：・・・　主のこれまでの時間　全て消滅　過去へ戻すコトを　受諾せよ　・・・");

                            UpdateMainMessage("　　アイン：ああ、受諾する。ダンジョンへ向かう所まで完全に戻してくれ。");

                            UpdateMainMessage("　　支配竜：・・・　現実を並行世界とし　空間補正・遷移　これを受諾せよ　・・・");

                            UpdateMainMessage("　　アイン：ああ、受諾する。なんでもやってくれ。");

                            UpdateMainMessage("　　支配竜：・・・　心の受諾　感知　・・・");

                            UpdateMainMessage("　　支配竜：・・・　転送　開始　・・・");

                            UpdateMainMessage("　　支配竜：・・・　アイン・ウォーレンスよ　・・・");

                            UpdateMainMessage("　　支配竜：・・・　願え　・・・");

                            UpdateMainMessage("　　支配竜：・・・　次なる　願い　心の奥底に　・・・");

                            UpdateMainMessage("　　アイン：ああ。");

                            UpdateMainMessage("　　アイン：・・・");

                            UpdateMainMessage("　　アイン：（ラナが死んだのは）");

                            UpdateMainMessage("　　アイン：（俺が弱かったせいだ）");

                            UpdateMainMessage("　　アイン：（俺が甘かったせいだ）");

                            UpdateMainMessage("　　アイン：（次は、必ず強くなって）");

                            UpdateMainMessage("　　アイン：（ラナが死なないように）");

                            UpdateMainMessage("　　アイン：（やってみせる）");

                            UpdateMainMessage("　　アイン：（ラナ・・・）");

                            UpdateMainMessage("　　アイン：（お前を必ず・・・）");

                            UpdateMainMessage("　　アイン：（・・・）");
                            ReturnToNormal();

                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);

                            UpdateMainMessage("アイン：・・・ ・・・");

                            UpdateMainMessage("ラナ：ちょっと、大丈夫？");

                            UpdateMainMessage("アイン：ん？あ、ああ。もちろん大丈夫だぜ。");

                            UpdateMainMessage("ラナ：その割には、汗びっしょりよね。また何か考え事してたんでしょ？");

                            UpdateMainMessage("アイン：いや、そういう訳じゃないんだが・・・");

                            UpdateMainMessage("ラナ：ヤバくなったらちゃんと言ってよね、こっちからじゃ分からないから、そういうの。");

                            UpdateMainMessage("アイン：ああ、了解。");

                            UpdateMainMessage("ラナ：・・・");
                        }
                        break;
                    #endregion
                    #region "真実の回想２"
                    case 31:
                        if (!we.dungeonEvent415)
                        {
                            we.dungeonEvent415 = true;

                            GroundOne.StopDungeonMusic();
                            TurnToBlack();
                            UpdateMainMessage("　　　【その瞬間、アインの脳裏に激しい激痛が襲った！周囲の感覚が麻痺する！！】");
                            
                            UpdateMainMessage("　　アイン：（エスミリア草原区域にはその奥に、うっそうとした森林が立ち並んでいる）");

                            UpdateMainMessage("　　アイン：（俺はとある人物から手紙を渡された）");

                            UpdateMainMessage("　　アイン：（手紙の中にはこう記されていた）");

                            UpdateMainMessage("　　手紙文：　　【　エスミリア草原区域の森林区画手前に緑の小屋がある　】");

                            UpdateMainMessage("　　手紙文：　　【　そこに赴き、非公式の野外DUELを受けて欲しい　】");

                            UpdateMainMessage("　　手紙文：　　【　DUELを受けた時点で報酬は支払い、その後にてDUELを行うものとする　】");

                            UpdateMainMessage("　　手紙文：　　【　勝敗結果は報酬額に対して、一切関係ないものとする　】");

                            UpdateMainMessage("　　手紙文：　　【　公式戦データ：DUEL戦歴　０勝　４２７敗　】");

                            UpdateMainMessage("　　手紙文：　　【　依頼人　Ｖ.Ａ　】");

                            UpdateMainMessage("　　アイン：（俺はこの時、得体の知れない奇妙な感覚を味わった）");

                            UpdateMainMessage("　　アイン：（まず、DUELの申し込みに関してだ）");

                            UpdateMainMessage("　　アイン：（普通なら、野外DUELは公式データに乗らないし、公式データにも傷はつかない）");

                            UpdateMainMessage("　　アイン：（当人同士の意志を確認すれば良いだけの話なので、わざわざ報酬付きでやるほどのものではない）");

                            UpdateMainMessage("　　アイン：（だが、これはれっきとした依頼文になっている）");

                            UpdateMainMessage("　　アイン：（しかも報酬を先払いときている）");

                            UpdateMainMessage("　　アイン：（俺が報酬を受け取った後で、トンズラしたらどうするつもりなんだ）");

                            UpdateMainMessage("　　アイン：（別に俺が単独で行くという保証も無いわけだ）");
                            
                            UpdateMainMessage("　　アイン：（依頼人にとって、メリットは何一つない）");

                            UpdateMainMessage("　　アイン：（だが、問題はそこじゃない）");

                            UpdateMainMessage("　　アイン：（問題は・・・）");

                            UpdateMainMessage("　　アイン：（　　　０勝　　　）");

                            UpdateMainMessage("　　アイン：（　　４２７敗　　）");

                            UpdateMainMessage("　　アイン：（　　Ｖ.Ａ　　）");

                            UpdateMainMessage("　　アイン：（俺はこの手紙文の全容を再確認し）");

                            UpdateMainMessage("　　アイン：（一つの結論に至った）");

                            UpdateMainMessage("　　アイン：（この依頼人は、恐ろしく腕が立つ、という事だ）");

                            UpdateMainMessage("　　アイン：（報酬を先にし払うという事は）");

                            UpdateMainMessage("　　アイン：（相手が逃げようが、闇討ちを狙ってこようが、多勢で突然襲いかかろうが）");

                            UpdateMainMessage("　　アイン：（お構いなしって事だ）");

                            UpdateMainMessage("　　アイン：（次に公式戦データ）");

                            UpdateMainMessage("　　アイン：（全敗ってのはあからさまにおかしい）");

                            UpdateMainMessage("　　アイン：（全敗する奴がどうしてDUELを申し込んでくるか）");

                            UpdateMainMessage("　　アイン：（答えは一つだけ）");

                            UpdateMainMessage("　　アイン：（自分の力量を相手に一切把握させないのは、上級戦術の一つだ）");

                            UpdateMainMessage("　　アイン：（公に対して、実力をここまで全面的に隠蔽してるって事は）");

                            UpdateMainMessage("　　アイン：（その実力は見るまでもない）");

                            UpdateMainMessage("　　アイン：（そして対象の人物を力量を測定するためだけに、その全敗戦歴を残す）");

                            UpdateMainMessage("　　アイン：（全敗であれば、DUEL公式戦の新参者と全て対戦ができるからだ）");

                            UpdateMainMessage("　　アイン：（・・・　・・・）");

                            UpdateMainMessage("　　アイン：（・・・Ｖ.Ａ・・・）");

                            UpdateMainMessage("　　アイン：（誰なんだ・・・一体・・・）");

                            UpdateMainMessage("　　アイン：（そしてこの感情・・・）");

                            UpdateMainMessage("　　アイン：（俺は初めてこの感情を知った）");

                            UpdateMainMessage("　　アイン：（底知れぬ、【恐怖】）");

                            UpdateMainMessage("　　アイン：（DUELを通じての力量把握で、死に至る事はないだろう）");

                            UpdateMainMessage("　　アイン：（自分の死が怖くないと言えば、ウソになるが、今回の件は違う）");

                            UpdateMainMessage("　　アイン：（存在そのものへの恐怖だ）");

                            UpdateMainMessage("　　アイン：（俺はこの依頼を受ける事にした）");

                            UpdateMainMessage("　　アイン：（恐怖でもあったが、同時に、希望もあった）");

                            UpdateMainMessage("　　アイン：（間違いなく、最強）");

                            UpdateMainMessage("　　アイン：（それがどんな存在なのか、見てみたい）");

                            UpdateMainMessage("　　アイン：（俺は手紙を受け取った翌日）");

                            UpdateMainMessage("　　アイン：（エスミリア草原区域の森林区画入口へと即座に向かった）");

                            ReturnToNormal();

                            UpdateMainMessage("アイン：・・・ ・・・");

                            UpdateMainMessage("アイン：・・・すまねえ、ラナ・・・");

                            UpdateMainMessage("ラナ：どうしたのよ突然？");

                            UpdateMainMessage("アイン：俺・・・エスミリア草原区域の森林に行った事があるみたいだ。");

                            UpdateMainMessage("アイン：そこで、ある人に遭遇している。");

                            UpdateMainMessage("ラナ：・・・");

                            UpdateMainMessage("アイン：その人っていうのは・・・");

                            UpdateMainMessage("ラナ：アイン、あんまり変に考え込まないで。");

                            UpdateMainMessage("ラナ：あんまり考えずに、ね？");

                            UpdateMainMessage("アイン：あ、ああ。そうだな。");

                            UpdateMainMessage("アイン：おし、先へ進めるとするか。");

                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "真実の回想３"
                    case 32:
                        if (!we.dungeonEvent422)
                        {
                            we.dungeonEvent422 = true;

                            GroundOne.StopDungeonMusic();
                            TurnToBlack();
                            UpdateMainMessage("　　　【その瞬間、アインの脳裏に激しい激痛が襲った！周囲の感覚が麻痺する！！】");

                            UpdateMainMessage("　　アイン：（よし、緑の小屋が見えてきたな・・・）");

                            UpdateMainMessage("　　アイン：（・・・　・・・）");

                            UpdateMainMessage("　　アイン：（この感触は・・・）");

                            UpdateMainMessage("　　アイン：（こんな遠くから、既に気配察知されてる）");

                            UpdateMainMessage("　　アイン：（信じられねえ・・・）");

                            UpdateMainMessage("　　アイン：（非公式DUELって言って来たんだ。いきなり攻撃はしてこないだろう）");

                            UpdateMainMessage("　　アイン：（察知された上で、入っていくしかないな）");

                            UpdateMainMessage("　　アイン：（っよし、進めるか）");

                            UpdateMainMessage("　　アイン：（・・・　・・・）");

                            UpdateMainMessage("　　アイン：（・・・　）");

                            UpdateMainMessage("　　？？？：リラックスしてください。");

                            UpdateMainMessage("　　アイン：っな！！");

                            UpdateMainMessage("　　？？？：突然襲ったりはしません、大丈夫ですよ。");

                            UpdateMainMessage("　　アイン：いっ、いつの間に・・・");

                            UpdateMainMessage("　　？？？：まずは、報酬です。");

                            UpdateMainMessage("　　？？？：そこの袋を受け取ってください。");

                            UpdateMainMessage("　　アイン：あ、ああぁ・・・了解。");

                            UpdateMainMessage("　　アイン：ッゲ、なんだこの金額は！！！");

                            UpdateMainMessage("　　？？？：さて、受け取ってもらえましたね。");

                            UpdateMainMessage("　　？？？：では、突然ですみませんが、始めましょう。");

                            UpdateMainMessage("　　アイン：ちょ、ちょっと待ってくれ！！");

                            UpdateMainMessage("　　？？？：はい、なんでしょうか？");

                            UpdateMainMessage("　　アイン：（ッホ・・・待ってくれた・・・）");

                            UpdateMainMessage("　　アイン：DUELをする分には構わないが、教えてくれ。");

                            UpdateMainMessage("　　アイン：その・・・アンタは一体何者なんだ。");

                            UpdateMainMessage("　　？？？：申し遅れました。");

                            UpdateMainMessage("　　？？？：アイン君、はじめまして。");

                            UpdateMainMessage("　　アイン：（俺はこの時）");

                            UpdateMainMessage("　　？？？：僕の名は");

                            UpdateMainMessage("　　アイン：（異常な戦慄を）");

                            UpdateMainMessage("　　？？？：ヴェルゼ");

                            UpdateMainMessage("　　アイン：（心底感じ取った）");

                            UpdateMainMessage("　　？？？：ヴェルゼ・アーティ");

                            UpdateMainMessage("　　アイン：（その感情は生まれて初めてだった）");

                            UpdateMainMessage("　　ヴェルゼ：素性はすみませんが、明かせません。");

                            UpdateMainMessage("　　アイン：（言葉が繰り出されるたびに）");

                            UpdateMainMessage("　　ヴェルゼ：伝説のFiveSeeker。");

                            UpdateMainMessage("　　アイン：（リアルな死とはこういう感情なのかと）");

                            UpdateMainMessage("　　ヴェルゼ：巷ではそう呼ばれています。");

                            UpdateMainMessage("　　アイン：（その時を体感した）");

                            UpdateMainMessage("　　アイン：伝説の・・・FiveSeeker");

                            UpdateMainMessage("　　アイン：まさか！！！");

                            UpdateMainMessage("　　アイン：オル・ランディスっていう男を知ってるか！？");

                            UpdateMainMessage("　　ヴェルゼ：ええ、もちろん。");

                            UpdateMainMessage("　　ヴェルゼ：彼はボクの親友です。彼もまた伝説のFiveSeekerの一人ですよ。");

                            UpdateMainMessage("　　アイン：っま、マジかよ！！！");

                            UpdateMainMessage("　　ヴェルゼ：はい、確かに。");

                            UpdateMainMessage("　　アイン：じゃ、じゃあもう一つだけ教えてくれ、頼む！");

                            UpdateMainMessage("　　ヴェルゼ：なんでしょうか？");

                            UpdateMainMessage("　　アイン：ヴェルゼさんの力量は俺の実力の遥かに上、そんな感じがしてならない。");

                            UpdateMainMessage("　　アイン：だが、論点はそこじゃねえ。");

                            UpdateMainMessage("　　アイン：ヴェルゼさんは、オル・ランディスよりも腕は上なのか？");

                            UpdateMainMessage("　　アイン：頼む、教えてくれ！");

                            UpdateMainMessage("　　ヴェルゼ：アイン君にとって、その答えを知るには");

                            UpdateMainMessage("　　ヴェルゼ：　　　まだ　　　");

                            UpdateMainMessage("　　アイン：（　　その戦慄の感覚は　　）");

                            UpdateMainMessage("　　ヴェルゼ：早過ぎます");

                            UpdateMainMessage("　　アイン：（　　五感全体を駆け巡った　　）");

                            UpdateMainMessage("　　ヴェルゼ：では、始めましょう。");

                            UpdateMainMessage("　　ヴェルゼ：戦闘体制を取ってください。");

                            UpdateMainMessage("　　アイン：（俺はとっくに戦闘体制を取っていたつもりだった）");

                            UpdateMainMessage("　　ヴェルゼ：行きます。");

                            UpdateMainMessage("　　アイン：（この時、相手にとっては戦闘体制として見られてはいなかった）");

                            UpdateMainMessage("　　ヴェルゼ：３");

                            UpdateMainMessage("　　アイン：（負ける、完璧に）");

                            UpdateMainMessage("　　ヴェルゼ：２");

                            UpdateMainMessage("　　アイン：（全神経を集中させた）");

                            UpdateMainMessage("　　ヴェルゼ：１");

                            UpdateMainMessage("　　アイン：（絶望と闘争心が同化した状態で）");

                            UpdateMainMessage("　　ヴェルゼ：０");

                            UpdateMainMessage("　　アイン：（DUELは行われた）");

                            UpdateMainMessage("　　（見た事もない戦術を幾つも目の当たりにした）");

                            UpdateMainMessage("　　（速度は限界まで達していた）");

                            UpdateMainMessage("　　（戦闘中、考えている余地はなかった）");

                            UpdateMainMessage("　　（次から次と繰り出される内容）");

                            UpdateMainMessage("　　（その内容一つ一つが連続的であり）");

                            UpdateMainMessage("　　（同時にも見えたりする）");

                            UpdateMainMessage("　　（それに受け応えするだけで精一杯だった）");

                            UpdateMainMessage("　　（こちらから仕掛ける手筋は全く無い）");

                            UpdateMainMessage("　　（どれだけ長く戦ったのか）");

                            UpdateMainMessage("　　（おそらく1分も経ってはなかっただろうが）");

                            UpdateMainMessage("　　（俺には無限の時間に感じ取られた）");

                            UpdateMainMessage("　　（一定時間、経過後）");
                            
                            UpdateMainMessage("　　（速度の膨張は、ある一線を超える）");

                            UpdateMainMessage("　　（モーション動作と、発動スペルの内容が一致しなくなった）");

                            UpdateMainMessage("　　（動作は幻影そのものであり）");

                            UpdateMainMessage("　　（無の空間から魔法が）");
                            
                            UpdateMainMessage("    （二次遅れ系で出現してくる）");

                            UpdateMainMessage("　　（目で追いかけると、囚われる）");

                            UpdateMainMessage("　　（感覚的に追いつくしかなかった）");

                            UpdateMainMessage("　　（徐々に追い詰められていくのが分かった）");

                            UpdateMainMessage("　　（こちらの手筋は次々と後手に追い込まれる）");

                            UpdateMainMessage("　　（相手の規則性の高すぎる動作は）");

                            UpdateMainMessage("　　（やがて、不規則そのものとなった）");

                            UpdateMainMessage("　　（読み取りや把握のできうるレベルじゃない）");

                            UpdateMainMessage("　　（反撃の余地も一切許されないまま）");
                            
                            UpdateMainMessage("　　（最後に感知できたのは）");

                            UpdateMainMessage("　　（少し離れた距離で、幻影が左右に２つ別れ）");

                            UpdateMainMessage("　　（それを見たと同時に）");

                            UpdateMainMessage("　　（後頭部に、死にも等しき激痛）");

                            UpdateMainMessage("　　（分かたれていた幻影が徐々に一つに戻るのを見つつ）");

                            UpdateMainMessage("　　（俺は倒れた）");

                            UpdateMainMessage("　　（このDUEL戦およびヴェルゼ・アーティとの遭遇に関しては）");

                            UpdateMainMessage("　　（ハンナおばさんの宿屋で体を起こした時から）");

                            UpdateMainMessage("　　（一切の記憶が失われていた）");

                            UpdateMainMessage("　　（おそらくはこの時に、【神剣フェルトゥーシュ】は　）");

                            UpdateMainMessage("　　（すり替えられた）");

                            UpdateMainMessage("　　（それ以外に、すり替えのタイミングは無いはずだ）");

                            UpdateMainMessage("　　（真意は俺には分からないが）");

                            UpdateMainMessage("　　（きっと、俺より遥かに強いヴェルゼさんの方が、似合ってるっていう事だろう）");

                            UpdateMainMessage("　　（正々堂々やった結果だ、後悔はない）");

                            UpdateMainMessage("　　（そういえば、起きてから間もなくして）");

                            UpdateMainMessage("　　（ハンナおばさんはこう言ってくれた）");

                            UpdateMainMessage("　　ハンナ：今朝ね、ラナちゃんのお母さんが来てたわよ。");
                            
                            UpdateMainMessage("    ハンナ：アインには内緒で、現物支給を受け取ってくれないかって。");

                            UpdateMainMessage("　　アイン：え、何でいきなり！！");

                            UpdateMainMessage("　　ハンナ：あんたがフラフラっとした生活をしてるからだろうね、見ちゃらんないって所さ。");

                            UpdateMainMessage("　　アイン：ッゲゲ・・・何でバレてんだ・・・");

                            UpdateMainMessage("　　ハンナ：アッハハハハ、気にしないことよ。");

                            UpdateMainMessage("　　ハンナ：まあ、しばらくはウチの宿屋を毎日使うといいよ。");

                            UpdateMainMessage("　　ハンナ：宿代は既にもらってる様なものだから、気兼ねなく自由に住む感じで構わないわよ。");

                            UpdateMainMessage("　　アイン：す・・・すみません、本当・・・");

                            UpdateMainMessage("　　ハンナ：お礼なら、ラナちゃんのお母さんに言うんだね。");

                            UpdateMainMessage("　　アイン：ハハ・・・そうします。");

                            UpdateMainMessage("　　ハンナ：それはそうと。");

                            UpdateMainMessage("　　（　　　という事は　　この時　　　）");

                            UpdateMainMessage("　　ハンナ：どうするんだい？　これから。");

                            UpdateMainMessage("　　（　　　ハンナおばさん　　知ってたんじゃないのか？　　　）");

                            UpdateMainMessage("　　アイン：えっと・・・どうすっかな。");

                            UpdateMainMessage("　　（　　　　　俺が　　　ダンジョンへ行く事を　　　　）");

                            UpdateMainMessage("　　アイン：まあ、やっぱりダンジョン制覇かな！");

                            UpdateMainMessage("　　（　　　　知ってて　　　かつ　　　　）");

                            UpdateMainMessage("　　ハンナ：ダンジョン制覇かい。こりゃまた大きく出たね。");

                            UpdateMainMessage("　　（　　　　　俺に　　　悟らせず　　　　　）");

                            UpdateMainMessage("　　アイン：当然だ。あのボケ師匠に負けてられないからな。");

                            UpdateMainMessage("　　（　　　　　全てを　　知りつつ　　　　　）");

                            UpdateMainMessage("　　ハンナ：アッハハハハ、良い根性だ。行ってきな。");

                            UpdateMainMessage("　　（　　　　見届け役を　　　　）");

                            UpdateMainMessage("　　アイン：ああ！　絶対に制覇してやるからな！");

                            UpdateMainMessage("　　（　　　　引き受けてくれたんだ　　　　）");

                            ReturnToNormal();

                            UpdateMainMessage("アイン：・・・ ・・・");

                            UpdateMainMessage("アイン：なあ、ラナ。");

                            UpdateMainMessage("ラナ：なに？");

                            UpdateMainMessage("アイン：この階層が終わったらさ。");

                            UpdateMainMessage("アイン：何か、一緒に食べにでも行くか！！");

                            UpdateMainMessage("ラナ：えっ、なによ唐突に。");

                            UpdateMainMessage("アイン：まあ、ちょっとまだ終われそうにないけどな、どうだ？");

                            UpdateMainMessage("ラナ：う〜ん・・・まあ・・・");

                            UpdateMainMessage("ラナ：イイわよ♪");

                            UpdateMainMessage("アイン：っしゃ、決まり！　サンキュー！");

                            UpdateMainMessage("ラナ：食べに行く所はちゃんと決めておいてよね♪");

                            UpdateMainMessage("アイン：了解！");

                            UpdateMainMessage("アイン：ところで、マップの状況はどんな感じだ？");

                            UpdateMainMessage("ラナ：グルっと渦巻き状の通路になってるわね。");

                            UpdateMainMessage("ラナ：その先はどうなってるかまでは、ちょっと分からないわね。");

                            UpdateMainMessage("アイン：そうか、分かった。");

                            UpdateMainMessage("アイン：では、進めるとしますか！");

                            UpdateMainMessage("ラナ：妙なテンションのまま、途中でコケたりしないでよね。");

                            UpdateMainMessage("アイン：大丈夫だって、任せておけ！");
                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "真実の回想４"
                    case 33:
                        if (!we.dungeonEvent430)
                        {
                            we.dungeonEvent430 = true;

                            GroundOne.StopDungeonMusic();
                            TurnToBlack();
                            UpdateMainMessage("　　　【その瞬間、アインの脳裏に激しい激痛が襲った！周囲の感覚が麻痺する！！】");

                            UpdateMainMessage("　　アイン：ファージル宮殿から招待状が届いた？？");

                            UpdateMainMessage("　　ラナ：そうよ、見てよコレ♪");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：読めねえ、なんて書いてあるんだ？");

                            UpdateMainMessage("　　　『ッシャゴオオォォォ！！！』（ホワイト・タイガーブローがアインに炸裂）　　");

                            UpdateMainMessage("　　ラナ：どうしてこんな簡単なのが読めないのよ、まったく・・・");

                            UpdateMainMessage("　　ラナ：【拝啓、この度・・・】");

                            UpdateMainMessage("　　アイン：すまねえ、そのクダリは良いから、要所を教えてくれ。");

                            UpdateMainMessage("　　ラナ：アンタ、今後どこかで恥かいても知らないわよ・・・");

                            UpdateMainMessage("　　ラナ：【つきましては下記のとおり、ファージル宮殿の生誕20周年祭を催したいと存じます。");

                            UpdateMainMessage("　　ラナ：【ご光臨の栄を賜りますよう、ご案内を申し上げます。】");

                            UpdateMainMessage("　　ラナ：【レクス歴２１９　３６５日（１８：００）　〜　１日（１０：００）】");

                            UpdateMainMessage("　　ラナ：【受付場所：　ファージル宮殿　正門ゲート】");

                            UpdateMainMessage("　　アイン：・・・");

                            UpdateMainMessage("　　アイン：っしゃ、オッケー！");

                            UpdateMainMessage("　　ラナ：今絶対に聞き逃してたでしょ。");

                            UpdateMainMessage("　　アイン：いいや、バッチリ聞いてたぜ。");

                            UpdateMainMessage("　　ラナ：じゃあ、復唱してみてよ。");

                            UpdateMainMessage("　　アイン：当日になったら復唱する。");

                            UpdateMainMessage("　　ラナ：ハアァァァ・・・私が朗読した時間を返して欲しいもんだわ。まったく・・・");

                            UpdateMainMessage("　　アイン：しかし、ファージル宮殿に行けるなんて、願ったり叶ったりじゃねえのか？");

                            UpdateMainMessage("　　ラナ：ッフフ♪　あ〜、憧れのファラ様にまた会えるのね♪");

                            UpdateMainMessage("　　ラナ：しかも今度はパーティで会えるの、なんて幸運なのかしら♪");

                            UpdateMainMessage("　　アイン：あんまり、はしゃぎすぎて当日途中で寝たりするなよ。");

                            UpdateMainMessage("　　ラナ：バカアインと一緒にしないでよ♪");

                            UpdateMainMessage("　　アイン：へえへえ・・・まあ、ご機嫌でなによりで・・・");

                            UpdateMainMessage("　　（　　ファージル宮殿　生誕２０年祭　当日　　　）");

                            UpdateMainMessage("　　アイン：美味い！　美味すぎる、この肉は！！！");

                            UpdateMainMessage("　　ラナ：あんまりがっつきすぎないでよ、見た目的にＮＧだったら即刻退場してもらうからね。");

                            UpdateMainMessage("　　アイン：退場なんてねえって、大丈夫大丈夫！　ッハッハッハ！");

                            UpdateMainMessage("　　ラナ：もう・・・");

                            UpdateMainMessage("　　ファラ：良いのですよ、好きなだけどうぞ（＾＾");

                            UpdateMainMessage("　　アイン：ありがとうございます！！！");

                            UpdateMainMessage("　　アイン：ラナも食べて行けよ、せっかくなんだし、見てるだけじゃ勿体無いぜ？");

                            UpdateMainMessage("　　ラナ：ファラ様、そこのバカには歯止めを効かせるようにしてやってください。");

                            UpdateMainMessage("　　ファラ：ッフフ、大丈夫ですよ（＾＾");

                            UpdateMainMessage("　　カール：貴君のその食事への態度、オル・ランディスを思い出させるな。");

                            UpdateMainMessage("　　アイン：ッゴ・・・ッゴホゴホ！");

                            UpdateMainMessage("　　ランディス：おいおい、俺は節度を持って食してるだろぉが。");

                            UpdateMainMessage("　　アイン：な、何故カールさんがこんな所に！？");

                            UpdateMainMessage("　　カール：ファージル宮殿に仕える者として、当然の務め。");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：ファージル宮殿にも仕えてんのかよ！？");

                            UpdateMainMessage("　　ランディス：ッカッカッカ、隠してやがったな、カールのやつ。");

                            UpdateMainMessage("　　アイン：うそだろ！？じゃあ、師匠も知ってたって事だよな？？");

                            UpdateMainMessage("　　ランディス：知らねえわけねぇだろうが。");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：ラナ、知ってた？");

                            UpdateMainMessage("　　ラナ：この中で知らないのってバカアインだけじゃないかしら♪");

                            UpdateMainMessage("　　アイン：マジかああぁぁぁ・・・");

                            UpdateMainMessage("　　ランディス：まあ、落ち着けや。一杯どうだ。");

                            UpdateMainMessage("　　アイン：さ、サンキュー・・・");

                            UpdateMainMessage("　　アイン：（ッゴク・・・ッゴク・・・）");

                            UpdateMainMessage("　　アイン：ップハァ！っここの爽快氷結ジンジャーは最高だ！");

                            UpdateMainMessage("　　アイン：はあ・・・ファージル宮殿って最高だな・・・ありがとう、エルミ国王様・・・");

                            UpdateMainMessage("　　エルミ：ああ、ゆっくりして行くと良いよ。");

                            UpdateMainMessage("　　エルミ：生誕祭は明日の午前まであるからね。存分に満喫していくといいよ。");

                            UpdateMainMessage("　　アイン：あいよ！サンキューサンキュー！！");

                            UpdateMainMessage("　　アイン：っさてと・・・");

                            UpdateMainMessage("　　アイン：えーと・・・あれ、何か・・・");

                            UpdateMainMessage("　　ファラ：ッウフフ、おやすみなさい、アインさん（＾＾");

                            UpdateMainMessage("　　アイン：えっ、嘘だろ・・・あれ・・・これからだって時に・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　（　俺の記憶はここまでだ　）");

                            UpdateMainMessage("　　（　この時、俺はひどく眠気に襲われたんだ　）");

                            UpdateMainMessage("　　（　今にして思えば、あの眠気は相当おかしい　）");

                            UpdateMainMessage("　　（　仕掛けたのは多分・・・ボケ師匠と無表情のカール爵だな　）");

                            UpdateMainMessage("　　（　しかし、何で俺を寝かせる必要があったんだ・・・　）");

                            UpdateMainMessage("　　（　・・・　・・・　）");

                            UpdateMainMessage("　　（　・・・　）");

                            UpdateMainMessage("　　（　何かが意識に飛び込んでくる　）");

                            UpdateMainMessage("　　（　これは・・・　）");

                            UpdateMainMessage("　　（　なんだ、見たことの無い場所だな　）");

                            UpdateMainMessage("　　（　ん？・・・宝物庫への扉？　）");

                            UpdateMainMessage("　　（　こ・・・これは・・・　）");

                            UpdateMainMessage("　　（　・・・　・・・　）");

                            UpdateMainMessage("　　ファラ：急にこんな所に招待してごめんなさいね、ラナさん。");

                            UpdateMainMessage("　　ラナ：いえ、でも一体ここは・・・？");

                            UpdateMainMessage("　　エルミ：宝物庫だよ。この大陸中で拾い上げられたスペリオル・アーツはファージル宮殿で一括管理しているんだ。");

                            UpdateMainMessage("　　ラナ：見たことの無い物がいっぱい・・・全部何かに使える物なんでしょうか？");

                            UpdateMainMessage("　　エルミ：スペリオル・アーツは一見しただけじゃよく分からない物が多いけどね、使えるものばかりだよ。");

                            UpdateMainMessage("　　ファラ：あちらのワンワンボックスは面白いですよ（＾＾");

                            UpdateMainMessage("　　ラナ：えっと、どれですか？");

                            UpdateMainMessage("　　エルミ：あっ、むやみに勧めないでください。キミも本当にそういう事が好きだなファラ・・・");

                            UpdateMainMessage("　　ファラ：エルミは、ケチケチ君だからね（＾＾");

                            UpdateMainMessage("　　エルミ：駄目です、むやみに操作しては危険です。");

                            UpdateMainMessage("　　ファラ：ケチッ！（＾＾");

                            UpdateMainMessage("　　エルミ：ック・・・後でいくらでも操作させてあげますから。");

                            UpdateMainMessage("　　ラナ：あ、えっと・・・別の所に行くんでしたよね？");

                            UpdateMainMessage("　　エルミ：ええ、すみませんでした。こちらです。");

                            UpdateMainMessage("　　エルミ：到着しました、ここです。");

                            UpdateMainMessage("　　ラナ：ワァ・・・綺麗な鏡！　凄いわね！");

                            UpdateMainMessage("　　エルミ：気に入ってもらえましたか？これは、秤の三面鏡というスペリオル・アーツです。");

                            UpdateMainMessage("　　エルミ：鏡の構成は大人一人分の大きさで、左、右、前の３箇所で構成されてます。");

                            UpdateMainMessage("　　ラナ：でも不思議ね。この鏡、景色の部分しか映ってないみたい。");

                            UpdateMainMessage("　　（　ラナ/エルミ/ファラ/ヴェルゼの姿が鏡に映りこんでいないのを、ラナはじっと見ていた　）");

                            UpdateMainMessage("　　ラナ：鏡には何か、特有の機能が備わっているんですか？");

                            UpdateMainMessage("　　ファラ：ええ、もちろんですよ。");

                            UpdateMainMessage("　　ラナ：どんな内容なんでしょうか？");

                            UpdateMainMessage("　　ファラ：この鏡は不思議な事に、中央に立った人にとって縁のある人達が登場します。");

                            UpdateMainMessage("　　ファラ：まあ、そこに立ってみてください、きっと面白いものが見えますよ（＾＾");

                            UpdateMainMessage("　　ラナ：えっ、ええ・・・");

                            UpdateMainMessage("　　（　鏡には３人のラナが映し出された　）");

                            UpdateMainMessage("　　ラナ：ッワ、ちゃんと私が出てきた。");

                            UpdateMainMessage("　　ラナ：凄いわ・・・反射角度で見えたりしなかったりするのかしら・・・");

                            UpdateMainMessage("　　エルミ：そうですね、この鏡は反射角度の計算が非常に逸脱した装置です。");

                            UpdateMainMessage("　　エルミ：だから、見えたり見えなかったりするわけです。");

                            UpdateMainMessage("　　エルミ：あっ、もう少し前に立ってみてください。");

                            UpdateMainMessage("　　ラナ：えっと・・・ここで良いのかしら？");

                            UpdateMainMessage("　　エルミ：もう少しですね。");

                            UpdateMainMessage("　　ラナ：ここ？");

                            UpdateMainMessage("　　エルミ：はい、オッケーです。");

                            UpdateMainMessage("　　エルミ：では、しばらくそのままにしててください。");

                            UpdateMainMessage("　　ラナ：わかりました。");

                            UpdateMainMessage("　　エルミ：アーティ、鏡を起動してください。");

                            UpdateMainMessage("　　ヴェルゼ：はい。");

                            UpdateMainMessage("　　（　鏡がほんのりと淡い光を放ち始めた　）");

                            UpdateMainMessage("　　ラナ：っわ、ビックリするわね・・・");

                            UpdateMainMessage("　　ラナ：・・・　・・・");

                            UpdateMainMessage("　　ラナ：・・・");

                            UpdateMainMessage("　　（　この間、ラナは鏡に向かって、いろいろと喋っていたようだ ）");

                            UpdateMainMessage("　　（　楽しそうな時もあれば、苦しそうな口論の時もあり、泣いてる時もあったみたいだ　）");

                            UpdateMainMessage("　　（　所々の雰囲気を見る限り、ある特定の事柄に関する悩みを言葉にしていたようには見えた ）");

                            UpdateMainMessage("　　（　ただし、その詳細内容までは、こちらには届いてこない ）");
                            
                            UpdateMainMessage("　　（　遠い空間から観ているだけ、そんな感じだ ）");

                            UpdateMainMessage("　　（　そういえば、後ろにいたエルミ国王、ファラ王妃、ヴェルゼはジッとしていた ）");

                            UpdateMainMessage("　　（　ラナから何かを聞き出そうとしていたんだろうか　）");

                            UpdateMainMessage("　　（　俺の地点からじゃ、これは読み取れない　）");

                            UpdateMainMessage("　　（　・・・　・・・　）");

                            UpdateMainMessage("　　エルミ：大丈夫ですか？　ラナさん。");

                            UpdateMainMessage("　　ラナ：ええ・・・ここは？");

                            UpdateMainMessage("　　ファラ：休息室ですよ（＾＾");
                            
                            UpdateMainMessage("　　ラナ：えっ、ウソ！  宝物庫じゃなかった！？");

                            UpdateMainMessage("　　ファラ：エルミの退屈な解説のせいで、ラナさんはウトウト眠ってしまったのですよ（＾＾");

                            UpdateMainMessage("　　エルミ：コラッ、そんな理由にして遊ぶんじゃない、まったく。");

                            UpdateMainMessage("　　ファラ：イイじゃない、似たようなものなんだから（＾＾");

                            UpdateMainMessage("　　エルミ：あぁぁ、話がややこしくなる。お前はもう引っ込んでなさい。");

                            UpdateMainMessage("　　ファラ：いけず（＾＾");

                            UpdateMainMessage("　　エルミ：ック・・・だから違うと。");

                            UpdateMainMessage("　　ラナ：え、ええっと・・・わざわざ運んで下さったんですよね、どうもありがとうございます。");

                            UpdateMainMessage("　　エルミ：運んだのは、ファラです。彼女にお礼を言ってください。");

                            UpdateMainMessage("　　ラナ：あ、そうだったんですね、どうもありがとうございます。");

                            UpdateMainMessage("　　ファラ：いえいえ、どういたしまして（＾＾");

                            ReturnToNormal();

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：っしゃ、先に進むぜ。");

                            UpdateMainMessage("ラナ：待って。");

                            UpdateMainMessage("アイン：ん？");

                            UpdateMainMessage("ラナ：やっぱりもう止めましょう。");

                            UpdateMainMessage("アイン：何をだ？");

                            UpdateMainMessage("ラナ：ダンジョンの制覇よ。");

                            UpdateMainMessage("アイン：何を言ってるんだ、ここまで来て、引き下がるつもりはないぜ。");

                            UpdateMainMessage("ラナ：そうじゃなくて、制覇しようとするのを止めましょうよ。");

                            UpdateMainMessage("アイン：・・・・・・");

                            UpdateMainMessage("アイン：ダメだ。俺は進める。");
 
                            UpdateMainMessage("アイン：進めなくちゃならないんだ。");

                            UpdateMainMessage("ラナ：・・・");

                            UpdateMainMessage("アイン：悪いな、付き合わせてしまって。");

                            UpdateMainMessage("ラナ：良いわよ別に、何となくこうなる気がしてたし。");

                            UpdateMainMessage("アイン：ッハハ・・・ほんとすまねえ、悪いと思ってる。");

                            UpdateMainMessage("ラナ：うん・・・");

                            UpdateMainMessage("アイン：最後まで付き合ってくれ、頼んだぜ。");

                            UpdateMainMessage("ラナ：うん・・・分かったわ。");
                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "真実の回想５"
                    case 34:
                        if (!we.dungeonEvent434)
                        {
                            we.dungeonEvent434 = true;

                            GroundOne.StopDungeonMusic();
                            TurnToBlack();
                            UpdateMainMessage("　　　【その瞬間、アインの脳裏に激しい激痛が襲った！周囲の感覚が麻痺する！！】");

                            UpdateMainMessage("　　（　俺は、喋ったり考えたりする気が完全に失せていた　）");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　（　あらゆる行動に意味はなくなった　）");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　（　生きていく意味は、もう存在しない　）");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　（　そんな中、最下層に辿り着き　）");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　（　直線の通路を進め、一つの存在に遭遇した　）");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：少年よ");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：少年よ");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：最愛の者を");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：失ったか");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：喋らなくて良い");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：少年よ");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：このまま、ここで");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：この時間を続けるのもよいだろう");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：少年の気が済むまで");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：いつまでも待とう");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・ぅ・・・");

                            UpdateMainMessage("　　？？？：・・・・・・");

                            UpdateMainMessage("　　アイン：ウソだ！！！");

                            UpdateMainMessage("　　アイン：何でだよ！！！");

                            UpdateMainMessage("　　アイン：別にラナじゃなくても良かったんだろ！？　そうだろ！？");

                            UpdateMainMessage("　　？？？：このダンジョンは、ラナ・アミリアを選定した");

                            UpdateMainMessage("　　？？？：覆る事はない");

                            UpdateMainMessage("　　アイン：選定って何だよ！？");

                            UpdateMainMessage("　　？？？：ダンジョンが決定する意志に基づくもののことを指す");

                            UpdateMainMessage("　　アイン：ダンジョンが決定する意志だと！？冗談じゃねぇ！！！");

                            UpdateMainMessage("　　アイン：神様でも居るってのかよ！？");

                            UpdateMainMessage("　　？？？：少年がどう考えるかは重要ではない");

                            UpdateMainMessage("　　？？？：少年がどう捉え、解釈するかは重要ではない");

                            UpdateMainMessage("　　？？？：このダンジョンには、それが存在する");

                            UpdateMainMessage("　　アイン：じゃあ、ダンジョンが意志を持ってたと1000000歩譲ってそうだとしよう。");

                            UpdateMainMessage("　　アイン：何でラナが死ぬ必要があったんだよ！！　答えろよ！！！");

                            UpdateMainMessage("　　？？？：必要性とは少年にとって必要であったとしても、ダンジョンにとって必要性とは必要の無いもの");

                            UpdateMainMessage("　　？？？：犠牲となる死は、確約された真実だったのだ");

                            UpdateMainMessage("　　アイン：なんだよそれ！！");

                            UpdateMainMessage("　　アイン：なんだってんだ一体！！");

                            UpdateMainMessage("　　アイン：必要もなく死なせたって事かよ！？");

                            UpdateMainMessage("　　？？？：生まれる事に必要性はあるが、死に至る事に必要性は存在しない");

                            UpdateMainMessage("　　アイン：そうじゃねえ！！！");

                            UpdateMainMessage("　　アイン：ダンジョンが何で、生贄みたいなことを要求してくるかって事を聞いてんだよ！！！");

                            UpdateMainMessage("　　？？？：生贄ではない");

                            UpdateMainMessage("　　アイン：じゃあ、何なんだよ！！！！！");

                            UpdateMainMessage("　　？？？：真実である");

                            UpdateMainMessage("　　？？？：覆す術はない");

                            UpdateMainMessage("　　アイン：ッグ・・・・・・");

                            UpdateMainMessage("　　アイン：っふざけるなよ！そんなものが真実なんておかしいだろうが！！！");

                            UpdateMainMessage("　　？？？：落ち着くがよい、少年");

                            UpdateMainMessage("　　アイン：ック・・・ックソ・・・ッグ・・・");

                            UpdateMainMessage("　　【アインの身体の一部から、一つの雫が、床面に垂直に落ち、染み込んでいった】");

                            UpdateMainMessage("　　アイン：どっ、どうすりゃよかったんだよ・・・");

                            UpdateMainMessage("　　アイン：これで、終わりなのかよ。もう手立てはないのかよ！？");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：答えてくれよ、なあ！");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：本当に無いのかよ！？");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：何で無言なんだよ！教えてくれよ・・・頼む！");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：俺には教える気は無いってことか・・・");

                            UpdateMainMessage("　　？？？：そうではない");

                            UpdateMainMessage("　　アイン：じゃあ、なんで・・・");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：まさか・・・");

                            UpdateMainMessage("　　アイン：俺じゃ無理って話なのか？");

                            UpdateMainMessage("　　？？？：そういうことだ、少年");

                            UpdateMainMessage("　　？？？：死んでしまった事実は覆らない");

                            UpdateMainMessage("　　？？？：ラナ・アミリアの事は諦めなさい");

                            UpdateMainMessage("　　アイン：・・・");

                            UpdateMainMessage("　　アイン：無理でもいい");

                            UpdateMainMessage("　　アイン：不可能でもいい");

                            UpdateMainMessage("　　アイン：頼む・・・方法だけでも教えてくれ");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：最下層には、財宝が眠ってるんだろ？");

                            UpdateMainMessage("　　アイン：神の遺産って聞いてる。");

                            UpdateMainMessage("　　？？？：少年は受け取る権利がある");

                            UpdateMainMessage("　　？？？：神の遺産を受け取りなさい");

                            UpdateMainMessage("　　アイン：それ");

                            UpdateMainMessage("　　アイン：いらねえ。");

                            UpdateMainMessage("　　アイン：いらねえんだよ、そんなもん。");

                            UpdateMainMessage("　　アイン：ラナが死んだ世界じゃ・・・そんなもの受け取っても意味ねえじゃねえか・・・");

                            UpdateMainMessage("　　？？？：・・・");

                            UpdateMainMessage("　　アイン：頼む、教えてくれ。");

                            UpdateMainMessage("　　アイン：俺の一生・・・いや・・・");

                            UpdateMainMessage("　　アイン：俺の魂の消滅をかけてもいい。");

                            UpdateMainMessage("　　アイン：無に堕ちても構わない。");

                            UpdateMainMessage("　　アイン：俺の関するあらゆる全てを犠牲にしても構わない！！！");

                            UpdateMainMessage("　　アイン：頼む！！！");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　？？？：・・・");

                            UpdateMainMessage("　　？？？：少年よ");

                            UpdateMainMessage("　　？？？：我は名も無き傍観者");

                            UpdateMainMessage("　　？？？：絶望の光を少年に今から照らそう");

                            UpdateMainMessage("　　アイン：！！！");

                            UpdateMainMessage("　　？？？：神の遺産と引き換えに");

                            UpdateMainMessage("　　？？？：ラナ・アミリア復活の方法を少年に授ける");

                            UpdateMainMessage("　　アイン：ど、どんな内容なんだ！！？");

                            UpdateMainMessage("　　？？？：その方法とは・・・");

                            ReturnToNormal();

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("ラナ：・・・　・・・");

                            UpdateMainMessage("アイン：っふう・・・");

                            UpdateMainMessage("ラナ：随分長かったみたいね。");

                            UpdateMainMessage("アイン：ああ、まあな。");

                            UpdateMainMessage("ラナ：宝物庫に関する内容だったの？");

                            UpdateMainMessage("アイン：いや、そういうのじゃなかった・・・");

                            UpdateMainMessage("ラナ：・・・");

                            UpdateMainMessage("アイン：本当だって。");
                            
                            UpdateMainMessage("ラナ：う、うん・・・");

                            UpdateMainMessage("アイン：さてと、先に進めようぜ。");
                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "真実の回想６"
                    case 35:
                        if (!we.dungeonEvent438)
                        {
                            we.dungeonEvent438 = true;

                            GroundOne.StopDungeonMusic();
                            TurnToBlack();
                            UpdateMainMessage("　　　【その瞬間、アインの脳裏に激しい激痛が襲った！周囲の感覚が麻痺する！！】");
                            
                            UpdateMainMessage("　　？？？：アインさん・・・アインさん？");

                            UpdateMainMessage("　　アイン：ん・・・誰だ・・・");

                            UpdateMainMessage("　　アイン：・・・");

                            UpdateMainMessage("　　アイン：ッハ！！");

                            UpdateMainMessage("　　ファラ：あっ、気づかれましたね（＾＾");

                            UpdateMainMessage("　　アイン：あっ、どうもすみません！！せっかくのお祝いの席で・・・");

                            UpdateMainMessage("　　ファラ：いえいえ、今日が楽しかったのと日頃の疲労が一気に出たのでしょう。");

                            UpdateMainMessage("　　アイン：いやあ・・・面目無い・・・");

                            UpdateMainMessage("　　アイン：そうだ、今何時ぐらいなんでしょうか？");

                            UpdateMainMessage("　　ファラ：夜中の２３時ぐらいですよ。");

                            UpdateMainMessage("　　アイン：ッゲェ！！そんなに経ってたのかよ！？");

                            UpdateMainMessage("　　アイン：すみません・・・何かせっかくの行事だったのに・・・");

                            UpdateMainMessage("　　ファラ：いえいえ、こちらこそ付き合わせてしまい、申し訳ありませんでした（＾＾");

                            UpdateMainMessage("　　アイン：いえいえいえ・・・こちらこそ・・・");

                            UpdateMainMessage("　　ファラ：いえいえ（＾＾");

                            UpdateMainMessage("　　アイン：いえいえいえ・・・");

                            UpdateMainMessage("　　ファラ：いえいえ（＾＾");

                            UpdateMainMessage("　　アイン：いやいやいや・・・（キリねえな・・・）");

                            UpdateMainMessage("　　アイン：そういえば、ラナは？");

                            UpdateMainMessage("　　ファラ：先ほどまで、休息室で寝息を立てていましたよ。そろそろ起きる頃じゃないかしら（＾＾");

                            UpdateMainMessage("　　アイン：マジか・・・ラナがこういったイベント系で寝てしまうなんて、珍しいけどな・・・");

                            UpdateMainMessage("　　ファラ：彼女もきっと疲れていたのでしょう（＾＾");

                            UpdateMainMessage("　　アイン：ははは・・・そうなのかもな。");

                            UpdateMainMessage("　　（　俺はこの時、ピンと来てなかった　）");

                            UpdateMainMessage("　　アイン：じゃあ、そろそろ・・・");

                            UpdateMainMessage("　　ファラ：アラ、泊まって行かれないのかしら？");

                            UpdateMainMessage("　　アイン：いや、さすがにそこまで贅沢は出来ないと思うんで。");

                            UpdateMainMessage("　　（　あの会話の流れは、なにを対象にして言っていたのか　）");

                            UpdateMainMessage("　　ファラ：行くのですか？");

                            UpdateMainMessage("　　アイン：ああ、もう行かなくちゃ。");

                            UpdateMainMessage("　　（　今なら分かる気がする　）");

                            UpdateMainMessage("　　ファラ：２人で一緒に？");
                            
                            UpdateMainMessage("　　アイン：ええ、とりあえずラナと一緒に、夜道も危ないんで。");

                            UpdateMainMessage("　　（　俺がダンジョンへ行くことを既に知っていたんだ　）");

                            UpdateMainMessage("　　ファラ：もし、行くのであれば");

                            UpdateMainMessage("　　ファラ：必ず引き返す様に努力してください。");

                            UpdateMainMessage("　　アイン：いやいや、ファージル宮殿のお世話になるわけには行かないので。");

                            UpdateMainMessage("　　（　そして俺が失敗する事も想定していた事象だったんだろう　）");

                            UpdateMainMessage("　　ファラ：終わりへと、足を運ぶなかれ。　始まりへと足を進めよ。");

                            UpdateMainMessage("　　アイン：・・・え？");

                            UpdateMainMessage("　　（　この言葉が、全てだったんだと、今なら分かる　）");

                            UpdateMainMessage("　　ファラ：エルミ国王からの伝言です、お気にせず（＾＾");

                            UpdateMainMessage("　　アイン：あ、ああ。そうなんですか、いやいやどうもどうも！");

                            UpdateMainMessage("　　ラナ：あっ、バカアイン起きたのね。");

                            UpdateMainMessage("　　アイン：おお、ラナか。お前は今までどこ行ってたんだ？");

                            UpdateMainMessage("　　ラナ：エルミ様に宝物庫で、見学会をしてもらったのよ♪　イイでしょ♪");

                            UpdateMainMessage("　　アイン：マジか・・・俺も行きたかったぜ・・・");

                            UpdateMainMessage("　　エルミ：ファラ。アイン君には誤解なくちゃんと伝えたんでしょうね。");

                            UpdateMainMessage("　　ファラ：エルミ、いつも私は【ちゃんと】伝えてるわよ（＾＾");

                            UpdateMainMessage("　　アイン：あっ、ハハハ・・・ええ、何となく聞かせてもらいました。ありがとうございます。");

                            UpdateMainMessage("　　エルミ：いえ、伝わっているのであれば良いのですが。");

                            UpdateMainMessage("　　アイン：ちゃんと気をつけて帰宅します。今日はどうもありがとうございました！");

                            UpdateMainMessage("　　エルミ：ええ、道中は気をつけて。");

                            UpdateMainMessage("　　アイン：ハイ！");

                            UpdateMainMessage("　　ラナ：ファラ様、エルミ様、またご一緒させてください♪");

                            UpdateMainMessage("　　（　俺はこのダンジョンを　）");

                            UpdateMainMessage("　　エルミ：はい、いつでも。");

                            UpdateMainMessage("　　ファラ：お待ちしてます（＾＾");

                            UpdateMainMessage("　　（　最後までラナと進めてはいけなかったんだ　）");

                            UpdateMainMessage("　　アイン：っよし・・・気張って帰るぞ！");

                            UpdateMainMessage("　　ラナ：帰りに気張ってどーすんのよ、ホントにもう・・・");

                            UpdateMainMessage("　　アイン：ッハッハッハ、任せておけって！！");

                            UpdateMainMessage("　　ラナ：ハアアァァァ・・・");

                            UpdateMainMessage("　　（　思えば、俺のこの時の決意が　）");

                            UpdateMainMessage("　　アイン：ラナ、なあ・・・実は相談なんだが。");

                            UpdateMainMessage("　　ラナ：なによ？");

                            UpdateMainMessage("　　アイン：俺、決めたんだ。");

                            UpdateMainMessage("　　ラナ：なにをやぶらからぼうに。");

                            UpdateMainMessage("　　アイン：俺は");

                            UpdateMainMessage("　　（　致命的な選択だったんだ　）");

                            UpdateMainMessage("　　アイン：ダンジョンへ向かう");

                            UpdateMainMessage("　　（　そして　）");

                            UpdateMainMessage("　　アイン：ラナ、頼む！お前も一緒に来てくれないか！？");

                            UpdateMainMessage("　　ラナ：っえ・・・");

                            UpdateMainMessage("　　ラナ：っと・・・っととと・・・");

                            UpdateMainMessage("　　アイン：だ・・・ダメか。");

                            UpdateMainMessage("　　ラナ：いや、駄目っていうわけじゃないんだけどね・・・");

                            UpdateMainMessage("　　ラナ：ちょっと考えさせて、お願い。");

                            UpdateMainMessage("　　（　俺がラナにダンジョン同行を頼んだ時点で　）");

                            UpdateMainMessage("　　アイン：ああ、分かった。");

                            UpdateMainMessage("　　アイン：明日また返事を聞かせてくれ。");

                            UpdateMainMessage("　　ラナ：うん、分かったわ。");

                            UpdateMainMessage("　　（　最悪の結末は決定されたんだ　）");

                            ReturnToNormal();

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("ラナ：・・・大丈夫？");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：ああ。");

                            UpdateMainMessage("アイン：ラナ、マップはどうなってる？");

                            UpdateMainMessage("ラナ：残るは一本道だけみたいよ。また元の部屋に戻るんじゃないかしら。");

                            UpdateMainMessage("アイン：よし、進めるぞ。");
                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "真実の回想７"
                    case 36:
                        if (!we.dungeonEvent459)
                        {
                            we.dungeonEvent459 = true;

                            GroundOne.StopDungeonMusic();
                            TurnToBlack();
                            UpdateMainMessage("　　　【その瞬間、アインの脳裏に激しい激痛が襲った！周囲の感覚が麻痺する！！】");

                            UpdateMainMessage("　　（　自分では無い存在が、ただただ一人歩きしている感じだった　）");

                            UpdateMainMessage("　　（　主体でもなく、客観でもなく　）");

                            UpdateMainMessage("　　（　何も感じる事ができずに、歩を進めた　）");

                            UpdateMainMessage("　　（　最下層は一直線の道だった　）");

                            UpdateMainMessage("　　（　通路の幅は、一人の俺にとっては広すぎるぐらいだった　）");

                            UpdateMainMessage("　　（　床には綺麗な赤い絨毯が敷かれていた　）");

                            UpdateMainMessage("　　（　単に糸材で造られた絨毯のはずだが　）");

                            UpdateMainMessage("　　（　俺にはこの絨毯はラナの血で塗られたモノにしか見えなかった　）");

                            UpdateMainMessage("　　（　ラナが死んでから、俺は街に戻る気力を完全に失った状態になった　）");

                            UpdateMainMessage("　　（　戻った所で意味はない　）");

                            UpdateMainMessage("　　（　宿屋で体力を回復しても意味はない　）");

                            UpdateMainMessage("　　（　次の日の朝？　）");

                            UpdateMainMessage("　　（　出かける前の準備？　）");

                            UpdateMainMessage("　　（　街のみんなと軽く挨拶？　）");

                            UpdateMainMessage("　　（　師匠に追いつく？　）");

                            UpdateMainMessage("　　（　新しい魔法やスキルの習得？　）");

                            UpdateMainMessage("　　（　闘技場で一位になる？　）");

                            UpdateMainMessage("　　（　ダンジョンで収入を稼ぐ？　）");

                            UpdateMainMessage("　　（　ダンジョン、最下層制覇？　）");

                            UpdateMainMessage("　　（　・・・意味・・・　）");

                            UpdateMainMessage("　　（　そう、意味が無くなったんだ　）");

                            UpdateMainMessage("　　（　すべてにおいて　）");

                            UpdateMainMessage("　　（　やるべき事、果たすべき事、成したい事、続けたい事　）");

                            UpdateMainMessage("　　（　すべてが崩れ去り　）");

                            UpdateMainMessage("　　（　行動原則が消失した　）");

                            UpdateMainMessage("　　（　俺にはもう、進む事ぐらいしか思考が働かなくなっていった　）");
                           
                            UpdateMainMessage("　　（　歩を進める　）");

                            UpdateMainMessage("　　（　無機質に　）");

                            UpdateMainMessage("　　（　無思慮に　）");

                            UpdateMainMessage("　　（　音もなく　）");

                            UpdateMainMessage("　　（　波もなく　）");

                            UpdateMainMessage("　　（　一直線の通路は時間と空間の感覚を遮断していく　）");

                            UpdateMainMessage("　　（　歩を進めた先に　）");

                            UpdateMainMessage("　　（　玉座が見えた　）");

                            UpdateMainMessage("　　（　誰かが座っている　）");

                            UpdateMainMessage("　　（　玉座は白く淡く光を放っている　）");

                            UpdateMainMessage("　　（　壁には、無数の時計が見える　）");

                            UpdateMainMessage("　　（　時計と時計の間には、無数の歯車　）");

                            UpdateMainMessage("　　（　歯車と歯車の間には、白い光と黒い光　）");

                            UpdateMainMessage("　　（　何か象徴的な意味があるんだろうが　）");

                            UpdateMainMessage("　　（　視覚から入ってくるモノがなんであれ　）");

                            UpdateMainMessage("　　（　今の俺にとっては、すべて意味がない　）");

                            UpdateMainMessage("　　（　歩を進める　）");

                            UpdateMainMessage("　　（　進めて・・・進めて・・・進み続けて・・・　）");

                            UpdateMainMessage("　　（　そして・・・　）");

                            UpdateMainMessage("　　（　玉座に辿りついた　）");

                            UpdateMainMessage("　　（　最下層　）");

                            UpdateMainMessage("　　（　制覇　）");

                            UpdateMainMessage("　　（　当初の目的は達成された　）");

                            UpdateMainMessage("　　（　玉座にはただ一人だけ　）");
                            
                            UpdateMainMessage("　　（　こちらを見ることもなく、誰かが座っている　）");

                            UpdateMainMessage("　　（　俺は剣を床に突きたて　）");

                            UpdateMainMessage("　　（　そこにゆっくりと座り込み　）");

                            UpdateMainMessage("　　（　そこで足の膝の上に頭の全面を突っ伏させるようにして　）");

                            UpdateMainMessage("　　（　顔を下に伏せ　）");

                            UpdateMainMessage("　　（　動く事を完全にやめた　）");

                            UpdateMainMessage("　　（　ソイツは何かを俺に語りかける事もなく　）");

                            UpdateMainMessage("　　（　俺はソイツに何かを語りかける事もなく　）");

                            UpdateMainMessage("　　（　時間軸は完全に消滅　）");

                            UpdateMainMessage("　　（　空間だけが支配する世界となった　）");

                            ReturnToNormal();

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：ラナ・・・居るか？");

                            UpdateMainMessage("ラナ：？");

                            UpdateMainMessage("アイン：返事を");

                            UpdateMainMessage("ラナ：え、ええ・・・居るわよ。");

                            UpdateMainMessage("アイン：進めてもいいか？");

                            UpdateMainMessage("ラナ：・・・ええ。");

                            UpdateMainMessage("アイン：絶対に、");

                            UpdateMainMessage("アイン：なんとかする。");

                            UpdateMainMessage("アイン：任せておけ。");

                            UpdateMainMessage("ラナ：うん・・・");
                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "真実の回想８"
                    case 37:
                        if (!we.dungeonEvent474)
                        {
                            we.dungeonEvent474 = true;

                            GroundOne.StopDungeonMusic();
                            TurnToBlack();
                            UpdateMainMessage("　　　【その瞬間、アインの脳裏に激しい激痛が襲った！周囲の感覚が麻痺する！！】");

                            UpdateMainMessage("　　アイン：ラナ、もう鏡を潜るのはやめるんだ。");

                            UpdateMainMessage("　　ラナ：どうしてよ？間違ったルートだとでも言いたいワケ？");

                            UpdateMainMessage("　　アイン：そういう話じゃねえ。");

                            UpdateMainMessage("　　ラナ：じゃあ何だって言うのよ、ちゃんと答えなさいよ。");

                            UpdateMainMessage("　　アイン：心配なんだ、お前の事が。");

                            UpdateMainMessage("　　ラナ：ぇ・・・");

                            UpdateMainMessage("　　ラナ：ぇええええぇぇぇええええ！！？？");

                            UpdateMainMessage("　　アイン：わー、うるっせえな、いきなり！！");

                            UpdateMainMessage("　　ラナ：バカアイン、ここに来て何トチ狂った事を言ってんのよ！？アンタって本当にバカなんじゃないの！？");

                            UpdateMainMessage("　　アイン：と、トチ狂ってなんかいねえって。");

                            UpdateMainMessage("　　アイン：とにかくだ。鏡を潜るたびに、息が上がってる感じがしてるじゃねえか。");

                            UpdateMainMessage("　　アイン：その鏡、本当に大丈夫なのかよ？");

                            UpdateMainMessage("　　ラナ：大丈夫だって言ってるじゃない。ッホラ、このとおりよ♪");

                            UpdateMainMessage("　　アイン：お前がそういう時って、大概何か無理してるだろうが。");

                            UpdateMainMessage("　　ラナ：無理なんかひとっっっつもしてないわよ♪");

                            UpdateMainMessage("　　アイン：ったく・・・ある意味分かり易すぎるっつうか・・・");

                            UpdateMainMessage("　　アイン：じゃ、まあ分かった。まだそれほど息が上がりきってるわけじゃない。　体調は問題無いって事なんだな？");

                            UpdateMainMessage("　　ラナ：ええ、大丈夫よ。");

                            UpdateMainMessage("　　アイン：それでもだ。とにかく鏡潜りはやめよう。");

                            UpdateMainMessage("　　ラナ：・・・");

                            UpdateMainMessage("　　ラナ：そう、分かったわ。");

                            UpdateMainMessage("　　ラナ：アインって肝心な事は何一つ教えてくれない、それがよく分かったわ。");

                            UpdateMainMessage("　　アイン：いや、そういうわけじゃねえんだ。頼む、信じてくれ。");

                            UpdateMainMessage("　　ラナ：じゃあ、仮に私がやめたとして、その後はどうするわけ？");

                            UpdateMainMessage("　　アイン：・・・それは、まだ考えてない。");

                            UpdateMainMessage("　　ラナ：ダンジョンを進める方法が無くなる。それでも鏡潜りはやめた方が良いってこと？？");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：ああ、そのとおりだ。");

                            UpdateMainMessage("　　ラナ：信頼されてないのね、私はアインから。");

                            UpdateMainMessage("　　アイン：だっ、だからそうじゃねえって。");

                            UpdateMainMessage("　　ラナ：いいわ、アインからまともな返事を聞こうとした私がバカだったって事だし。");

                            UpdateMainMessage("　　ラナ：鏡、くぐり続けるわよ。");

                            UpdateMainMessage("　　アイン：っな！！！");

                            UpdateMainMessage("　　ラナ：他に手は？");

                            UpdateMainMessage("　　アイン：そ、それは今からだな・・・");

                            UpdateMainMessage("　　ラナ：じゃあ、アインが何か思いついたら、また立ち止まって聞いてあげるわ。");

                            UpdateMainMessage("　　ラナ：それまでの間は、鏡を使って進める。いいわね？");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　ラナ：異論は無さそうね、じゃあ進めるわよ。");

                            UpdateMainMessage("　　（　あの時、俺がもっとちゃんと即座に答えるべきだった　）");

                            UpdateMainMessage("　　（　正解、無限解、原点解　）");

                            UpdateMainMessage("　　（　ラナが鏡を潜るたびに、違うルートを見つけてくれる。そこまでは良かった　）");

                            UpdateMainMessage("　　（　だが、それを何度かそれを繰り返す内に、俺はある疑念を抱かざるを得なかった　）");

                            UpdateMainMessage("　　（　それは、別ルートへの辿り着き方だ　）");

                            UpdateMainMessage("　　（　一回一回潜る度に、違う通路に出る　）");

                            UpdateMainMessage("　　（　たまに同じルートにハマる場合もあったが、ほぼ違うルートだったのは間違いない　）");

                            UpdateMainMessage("　　（　そして、何回か潜ってると、最初の場所に戻る　）");

                            UpdateMainMessage("　　（　最初に戻るって事は、多分そのルート自体は失敗ルートなんだろう　）");

                            UpdateMainMessage("　　（　一回潜るごとに、何度も複数の鏡があった　）");

                            UpdateMainMessage("　　（　あれらが失敗ルートじゃないと言い切れるかどうかも分からないまま　）");

                            UpdateMainMessage("　　（　ラナは次々と、別ルートを言い当てていった　）");

                            UpdateMainMessage("　　（　そうだ　）");

                            UpdateMainMessage("　　（　あの時、気づけば良かったんだ　）");

                            UpdateMainMessage("　　（　鏡の数と別ルート発見の比率　）");

                            UpdateMainMessage("　　（　その比率が異常だった　）");

                            UpdateMainMessage("　　（　あれだけの鏡の数だったのに対して　）");

                            UpdateMainMessage("　　（　数える程度の回数で、正解を言い当てる事ができた　）");

                            UpdateMainMessage("　　（　あれは、ラナの直感力がどうのこうのという話ではなく　）");

                            UpdateMainMessage("　　（　ダンジョンが　）");

                            UpdateMainMessage("　　（　俺とラナに対して　）");

                            UpdateMainMessage("　　（　恣意的に正解へと導いたんだ　）");

                            UpdateMainMessage("　　（　この正解というのは、俺とラナにための正解ではなく　）");

                            UpdateMainMessage("　　（　ダンジョンとしての正解だ　）");

                            UpdateMainMessage("　　ラナ：あっ、何かやたらと長そうな通路に出たわね。");

                            UpdateMainMessage("　　アイン：みたいだな。");

                            UpdateMainMessage("　　ラナ：ちょっとずつ曲がってるのかしら・・・奥までちゃんと見えないわね・・・");

                            UpdateMainMessage("　　アイン：この先、きっとボスだな。");

                            UpdateMainMessage("　　ラナ：ちょっと、勝手に先読みしないでくれる？まだ決まったわけでもないのに。");

                            UpdateMainMessage("　　アイン：ッハッハッハ、そういう予感がするのさ。");

                            UpdateMainMessage("　　ラナ：じゃあ、ボスって事は正解ルートで間違いなさそうよね。");

                            UpdateMainMessage("　　ラナ：私の鏡くぐり、間違って無かったでしょ？");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：ああ、そうだな。");

                            UpdateMainMessage("　　アイン：ラナ、あの時は悪かった。");

                            UpdateMainMessage("　　ラナ：っちょ・・・");

                            UpdateMainMessage("　　ラナ：変に謝らないでよね、調子が狂っちゃうじゃない。");

                            UpdateMainMessage("　　アイン：よし、じゃあボスのお出ましをご拝見仕るとしますか！");

                            UpdateMainMessage("　　ラナ：どこでそんな言葉覚えたんだか・・・");

                            UpdateMainMessage("　　アイン：どうだ、使い方完璧だろ？ッハッハッハ！！");

                            UpdateMainMessage("　　ラナ：ハアアァァァァ・・・ッホラ、とっとと行くわよ。");

                            UpdateMainMessage("　　アイン：ああ。");

                            UpdateMainMessage("　　（　とっさに判断して、戻るべきだったんだ　）");

                            UpdateMainMessage("　　（　とっさに感づいて、止めるべきだったんだ　）");

                            UpdateMainMessage("　　（　俺はあの時、迂闊にも　）");

                            UpdateMainMessage("　　（　ルートが拓けた事で、ホっと一息ついてしまった　）");

                            UpdateMainMessage("　　（　先にラナを進ませてしまったのも　）");

                            UpdateMainMessage("　　（　ラナが試練の台座で囚われてしまったのも　）");

                            UpdateMainMessage("　　（　ラナが囚われた後、動揺し我を忘れたことも　）");
                            
                            UpdateMainMessage("　　（　動揺のせいで、無限解や、原点解の事をすっかり忘れてしまった事も　）");

                            UpdateMainMessage("　　（　何とでもなったはずなんだ　）");

                            UpdateMainMessage("　　（　なのに、俺は・・・　）");

                            UpdateMainMessage("　　（　全て俺のせいだ　）");

                            UpdateMainMessage("　　（　俺が不甲斐ないのが全ての原因だったんだ　）");

                            ReturnToNormal();

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：ラナ、マップはどうだ？");

                            UpdateMainMessage("ラナ：・・・　・・・");

                            UpdateMainMessage("アイン：どうした？マップを見てくれよ？");

                            UpdateMainMessage("ラナ：ゴメン。アイン、ごめんなさい・・・");

                            UpdateMainMessage("アイン：っな、いきなりどうしたってんだよ？");

                            UpdateMainMessage("ラナ：もう、いろいろと思い出してるんでしょ？");

                            UpdateMainMessage("ラナ：ごめんね、こんな事になっちゃって・・・");

                            UpdateMainMessage("アイン：な・・・何言ってるんだよ！！");

                            UpdateMainMessage("アイン：思い出してるって何の話だよ！？");

                            UpdateMainMessage("ラナ：ごめん・・・ごめんなさい本当に・・・");

                            UpdateMainMessage("アイン：っぐ・・・");

                            UpdateMainMessage("アイン：それは、ラナが謝る所じゃねえ。");

                            UpdateMainMessage("アイン：全部おれが悪かったんだ。ラナ、お前のせいじゃねえ。");

                            UpdateMainMessage("アイン：次行くぞ、っな？");

                            UpdateMainMessage("ラナ：う、うん・・・");
                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "真実の回想９"
                    case 38:
                        if (!we.dungeonEvent482)
                        {
                            we.dungeonEvent482 = true;
                            GroundOne.StopDungeonMusic();
                            TurnToBlack();
                            UpdateMainMessage("　　　【その瞬間、アインの脳裏に激しい激痛が襲った！周囲の感覚が麻痺する！！】");

                            UpdateMainMessage("　　（　神剣フェルトゥーシュ　）");

                            UpdateMainMessage("　　（　特徴　）");

                            UpdateMainMessage("　　（　これはアーククラスター素子から構成されるデバイスである　）");

                            UpdateMainMessage("　　（　同時に　）");

                            UpdateMainMessage("　　（　これは自然生物でもある　）");

                            UpdateMainMessage("　　（　この二質同化を有する特性により　）");

                            UpdateMainMessage("　　（　剣は明確な意志を持つ　）");

                            UpdateMainMessage("　　（　所持者が剣を保有するのではなく　）");

                            UpdateMainMessage("　　（　剣の方が所持者を選択する意志を持っている　）");

                            UpdateMainMessage("　　（　所持者の心の強さに応じて、威力が上昇する　）");

                            UpdateMainMessage("　　（　所持者の想いが強ければ強いほど　）");

                            UpdateMainMessage("　　（　所持者が、念じれば念じるほど　）");

                            UpdateMainMessage("　　（　その威力はとどまる事なく上昇し続ける　）");

                            UpdateMainMessage("　　（　これにより、剣の形状は変化する　）");

                            UpdateMainMessage("　　（　いわゆる柄と呼ばれる部分は明確には存在しない　）");

                            UpdateMainMessage("　　（　その強さは保持者にとって最適な形状を取る　）");

                            UpdateMainMessage("　　（　・・・ここまでは、オマケみたいなもんだ　）");

                            UpdateMainMessage("　　（　肝心な事は　）");

                            UpdateMainMessage("　　（　神剣フェルトゥーシュによりダメージを与えられた部位は再生しない　）");

                            UpdateMainMessage("　　（　それは人間も当然対象である　）");

                            UpdateMainMessage("　　（　さらに　）");

                            UpdateMainMessage("　　（　対象が生物、つまり人間やモンスターだった場合　）");

                            UpdateMainMessage("　　（　神剣のダメージに起因して　）");

                            UpdateMainMessage("　　（　死が訪れた場合　）");

                            UpdateMainMessage("　　（　死は絶対的であり　）");

                            UpdateMainMessage("　　（　蘇生は決して叶わないという事だ　）");

                            UpdateMainMessage("　　（　ここでいう死とは、対象者の精神の奥底にまで及ぶ　）");

                            UpdateMainMessage("　　（　物理的な蘇生術が行われたとしても　）");

                            UpdateMainMessage("　　（　それは、人間としての完全なる蘇生術ではないため　）");
                            
                            UpdateMainMessage("　　（　死ぬ前の状態として復活に至る事は叶わない　）");

                            UpdateMainMessage("　　（　対象の者は、肉体的な蘇生が行われたとしても　）");

                            UpdateMainMessage("　　（　その刹那　）");

                            UpdateMainMessage("　　（　精神が完全にフェルトゥーシュにより死滅させられているため　）");
                            
                            UpdateMainMessage("　　（　生への根源的な意志が働かない　）");

                            UpdateMainMessage("　　（　ゆえに、対象の者は、目を覚ます事なく　）");
                            
                            UpdateMainMessage("　　（　即座に、また、死に至る　）");

                            UpdateMainMessage("　　（　逃れられない　）");

                            UpdateMainMessage("　　（　唯一無二の絶対的な特性　）");

                            UpdateMainMessage("　　（　【神剣】と呼ばれている真の意味はこの特性からきていた　）");

                            UpdateMainMessage("　　（　４階層の最後　）");

                            UpdateMainMessage("　　（　二者双極の偶像を突破しようとした時　）");

                            UpdateMainMessage("　　（　どうして俺はもっと考える事が出来なかったんだろう　）");

                            UpdateMainMessage("　　（　どうして俺は過ちを選択してしまったのだろう　）");

                            UpdateMainMessage("　　（　頬には、無数の赤い水玉模様　）");

                            UpdateMainMessage("　　（　手には、二つのカーネーション　）");

                            UpdateMainMessage("　　（　足元には、真紅の曼珠沙華が拡がった　）");

                            UpdateMainMessage("　　（　それと同時に　）");

                            UpdateMainMessage("　　（　最下層への階段を示す通路が開かれた　）");

                            ReturnToNormal();

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：（そんな風になってたまるか）");

                            UpdateMainMessage("アイン：（絶対に今度こそ）");

                            UpdateMainMessage("アイン：（突破してみせる）");
                            // GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin); // ここでは音を鳴らさない。
                        }
                        break;
                    #endregion
                    #region "真実の回想１０"
                    case 39:
                        if (!we.dungeonEvent487)
                        {
                            we.dungeonEvent487 = true;
                            GroundOne.StopDungeonMusic();
                            TurnToBlack();
                            UpdateMainMessage("　　　【その瞬間、アインの脳裏に激しい激痛が襲った！周囲の感覚が麻痺する！！】");

                            UpdateMainMessage("　　（　ラナが３階の試練の台座で球体に囚われ　）");

                            UpdateMainMessage("　　（　球体はその場で消失、ラナはこのダンジョンの囚われの身となった　）");

                            UpdateMainMessage("　　（　俺は・・・ひたすら前へと進めていった　）");

                            UpdateMainMessage("　　（　【考える】という思考形成を失った状態だった　）");

                            UpdateMainMessage("　　（　この奥の階層に囚われている。直観でそう思った　）");

                            UpdateMainMessage("　　（　この時点で、ダンジョンから引き返す事は許されなくなった　）");

                            UpdateMainMessage("　　（　絶対に、ラナを助けるんだ　）");

                            UpdateMainMessage("　　（　前へ進めるんだ　）");

                            UpdateMainMessage("　　（　４階では分かれ道らしい場所は特になく、ひたすら一本道だった　）");

                            UpdateMainMessage("　　（　看板内容に関しては、４階ではそこまでの不可解なものはなく　）");

                            UpdateMainMessage("　　（　扉と鍵の組み合わせも単調そのものであり、悩むポイントはない　）");

                            UpdateMainMessage("　　（　前へ進めるものの、俺にとってはやたらと長く感じられた　）");

                            UpdateMainMessage("　　（　こうしている間にも、時間が進み、ラナに何か良くない事が起きているかもしれない　）");

                            UpdateMainMessage("　　（　こんな所で時間を食っている暇はない　）");

                            UpdateMainMessage("　　（　時間は残されていないんだ　）");

                            UpdateMainMessage("　　（　歩を進めるごとにその感覚はどんどん強くなっていった　）");

                            UpdateMainMessage("　　（　早く助ける、その一心で歩を進めた　）");

                            UpdateMainMessage("　　（　レギィンアーゼという存在が俺の前に何度か立ちふさがった　）");

                            UpdateMainMessage("　　（　奴は俺に幾度となくこう問いかけた　）");

                            UpdateMainMessage("　　　レギィン：アイン・ウォーレンスよ。");

                            UpdateMainMessage("　　　レギィン：何ゆえに、歩を進めるか、答えよ。");

                            UpdateMainMessage("　　（　それに対して、俺がどう答えようとも奴の最後の回答は同じだった　）");

                            UpdateMainMessage("　　 レギィン：愚かなり、アイン・ウォーレンス。");

                            UpdateMainMessage("　　（　奴の問いかけの意図は、薄々分かっていた　）");

                            UpdateMainMessage("　　（　問いの本質は、ラナを助けるかどうかという事に関連するのではなく　）");

                            UpdateMainMessage("　　（　そもそも、このダンジョンに赴いた俺自身の意志に対して聞いていたんだ　）");

                            UpdateMainMessage("　　（　だが、俺にその問いの本質を考える余力・余裕は残されていなかった　）");

                            UpdateMainMessage("　　（　奴の問いかけは半ば無視し　）");

                            UpdateMainMessage("　　（　歩を進め続けた　）");

                            UpdateMainMessage("　　（　そして・・・　）");

                            UpdateMainMessage("　　（　通路の前には、剣が一つ　）");

                            UpdateMainMessage("　　（　そして、その奥に二つの像が現れた　）");

                            UpdateMainMessage("　　（　俺は、この剣で・・・　）");

                            ReturnToNormal();

                            UpdateMainMessage("アイン：（・・・　・・・）");

                            UpdateMainMessage("アイン：（行くぜ）");
                            // GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin); // ここでは音を鳴らさない。
                        }
                        break;
                    #endregion
                    #region "看板１-２"
                    case 40:
                        if (!we.dungeonEvent406)
                        {
                            we.dungeonEvent406 = true;

                            UpdateMainMessage("アイン：おっ、看板だな。どれどれ。");

                            UpdateMainMessage("　　　　『森の細道では一本道、ダンジョン迷宮では分岐が存在する』");

                            UpdateMainMessage("アイン：こ・・・これって・・・");

                            UpdateMainMessage("ラナ：ダンジョン迷宮ってここの事かしら？");

                            UpdateMainMessage("アイン：ああ、多分な。");

                            UpdateMainMessage("ラナ：森の細道って今通っているここよね。");

                            UpdateMainMessage("アイン：ああ、そうだな。");

                            UpdateMainMessage("ラナ：ねえ、何か思い当たるフシでもあるわけ？");

                            UpdateMainMessage("アイン：いや・・・");

                            UpdateMainMessage("ラナ：ほおら、やっぱり何かあるんでしょ。");

                            UpdateMainMessage("アイン：ハハ・・・そうかもな。");

                            UpdateMainMessage("ラナ：アインってそういう時絶対教えてくれないのよね。");

                            UpdateMainMessage("アイン：わ、悪ぃ・・・先へ進めようぜ。");

                            UpdateMainMessage("ラナ：ハイハイ。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『森の細道では一本道、ダンジョン迷宮では分岐が存在する』", true);
                        }
                        break;
                    #endregion
                    #region "看板１-３"
                    case 41:
                        if (!we.dungeonEvent409)
                        {
                            we.dungeonEvent409 = true;

                            UpdateMainMessage("アイン：看板か。どれどれ。");

                            UpdateMainMessage("　　　　『森で失いしは、フェルトゥーシュの剣』");

                            UpdateMainMessage("アイン：フェルトゥーシュの・・・剣・・・");

                            UpdateMainMessage("アイン：・・・");

                            UpdateMainMessage("ラナ：やけに考え込んでるわね。");

                            UpdateMainMessage("アイン：いや、フェルトゥーシュってさ。");

                            UpdateMainMessage("アイン：誰が持ってたんだろうなって、ふと思ったのさ。");

                            UpdateMainMessage("アイン：ラナ、お前は知ってるか？");

                            UpdateMainMessage("ラナ：えっ、知らないわよ。");

                            UpdateMainMessage("アイン：そうか・・・");

                            UpdateMainMessage("アイン：まあ、先へ進めてみるしかなさそうだな。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『森で失いしは、フェルトゥーシュの剣』", true);
                        }
                        break;
                    #endregion
                    #region "看板１-４"
                    case 42:
                        if (!we.dungeonEvent411)
                        {
                            we.dungeonEvent411 = true;

                            UpdateMainMessage("アイン：看板か。どれどれ。");

                            UpdateMainMessage("　　　　『森は剣と共に、真実を覆い隠す』");

                            UpdateMainMessage("アイン：どういう意味なんだ、これは。");

                            UpdateMainMessage("ラナ：何かの一節みたいな感じね。");

                            UpdateMainMessage("アイン：設問系統じゃなさそうだな、どうも・・・");

                            UpdateMainMessage("ラナ：あんまりそこまで深い意味はないんじゃない？エスミリアの森林を表現してるだけだと思うけど");

                            UpdateMainMessage("アイン：ああ、そうかもな。");

                            UpdateMainMessage("アイン：しかし、クネクネとして道のりの割には一本道だよな。");

                            UpdateMainMessage("ラナ：エスミリアの奥にある森林って、ちょうどこんな感じだったわね。");

                            UpdateMainMessage("アイン：ラナ、お前あの場所知ってるのか？");

                            UpdateMainMessage("ラナ：もちろんよ、あそこは希少価値の高い薬草が取れる場所だし、よく行ってたわ。");

                            UpdateMainMessage("アイン：へえ、そうだったのか・・・知らなかったな。");

                            UpdateMainMessage("ラナ：アインこそ、あの森林には行った事あるの？");

                            UpdateMainMessage("アイン：俺か・・・俺はまあ・・・");

                            UpdateMainMessage("アイン：何となく、思い出せねえ・・・");

                            UpdateMainMessage("ラナ：それって、行った事無いんじゃないの？");

                            UpdateMainMessage("アイン：いや、何となく引っかかりは覚えてるんだが");

                            UpdateMainMessage("アイン：ハッキリとこう情景が浮かんでこないんだよ。");

                            UpdateMainMessage("ラナ：アバウトね・・・まあ良いけど。");

                            UpdateMainMessage("アイン：まあ、このまま進めてみようぜ。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『森は剣と共に、真実を覆い隠す』", true);
                        }

                        break;
                    #endregion
                    #region "看板１-５"
                    case 43:
                        if (!we.dungeonEvent413)
                        {
                            we.dungeonEvent413 = true;

                            UpdateMainMessage("アイン：看板か。どれどれ。");

                            UpdateMainMessage("　　　　『隠された真実への記憶は、森の奥底に眠る』");

                            UpdateMainMessage("アイン：森の奥底・・・って、この先の事か。");

                            UpdateMainMessage("ラナ：ねえ、アイン。");

                            UpdateMainMessage("アイン：ん、なんだ？");

                            UpdateMainMessage("ラナ：森林にはどういった経緯で出向いたのかは覚えてないわけ？");

                            UpdateMainMessage("アイン：そうなんだよなあ・・・それがさ。");

                            UpdateMainMessage("アイン：何か誰かに誘われて行った気もするんだよ。");

                            UpdateMainMessage("ラナ：誘われたの？　誰に？");

                            UpdateMainMessage("アイン：あ〜・・・");

                            UpdateMainMessage("アイン：誰だっけ・・・");

                            UpdateMainMessage("ラナ：思い出せないけど、確かなの？");

                            UpdateMainMessage("アイン：ああ、多分な。");

                            UpdateMainMessage("アイン：まあ、進めてるうちに思い出せるかも知れねえ。ここは先に進めようぜ。");

                            UpdateMainMessage("ラナ：え、ええ・・・");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『隠された真実への記憶は、森の奥底に眠る』", true);
                        }
                        break;
                    #endregion
                    #region "看板１-６"
                    case 44:
                        if (!we.dungeonEvent416)
                        {
                            we.dungeonEvent416 = true;

                            UpdateMainMessage("アイン：看板だな、ええと・・・");

                            UpdateMainMessage("　　　　『呼び覚まされし、DUELの旋律』");

                            UpdateMainMessage("アイン：DUELの・・・旋律か・・・");

                            UpdateMainMessage("ラナ：DUELって、闘技場でやってるアレの事よね。");

                            UpdateMainMessage("アイン：ああ・・・");

                            UpdateMainMessage("ラナ：・・・ねえ、アイン");

                            UpdateMainMessage("アイン：何だ？");

                            UpdateMainMessage("ラナ：DUEL闘技場には、何で参加しようと思ったわけ？");

                            UpdateMainMessage("アイン：何でって言われてもな・・・ラナが出てみないかって言って来たのが発端かな。");

                            UpdateMainMessage("ラナ：えっ、ちょっとそれって私のせいで参加せざるを得なくなったって言いたいワケ？");

                            UpdateMainMessage("アイン：いやいやいや、別にそう言う意味じゃねえって。");

                            UpdateMainMessage("ラナ：ッフフ、嘘よウソ♪　確かに私が最初に持ちかけたもんね。");

                            UpdateMainMessage("アイン：い、いやいや・・・まあ・・・");

                            UpdateMainMessage("ラナ：・・・");

                            UpdateMainMessage("アイン：伝説と呼ばれるFiveSeekerに追いつけていない感じがした。");

                            UpdateMainMessage("アイン：驕るつもりはねえんだが、俺はFiveSeekerに追いつきたい。");

                            UpdateMainMessage("アイン：それが発端だな。");

                            UpdateMainMessage("ラナ：ランディスさんや、カールハンツ爵に勝負で勝ちたいって事かしら？");

                            UpdateMainMessage("アイン：いや、正直言って勝てる気は全くしねえな。");

                            UpdateMainMessage("アイン：腕を上げるだけじゃ、到底かなわない気がしてんだ、実際。");

                            UpdateMainMessage("ラナ：ふうん・・・そんなものかしら。");

                            UpdateMainMessage("アイン：ああ、だからせめてDUEL闘技場で実践を積めば、少しでも近づけるんじゃないかと思った。");

                            UpdateMainMessage("アイン：闘技場なら、運良くあのボケ師匠と対戦する機会も増えるわけだしな、一石二鳥なのさ。");

                            UpdateMainMessage("ラナ：ッフフ、面白い考え方ね♪");

                            UpdateMainMessage("アイン：ああ。こんな所だ。");
                            
                            UpdateMainMessage("アイン：しかし、こんな所の看板にDUELが出てくるってのがな・・・");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("ラナ：何か・・・思い出しそうなのね・・・？");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：先、進めようぜ。話はそれからだ。");

                            UpdateMainMessage("ラナ：ええ、分かったわ。");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『呼び覚まされし、DUELの旋律』", true);
                        }
                        break;
                    #endregion
                    #region "看板１-７"
                    case 45:
                        if (!we.dungeonEvent418)
                        {
                            we.dungeonEvent418 = true;

                            UpdateMainMessage("アイン：ふう、看板だな。どれどれ・・・");

                            UpdateMainMessage("　　　　『その特性、神々の遺産を超えるものなり』");

                            UpdateMainMessage("ラナ：これはまた、よくわからない内容になってきたわね。");

                            UpdateMainMessage("ラナ：アイン、何か思い当たる所はある？");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("　　　【　アインは、すぅっとした鋭い目付きになっていた　】");

                            UpdateMainMessage("アイン：ああ・・・ある");

                            UpdateMainMessage("アイン：多分、神剣フェルトゥーシュの事だ。");

                            UpdateMainMessage("ラナ：ふうん、そうなの？");

                            UpdateMainMessage("アイン：ああ、あの剣に関して、俺は途中で気づき始めたんだ。");

                            UpdateMainMessage("アイン：あの神剣は、成長する。");

                            UpdateMainMessage("ラナ：剣が成長・・・する？");

                            UpdateMainMessage("ラナ：ちょっと冗談言わないでよ。剣は物理的な物体でしか無いでしょ。");

                            UpdateMainMessage("アイン：ああ、確かにそうだ。");

                            UpdateMainMessage("アイン：物理的なモノなら、【成長】なんて単語は絶対にありえねえ。");

                            UpdateMainMessage("ラナ：えっ・・・");

                            UpdateMainMessage("ラナ：じゃあまさか・・・ウソでしょ？");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：先へ進めようと思う。答えはもうすぐそこだ。");

                            UpdateMainMessage("ラナ：え、ええ・・・");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『その特性、神々の遺産を超えるものなり』", true);
                        }
                        break;
                    #endregion
                    #region "看板１-８"
                    case 46:
                        if (!we.dungeonEvent420)
                        {
                            we.dungeonEvent420 = true;

                            UpdateMainMessage("アイン：看板か、よし・・・");

                            UpdateMainMessage("　　　　『古来より存在せしフェルトゥーシュ、絶対的な死と破滅を運命とする。』");

                            UpdateMainMessage("アイン：・・・やっぱり・・・");

                            UpdateMainMessage("アイン：俺、これをどっかで聞いた事があるんだ。");

                            UpdateMainMessage("アイン：もうすぐそこまで来てんだが・・・");

                            UpdateMainMessage("アイン：頭が・・・イッツツツ・・・");

                            UpdateMainMessage("ラナ：あんまり無理しないでよ。しんどかったら休もうね？");

                            UpdateMainMessage("アイン：ああ、いやいや、大丈夫だ。");

                            UpdateMainMessage("ラナ：本当？");

                            UpdateMainMessage("アイン：ああ、本当だ。");

                            UpdateMainMessage("アイン：そんな事より、フェルトゥーシュに関してだ。");

                            UpdateMainMessage("アイン：俺はあの剣の事を・・・");

                            UpdateMainMessage("アイン：思い出さなくちゃならないんだ。");

                            UpdateMainMessage("ラナ：でも、それを思い出そうとすると頭に激痛が走るわけでしょ？");

                            UpdateMainMessage("ラナ：もう・・・止めておいたら？");

                            UpdateMainMessage("アイン：ッツツ・・・");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：いいや、進めよう。");

                            UpdateMainMessage("アイン：悪いな、もうちょっとなんだ。すまねえが、頼む。");

                            UpdateMainMessage("ラナ：う、うん・・・");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『古来より存在せしフェルトゥーシュ、絶対的な死と破滅を運命とする。』", true);
                        }
                        break;
                    #endregion
                    #region "エリア１ボス前"
                    case 47:
                        if (!we.dungeonEvent423)
                        {
                            we.dungeonEvent423 = true;

                            UpdateUnknownTileArea42();

                            UpdateMainMessage("ラナ：あっ、扉が見えるわね。");

                            GroundOne.StopDungeonMusic();

                            UpdateMainMessage("アイン：ラナ、待て！");

                            UpdateMainMessage("ラナ：え？");

                            UpdateMainMessage("アイン：・・・居る。");

                            UpdateMainMessage("ラナ：ホント？");

                            UpdateMainMessage("アイン：ああ、暗くてよく見えないがな。");
                            
                            UpdateMainMessage("アイン：うっすらと黒い塊のようなモノがいるぜ。");

                            UpdateMainMessage("ラナ：・・・っあ、本当だわ。アンタよく分かるわね？");

                            GroundOne.PlayDungeonMusic(Database.BGM19, Database.BGM19LoopBegin);

                            UpdateMainMessage("　　【　その時、黒い塊が突然形状を変化させた！　】");

                            UpdateMainMessage("ラナ：ッワワ！！");

                            UpdateMainMessage("ラナ：きっ、気持ち悪いわね・・・もう・・・");

                            UpdateMainMessage("アイン：・・・ヒト・・・型か？");

                            UpdateMainMessage("　　【　ちょうどアインの背丈と同じぐらいの人型になった　】");

                            UpdateMainMessage("？？？：ヒトよ。");

                            UpdateMainMessage("？？？：何故、ここまで来たか答えよ。");

                            UpdateMainMessage("アイン：しゃ・・・喋ってきた！！");

                            UpdateMainMessage("アイン：てめえ、一体何者なんだ！？");

                            UpdateMainMessage("？？？：我が名は闇と焔を司りし者、レギィン・アーゼ。");

                            UpdateMainMessage("レギィン：このダンジョンにて理を守りし者。");

                            UpdateMainMessage("アイン：理を・・・守りし者？");

                            UpdateMainMessage("アイン：どういう意味だ？");

                            UpdateMainMessage("レギィン：この階層は理と真実を明らかにする。");

                            UpdateMainMessage("レギィン：答えよ、アイン・ウォーレンス。");

                            UpdateMainMessage("レギィン：何ゆえ、ここまで辿り着いたか、答えよ。");

                            UpdateMainMessage("アイン：何でって言われてもな・・・");

                            UpdateMainMessage("アイン：このダンジョンを制覇して、師匠に追いつきたい。");

                            UpdateMainMessage("レギィン：答えよ、アイン・ウォーレンス。");

                            UpdateMainMessage("アイン：っくそ・・・");

                            UpdateMainMessage("ラナ：アイン、これって通してくれないって事なんじゃない？");

                            UpdateMainMessage("アイン：そうかもしれねえな。");

                            UpdateMainMessage("レギィン：明確な解を持たぬ者、アイン・ウォーレンス。");

                            UpdateMainMessage("レギィン：ここで解を得ぬようであれば。");

                            UpdateMainMessage("レギィン：引き下がるがよい。");

                            UpdateMainMessage("レギィン：もしくは");

                            UpdateMainMessage("レギィン：ここで果てるがよい。");

                            UpdateMainMessage("レギィン：答えよ、アイン・ウォーレンス。");

                            GroundOne.StopDungeonMusic();

                            UpdateMainMessage("アイン：ッケ・・・ラナ、どうやら倒さなくちゃ駄目みたいだぜ。");

                            UpdateMainMessage("ラナ：そうね、ここは引き下がれない所よね。");

                            UpdateMainMessage("アイン：どうやら、あっちから仕掛けては来ないみたいだ。");

                            UpdateMainMessage("アイン：準備はいいか？");

                            UpdateMainMessage("ラナ：ええ、いつでもいいわよ。");

                            UpdateMainMessage("アイン：っしゃ、始めるぞ！");
                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "エリア１ボス"
                    case 48:
                        if (!we.dungeonEvent4_SlayBoss1)
                        {

                            UpdateMainMessage("アイン：ボスとの戦闘だ！気を引き締めていくぜ！", true);

                            bool result = EncountBattle(Database.ENEMY_BOSS_LEGIN_ARZE_1, String.Empty, String.Empty, false, false, false, false);
                            if (!result)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN, false);
                                this.dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                blueWallBottom[16 * Database.TRUTH_DUNGEON_COLUMN + 47] = false;
                                blueWallTop[17 * Database.TRUTH_DUNGEON_COLUMN + 47] = false;
                                dungeonField.Invalidate();

                                we.dungeonEvent4_SlayBoss1 = true;

                                UpdateMainMessage("アイン：っしゃ！　どうだ！！");

                                UpdateMainMessage("ラナ：アイン、見てあれ・・・");

                                UpdateMainMessage("アイン：なっ！？");

                                UpdateMainMessage("　　【　霧散した黒い粒子が再び人型を形成し始めた！　】");

                                UpdateMainMessage("レギィン：そのひと振り、無駄なコト。");

                                UpdateMainMessage("アイン：っくそ・・・ダメなのか。");

                                UpdateMainMessage("レギィン：何も知らぬ者、アイン・ウォーレンス。");

                                UpdateMainMessage("レギィン：何も持ちえぬ者、アイン・ウォーレンス。");

                                UpdateMainMessage("レギィン：この先、お主の今の状態で進むのであれば。");

                                UpdateMainMessage("レギィン：命は無いと知れ。");

                                UpdateMainMessage("レギィン：・・・");

                                UpdateMainMessage("　　【　人型をしていたレギィン・アーゼは再び空中へ飛散していった　】");

                                UpdateMainMessage("アイン：ふう・・・どうやら去ってくれたようだな。");

                                UpdateMainMessage("ラナ：何か倒した感じが全然しないわね。");

                                UpdateMainMessage("アイン：ああ、また何か出てきそうだな。");

                                UpdateMainMessage("ラナ：まあ、ここの扉だけは開けてくれたみたいね。");

                                UpdateMainMessage("アイン：おっ、本当だいつの間に。");

                                UpdateMainMessage("ラナ：最初の部屋に戻るみたいだけど・・・結局無駄骨だったのかしら？");

                                UpdateMainMessage("アイン：いや、そんな事はねえだろ。");

                                UpdateMainMessage("アイン：絶対に次への道のりが拓けるはずさ。");

                                UpdateMainMessage("ラナ：そうね、じゃあ部屋の中をくまなく探してみましょ♪");

                                UpdateMainMessage("アイン：オーケー！");
                            }
                        }
                        break;
                    #endregion
                    #region "エリア１から２への通路"
                    case 49:
                        if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd && GroundOne.WE2.SeekerEvent1)
                        {
                            UpdateMainMessage("　　（　・・・最下層へ・・・　）");
                            UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            dungeonField.Invalidate();
                            UpdateMainMessage("", true);
                        }
                        else if (we.dungeonEvent4_SlayBoss1)
                        {
                            if (!we.dungeonEvent424)
                            {
                                we.dungeonEvent424 = true;

                                UpdateMainMessage("アイン：・・・ここだな。");

                                UpdateMainMessage("ラナ：え？");

                                UpdateMainMessage("アイン：抜けられる、多分。");

                                UpdateMainMessage("　　【　アインの触れた壁は、うっすらと光りだし始めた　】");

                                UpdateMainMessage("ラナ：ワッ、光ったわね・・・");

                                UpdateMainMessage("ラナ：って、ちょっとアインあんた何でそういうのわかるのよ。ちゃんと壁を調べたわけ？");

                                UpdateMainMessage("アイン：この感覚・・・");

                                UpdateMainMessage("アイン：師匠もきっと、こういう風な感じだったんじゃねえかな。");

                                UpdateMainMessage("ラナ：ランディスさんの事？");

                                UpdateMainMessage("アイン：ああ、何度か教えてもらった事がある。");

                                UpdateMainMessage("アイン：解を探し歩くんじゃなくて");

                                dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 19 + 44].Name = Database.TILEINFO_13;
                                dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 19 + 44].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                                tileInfo4[Database.TRUTH_DUNGEON_COLUMN * 19 + 44] = Database.TILEINFO_13;
                                dungeonField.Invalidate();

                                UpdateMainMessage("　　【　壁は淡い光とともに、消滅した　】");

                                UpdateUnknownTileArea43();
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：解を見つけていくんだ。");

                                UpdateMainMessage("ラナ：し・・・信じられないわ。");

                                UpdateMainMessage("ラナ：ちゃんと調べたわけ？");

                                UpdateMainMessage("アイン：いや、調べてはいないな。");

                                UpdateMainMessage("ラナ：じゃどうやって分かったわけ？");

                                UpdateMainMessage("アイン：この辺だって分かったんだ。");

                                UpdateMainMessage("ラナ：答えになってないからね、それ。・・・どういう思考回路なのよホント。");

                                UpdateMainMessage("アイン：ッハハ・・・悪い悪い、見つかったんだしイイじゃねえか。");

                                UpdateMainMessage("ラナ：まあ良いけど、次からはどうやって見つけたかちゃんと教えてよね。");

                                UpdateMainMessage("アイン：ああ。");
                            }
                        }
                        break;
                    #endregion
                    #region "エリア２スタート"
                    case 50:
                        if (!we.dungeonEvent425)
                        {
                            we.dungeonEvent425 = true;
                            UpdateUnknownTileArea(knownTileInfo4, 18, 22, 17, 21);
                        }
                        break;
                    #endregion
                    #region "エリア２看板"
                    case 51:
                        if (!we.dungeonEvent426)
                        {
                            we.dungeonEvent426 = true;
                            UpdateMainMessage("アイン：看板だな、どれどれ・・・");

                            UpdateMainMessage("　　　　『未来と過去の断片化と記録の再結合』");

                            UpdateMainMessage("アイン：断片化・・・再結合・・・ってか");

                            UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                            blueWallRight[19 * Database.TRUTH_DUNGEON_COLUMN + 17] = false;
                            blueWallLeft[19 * Database.TRUTH_DUNGEON_COLUMN + 18] = false;
                            dungeonField.Invalidate();

                            UpdateMainMessage("ラナ：何か・・・");

                            UpdateMainMessage("アイン：ん？");

                            UpdateMainMessage("ラナ：怖いわね。何となくだけど・・・");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：ああ、ちょっと不気味な感じだな。");

                            UpdateMainMessage("ラナ：ねえ、アイン。");

                            UpdateMainMessage("アイン：行こうぜ、進めるしかねえんだ。");

                            UpdateMainMessage("ラナ：え、ええ・・・");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『未来と過去の断片化と記録の再結合』", true);
                        }
                        break;
                    #endregion
                    #region "エリア２-１（看板）"
                    case 52:
                        if (!we.dungeonEvent427)
                        {
                            we.dungeonEvent427 = true;

                            UpdateMainMessage("アイン：おっと、看板だ。読んでみるぜ。");

                            UpdateMainMessage("　　　　『宝物庫にて、鍵を拾い集めよ』");

                            UpdateMainMessage("　　（その看板を読んだ瞬間、壁面一体が《宮殿の地下宝物庫》の風景として映し出された）");

                            UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                            blueWallRight[8 * Database.TRUTH_DUNGEON_COLUMN + 10] = false;
                            blueWallLeft[8 * Database.TRUTH_DUNGEON_COLUMN + 11] = false;
                            UpdateUnknownTileArea(knownTileInfo4, 6, 10, 8, 8);
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：宝物庫！！　っしゃあ！！");

                            UpdateMainMessage("ラナ：ちょっと、はしゃがないでよね。");

                            UpdateMainMessage("アイン：ッハハ、悪い悪い。");

                            UpdateMainMessage("アイン：でも、これは期待できる内容だぜ、全部しらみ潰しに探してみようぜ。");

                            UpdateMainMessage("ラナ：う、うん・・・そうね。");
                        }
                        else
                        {
                            if (we.dungeonEvent435)
                            {
                                UpdateMainMessage("　　　　『必然性と偶発性に起因する、真実の再統合』", true);
                            }
                            else if (we.dungeonEvent431)
                            {
                                UpdateMainMessage("　　　　『生と死にまつわる、事実の再結合』", true);
                            }
                            else
                            {
                                UpdateMainMessage("　　　　『宝物庫にて、鍵を拾い集めよ』", true);
                            }
                        }
                        break;
                    #endregion
                    #region "扉の鍵（エリア２Ｘ）"
                    case 53:
                        if (!we.dungeonEvent4_key2_1)
                        {
                            we.dungeonEvent4_key2_1 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【１】を手に入れました』");

                            UpdateMainMessage("アイン：鍵だな。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    case 54:
                        if (!we.dungeonEvent4_key2_2)
                        {
                            we.dungeonEvent4_key2_2 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【２】を手に入れました』");

                            UpdateMainMessage("アイン：鍵だな。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    case 55:
                        if (!we.dungeonEvent4_key2_3)
                        {
                            we.dungeonEvent4_key2_3 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【３】を手に入れました』");

                            UpdateMainMessage("アイン：鍵だな。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    case 56:
                        if (!we.dungeonEvent4_key2_4)
                        {
                            we.dungeonEvent4_key2_4 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【４】を手に入れました』");

                            UpdateMainMessage("アイン：鍵だな。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    case 57:
                        if (!we.dungeonEvent4_key2_5)
                        {
                            we.dungeonEvent4_key2_5 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【５】を手に入れました』");

                            UpdateMainMessage("アイン：鍵だな。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }
                        break;
                    #endregion
                    #region "宝箱（エリア２Ｘ）"
                    case 58:
                        we.TruthTreasure409 = GetTreasure(Database.COMMON_MUKEI_SAKAZUKI);
                        break;
                    case 59:
                        we.TruthTreasure410 = GetTreasure(Database.COMMON_ELDER_PERSPECTIVE_GRASS);
                        break;
                    case 60:
                        we.TruthTreasure411 = GetTreasure(Database.RARE_SHADOW_BIBLE);
                        break;
                    case 61:
                        we.TruthTreasure412 = GetTreasure(Database.RARE_MIND_ILLUSION);
                        break;
                    case 62:
                        we.TruthTreasure413 = GetTreasure(Database.COMMON_ANGEL_DUST);
                        break;
                    case 63:
                        we.TruthTreasure414 = GetTreasure(Database.GROWTH_LIQUID4_STRENGTH);
                        break;
                    case 64:
                        we.TruthTreasure415 = GetTreasure(Database.COMMON_SILVER_RING_3);
                        break;
                    case 65:
                        we.TruthTreasure416 = GetTreasure(Database.RARE_BLIND_NEEDLE);
                        break;
                    case 66:
                        we.TruthTreasure417 = GetTreasure(Database.COMMON_PURPLE_FLOAT_STONE);
                        break;
                    case 67:
                        we.TruthTreasure418 = GetTreasure(Database.COMMON_MURYOU_CROSS);
                        break;
                    case 68:
                        we.TruthTreasure419 = GetTreasure(Database.COMMON_HUGE_BLUE_POTION);
                        break;
                    case 69:
                        we.TruthTreasure420 = GetTreasure(Database.COMMON_GREEN_FLOAT_STONE);
                        break;
                    case 70:
                        we.TruthTreasure421 = GetTreasure(Database.COMMON_SILVER_RING_7);
                        break;
                    case 71:
                        we.TruthTreasure422 = GetTreasure(Database.RARE_ANGEL_CONTRACT);
                        break;
                    #endregion
                    #region "扉Ｘ１(入口)"
                    case 72:
                        if (!we.dungeonEvent428)
                        {
                            we.dungeonEvent428 = true;

                            UpdateMainMessage("アイン：っと、扉に鍵穴がついてるな。");

                            UpdateMainMessage("ラナ： 鍵穴・・・５つもあるわよ。");

                            UpdateMainMessage("アイン：って事は鍵を５つも探してこいって話か、面倒だな。");

                            UpdateMainMessage("ラナ： 地道に順番に回って行った方が良さそうね。");

                            UpdateMainMessage("アイン：ああ、それに、普通の隠されたお宝があるかも知れねえしな！");

                            UpdateMainMessage("ラナ： 普通の隠されたお宝なんて、そんなご都合主義なのあるわけないでしょ。");

                            UpdateMainMessage("アイン：タハハ・・・まあとりあえずしらみ潰しにやっていくとするか。");

                            UpdateMainMessage("ラナ： うん、そうしましょ。");

                        }
                        else
                        {
                            if (!we.dungeonEvent429)
                            {
                                UpdateMainMessage("　　　　『鍵穴が空いている。５箇所すべてを埋めれば扉は開きそうだ。』");

                                int keyNum = 0;
                                if (we.dungeonEvent4_key2_1) { keyNum++; }
                                if (we.dungeonEvent4_key2_2) { keyNum++; }
                                if (we.dungeonEvent4_key2_3) { keyNum++; }
                                if (we.dungeonEvent4_key2_4) { keyNum++; }
                                if (we.dungeonEvent4_key2_5) { keyNum++; }

                                if (keyNum <= 0)
                                {
                                    UpdateMainMessage("アイン：まだ鍵は集めてねえな。さっさと探すとするか。");
                                }
                                else if (keyNum == 1)
                                {
                                    UpdateMainMessage("アイン：まだ１つしか持ってねえ。他の４つを探すとするか。");
                                }
                                else if (keyNum == 2)
                                {
                                    UpdateMainMessage("アイン：まだ２つしか持ってねえ。他の３つを探すとするか。");
                                }
                                else if (keyNum == 3)
                                {
                                    UpdateMainMessage("アイン：まだ３つしか持ってねえ。他の２つを探すとするか。");
                                }
                                else if (keyNum == 4)
                                {
                                    UpdateMainMessage("アイン：ようやく４つだ。あと１つ探すとするか。");
                                }
                                else if (keyNum == 5)
                                {
                                    we.dungeonEvent429 = true;
                                    UpdateMainMessage("アイン：おし、５つ揃ったぜ。ラナ、開けてみてくれないか？");

                                    UpdateMainMessage("ラナ：ええ、ちょっと待ってね。");

                                    UpdateMainMessage("アイン：・・・");

                                    UpdateMainMessage("ラナ：何か・・・微妙に形が違うのね、この５つ・・・");

                                    UpdateMainMessage("アイン：そうなのか？");

                                    UpdateMainMessage("ラナ：ええ、鍵が合う場所もキッチリ決まってるみたいね。");

                                    UpdateMainMessage("ラナ：っよし、これで良いかな。");

                                    UpdateMainMessage("　　　　『ッギ・・・ッギギギイイィィィ・・・』");

                                    blueWallTop[8 * Database.TRUTH_DUNGEON_COLUMN + 6] = false;
                                    blueWallBottom[7 * Database.TRUTH_DUNGEON_COLUMN + 6] = false;
                                    UpdateUnknownTile();
                                    dungeonField.Invalidate();

                                    UpdateMainMessage("アイン：おっ、開いたぜ！やったな、ラナ！");

                                    UpdateMainMessage("ラナ：何言ってんのよ、鍵を合わせて開けただけよ。");

                                    UpdateMainMessage("アイン：いやいや、こういうのは本当助かるぜ、サンキュー。");

                                    UpdateMainMessage("ラナ：アイン。ちょっと良いかしら。");

                                    UpdateMainMessage("アイン：ん、なんだ？");

                                    UpdateMainMessage("ラナ：アインはこの宝物庫を見て何か思う事はない？");

                                    UpdateMainMessage("アイン：思う事？？");

                                    UpdateMainMessage("ラナ：例えばこう・・・何か引っかかるとか、直感的に何か感じるとか。");

                                    UpdateMainMessage("アイン：いや、そういうのは今回は無いぜ。");

                                    UpdateMainMessage("アイン：ってか、俺っていつもそんな訳分かんねえ感じなのか？");

                                    UpdateMainMessage("ラナ：なによ今更。いつもそうじゃない。");

                                    UpdateMainMessage("アイン：いやいや、いつもそういう訳じゃないんだけどな・・・");

                                    UpdateMainMessage("アイン：・・・　・・・");

                                    UpdateMainMessage("アイン：ここまで来たんだ。");

                                    UpdateMainMessage("アイン：どんなものが飛び込んで来ようとも、俺は逃げない。");

                                    UpdateMainMessage("ラナ：・・・うん・・・");

                                    UpdateMainMessage("アイン：ラナ、任せておけって。心配するな。");

                                    UpdateMainMessage("ラナ：う、うん。");

                                    UpdateMainMessage("アイン：っさ、行くぞ！");
                                }
                            }
                        }
                        break;
                    #endregion
                    #region "扉Ｘ２(出口)"
                    case 73:
                        if (!we.dungeonEvent431)
                        {
                            we.dungeonEvent431 = true;

                            UpdateMainMessage("アイン：っお、扉だな。");

                            UpdateMainMessage("ラナ：特に仕掛けはなさそうよ。開いてみましょ。");

                            UpdateMainMessage("アイン：っしゃ、じゃあ行くぜ。");

                            blueWallBottom[7 * Database.TRUTH_DUNGEON_COLUMN + 10] = false;
                            blueWallTop[8 * Database.TRUTH_DUNGEON_COLUMN + 10] = false;
                            UpdateUnknownTile();
                            dungeonField.Invalidate();
                            UpdateMainMessage("　　　　『ッバタン！』");

                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：ん？なんだ、元の通路に戻っただけみたいだな。");

                            UpdateMainMessage("ラナ：アイン・・・見て、看板・・・");

                            UpdateMainMessage("アイン：看板か？");

                            UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            dungeonField.Invalidate();

                            UpdateMainMessage("　　　　『生と死にまつわる、事実の再結合』");

                            UpdateMainMessage("アイン：・・・ああ、確かに変化してるな。");

                            UpdateMainMessage("アイン：生と・・・死・・・ってか。");

                            UpdateMainMessage("　　　　『ッギ・・・ッギギギイイィィィ・・・』");

                            blueWallBottom[7 * Database.TRUTH_DUNGEON_COLUMN + 11] = false;
                            blueWallTop[8 * Database.TRUTH_DUNGEON_COLUMN + 11] = false;
                            UpdateUnknownTile();
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：おし、次へのルートか。");

                            UpdateMainMessage("アイン：っつ、頭が・・・いつつ・・・");

                            UpdateMainMessage("ラナ：ねえ、やっぱり・・・");

                            UpdateMainMessage("アイン：大丈夫だって、ホラ行くぞ！");

                            UpdateMainMessage("ラナ：うん・・・");
                        }
                        break;
                    #endregion
                    #region "鍵（エリア２Ｙ）"
                    case 74:
                        if (!we.dungeonEvent4_key22_1)
                        {
                            we.dungeonEvent4_key22_1 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【１】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }                      
                        break;
                    case 75:
                        if (!we.dungeonEvent4_key22_2)
                        {
                            we.dungeonEvent4_key22_2 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【２】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }                      
                        break;
                    case 76:
                        if (!we.dungeonEvent4_key22_3)
                        {
                            we.dungeonEvent4_key22_3 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【３】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }                      
                        break;
                    case 77:
                        if (!we.dungeonEvent4_key22_4)
                        {
                            we.dungeonEvent4_key22_4 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【４】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }                      
                        break;
                    case 78:
                        if (!we.dungeonEvent4_key22_5)
                        {
                            we.dungeonEvent4_key22_5 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【５】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }                      
                        break;
                    #endregion
                    #region "宝箱（エリア２Ｙ）"
                    case 79:
                        we.TruthTreasure423 = GetTreasure(Database.COMMON_YELLOW_FLOAT_STONE);
                        break;
                    case 80:
                        we.TruthTreasure424 = GetTreasure(Database.RARE_DOMINATION_BRAVE_ARMOR);
                        break;
                    case 81:
                        we.TruthTreasure425 = GetTreasure(Database.GROWTH_LIQUID4_AGILITY);
                        break;
                    case 82:
                        we.TruthTreasure426 = GetTreasure(Database.COMMON_HUGE_RED_POTION);
                        break;
                    case 83:
                        we.TruthTreasure427 = GetTreasure(Database.COMMON_BULLET_KNUCKLE);
                        break;
                    case 84:
                        we.TruthTreasure428 = GetTreasure(Database.COMMON_SILVER_RING_4);
                        break;
                    case 85:
                        we.TruthTreasure429 = GetTreasure(Database.RARE_SHINING_AETHER);
                        break;
                    case 86:
                        we.TruthTreasure430 = GetTreasure(Database.RARE_COLORESS_ANTIDOTE);
                        break;
                    case 87:
                        we.TruthTreasure431 = GetTreasure(Database.RARE_DEVIL_SUMMONER_TOME);
                        break;
                    case 88:
                        we.TruthTreasure432 = GetTreasure(Database.COMMON_INITIATE_SWORD);
                        break;
                    case 89:
                        we.TruthTreasure433 = GetTreasure(Database.COMMON_ROYAL_GUARD_RING);
                        break;
                    case 90:
                        we.TruthTreasure434 = GetTreasure(Database.RARE_CORE_ESSENCE_CHANNEL);
                        break;
                    #endregion
                    #region "扉Ｙ１(入口)"
                    case 91:
                        if (!we.dungeonEvent432)
                        {
                            we.dungeonEvent432 = true;

                            UpdateMainMessage("アイン：っと、扉に鍵穴があるな。");

                            UpdateMainMessage("ラナ： 前と同じね、鍵穴は５つみたい。");

                            UpdateMainMessage("アイン：っしゃ、じゃあ鍵を探し回るとするか！");
                        }
                        else
                        {
                            if (!we.dungeonEvent433)
                            {
                                UpdateMainMessage("　　　　『鍵穴が空いている。５箇所すべてを埋めれば扉は開きそうだ。』");

                                int keyNum = 0;
                                if (we.dungeonEvent4_key22_1) { keyNum++; }
                                if (we.dungeonEvent4_key22_2) { keyNum++; }
                                if (we.dungeonEvent4_key22_3) { keyNum++; }
                                if (we.dungeonEvent4_key22_4) { keyNum++; }
                                if (we.dungeonEvent4_key22_5) { keyNum++; }

                                if (keyNum <= 0)
                                {
                                    UpdateMainMessage("アイン：まだ鍵は集めてねえな。さっさと探すとするか。");
                                }
                                else if (keyNum == 1)
                                {
                                    UpdateMainMessage("アイン：まだ１つしか持ってねえ。他の４つを探すとするか。");
                                }
                                else if (keyNum == 2)
                                {
                                    UpdateMainMessage("アイン：まだ２つしか持ってねえ。他の３つを探すとするか。");
                                }
                                else if (keyNum == 3)
                                {
                                    UpdateMainMessage("アイン：まだ３つしか持ってねえ。他の２つを探すとするか。");
                                }
                                else if (keyNum == 4)
                                {
                                    UpdateMainMessage("アイン：ようやく４つだ。あと１つ探すとするか。");
                                }
                                else if (keyNum == 5)
                                {
                                    we.dungeonEvent433 = true;
                                    UpdateMainMessage("アイン：おし、５つ揃ったぜ。ラナ、開けてみてくれないか？");

                                    UpdateMainMessage("ラナ：ええ、ちょっと待ってね。");

                                    UpdateMainMessage("　　　　『ッギ・・・ッギギギイイィィィ・・・』");

                                    blueWallRight[2 * Database.TRUTH_DUNGEON_COLUMN + 11] = false;
                                    blueWallLeft[2 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;
                                    UpdateUnknownTile();
                                    dungeonField.Invalidate();

                                    UpdateMainMessage("アイン：おっ、開いたぜ！サンキュー！");

                                    UpdateMainMessage("ラナ：ねえ、アイン・・・");

                                    UpdateMainMessage("アイン：・・・　・・・");

                                    UpdateMainMessage("アイン：行くぞ、任せておけ。");

                                    UpdateMainMessage("ラナ：うん・・・");
                                }
                            }
                        }
                        break;
                    #endregion
                    #region "扉Ｙ２(出口)"
                    case 92:
                       if (!we.dungeonEvent435)
                        {
                            we.dungeonEvent435 = true;

                            UpdateMainMessage("アイン：おし、扉だな。");

                            UpdateMainMessage("ラナ：仕掛けはないみたいね。開いてみましょ。");

                            UpdateMainMessage("アイン：っしゃ、開くぜ。");

                            blueWallLeft[7 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;
                            blueWallRight[7 * Database.TRUTH_DUNGEON_COLUMN + 11] = false;
                            UpdateUnknownTile();
                            dungeonField.Invalidate();
                            UpdateMainMessage("　　　　『ッバタン！』");

                            UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：やっぱり元の通路に戻るだけか。");

                            UpdateMainMessage("ラナ：看板、変わってるみたいよ。");

                            UpdateMainMessage("アイン：看板か、どれどれ");

                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                            dungeonField.Invalidate();

                            UpdateMainMessage("　　　　『必然性と偶発性に起因する、真実の再統合』");

                            UpdateMainMessage("アイン：必然性・・・偶発性・・・か。");
                            
                            UpdateMainMessage("アイン：・・・なるほどな・・・");

                            UpdateMainMessage("　　　　『ッギ・・・ッギギギイイィィィ・・・』");

                            blueWallLeft[8 * Database.TRUTH_DUNGEON_COLUMN + 12] = false;
                            blueWallRight[8 * Database.TRUTH_DUNGEON_COLUMN + 11] = false;
                            UpdateUnknownTile();
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：おし、次のルートに入ろうぜ。");

                            UpdateMainMessage("ラナ：う、うん・・・");
                        }
                        break;
                    #endregion
                    #region "鍵（エリア２Ｚ）"
                    case 93:
                        if (!we.dungeonEvent4_key23_1)
                        {
                            we.dungeonEvent4_key23_1 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【１】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }                      
                        break;
                    case 94:
                        if (!we.dungeonEvent4_key23_2)
                        {
                            we.dungeonEvent4_key23_2 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【２】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }                      
                        break;
                    case 95:
                        if (!we.dungeonEvent4_key23_3)
                        {
                            we.dungeonEvent4_key23_3 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【３】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }                      
                        break;
                    case 96:
                        if (!we.dungeonEvent4_key23_4)
                        {
                            we.dungeonEvent4_key23_4 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【４】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }                      
                        break;
                    case 97:
                        if (!we.dungeonEvent4_key23_5)
                        {
                            we.dungeonEvent4_key23_5 = true;
                            UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");

                            UpdateMainMessage("『扉の鍵【５】を手に入れました』");

                            UpdateMainMessage("アイン：鍵か。ラナ、頼んだぜ。");

                            UpdateMainMessage("ラナ：了解よ。");
                        }                      
                        break;
                    #endregion
                    #region "宝箱（エリア２Ｚ）"
                    case 98:
                        we.TruthTreasure435 = GetTreasure(Database.RARE_ESSENCE_OF_ADAMANTINE);
                        break;
                    case 99:
                        we.TruthTreasure436 = GetTreasure(Database.COMMON_HUGE_GREEN_POTION);
                        break;
                    case 100:
                        we.TruthTreasure437 = GetTreasure(Database.RARE_DEMON_HORN);
                        break;
                    case 101:
                        we.TruthTreasure438 = GetTreasure(Database.GROWTH_LIQUID4_INTELLIGENCE);
                        break;
                    case 102:
                        we.TruthTreasure439 = GetTreasure(Database.RARE_BLACK_ELIXIR);
                        break;
                    case 103:
                        we.TruthTreasure440 = GetTreasure(Database.RARE_DARK_ANGEL_ROBE);
                        break;
                    case 104:
                        we.TruthTreasure441 = GetTreasure(Database.RARE_DOOMBRINGER_KAKERA);
                        break;
                    case 105:
                        we.TruthTreasure442 = GetTreasure(Database.RARE_JOUKA_TANZOU);
                        break;
                    #endregion
                    #region "扉Ｚ１(入口)"
                    case 106:
                        if (!we.dungeonEvent436)
                        {
                            we.dungeonEvent436 = true;

                            UpdateMainMessage("アイン：っと、扉に鍵穴があるな。");

                            UpdateMainMessage("ラナ： ここも一緒みたいよ、鍵穴はちょうど５つ。");

                            UpdateMainMessage("アイン：っしゃ、鍵を探すぜ！");
                        }
                        else
                        {
                            if (!we.dungeonEvent437)
                            {
                                UpdateMainMessage("　　　　『鍵穴が空いている。５箇所すべてを埋めれば扉は開きそうだ。』");

                                int keyNum = 0;
                                if (we.dungeonEvent4_key23_1) { keyNum++; }
                                if (we.dungeonEvent4_key23_2) { keyNum++; }
                                if (we.dungeonEvent4_key23_3) { keyNum++; }
                                if (we.dungeonEvent4_key23_4) { keyNum++; }
                                if (we.dungeonEvent4_key23_5) { keyNum++; }

                                if (keyNum <= 0)
                                {
                                    UpdateMainMessage("アイン：まだ鍵は集めてねえな。さっさと探すとするか。");
                                }
                                else if (keyNum == 1)
                                {
                                    UpdateMainMessage("アイン：まだ１つしか持ってねえ。他の４つを探すとするか。");
                                }
                                else if (keyNum == 2)
                                {
                                    UpdateMainMessage("アイン：まだ２つしか持ってねえ。他の３つを探すとするか。");
                                }
                                else if (keyNum == 3)
                                {
                                    UpdateMainMessage("アイン：まだ３つしか持ってねえ。他の２つを探すとするか。");
                                }
                                else if (keyNum == 4)
                                {
                                    UpdateMainMessage("アイン：ようやく４つだ。あと１つ探すとするか。");
                                }
                                else if (keyNum == 5)
                                {
                                    we.dungeonEvent437 = true;
                                    UpdateMainMessage("アイン：おし、５つ揃ったぜ。ラナ、開けてみてくれないか？");

                                    UpdateMainMessage("ラナ：ええ、ちょっと待ってね。");

                                    UpdateMainMessage("　　　　『ッギ・・・ッギギギイイィィィ・・・』");

                                    blueWallBottom[13 * Database.TRUTH_DUNGEON_COLUMN + 16] = false;
                                    blueWallTop[14 * Database.TRUTH_DUNGEON_COLUMN + 16] = false;
                                    UpdateUnknownTile();
                                    dungeonField.Invalidate();

                                    UpdateMainMessage("アイン：おし、開いたみたいだな。");

                                    UpdateMainMessage("ラナ：・・・");

                                    UpdateMainMessage("アイン：・・・");

                                    UpdateMainMessage("アイン：進めるしかないんだ。");

                                    UpdateMainMessage("ラナ：・・・わかってるわよ、もう止めても無駄なんでしょ・・・");

                                    UpdateMainMessage("アイン：・・・すまねえって言ってるじゃねえか。");
                                    
                                    UpdateMainMessage("アイン：ほらっ、行くぞ。");

                                    UpdateMainMessage("ラナ：うん・・・");
                                }
                            }
                        }
                        break;
                    #endregion
                    #region "エリア２ボス前"
                    case 107:
                        if (!we.dungeonEvent439)
                        {
                            we.dungeonEvent439 = true;

                            GroundOne.StopDungeonMusic();
                            GroundOne.PlayDungeonMusic(Database.BGM19, Database.BGM19LoopBegin);

                            UpdateMainMessage("ラナ：あっ・・・");

                            UpdateUnknownTileArea(knownTileInfo4, 17, 20, 16, 16); 

                            UpdateMainMessage("アイン：やっぱり、このタイミングで出てきたか・・・");

                            UpdateMainMessage("レギィン：我が名は闇と焔を司りし者、レギィン・アーゼ。");

                            UpdateMainMessage("レギィン：このダンジョンにて理を守りし者。");

                            UpdateMainMessage("レギィン：答えよ、アイン・ウォーレンス。");

                            UpdateMainMessage("レギィン：何ゆえに、歩を進めるか、答えよ。");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("アイン：俺が俺自身である事を証明するためだ。");

                            UpdateMainMessage("アイン：そこを通してくれ。");

                            UpdateMainMessage("レギィン：主の存在証明は他によってのみ、示される。");

                            UpdateMainMessage("レギィン：主が主であるための他とは何か、述べよ。");

                            UpdateMainMessage("アイン：・・・ックソ・・・禅問答に近いノリだな・・・");

                            UpdateMainMessage("レギィン：答えよ、アイン・ウォーレンス。");

                            UpdateMainMessage("ラナ：ねえ、やっぱり言葉じゃ無理なんじゃない？");

                            UpdateMainMessage("アイン：結局、戦うしかないのか・・・");

                            UpdateMainMessage("レギィン：明確な解を持たぬ者、アイン・ウォーレンス。");

                            UpdateMainMessage("レギィン：ここで果てるがよい。");

                            UpdateMainMessage("アイン：っ来る！ラナ、準備しろ！！");

                            UpdateMainMessage("ラナ：了解よ！");
                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "エリア２ボス"
                    case 108:
                        if (!we.dungeonEvent4_SlayBoss2)
                        {

                            UpdateMainMessage("アイン：ボスとの戦闘だ！気を引き締めていくぜ！", true);

                            bool result = EncountBattle(Database.ENEMY_BOSS_LEGIN_ARZE_2, String.Empty, String.Empty, false, false, false, false);
                            if (!result)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y, false);
                                this.dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                blueWallBottom[16 * Database.TRUTH_DUNGEON_COLUMN + 20] = false;
                                blueWallTop[17 * Database.TRUTH_DUNGEON_COLUMN + 20] = false;
                                dungeonField.Invalidate();

                                we.dungeonEvent4_SlayBoss2 = true;

                                UpdateMainMessage("アイン：っしゃ！！！");

                                UpdateMainMessage("　　【　しかし、霧散した黒い粒子が再び人型を形成し始めた！　】");

                                UpdateMainMessage("レギィン：愚かなり、アイン・ウォーレンス。");

                                UpdateMainMessage("アイン：ッグ・・・");

                                UpdateMainMessage("レギィン：既に知りえし者、アイン・ウォーレンス。");

                                UpdateMainMessage("レギィン：既に解を見出し者、アイン・ウォーレンス。");

                                UpdateMainMessage("レギィン：なにゆえ、既に持ち得し解を選択しないのか。");

                                UpdateMainMessage("レギィン：我には理解できぬ。");

                                UpdateMainMessage("レギィン：愚かなり、アイン・ウォーレンス");

                                UpdateMainMessage("レギィン：・・・");

                                UpdateMainMessage("　　【　人型をしていたレギィン・アーゼは再び空中へ飛散していった　】");

                                UpdateMainMessage("アイン：・・・ふう・・・");

                                UpdateMainMessage("ラナ：戦ってみても全然ダメージを与えられてないって感じよね。");

                                UpdateMainMessage("アイン：くそ・・・どうすれば・・・");

                                UpdateMainMessage("ラナ：ねえ・・・扉");

                                UpdateMainMessage("アイン：おっ、本当だ。開いてるみたいだな。");

                                UpdateMainMessage("ラナ：最初の部屋に戻るわね。前の所と仕掛けは一緒みたいね。");

                                UpdateMainMessage("アイン：・・・　・・・");

                                UpdateMainMessage("ラナ：・・・進めるつもり・・・なのよね？");

                                UpdateMainMessage("アイン：ああ");

                                UpdateMainMessage("ラナ：どうしても？");

                                UpdateMainMessage("アイン：ああ");

                                UpdateMainMessage("ラナ：・・・ゴメン");

                                UpdateMainMessage("ラナ：ゴメンね・・・こんな風になっちゃって・・・");

                                UpdateMainMessage("アイン：いや、悪いのは完全に俺の方だ。スマン。");

                                UpdateMainMessage("ラナ：しんどくなったら、ちゃんと戻ろう・・・ね。");

                                UpdateMainMessage("アイン：ああ、分かった。");
                            }
                        }
                        break;
                    #endregion
                    #region "エリア２から３への通路"
                    case 109:
                        if (we.dungeonEvent4_SlayBoss2)
                        {
                            if (!we.dungeonEvent440)
                            {
                                we.dungeonEvent440 = true;

                                UpdateMainMessage("アイン：・・・ここだ。");

                                UpdateMainMessage("アイン：行くぜ。");

                                UpdateMainMessage("　　【　アインの触れた壁は、うっすらと光りだし始めた　】");

                                UpdateMainMessage("ラナ：脈略もなく、よく当てられるわね。");

                                UpdateMainMessage("アイン：まあ、師匠のおかげだな。こればっかりは。");

                                dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 21 + 20].Name = Database.TILEINFO_13;
                                dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 21 + 20].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                                tileInfo4[Database.TRUTH_DUNGEON_COLUMN * 21 + 20] = Database.TILEINFO_13;
                                dungeonField.Invalidate();

                                UpdateMainMessage("　　【　壁は淡い光とともに、消滅した　】");

                                UpdateUnknownTileArea(knownTileInfo4, 20, 20, 22, 31);
                                UpdateUnknownTile();

                                UpdateMainMessage("ラナ：通路が浮かび上がったわ、進められそうね。");

                                UpdateMainMessage("アイン：ああ・・・");

                                UpdateMainMessage("ラナ：ねえ、ランディスさんからは、一体どんな事を教わったの？");

                                UpdateMainMessage("アイン：なんて言ったら良いんだろうな・・・");

                                UpdateMainMessage("アイン：（声マネ）『ランディス：どうせ、あるかどうかは、分かんねえだろぉが』");

                                UpdateMainMessage("アイン：（声マネ）『まずはてめぇ自身、在ると信じてから行動しろ、ボケザコが』");

                                UpdateMainMessage("アイン：みたいな感じだったな。");

                                UpdateMainMessage("ラナ：うーん、相変わらず答えになってないわね・・・");

                                UpdateMainMessage("アイン：タハハ・・・悪いな。うまく言えないんだ、勘弁してくれ。");

                                UpdateMainMessage("ラナ：ッフフ、相変わらずおかしいわね。");

                                UpdateMainMessage("アイン：ん？");

                                UpdateMainMessage("ラナ：何でもない。　ッホラホラ、先に進めたいんでしょ。");

                                UpdateMainMessage("アイン：あ、ああ・・・じゃあ、進めるぜ！");
                            }
                        }
                        break;
                    #endregion
                    #region "エリア３スタート"
                    case 110:
                        if (!we.dungeonEvent441)
                        {
                            we.dungeonEvent441 = true;
                            UpdateUnknownTileArea(knownTileInfo4, 18, 22, 32, 36);
                        }
                        break;
                    #endregion
                    #region "エリア３看板"
                    case 111:
                        if (!we.dungeonEvent442)
                        {
                            we.dungeonEvent442 = true;
                            UpdateMainMessage("アイン：看板だな・・・見てみるぜ。");

                            UpdateMainMessage("　　　　『　支配竜により定められしは真実、真実とは定められし事象　』");

                            UpdateMainMessage("　　（その看板を読んだ瞬間、壁面一体が《永久なる地下迷宮》の風景として映し出された）");

                            UpdateMainMessage("アイン：支配・・・竜・・・");

                            UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                            blueWallRight[33 * Database.TRUTH_DUNGEON_COLUMN + 17] = false;
                            blueWallLeft[33 * Database.TRUTH_DUNGEON_COLUMN + 18] = false;
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：なんなんだ・・・ココは。");

                            UpdateMainMessage("アイン：・・・　・・・");

                            UpdateMainMessage("ラナ：アイン・・・辛そうだけど、大丈夫？");

                            UpdateMainMessage("アイン：あ、ああ。");

                            UpdateMainMessage("アイン：悪い悪い、ちょっと焦ってるだけだ。問題はねえ。");

                            UpdateMainMessage("アイン：通路は開いたんだ。行こうぜ。");

                            UpdateMainMessage("ラナ：うん・・・");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　支配竜により定められしは真実、真実とは定められし事象　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３-１開始"
                    case 112:
                        if (!we.dungeonEvent443)
                        {
                            we.dungeonEvent443 = true;

                            UpdateMainMessage("アイン：分かれ道に出たみたいだな。");

                            UpdateMainMessage("ラナ：まずは看板の方を見てみましょう。");

                            UpdateMainMessage("アイン：ああ。");

                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN, false);
                            this.dungeonField.Invalidate();

                            UpdateMainMessage("　　　　『　事象と時間を紡ぎし者にのみ、次なる道は拓かれる　』");

                            UpdateMainMessage("アイン：・・・どうも、ここから先は行き止まりみたいだな。");

                            UpdateMainMessage("ラナ：えっ、そうなの？");

                            UpdateMainMessage("アイン：ああ、一旦戻ろうぜ。");

                            UpdateMainMessage("ラナ：え、ええ。良いけど。");

                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN, false);
                            this.dungeonField.Invalidate();

                            UpdateMainMessage("ラナ：でも、何でそんな事が言えるのよ？");

                            UpdateMainMessage("アイン：もう一方のほうに【事象と時間】ってのが詰まってるんだろう。");

                            UpdateMainMessage("アイン：４階は、今までもここまでほとんど一本道だしな。");

                            UpdateMainMessage("アイン：信じて良いと思う。");

                            UpdateMainMessage("ラナ：まあ、分かったわ。じゃあ、看板じゃない方を探索してみましょ。");

                            UpdateMainMessage("アイン：ああ。");
                        }
                        break;
                    #endregion
                    #region "エリア３看板１"
                    case 113:
                        if (!we.dungeonEvent457)
                        {
                            if (!we.dungeonEvent444_storyok && !we.dungeonEvent4_Area3_1_Fail)
                            {
                                UpdateMainMessage("　　　　『　事象と時間を紡ぎし者にのみ、次なる道は拓かれる　』");

                                UpdateMainMessage("アイン：看板の意図を汲めた気がしない、ここはまだ探索を続けよう。");

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN, false);
                                this.dungeonField.Invalidate();
                            }
                            else if (we.dungeonEvent4_Area3_1_Fail)
                            {
                                UpdateMainMessage("　　　　『　事象と時間を紡ぎし者にのみ、次なる道は拓かれる　』");

                                UpdateMainMessage("アイン：どうだ・・・");

                                UpdateMainMessage("アイン：・・・　・・・");

                                UpdateMainMessage("アイン：・・・");

                                UpdateMainMessage("ラナ：どうする？特に何も起きないみたいだけど。");

                                UpdateMainMessage("アイン：・・・失敗かな。");

                                if (!we.dungeonEvent4_Area3_1_Fail_2)
                                {
                                    we.dungeonEvent4_Area3_1_Fail_2 = true;
                                    UpdateMainMessage("ラナ：レバー操作に順序があるのかしら？");

                                    UpdateMainMessage("アイン：ああ、多分な。");                        
                                   
                                    UpdateMainMessage("アイン：何となくパーティ編成とか神々の何とやらが最初じゃねえのは分かるんだけどな。");

                                    UpdateMainMessage("アイン：すまねえ、もういっぺん最初からでもいいか？");

                                    UpdateMainMessage("ラナ：うん、別に良いわよ。");
                                }
                                else if (!we.dungeonEvent4_Area3_1_Fail_3)
                                {
                                    we.dungeonEvent4_Area3_1_Fail_3 = true;
                                    UpdateMainMessage("ラナ：う〜ん、この階層に来て最初はエスミリア草原区域で、次がファージル宮殿の宝物庫だったわよね？");

                                    UpdateMainMessage("アイン：ああ、確かそうだ。");

                                    UpdateMainMessage("ラナ：その見てきた内容が、順番通りとは限らないんじゃないかしら？");

                                    UpdateMainMessage("ラナ：たとえば、アインがそのエスミリア草原区域に行った経緯は私には分かんないけど。");

                                    UpdateMainMessage("ラナ：ファージル宮殿へお招きいただいたのと、そのエスミリア草原に行ったのはどっちが先だったのよ？");

                                    UpdateMainMessage("アイン：確かあれは・・・");

                                    UpdateMainMessage("アイン：ファージル宮殿が先だ。");

                                    UpdateMainMessage("ラナ：じゃあ、宝物庫が先で、エスミリア草原が後って事になるわね。");

                                    UpdateMainMessage("アイン：サンキュー、ラナ。おし、もういっぺんやらせてくれ。");

                                    UpdateMainMessage("ラナ：うん。");
                                }
                                else if (!we.dungeonEvent4_Area3_1_Fail_4)
                                {
                                    we.dungeonEvent4_Area3_1_Fail_4 = true;
                                    UpdateMainMessage("アイン：宝物庫が最初、依頼状が来てから、緑小屋に赴いたのは確かなんだけどな。");

                                    UpdateMainMessage("ラナ：・・・アインの記憶だけが頼りよ。");

                                    UpdateMainMessage("アイン：パーティ編成をして、はじまりの部屋、神々の試練、神々の詩、そして回想録の終わり。");

                                    UpdateMainMessage("アイン：この辺りは自信があるんだが・・・");

                                    UpdateMainMessage("アイン：フェルトゥーシュの消失。これがどのタイミングなのかが分からねえ。");

                                    UpdateMainMessage("アイン：・・・");

                                    UpdateMainMessage("アイン：あっ！そうだった！！");

                                    UpdateMainMessage("アイン：（DUELに負けて・・・そうだ、緑の小屋の後じゃねえか）");

                                    UpdateMainMessage("アイン：緑の小屋の後で、フェルトゥーシュは失くなっちまったんだ。絶対そうだ、間違いない。");

                                    UpdateMainMessage("ラナ：何か気づいたみたいね。どう、行けそう？");

                                    UpdateMainMessage("アイン：ああ、今度こそ任せてくれ。");
                                }

                                else if (!we.dungeonEvent4_Area3_1_Fail_5)
                                {
                                    we.dungeonEvent4_Area3_1_Fail_5 = true;
                                    UpdateMainMessage("ラナ：アインが辿ってきた記憶を、少し私なりに整理してみたわよ。");

                                    UpdateMainMessage("アイン：ッゲ、マジかよ。どうやったんだよ！？");

                                    UpdateMainMessage("ラナ：・・・アンタがそこでブツブツ言ってるのをメモしただけよ。");

                                    UpdateMainMessage("アイン：お、教えてくれ、頼むぜ。");

                                    UpdateMainMessage("ラナ：ほんっともうしっかりしてよね・・・今から言うわね。");

                                    UpdateMainMessage("ラナ：ファージル宮殿の生誕祭で宝物庫へ赴く。");

                                    UpdateMainMessage("ラナ：次に、何かしらの依頼状を受け取とる。");

                                    UpdateMainMessage("ラナ：で、緑の小屋に赴いている。");

                                    UpdateMainMessage("ラナ：その後、フェルトゥーシュを無くしてる。");

                                    UpdateMainMessage("ラナ：それから、私とパーティ編成を組んでダンジョンへ。");

                                    UpdateMainMessage("ラナ：始まりの部屋を発見してから");

                                    UpdateMainMessage("ラナ：神々の試練をクリア");

                                    UpdateMainMessage("ラナ：その直後に神々の詩まで詠唱成功させて");

                                    UpdateMainMessage("ラナ：後は秤の三面鏡をクリアして");

                                    UpdateMainMessage("ラナ：回想録が終わるっていう所ね。");

                                    UpdateMainMessage("アイン：・・・");

                                    UpdateMainMessage("アイン：オーケーオーケー、本当にすまないな。");

                                    UpdateMainMessage("ラナ：結構複雑みたいだけど、頑張ってね。");

                                    UpdateMainMessage("アイン：ああ、今度こそ任せてくれ。");
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：一応メモをもう一度言った方がいいかしら？");

                                    UpdateMainMessage("アイン：いや、マジすまねえ・・・頼むぜ。");

                                    UpdateMainMessage("ラナ：一個ずつ分けると覚えにくいかもしれないし、まとめて言うわね？");

                                    UpdateMainMessage("アイン：ああ。");

                                    UpdateMainMessage("ラナ：じゃあ、言うわね。");

                                    UpdateMainMessage("ラナ：ファージルの生誕祭、それから依頼状を受けて、緑の小屋へ、そしてフェルトゥーシュを失う。");

                                    UpdateMainMessage("ラナ：それから私とパーティを組んで、まず始まりの部屋、それから神々の試練を経て、神々の詩を詠唱成功。");

                                    UpdateMainMessage("ラナ：後は秤の三面鏡をやって、回想録の終了よ。");

                                    UpdateMainMessage("アイン：サンキュー！　よし、今度こそ！");
                                }

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN, false);
                                this.dungeonField.Invalidate();

                                we.dungeonEvent4_Area3_1_Fail = false;
                                we.dungeonEvent447 = false;
                                we.dungeonEvent448 = false;
                                we.dungeonEvent449 = false;
                                we.dungeonEvent450 = false;
                                we.dungeonEvent451 = false;
                                we.dungeonEvent452 = false;
                                we.dungeonEvent453 = false;
                                we.dungeonEvent454 = false;
                                we.dungeonEvent455 = false;
                                we.dungeonEvent456 = false;
                            }
                            else if (we.dungeonEvent444_storyok)
                            {
                                UpdateMainMessage("　　　　『　事象と時間を紡ぎし者にのみ、次なる道は拓かれる　』");

                                UpdateMainMessage("アイン：どうだ・・・");

                                UpdateMainMessage("アイン：・・・　・・・");

                                UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                                UpdateMainMessage("アイン：っしゃ！！");

                                UpdateMainMessage("ラナ：・・・どこの扉が開いたわけ？");

                                UpdateMainMessage("アイン：この先にある扉さ。");

                                UpdateMainMessage("ラナ：・・・　・・・");

                                UpdateMainMessage("アイン：ど、どうした？");

                                UpdateMainMessage("ラナ：ううん、何でもないわよ。進んでみるんでしょ？");

                                UpdateMainMessage("アイン：ああ、扉は開いた。おそらく次に進めるぜ。");

                                UpdateMainMessage("ラナ：行ってみましょう。");

                                UpdateMainMessage("アイン：ああ");
                                we.dungeonEvent457 = true;
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　事象と時間を紡ぎし者にのみ、次なる道は拓かれる　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３、事実１"
                    case 114:
                        if (!we.dungeonEvent447)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　ファージル宮殿　生誕祭　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    UpdateArea4_3_LeverInfo(1);
                                    we.dungeonEvent447 = true;
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　ファージル宮殿　生誕祭　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３、事実２"
                    case 115:
                        if (!we.dungeonEvent448)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　ヴェルゼ・アーティ、DUEL依頼状』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    UpdateArea4_3_LeverInfo(2);
                                    we.dungeonEvent448 = true;
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　ヴェルゼ・アーティ、DUEL依頼状』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３、事実３"
                    case 116:
                        if (!we.dungeonEvent449)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　エスミリア草原区域の緑小屋　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    UpdateArea4_3_LeverInfo(3);
                                    we.dungeonEvent449 = true;
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　エスミリア草原区域の緑小屋　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３、事実４"
                    case 117:
                        if (!we.dungeonEvent450)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　神剣フェルトゥーシュの消失　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    UpdateArea4_3_LeverInfo(4);
                                    we.dungeonEvent450 = true;
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　神剣フェルトゥーシュの消失　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３、事実５"
                    case 118:
                        if (!we.dungeonEvent451)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　パーティ編成：アイン・ウォーレンス、ラナ・アミリア　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    UpdateArea4_3_LeverInfo(5);
                                    we.dungeonEvent451 = true;
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　パーティ編成：アイン・ウォーレンス、ラナ・アミリア　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３、事実６"
                    case 119:
                        if (!we.dungeonEvent452)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　閉ざされし【始まりの部屋】の到達　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    UpdateArea4_3_LeverInfo(6);
                                    we.dungeonEvent452 = true;
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　閉ざされし【始まりの部屋】の到達　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３、事実７"
                    case 120:
                        if (!we.dungeonEvent453)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　定められし【神々の試練】を制覇　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    UpdateArea4_3_LeverInfo(7);
                                    we.dungeonEvent453 = true;
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　定められし【神々の試練】を制覇　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３、事実８"
                    case 121:
                        if (!we.dungeonEvent454)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　導かれし【神々の詩】　完全一致　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    UpdateArea4_3_LeverInfo(8);
                                    we.dungeonEvent454 = true;
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　導かれし【神々の詩】　完全一致　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３、事実９"
                    case 122:
                        if (!we.dungeonEvent455)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　【秤の三面鏡】にて<正解>を選択　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    UpdateArea4_3_LeverInfo(9);
                                    we.dungeonEvent455 = true;
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　【秤の三面鏡】にて<正解>を選択　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３、事実１０"
                    case 123:
                        if (!we.dungeonEvent456)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　第四階層、回想録の終焉　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    UpdateArea4_3_LeverInfo(10);
                                    we.dungeonEvent456 = true;
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　第四階層、回想録の終焉　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア３−２への扉"
                    case 124:
                        if (!we.dungeonEvent458)
                        {
                            we.dungeonEvent458 = true;

                            UpdateMainMessage("ラナ：あっ");

                            UpdateMainMessage("アイン：ん？どうした。");

                            UpdateMainMessage("ラナ：見て、この窪み・・・扉があった形跡があるわよ。");

                            UpdateMainMessage("アイン：だろ？さっきので開いたって事さ。");

                            UpdateMainMessage("ラナ：ホント・・・正直アンタどうかしてるわよ、そういう所は。");

                            UpdateMainMessage("アイン：ッハッハッハ、偶然当たっただけさ。");

                            UpdateMainMessage("ラナ：・・・ねえ・・・");

                            UpdateMainMessage("アイン：ん？");

                            UpdateMainMessage("ラナ：（ゴメン・・・ね）");

                            UpdateMainMessage("アイン：な、何か言ったか？？");

                            UpdateMainMessage("ラナ：ううん、扉は空いたんだし、早く行きましょ。");

                            UpdateMainMessage("アイン：ああ。そうだな。");
                        }
                        break;
                    #endregion
                    #region "エリア３-２開始"
                    case 125:
                        if (!we.dungeonEvent460)
                        {
                            we.dungeonEvent460 = true;

                            UpdateMainMessage("アイン：あっちの方に看板が見えるな。");

                            UpdateMainMessage("ラナ：見てみようか。");

                            UpdateMainMessage("アイン：ああ。");

                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN, false);
                            this.dungeonField.Invalidate();

                            UpdateMainMessage("　　　　『　真実と事実は非なるもの　真実への追及が事実を覆す　』");

                            UpdateMainMessage("アイン：真実と・・・事実・・・");

                            UpdateMainMessage("ラナ：また同じ様に順番通りにレバー操作するのかしらね。");

                            UpdateMainMessage("アイン：多分、そうだとは思うが・・・");

                            UpdateMainMessage("アイン：まあ、進めてみるぜ。");

                            UpdateMainMessage("ラナ：うん・・・");
                        }
                        break;
                    #endregion
                    #region "エリア３-２看板"
                    case 126:
                        UpdateMainMessage("　　　　『　真実と事実は非なるもの　真実への追及が事実を覆す　』", true);
                        break;
                    #endregion
                    #region "真実１"
                    case 127:
                        if (!we.dungeonEvent462)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　パーティ編成：アイン・ウォーレンス単独　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。ロジックを変更する。
                                    we.dungeonEvent462 = true;
                                    UpdateArea4_3_2_LeverInfo(1);
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　パーティ編成：アイン・ウォーレンス単独　』", true);
                        }
                        break;
                    #endregion
                    #region "真実２"
                    case 128:
                        if (!we.dungeonEvent463)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　閉ざされし【終わりの部屋】への到達　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。ロジックを変更する。
                                    we.dungeonEvent463 = true;
                                    UpdateArea4_3_2_LeverInfo(2);
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　閉ざされし【終わりの部屋】への到達　』", true);
                        }
                        break;
                    #endregion
                    #region "真実３"
                    case 129:
                        if (!we.dungeonEvent464)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　定められし【神々の試練】、＜迂回＞を選択　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。ロジックを変更する。
                                    we.dungeonEvent464 = true;
                                    UpdateArea4_3_2_LeverInfo(3);
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　定められし【神々の試練】、＜迂回＞を選択　』", true);
                        }
                        break;
                    #endregion
                    #region "真実４"
                    case 130:
                        if (!we.dungeonEvent465)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　【海と大地、そして天空】　完全詠唱　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。ロジックを変更する。
                                    we.dungeonEvent465 = true;
                                    UpdateArea4_3_2_LeverInfo(4);
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　【海と大地、そして天空】　完全詠唱　』", true);
                        }
                        break;
                    #endregion
                    #region "真実５"
                    case 131:
                        if (!we.dungeonEvent466)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　【愚者】と【賢者】の究極２択、　<破棄>を選択　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。ロジックを変更する。
                                    we.dungeonEvent466 = true;
                                    UpdateArea4_3_2_LeverInfo(5);
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　【愚者】と【賢者】の究極２択、　<破棄>を選択　』", true);
                        }
                        break;
                    #endregion
                    #region "真実６"
                    case 132:
                        if (!we.dungeonEvent467)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　【虚無の鏡】、　<原点解>へと到達　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。ロジックを変更する。
                                    we.dungeonEvent467 = true;
                                    UpdateArea4_3_2_LeverInfo(6);
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　【虚無の鏡】、　<原点解>へと到達　』", true);
                        }
                        break;
                    #endregion
                    #region "真実７"
                    case 133:
                        if (!we.dungeonEvent468)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　第四階層、無間地獄を踏破　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。ロジックを変更する。
                                    we.dungeonEvent468 = true;
                                    UpdateArea4_3_2_LeverInfo(7);
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　第四階層、無間地獄を踏破　』", true);
                        }
                        break;
                    #endregion
                    #region "真実８"
                    case 134:
                        if (!we.dungeonEvent469)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　神剣フェルトゥーシュの入手　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。ロジックを変更する。
                                    we.dungeonEvent469 = true;
                                    UpdateArea4_3_2_LeverInfo(8);
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　神剣フェルトゥーシュの入手　』", true);
                        }
                        break;
                    #endregion
                    #region "真実９"
                    case 135:
                        if (!we.dungeonEvent470)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　第四階層、第三の像を検知　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。ロジックを変更する。
                                    we.dungeonEvent470 = true;
                                    UpdateArea4_3_2_LeverInfo(9);
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　第四階層、第三の像を検知　』", true);
                        }
                        break;
                    #endregion
                    #region "真実１０"
                    case 136:
                        if (!we.dungeonEvent471)
                        {
                            UniteMessage_40();
                            UpdateMainMessage("　　　　『　偶像の崩壊、そして真実世界へ　』");
                            UniteMessage_41();

                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "レバーを倒しますか？";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。ロジックを変更する。
                                    we.dungeonEvent471 = true;
                                    UpdateArea4_3_2_LeverInfo(10);
                                    UniteMessage_42();
                                }
                                else
                                {
                                    UpdateMainMessage("アイン：いや、他の所を探索してみよう。");
                                }
                            }
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　偶像の崩壊、そして真実世界へ　』", true);
                        }
                        break;
                    #endregion
                    #region "宝箱エリア３"
                    case 137:
                        we.TruthTreasure443 = GetTreasure(Database.RARE_KYUUDOUSYA_HIDENSYO);
                        break;
                    case 138:
                        we.TruthTreasure444 = GetTreasure(Database.GROWTH_LIQUID4_STAMINA);
                        break;
                    case 139:
                        we.TruthTreasure445 = GetTreasure(Database.RARE_ESSENCE_OF_SHINE);
                        break;
                    case 140:
                        we.TruthTreasure446 = GetTreasure(Database.COMMON_ECHO_BEAST_MEAT);
                        break;
                    case 141:
                        we.TruthTreasure447 = GetTreasure(Database.RARE_BLACK_SEAL_IMPRESSION);
                        break;
                    case 142:
                        we.TruthTreasure448 = GetTreasure(Database.RARE_MASTERBLADE_KAKERA);
                        break;
                    case 143:
                        we.TruthTreasure449 = GetTreasure(Database.COMMON_CHAOS_TONGUE);
                        break;
                    case 144:
                        we.TruthTreasure450 = GetTreasure(Database.RARE_CHAOS_SIZUKU);
                        break;
                    #endregion
                    #region "エリア３-２終了の扉"
                    case 145:
                        if (!we.dungeonEvent473)
                        {
                            if (!we.dungeonEvent461_storyok && !we.dungeonEvent4_Area3_2_Fail)
                            {
                                UpdateMainMessage("アイン：ここは一旦戻って探索を続けるか。レバーはとりあえず落としてみよう。");

                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN, false);
                                this.dungeonField.Invalidate();
                            }
                            else if (we.dungeonEvent4_Area3_2_Fail)
                            {
                                UpdateMainMessage("アイン：扉か・・・");

                                UpdateMainMessage("アイン：このままじゃ、開かないな。");

                                UpdateMainMessage("ラナ：ねえアイン、扉の上に小さい穴があるみたいだけど？");

                                UpdateMainMessage("アイン：ん？・・・おっ、本当だな。");

                                UpdateMainMessage("ラナ：何かレンズみたいなのが見えるけど、それ以外は特に何も無いみたいね。");

                                UpdateMainMessage("アイン：ここまでの探索がイマイチだったのかもな・・・");

                                UpdateMainMessage("アイン：ちょっとまだ確認できてない所を探ってみるか。");

                                UpdateMainMessage("ラナ：ええ、そうね。");
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN, false);
                                this.dungeonField.Invalidate();

                                we.dungeonEvent4_Area3_2_Fail = false;
                                // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。コメントアウトとする。
                                //we.dungeonEvent462 = false;
                                //we.dungeonEvent463 = false;
                                //we.dungeonEvent464 = false;
                                //we.dungeonEvent465 = false;
                                //we.dungeonEvent466 = false;
                                //we.dungeonEvent467 = false;
                                //we.dungeonEvent468 = false;
                                //we.dungeonEvent469 = false;
                                //we.dungeonEvent470 = false;
                                //we.dungeonEvent471 = false;
                            }
                            else if (we.dungeonEvent461_storyok)
                            {
                                UpdateMainMessage("アイン：扉か・・・");

                                UpdateMainMessage("アイン：このままじゃ、開かないみたいだな。");

                                UpdateMainMessage("ラナ：ねえアイン見て、扉の上側。");

                                UpdateMainMessage("アイン：ん？");

                                UpdateMainMessage("ラナ：何か小さい発光体のようなモノが付いてない？");

                                UpdateMainMessage("アイン：確かに・・・何かあるな。");

                                UpdateMainMessage("　＜　ッカチ！　＞　");

                                UpdateMainMessage("　　　『ブウゥゥン！！』");

                                UpdateMainMessage("ラナ：アイン・・・見て、文字が・・・");

                                UpdateMainMessage("アイン：すげえな・・・");

                                UpdateMainMessage("ラナ：ちょ・・・ちょっと・・・");

                                UpdateMainMessage("アイン：文字の・・・内容か・・・");

                                GroundOne.StopDungeonMusic();

                                UpdateMainMessage("　　　　『　ホ　ロ　　　ビ　　　ヨ　』");

                                UpdateMainMessage("　　　　『　ア　　イ　　　　ン　　　』");

                                UpdateMainMessage("　　　　『　ウ　ォ　ー　レ　ン　ス　』");

                                UpdateMainMessage("アイン：・・・");

                                UpdateMainMessage("    『・・・ギギィ・・・ッバタン！』");

                                blueWallLeft[39 * Database.TRUTH_DUNGEON_COLUMN + 23] = false;
                                blueWallRight[39 * Database.TRUTH_DUNGEON_COLUMN + 22] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("ラナ：ねえ、アイン・・・");

                                UpdateMainMessage("アイン：・・・気にするな。");

                                UpdateMainMessage("アイン：行くぜ。");
                                we.dungeonEvent473 = true;
                                GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                            }
                        }
                        break;
                    #endregion
                    #region "エリア３ボス前"
                    case 146:
                        if (!we.dungeonEvent475)
                        {
                            we.dungeonEvent475 = true;

                            UpdateUnknownTileArea(knownTileInfo4, 23, 23, 35, 38);

                            GroundOne.StopDungeonMusic();
                            GroundOne.PlayDungeonMusic(Database.BGM19, Database.BGM19LoopBegin);

                            UpdateMainMessage("レギィン：我が名は闇と焔を司りし者、レギィン・アーゼ。");

                            UpdateMainMessage("アイン：ッグ・・・");

                            UpdateMainMessage("レギィン：このダンジョンにて理を守りし者。");

                            UpdateMainMessage("レギィン：答えよ、アイン・ウォーレンス。");

                            UpdateMainMessage("レギィン：何ゆえに、歩を進めるか、答えよ。");

                            UpdateMainMessage("アイン：・・・");

                            UpdateMainMessage("アイン：このダンジョンの理を断ち切る。");

                            UpdateMainMessage("アイン：そのために、俺は進める。");

                            UpdateMainMessage("レギィン：ダンジョンの理は決して崩せぬ。");

                            UpdateMainMessage("アイン：どうしてそう言い切れる？");

                            UpdateMainMessage("レギィン：ダンジョンが【主】であり、貴公は単なる【従】でしか在らず");

                            UpdateMainMessage("レギィン：理を断ち切るという概念を持つ時点で、断ち切る事は不可能。");

                            UpdateMainMessage("アイン：進めていけば・・・歩みを進められれば、何か分かるかもしれないだろ？");

                            UpdateMainMessage("レギィン：無駄なこと。");

                            UpdateMainMessage("レギィン：事象は決定されし事象。");

                            UpdateMainMessage("レギィン：愚かなり、アイン・ウォーレンス。");

                            UpdateMainMessage("アイン：っくそ・・・");

                            UpdateMainMessage("レギィン：貴公と話す事に、もう価値はない。");

                            UpdateMainMessage("レギィン：今、この場で我の真の姿を見るがよい。");

                            UpdateMainMessage("レギィン：滅びよ、アイン・ウォーレンス。");

                            UpdateMainMessage("アイン：やべえ、殺気が半端じゃねえな・・・今までと違うって事か・・・");

                            UpdateMainMessage("アイン：ラナ、すまねえ。万全の準備を頼む");

                            UpdateMainMessage("ラナ：了解。");

                            GroundOne.StopDungeonMusic();
                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        break;
                    #endregion
                    #region "エリア３ボス"
                    case 147:
                        if (!we.dungeonEvent4_SlayBoss3)
                        {
                            UpdateMainMessage("アイン：ボスとの戦闘だ！気を引き締めていくぜ！", true);

                            bool result = EncountBattle(Database.ENEMY_BOSS_LEGIN_ARZE_3, String.Empty, String.Empty, false, false, false, false);
                            if (!result)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN, false);
                                this.dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                blueWallLeft[35 * Database.TRUTH_DUNGEON_COLUMN + 23] = false;
                                blueWallRight[35 * Database.TRUTH_DUNGEON_COLUMN + 22] = false;
                                dungeonField.Invalidate();

                                we.dungeonEvent4_SlayBoss3 = true;

                                UpdateMainMessage("レギィン：・・・ォ・・・ァ・・・");

                                UpdateMainMessage("アイン：どうだ！！！");

                                UpdateMainMessage("レギィン：ォォォォア・・ア・・・ア・・・");

                                UpdateMainMessage("　　【　レギィン・アーゼは黒いヴェール状になりアインとラナを覆ってきた！！　】");

                                UpdateMainMessage("レギィン：グウウゥゥォオオオオォォォオオオ！！！！！");

                                UpdateMainMessage("アイン：ッグ！！");

                                UpdateMainMessage("ラナ：ッキャアアアァァ！！");

                                GroundOne.StopDungeonMusic();
                                TurnToBlack();

                                UpdateMainMessage("　　【　瞬間、アインの視界は、完全に暗闇に閉ざされた　】");

                                UpdateMainMessage("アイン：ックソ、離せ！！！");

                                UpdateMainMessage("　　【　その瞬間は終わり、アインは、絶対的な時間と空間のズレを把握した！！！】");

                                UpdateMainMessage("アイン：ック・・・何だこの感触は・・・");

                                UpdateMainMessage("　　【　黒いヴェールの締め付けはすぐに消えていった　】");

                                Method.RemoveParty(we, sc);
                                SetupPlayerStatus();
                                ReturnToNormal();

                                UpdateMainMessage("アイン：っふう・・・");

                                UpdateMainMessage("アイン：ひでぇ最後だったな・・・結局理もクソもねえって感じだったな。");

                                UpdateMainMessage("アイン：・・・");

                                UpdateMainMessage("　　【　直後、周囲を見回し　】");

                                UpdateMainMessage("アイン：・・・ラナ？");

                                UpdateMainMessage("アイン：ラナ！　どこだラナ！？");

                                UpdateMainMessage("　　【　アインの頭痛は徐々に肥大化する　】");

                                UpdateMainMessage("アイン：ッグ・・・ッツツ・・・ックソ、こんな時に・・・");

                                UpdateMainMessage("　　【　生と死のイメージを感じつつ　】");

                                UpdateMainMessage("アイン：探さないと・・・ラナを・・・");

                                UpdateMainMessage("　　【　アインは歩を進めた　】");

                                UpdateMainMessage("アイン：（この奥だ、間違いねえはずだ）");

                                UpdateMainMessage("アイン：（こっからは間違いはできねえ）");

                                UpdateMainMessage("アイン：（絶対にラナを助け出す）");

                                UpdateMainMessage("アイン：（待ってろ、ラナ）");

                                using (TruthPlayerInformation TPI = new TruthPlayerInformation())
                                {
                                    TPI.StartPosition = FormStartPosition.CenterParent;
                                    TPI.ShowDialog();
                                }
                            }
                        }
                        break;
                    #endregion
                    #region "エリア３から４への通路"
                    case 148:
                        if (we.dungeonEvent4_SlayBoss3)
                        {
                            if (!we.dungeonEvent476)
                            {
                                we.dungeonEvent476 = true;

                                UpdateMainMessage("アイン：（ここだな、多分）");

                                UpdateMainMessage("　　【　アインの触れた壁は、うっすらと光りだし始めた　】");

                                UpdateMainMessage("アイン：（おし・・・）");

                                dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 34 + 22].Name = Database.TILEINFO_13;
                                dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 34 + 22].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                                tileInfo4[Database.TRUTH_DUNGEON_COLUMN * 34 + 22] = Database.TILEINFO_13;
                                dungeonField.Invalidate();

                                UpdateMainMessage("　　【　壁は淡い光とともに、消滅した　】");

                                UpdateUnknownTileArea(knownTileInfo4, 23, 43, 34, 34);
                                UpdateUnknownTile();

                                UpdateMainMessage("アイン：（この先だ、きっと・・・）");

                                UpdateMainMessage("アイン：（行くぜ）");
                            }
                        }
                        break;
                    #endregion
                    #region "エリア４スタート"
                    case 149:
                        if (we.dungeonEvent476)
                        {
                            we.dungeonEvent476 = true;

                            UpdateUnknownTileArea(knownTileInfo4, 44, 48, 32, 36);
                        }
                        break;
                    #endregion
                    #region "エリア４看板"
                    case 150:
                        if (!we.dungeonEvent477)
                        {
                            we.dungeonEvent477 = true;

                            UpdateMainMessage("アイン：（　看板だな　）");

                            UpdateMainMessage("　　　　『　事実への到達　創造による循環　』");

                            UpdateMainMessage("アイン：（　・・・　）");

                            UpdateMainMessage("アイン：（　もう、看板にあまり意味はなさそうだな・・・　）");

                            UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                            blueWallRight[34 * Database.TRUTH_DUNGEON_COLUMN + 48] = false;
                            blueWallLeft[34 * Database.TRUTH_DUNGEON_COLUMN + 49] = false;
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：（　行こう　）");
                        }
                        break;
                    #endregion
                    #region "エリア４-１広間"
                    case 151:
                        if (!we.dungeonEvent478)
                        {
                            we.dungeonEvent478 = true;

                            UpdateUnknownTileArea(knownTileInfo4, 41, 43, 35, 38);
                        }
                        break;
                    #endregion
                    #region "エリア４-１看板"
                    case 152:
                        if (!we.dungeonEvent479)
                        {
                            we.dungeonEvent479 = true;

                            UpdateMainMessage("アイン：（　看板だな　）");

                            UpdateMainMessage("　　　　『　見捨てられし狭間　』");

                            UpdateMainMessage("アイン：（　・・・　）");

                            UpdateMainMessage("アイン：（　位置関係的に、それほど場所は無いはずだ　）");

                            UpdateMainMessage("アイン：（　キッチリ探そう　）");
                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　見捨てられし狭間　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア４-１鍵
                    case 153:
                        if (!we.dungeonEvent4_key41_1)
                        {
                            we.dungeonEvent4_key41_1 = true;

                            UpdateMainMessage("アイン:（っしゃ、宝箱だな）");

                            UpdateMainMessage("『扉の鍵【１】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か・・・大事に持っておかねえとな）");

                            UpdateMainMessage("アイン：（よし、次に行こう）");
                        }
                        break;
                    case 154:
                        if (!we.dungeonEvent4_key41_2)
                        {
                            we.dungeonEvent4_key41_2 = true;

                            UpdateMainMessage("アイン:（っしゃ、宝箱だな）");

                            UpdateMainMessage("『扉の鍵【２】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か・・・大事に持っておかねえとな）");

                            UpdateMainMessage("アイン：（よし、次に行こう）");
                        }
                        break;
                    case 155:
                        if (!we.dungeonEvent4_key41_3)
                        {
                            we.dungeonEvent4_key41_3 = true;

                            UpdateMainMessage("アイン:（っしゃ、宝箱だな）");

                            UpdateMainMessage("『扉の鍵【３】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か・・・大事に持っておかねえとな）");

                            UpdateMainMessage("アイン：（よし、次に行こう）");
                        }
                        break;
                    case 156:
                        if (!we.dungeonEvent4_key41_4)
                        {
                            we.dungeonEvent4_key41_4 = true;

                            UpdateMainMessage("アイン:（っしゃ、宝箱だな）");

                            UpdateMainMessage("『扉の鍵【４】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か・・・大事に持っておかねえとな）");

                            UpdateMainMessage("アイン：（よし、次に行こう）");
                        }
                        break;
                    case 157:
                        if (!we.dungeonEvent4_key41_5)
                        {
                            we.dungeonEvent4_key41_5 = true;

                            UpdateMainMessage("アイン:（っしゃ、宝箱だな）");

                            UpdateMainMessage("『扉の鍵【５】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か・・・大事に持っておかねえとな）");

                            UpdateMainMessage("アイン：（よし、次に行こう）");
                        }
                        break;
                    #endregion
                    #region "宝箱エリア４-１"
                    case 158:
                        we.TruthTreasure451 = GetTreasure(Database.GROWTH_LIQUID4_MIND);
                        break;
                    case 159:
                        we.TruthTreasure452 = GetTreasure(Database.RARE_VOID_HYMNSONIA);
                        break;
                    case 160:
                        we.TruthTreasure453 = GetTreasure(Database.RARE_WHITE_DIAMOND_SHIELD);
                        break;
                    case 161:
                        we.TruthTreasure454 = GetTreasure(Database.RARE_ARCHANGEL_CONTRACT);
                        break;
                    #endregion
                    #region "エリア４-１扉"
                    case 162:
                        if (!we.dungeonEvent480)
                        {
                            if (!we.dungeonEvent481)
                            {
                                we.dungeonEvent481 = true;

                                UpdateMainMessage("アイン：（扉か・・・）");

                                UpdateMainMessage("アイン：（鍵穴がいくつかあるみたいだな）");

                                UpdateMainMessage("アイン：（ってことは・・・）");
                            }

                            int keyNum = 0;
                            if (we.dungeonEvent4_key41_1) { keyNum++; }
                            if (we.dungeonEvent4_key41_2) { keyNum++; }
                            if (we.dungeonEvent4_key41_3) { keyNum++; }
                            if (we.dungeonEvent4_key41_4) { keyNum++; }
                            if (we.dungeonEvent4_key41_5) { keyNum++; }

                            if (keyNum <= 0)
                            {
                                UpdateMainMessage("アイン：（まだ鍵は集めてねえわけだし、サクっと探すか）");
                            }
                            else if (keyNum == 1)
                            {
                                UpdateMainMessage("アイン：（鍵はまだ１個、どうもこれだけじゃ足りねえみたいだな。他を探そう）");
                            }
                            else if (keyNum == 2)
                            {
                                UpdateMainMessage("アイン：（鍵はまだ２個、どうもこれだけじゃ足りねえみたいだな。他を探そう）");
                            }
                            else if (keyNum == 3)
                            {
                                UpdateMainMessage("アイン：（鍵はまだ３個、どうもこれだけじゃ足りねえみたいだな。他を探そう）");
                            }
                            else if (keyNum == 4)
                            {
                                UpdateMainMessage("アイン：（鍵はもう４個、あと少しだと思う。もう少し探してみよう）");
                            }
                            else if (keyNum == 5)
                            {
                                we.dungeonEvent480 = true;

                                UpdateMainMessage("アイン：（よし、多分これで・・・）");

                                UpdateMainMessage("　　　　『ッギ・・・ッギギギイイィィィ・・・』");

                                blueWallRight[39 * Database.TRUTH_DUNGEON_COLUMN + 47] = false;
                                blueWallLeft[39 * Database.TRUTH_DUNGEON_COLUMN + 48] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("アイン：（よし、先を急ぐぞ）");
                            }
                        }
                        break;
                    #endregion
                    #region "エリア４-１終了"
                    case 163:
                        if (!we.dungeonEvent483)
                        {
                            we.dungeonEvent483 = true;

                            UpdateMainMessage("アイン：（扉か・・・）");

                            UpdateMainMessage("アイン：（足元に踏み板があるな、多分ここだ・・・）");

                            UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                            blueWallRight[35 * Database.TRUTH_DUNGEON_COLUMN + 50] = false;
                            blueWallLeft[35 * Database.TRUTH_DUNGEON_COLUMN + 51] = false;
                            blueWallRight[34 * Database.TRUTH_DUNGEON_COLUMN + 50] = false;
                            blueWallLeft[34 * Database.TRUTH_DUNGEON_COLUMN + 51] = false;
                            UpdateUnknownTile();
                            dungeonField.Invalidate();

                            UpdateMainMessage("アイン：（っしゃ、急ぐぜ）");
                        }
                        break;
                    #endregion
                    #region "エリア４-２看板"
                    case 164:
                        if (!we.dungeonEvent484)
                        {
                            we.dungeonEvent484 = true;

                            UpdateMainMessage("アイン：（　看板だな　）");

                            UpdateMainMessage("　　　　『　捨て去られた空間　』");

                            UpdateMainMessage("アイン：（　・・・　）");

                            UpdateMainMessage("アイン：（　前回のものとほぼ同じ感じだな　）");

                            UpdateMainMessage("アイン：（　ここもキッチリと探していこう　）");

                        }
                        else
                        {
                            UpdateMainMessage("　　　　『　捨て去られた空間　』", true);
                        }
                        break;
                    #endregion
                    #region "エリア４-２鍵"
                    case 165:
                        if (!we.dungeonEvent4_key42_1)
                        {
                            we.dungeonEvent4_key42_1 = true;

                            UpdateMainMessage("アイン:（宝箱だな）");

                            UpdateMainMessage("『扉の鍵【１】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か、大事に持っておかねえとな）");
                        }
                        break;
                    case 166:
                        if (!we.dungeonEvent4_key42_2)
                        {
                            we.dungeonEvent4_key42_2 = true;

                            UpdateMainMessage("アイン:（宝箱だな）");

                            UpdateMainMessage("『扉の鍵【２】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か、大事に持っておかねえとな）");
                        }
                        break;
                    case 167:
                        if (!we.dungeonEvent4_key42_3)
                        {
                            we.dungeonEvent4_key42_3 = true;

                            UpdateMainMessage("アイン:（宝箱だな）");

                            UpdateMainMessage("『扉の鍵【３】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か、大事に持っておかねえとな）");
                        }
                        break;
                    case 168:
                        if (!we.dungeonEvent4_key42_4)
                        {
                            we.dungeonEvent4_key42_4 = true;

                            UpdateMainMessage("アイン:（宝箱だな）");

                            UpdateMainMessage("『扉の鍵【４】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か、大事に持っておかねえとな）");
                        }
                        break;
                    case 169:
                        if (!we.dungeonEvent4_key42_5)
                        {
                            we.dungeonEvent4_key42_5 = true;

                            UpdateMainMessage("アイン:（宝箱だな）");

                            UpdateMainMessage("『扉の鍵【５】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か、大事に持っておかねえとな）");
                        }
                        break;
                    case 170:
                        if (!we.dungeonEvent4_key42_6)
                        {
                            we.dungeonEvent4_key42_6 = true;

                            UpdateMainMessage("アイン:（宝箱だな）");

                            UpdateMainMessage("『扉の鍵【６】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か、大事に持っておかねえとな）");
                        }
                        break;
                    case 171:
                        if (!we.dungeonEvent4_key42_7)
                        {
                            we.dungeonEvent4_key42_7 = true;

                            UpdateMainMessage("アイン:（宝箱だな）");

                            UpdateMainMessage("『扉の鍵【７】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か、大事に持っておかねえとな）");
                        }
                        break;
                    case 172:
                        if (!we.dungeonEvent4_key42_8)
                        {
                            we.dungeonEvent4_key42_8 = true;

                            UpdateMainMessage("アイン:（宝箱だな）");

                            UpdateMainMessage("『扉の鍵【８】を手に入れました』");

                            UpdateMainMessage("アイン：（鍵か、大事に持っておかねえとな）");
                        }
                        break;
                    #endregion
                    #region "宝箱エリア４-２"
                    case 173:
                        we.TruthTreasure455 = GetTreasure(Database.RARE_EVERMIND_SENSE);
                        break;
                    case 174:
                        we.TruthTreasure456 = GetTreasure(Database.GROWTH_LIQUID4_MIND);
                        break;
                    case 175:
                        we.TruthTreasure457 = GetTreasure(Database.RARE_DARKNESS_COIN);
                        break;
                    case 176:
                        we.TruthTreasure458 = GetTreasure(Database.RARE_DANZAI_ANGEL_GOHU);
                        break;
                    case 177:
                        we.TruthTreasure459 = GetTreasure(Database.EPIC_ETERNAL_HOMURA_RING);
                        break;
                    #endregion
                    #region "エリア４-２扉"
                    case 178:
                        if (!we.dungeonEvent485)
                        {
                            if (!we.dungeonEvent486)
                            {
                                we.dungeonEvent486 = true;

                                UpdateMainMessage("アイン：（扉・・・）");

                                UpdateMainMessage("アイン：（鍵穴を・・・開けさえすれば・・・）");
                            }

                            int keyNum = 0;
                            if (we.dungeonEvent4_key42_1) { keyNum++; }
                            if (we.dungeonEvent4_key42_2) { keyNum++; }
                            if (we.dungeonEvent4_key42_3) { keyNum++; }
                            if (we.dungeonEvent4_key42_4) { keyNum++; }
                            if (we.dungeonEvent4_key42_5) { keyNum++; }
                            if (we.dungeonEvent4_key42_6) { keyNum++; }
                            if (we.dungeonEvent4_key42_7) { keyNum++; }
                            if (we.dungeonEvent4_key42_8) { keyNum++; }

                            if (keyNum <= 0)
                            {
                                UpdateMainMessage("アイン：（まだ鍵は集めてねえ。キッチリ探すぜ）");
                            }
                            else if (keyNum == 1)
                            {
                                UpdateMainMessage("アイン：（鍵はまだ１個、どうもこれだけじゃ足りねえみたいだな。他を探そう）");
                            }
                            else if (keyNum == 2)
                            {
                                UpdateMainMessage("アイン：（鍵はまだ２個、どうもこれだけじゃ足りねえみたいだな。他を探そう）");
                            }
                            else if (keyNum == 3)
                            {
                                UpdateMainMessage("アイン：（鍵はまだ３個、どうもこれだけじゃ足りねえみたいだな。他を探そう）");
                            }
                            else if (keyNum == 4)
                            {
                                UpdateMainMessage("アイン：（鍵は一応４個あるが、まだ足りそうにもねえ。もう少しだけ探索だ。）");
                            }
                            else if (keyNum == 5)
                            {
                                UpdateMainMessage("アイン：（鍵は一応５個あるが、まだ足りそうにもねえ。もう少しだけ探索だ。）");
                            }
                            else if (keyNum == 6)
                            {
                                UpdateMainMessage("アイン：（鍵は一応６個あるが、まだ足りそうにもねえ。もう少しだけ探索だ。）");
                            }
                            else if (keyNum == 7)
                            {
                                UpdateMainMessage("アイン：（鍵は７個。あと少しのハズなんだ。絶対に見つけるぞ。）");
                            }
                            else if (keyNum == 8)
                            {
                                we.dungeonEvent485 = true;

                                UpdateMainMessage("アイン：（よし、これで・・・）");

                                UpdateMainMessage("　　　　『ッギ・・・ッギギギイイィィィ・・・』");

                                blueWallRight[22 * Database.TRUTH_DUNGEON_COLUMN + 48] = false;
                                blueWallLeft[22 * Database.TRUTH_DUNGEON_COLUMN + 49] = false;
                                UpdateUnknownTile();
                                dungeonField.Invalidate();

                                UpdateMainMessage("", true);
                            }
                        }
                        break;
                    #endregion
                    #region "エリア４-２終了"
                    case 179:
                        if (!we.dungeonEvent488)
                        {
                            we.dungeonEvent488 = true;

                            UpdateMainMessage("アイン：（扉がある・・・）");

                            UpdateMainMessage("アイン：（これを・・・開けば・・・）");

                            UpdateMainMessage("　　　　『ッギ・・・ッギギギイイィィィ・・・』");

                            blueWallBottom[31 * Database.TRUTH_DUNGEON_COLUMN + 48] = false;
                            blueWallTop[32 * Database.TRUTH_DUNGEON_COLUMN + 48] = false;
                            UpdateUnknownTile();
                            dungeonField.Invalidate();

                            UpdateMainMessage("", true);

                        }
                        break;
                    #endregion
                    #region "エリア４から１への通路"
                    case 180:
                        if (we.dungeonEvent488)
                        {
                            if (!we.dungeonEvent489)
                            {
                                we.dungeonEvent489 = true;

                                UpdateMainMessage("　　【　アインの触れた壁は、うっすらと光りだし始めた　】");

                                dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 32 + 46].Name = Database.TILEINFO_13;
                                dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 32 + 46].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                                tileInfo4[Database.TRUTH_DUNGEON_COLUMN * 32 + 46] = Database.TILEINFO_13;
                                dungeonField.Invalidate();

                                UpdateMainMessage("　　【　壁は淡い光とともに、消滅した　】");

                                UpdateUnknownTileArea(knownTileInfo4, 46, 46, 21, 31);
                                UpdateUnknownTile();
                            }
                        }
                        break;
                    #endregion
                    #region "そして、現実世界へ"
                    case 181:
                        if (!GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd)
                        {
                            UpdateMainMessage("　＜＜＜　その時だった　＞＞＞");

                            UpdateMainMessage("　『ッガシャン！！！』");

                            dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 31 + 46].Name = Database.TILEINFO_19;
                            dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 31 + 46].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_19);
                            tileInfo4[Database.TRUTH_DUNGEON_COLUMN * 31 + 46] = Database.TILEINFO_19;
                            dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 32 + 46].Name = Database.TILEINFO_24;
                            dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 32 + 46].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
                            tileInfo4[Database.TRUTH_DUNGEON_COLUMN * 32 + 46] = Database.TILEINFO_24;
                            dungeonField.Invalidate();
                            UpdateMainMessage("　＜＜＜　アイン・ウォーレンスの背後は突如、分厚い壁に覆われた　＞＞＞");

                            GroundOne.WE2.RealWorld = true;
                            Method.AutoSaveTruthWorldEnvironment();
                            this.dungeonField.Invalidate();
                            UpdateMainMessage("　　　【そしてアインは、脳裏への激しい頭痛と共に、絶対的な時間と空間を把握し始める！！！】");

                            UpdateMainMessage("アイン：（ッグ・・・頭ガ・・・ッグ・・・グアァ！！）");

                            UpdateMainMessage("アイン：（・・・ッグ・・・ック・・・）");

                            UpdateMainMessage("　　　【そして、脳裏への激痛は徐々に薄れていった】");

                            UpdateMainMessage("アイン：（・・・っふう）");

                            UpdateMainMessage("アイン：（こ、ここは・・・）");

                            UpdateMainMessage("アイン：（そうだ、ラナを助けるんだ）");

                            UpdateMainMessage("アイン：（俺はもう戻らない）");

                            UpdateMainMessage("アイン：（絶対に助け出してみせる）");
                        }
                        break;
                    #endregion
                    #region "究極の二択"
                    case 182:
                        if (!GroundOne.WE2.DungeonEvent1)
                        {
                            GroundOne.WE2.DungeonEvent1 = true;

                            UpdateMainMessage("アイン：（何かが見える・・・これは・・・）");

                            GroundOne.PlayDungeonMusic(Database.BGM19, Database.BGM19LoopBegin);
                            using (TruthChoiceStatue tcs = new TruthChoiceStatue())
                            {
                                tcs.StartPosition = FormStartPosition.CenterParent;
                                tcs.MC = this.MC;
                                tcs.SC = this.SC;
                                tcs.TC = this.TC;
                                tcs.WE = this.WE;
                                tcs.KnownTileInfo = this.knownTileInfo;
                                tcs.KnownTileInfo2 = this.knownTileInfo2;
                                tcs.KnownTileInfo3 = this.knownTileInfo3;
                                tcs.KnownTileInfo4 = this.knownTileInfo4;
                                tcs.KnownTileInfo5 = this.knownTileInfo5;
                                tcs.Truth_KnownTileInfo = this.Truth_KnownTileInfo;
                                tcs.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2;
                                tcs.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3;
                                tcs.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4;
                                tcs.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5;
                                tcs.ShowDialog();
                                if (tcs.DialogResult == System.Windows.Forms.DialogResult.Cancel)
                                {
                                    this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                                }
                            }
                        }
                        break;
                    #endregion
                    #region "最下層への階段前の扉"
                    case 183:
                        if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd && !GroundOne.WE2.SeekerEvent2)
                        {
                            UpdateMainMessage("アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　（　扉が開いている　）");

                            UpdateUnknownTileArea(knownTileInfo4, 49, 52, 20, 20);

                            UpdateMainMessage("　　（　そして階段が見える　）");

                            UpdateMainMessage("　　（　だが特に何も感じない　）");

                            UpdateMainMessage("　　（　絶望や虚無感すら感じ取れない　）");

                            UpdateMainMessage("　　（　感情と呼べる感情はすべて消失したまま　）");

                            UpdateMainMessage("　　（　歩を進める　）");

                            GroundOne.WE2.SeekerEvent2 = true;
                        }
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        break;
                    #endregion
                    #region "下り階段"
                    case 184:
                        if (!GroundOne.WE2.SeekerEvent3)
                        {
                            UpdateMainMessage("アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　（　階段だ　）");

                            UpdateMainMessage("　　（　・・・降りよう・・・　）");

                            UpdateMainMessage("　　（　考えたわけではなく　）");

                            UpdateMainMessage("　　（　ふと、記憶の断片がよみがえった　）");

                            UpdateMainMessage("　　（　ダンジョンの最下層は　）");

                            UpdateMainMessage("　　（　『　５階　』　）");

                            UpdateMainMessage("　　（　そう聞いたことがある　）");

                            UpdateMainMessage("　　（　という事は　）");

                            UpdateMainMessage("　　（　・・・この先が最下層・・・　）");

                            UpdateMainMessage("アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　（　階段の先は完全に暗くなっている　）");

                            UpdateMainMessage("　　（　明かりが全く灯っていないようだ　）");

                            UpdateMainMessage("　　（　だが、俺にとってそんな事は関係なかった　）");

                            UpdateMainMessage("　　（　何も感じずに最下層への階段を降り始めた　）");

                            UpdateMainMessage("　　（　まるで、深淵の奥底に消えていくかの様に・・・　）");

                            //MessageBox.Show("この先、工事中です。おつかれさまでした。");
                            //this.DialogResult = System.Windows.Forms.DialogResult.Cancel;

                            JumpByNormal(2, 57);
                            SetupDungeonMapping(5);
                            UpdateUnknownTile();
                            dungeonField.Invalidate();

                            UpdateMainMessage("　　（　・・・　５階・・・　か・・・　）");

                            UpdateMainMessage("　　（　・・・　・・・　・・・）", true);

                            GroundOne.WE2.SeekerEvent3 = true;
                        }
                        else
                        {
                            UpdateMainMessage("　　（　・・・　５階・・・　か・・・　）");

                            UpdateMainMessage("　　（　・・・　・・・　・・・）");

                            JumpByNormal(2, 57);
                            SetupDungeonMapping(5);
                            UpdateUnknownTile();
                            dungeonField.Invalidate();
                        }
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        break;
                    #endregion
                    #region "現実世界、移動ブロック"
                    case 185:
                        if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd && GroundOne.WE2.SeekerEvent1)
                        {
                            UpdateMainMessage("　　（　・・・最下層へ・・・　）");
                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                            dungeonField.Invalidate();
                            UpdateMainMessage("", true);
                        }
                        break;
                    case 186:
                        if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd && GroundOne.WE2.SeekerEvent1)
                        {
                            UpdateMainMessage("　　（　・・・最下層へ・・・　）");
                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                            dungeonField.Invalidate();
                            UpdateMainMessage("", true);
                        }
                        break;
                    case 187:
                        if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd && GroundOne.WE2.SeekerEvent1)
                        {
                            UpdateMainMessage("　　（　・・・最下層へ・・・　）");
                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                            dungeonField.Invalidate();
                            UpdateMainMessage("", true);
                        }
                        break;
                    case 188:
                        if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd && GroundOne.WE2.SeekerEvent1)
                        {
                            UpdateMainMessage("　　（　・・・最下層へ・・・　）");
                            UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            dungeonField.Invalidate();
                            UpdateMainMessage("", true);
                        }
                        break;
                    #endregion
                }
            }

            #endregion
            #region "５階"
            else if (area == 5)
            {
                switch (ii)
                {
                    #region "４階へ戻る階段"
                    case 0:
                        UpdateMainMessage("アイン：（４階に戻っても意味はないな・・・）", true);
                        break;
                    #endregion
                    #region "細い通路の始まり"
                    case 1:
                        if (!GroundOne.WE2.SeekerEvent501)
                        {                           
                            GroundOne.WE2.SeekerEvent501 = true;
                        }
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        break;
                    #endregion
                    #region "大通路の始まり"
                    case 2:
                        UpdateUnknownTileArea(knownTileInfo5, 44, 59, 29, 35);
                        if (!GroundOne.WE2.SeekerEvent502)
                        {
                            UpdateMainMessage("アイン：（デカい通路に出たな・・・）");

                            UpdateMainMessage("アイン：（・・・　・・・）");
                            
                            GroundOne.WE2.SeekerEvent502 = true;
                        }
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        break;
                    #endregion
                    #region "大通路の中間１"
                    case 3:
                        UpdateUnknownTileArea(knownTileInfo5, 32, 43, 30, 34);
                        if (!GroundOne.WE2.SeekerEvent503)
                        {
                            UpdateMainMessage("アイン：（・・・　壁には　・・・）");

                            UpdateMainMessage("アイン：（無数の歯車・・・そして・・・）");

                            UpdateMainMessage("アイン：（ツブツブの小さい光だ・・・）");

                            UpdateMainMessage("アイン：（見ていると、自分が進んでるのかどうかが分からなくなってくる・・・）");

                            UpdateMainMessage("アイン：（・・・　・・・）");

                            GroundOne.WE2.SeekerEvent503 = true;
                        }
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        break;
                    #endregion
                    #region "大通路の中間２"
                    case 4:
                        UpdateUnknownTileArea(knownTileInfo5, 20, 31, 31, 33);
                        if (!GroundOne.WE2.SeekerEvent504)
                        {
                            UpdateMainMessage("アイン：（・・・　・・・）");

                            UpdateMainMessage("アイン：（・・・　うっすらと　・・・　何かが見える　・・・）");

                            UpdateMainMessage("アイン：（・・・　玉座？　・・・）");

                            UpdateMainMessage("アイン：（・・・　・・・）");

                            GroundOne.WE2.SeekerEvent504 = true;
                        }
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        break;
                    #endregion
                    #region "大通路の終わり"
                    case 5:
                        UpdateUnknownTileArea(knownTileInfo5, 10, 19, 32, 32);
                        if (!GroundOne.WE2.SeekerEvent505)
                        {
                            UpdateMainMessage("アイン：（・・・　・・・）");

                            UpdateMainMessage("アイン：（・・・　何か　・・・　存在を感じる　・・・）");

                            UpdateMainMessage("アイン：（・・・　・・・）");

                            UpdateMainMessage("アイン：（・・・　玉座は　・・・　もぬけの殻だ　・・・）");

                            UpdateMainMessage("アイン：（・・・　・・・）");

                            UpdateMainMessage("アイン：（・・・　誰か　・・・　いるのか？　・・・）");

                            UpdateMainMessage("アイン：（・・・　・・・）");

                            UpdateMainMessage("アイン：（・・・　玉座まで　・・・　行ってみるか　・・・）");

                            GroundOne.WE2.SeekerEvent505 = true;
                        }
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        break;
                    #endregion
                    #region "ボスと語り、そして戦闘へ"
                    case 6:
                        UpdateUnknownTileArea(knownTileInfo5, 0, 9, 27, 37);
                        if (!GroundOne.WE2.SeekerEvent506 && !GroundOne.WE2.SeekerEvent507)
                        {
                            UpdateMainMessage("アイン：（・・・　・・・）");

                            UpdateMainMessage("アイン：（・・・　玉座に　・・・　ついたな　・・・）");

                            UpdateMainMessage("アイン：（・・・　・・・）");

                            UpdateMainMessage("アイン：（・・・　意味　・・・　ねえか　・・・）");

                            UpdateMainMessage("アイン：（・・・　・・・　・・・）");

                            UpdateMainMessage("アイン：（・・・　・・・）");

                            UpdateMainMessage("アイン：（・・・）");

                            UpdateMainMessage("　　（　玉座に辿りついたこの時　）");

                            UpdateMainMessage("　　（　俺は直感的に理解した　）");

                            UpdateMainMessage("　　（　ここに来た事自体で俺はようやく達成したんだ　）");

                            UpdateMainMessage("　　（　最下層　）");

                            UpdateMainMessage("　　（　制覇　）");

                            UpdateMainMessage("　　（　当初の目的は達成された　）");

                            UpdateMainMessage("　　（　それだけだった　）");

                            UpdateMainMessage("　　（　何の感情も生まれてこない　）");

                            UpdateMainMessage("　　（　無機質さだけが残った　）");

                            UpdateMainMessage("　　（　俺はそこにずいぶんと長い事そうして居たようにも思える　）");

                            UpdateMainMessage("　　（　気がつけば　）");

                            UpdateMainMessage("　　（　誰も居なかったハズの玉座に　）");

                            UpdateMainMessage("　　（　ただ一人　）");

                            UpdateMainMessage("　　（　こちらを見ることもなく、誰かが座っていた　）");

                            UpdateMainMessage("　　（　俺は剣を床に突きたて　）");

                            UpdateMainMessage("　　（　そこにゆっくりと座り込み　）");

                            UpdateMainMessage("　　（　そこで足の膝の上に頭の全面を突っ伏させるようにして　）");

                            UpdateMainMessage("　　（　顔を下に伏せ　）");

                            UpdateMainMessage("　　（　動く事を完全にやめた　）");

                            UpdateMainMessage("　　（　ソイツは何かを俺に語りかける事もなく　）");

                            UpdateMainMessage("　　（　俺はソイツに何かを語りかける事もなく　）");

                            UpdateMainMessage("　　（　時間軸は完全に消滅　）");

                            UpdateMainMessage("　　（　空間だけが支配する世界となった　）");

                            UpdateMainMessage("　　（　俺は、喋ったり考えたりする気が完全に失せていた　）");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　（　あらゆる行動に意味はなくなっていた　）");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　（　生きていく意味は、もう存在しない感覚がある　）");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　（　俺はここで　）");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　（　無限の停止空間に入った感じがした　）");

                            UpdateMainMessage("　　（　このままずっと止まっているのも良いだろう　）");

                            UpdateMainMessage("　　（　永遠とも思える長い時間の間　）");

                            UpdateMainMessage("　　（　ひたすら突っ伏していた　）");

                            GroundOne.StopDungeonMusic();
                            GroundOne.PlayDungeonMusic(Database.BGM07, Database.BGM07LoopBegin);

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：少年よ");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：少年よ");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：最愛の者を");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：失ったか");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：喋らなくて良い");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：少年よ");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：このまま、ここで");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：この時間を続けるのもよいだろう");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：少年の気が済むまで");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　？？？：いつまでも待とう");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・ぅ・・・");

                            UpdateMainMessage("　　？？？：・・・・・・");

                            UpdateMainMessage("　　アイン：ウソだ！！！");

                            UpdateMainMessage("　　アイン：何でだよ！！！");

                            UpdateMainMessage("　　アイン：別にラナじゃなくても良かったんだろ！？　そうだろ！？");

                            UpdateMainMessage("　　？？？：このダンジョンは、少女ラナ・アミリアを選定したのだ");

                            UpdateMainMessage("　　？？？：あきらめるがよい");

                            UpdateMainMessage("　　アイン：選定って何だよ！？");

                            UpdateMainMessage("　　？？？：ダンジョンが決定する意志に基づくもののことを指している");

                            UpdateMainMessage("　　アイン：ダンジョンが決定する意志だと！？冗談じゃねぇ！！！");

                            UpdateMainMessage("　　アイン：神様でも居るってのかよ！？");

                            UpdateMainMessage("　　？？？：少年がどう考えるかは重要ではないのだ");

                            UpdateMainMessage("　　？？？：このダンジョンにはそれが存在している");

                            UpdateMainMessage("　　アイン：じゃあ、ダンジョンが意志を持ってたと百万歩譲ってそうだとしよう。");

                            UpdateMainMessage("　　アイン：何でラナが死ぬ必要があったんだよ！！　答えろよ！！！");

                            UpdateMainMessage("　　？？？：必要性とは少年にとって必要であったとしても");

                            UpdateMainMessage("　　？？？：ダンジョンにとって必要性とは必要の無いもの");

                            UpdateMainMessage("　　？？？：犠牲となる死は確約されていた真実だったのだ");

                            UpdateMainMessage("　　アイン：なんだよそれ！！");

                            UpdateMainMessage("　　アイン：なんだってんだ一体！！");

                            UpdateMainMessage("　　アイン：必要もなく死なせたって事かよ！？");

                            UpdateMainMessage("　　？？？：生まれる事に必要性はあるが死に至る事に必要性は存在しない");

                            UpdateMainMessage("　　アイン：そうじゃねえ！！！");

                            UpdateMainMessage("　　アイン：ダンジョンが何で、生贄みたいなことを要求してくるかって事を聞いてんだよ！！！");

                            UpdateMainMessage("　　？？？：生贄ではない");

                            UpdateMainMessage("　　アイン：じゃあ、何なんだよ！！！！！");

                            UpdateMainMessage("　　？？？：真実である");

                            UpdateMainMessage("　　？？？：覆す術はない");

                            UpdateMainMessage("　　アイン：ッグ・・・・・・");

                            UpdateMainMessage("　　アイン：っふざけるなよ！そんなものが真実なんておかしいだろうが！！！");

                            UpdateMainMessage("　　？？？：落ち着くがよい、少年");
                                                        
                            UpdateMainMessage("　　アイン：ック・・・ックソ・・・ッグ・・・");

                            UpdateMainMessage("　　【アインの身体の一部から、一つの雫が、床面に垂直に落ち、染み込んでいった】");

                            UpdateMainMessage("　　アイン：どっ、どうすりゃよかったんだよ・・・");

                            UpdateMainMessage("　　アイン：これで、終わりなのかよ。もう手立てはないのかよ！？");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：答えてくれよ、なあ！");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：本当に無いのかよ！？");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：何で無言なんだよ！教えてくれよ・・・頼む！");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：俺には教える気は無いってことか・・・");

                            UpdateMainMessage("　　？？？：そうではない");

                            UpdateMainMessage("　　アイン：じゃあ、なんで・・・");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：まさか・・・");

                            UpdateMainMessage("　　アイン：俺じゃ無理って話なのか？");

                            UpdateMainMessage("　　？？？：そういうことだ、少年");

                            UpdateMainMessage("　　？？？：死んでしまった事実は覆らない");

                            UpdateMainMessage("　　？？？：ラナ・アミリアの事はあきらめるがよい");

                            UpdateMainMessage("　　アイン：・・・");

                            UpdateMainMessage("　　アイン：無理でもいい");

                            UpdateMainMessage("　　アイン：不可能でもいい");

                            UpdateMainMessage("　　アイン：頼む・・・方法だけでも教えてくれ");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：最下層には、財宝が眠ってるんだろ？");

                            UpdateMainMessage("　　アイン：神の遺産って聞いてる。");

                            UpdateMainMessage("　　？？？：少年は受け取る権利がある");

                            UpdateMainMessage("　　？？？：神の遺産を受け取りなさい");

                            UpdateMainMessage("　　アイン：それ");

                            UpdateMainMessage("　　アイン：いらねえ。");

                            UpdateMainMessage("　　アイン：いらねえんだよ、そんなもん。");

                            UpdateMainMessage("　　アイン：ラナが死んだ世界じゃ・・・そんなもの受け取っても意味ねえじゃねえか・・・");

                            UpdateMainMessage("　　？？？：・・・");

                            UpdateMainMessage("　　アイン：頼む、教えてくれ。");

                            UpdateMainMessage("　　アイン：俺の一生・・・いや・・・");

                            UpdateMainMessage("　　アイン：俺の魂の消滅をかけてもいい。");

                            UpdateMainMessage("　　アイン：無に堕ちても構わない。");

                            UpdateMainMessage("　　アイン：俺の関する全てを犠牲にしても構わない！！！");

                            UpdateMainMessage("　　アイン：頼む！！！");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・やっぱりダメなのか・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：そういや・・・アンタ、名前は何ていうんだ？");

                            UpdateMainMessage("　　？？？：・・・　・・・");

                            UpdateMainMessage("　　？？？：・・・");

                            UpdateMainMessage("　　？？？：少年よ");

                            UpdateMainMessage("　　？？？：我は名も無き傍観者Bystander");

                            UpdateMainMessage("　　？？？：それが真実の名");

                            UpdateMainMessage("　　？？？：世俗では支配竜と呼ばれている");

                            UpdateMainMessage("　　アイン：し・・・支配竜・・・だと・・・？");

                            UpdateMainMessage("　　アイン：じゃあまさか、各階層で俺が見てきた竜の姿も、まさか！？");

                            UpdateMainMessage("　　支配竜：少年のイメージにより我の形態は常に変化する");

                            UpdateMainMessage("　　支配竜：呼びやすくイメージしやすい姿で問いかけるとよい");

                            UpdateMainMessage("　　アイン：そうだったのか・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：頼む、支配竜よ教えてくれ。");

                            UpdateMainMessage("　　アイン：真実なんて言われても俺には納得ができない。");

                            UpdateMainMessage("　　アイン：ラナを死なさずに済む方法はあったのかどうかを聞きたいんだ、どうなんだ？");

                            UpdateMainMessage("　　支配竜：その真実を知りたいのかね");

                            UpdateMainMessage("　　アイン：ああ、そうだ。");

                            UpdateMainMessage("　　支配竜：その問いかけに対する回答は少年自身が鍵となる");

                            UpdateMainMessage("　　支配竜：少年よ問いかけてみなさい");

                            UpdateMainMessage("　　支配竜：可能な限り少年へ言葉を贈ろう");

                            UpdateMainMessage("　　アイン：！！！");

                            UpdateMainMessage("　　アイン：じゃ・・・じゃあ・・・");

                            UpdateMainMessage("　　アイン：この最下層に来るまでの間、選択しきれなかった俺自身が主原因って事なのか？");

                            UpdateMainMessage("　　支配竜：少年自身に全ての要因があるわけではない");

                            UpdateMainMessage("　　支配竜：少年およびその周囲の関連性によりいくつもの要因が存在する");

                            UpdateMainMessage("　　アイン：周囲って言うと、俺の父母、友人、街の皆、FiveSeeker達って事なのか？");

                            UpdateMainMessage("　　支配竜：少年の知り得る情報では事を成さない");

                            UpdateMainMessage("　　支配竜：この世の膨大な蓄積および関連性を指している");

                            UpdateMainMessage("　　支配竜：ただし少年が今思い付いた周囲というのは的を得ている");

                            UpdateMainMessage("　　アイン：俺の知識経験だけじゃ役不足って事なのか・・・");

                            UpdateMainMessage("　　アイン：俺だけが原因じゃないとしてもだ。");

                            UpdateMainMessage("　　アイン：やっぱり俺に少なからず原因はある。そうなんだろう？");

                            UpdateMainMessage("　　支配竜：少年の赴くままである");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：まだ聞きたい事がある。");

                            UpdateMainMessage("　　アイン：ダンジョンを進めるうち、どうして俺はあんなフラッシュバックが見え始めたんだ？");

                            UpdateMainMessage("　　支配竜：少年が見たという内容を述べてみるがよい");

                            UpdateMainMessage("　　アイン：小さいころの思い出だったり、ラナとファージル宮殿にいった時だったり・・・いろいろだ。");

                            UpdateMainMessage("　　支配竜：他には");

                            UpdateMainMessage("　　アイン：ええと・・・ボケ師匠との遭遇とか、ハンナおばさんとの雑談とか・・・");

                            UpdateMainMessage("　　支配竜：他には");

                            UpdateMainMessage("　　アイン：緑小屋でヴェルゼとDUEL、神剣フェルトゥーシュはいつの間にか失われて・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：どうして、そんな事聞くんだ？俺は今フラッシュバックが見える理由を聞いてるんだが？");

                            UpdateMainMessage("　　支配竜：我が知りうる少年自身の系譜の中に存在するはずのものが");

                            UpdateMainMessage("　　支配竜：少年がフラッシュバックだと感じたものの中に存在しない");

                            UpdateMainMessage("　　支配竜：差異が発生し始めている");

                            UpdateMainMessage("　　アイン：ど、どういう意味だ？");

                            UpdateMainMessage("　　支配竜：我は意味を持たない");

                            UpdateMainMessage("　　支配竜：意味とは少年の赴くままに生成される");

                            UpdateMainMessage("　　支配竜：我はこの世の真実を語るのみ");

                            UpdateMainMessage("　　支配竜：この世の真実では神剣フェルトゥーシュは入手されるもの");

                            UpdateMainMessage("　　アイン：な、なんだって！？バカな！！確かフェルトゥーシュは失ったはずだ！！");

                            UpdateMainMessage("　　支配竜：我は真実を語るのみ");

                            UpdateMainMessage("　　支配竜：少年がフラッシュバックを見るのは必然である");

                            UpdateMainMessage("　　アイン：失ったんじゃないのか・・・どういう事だ・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：じゃあ、神剣フェルトゥーシュがどうして４階の最後に存在してるんだ？");

                            UpdateMainMessage("　　アイン：あれは俺が小さい頃、ラナの母さんから譲り受けてから");

                            UpdateMainMessage("　　アイン：不覚にも俺自身が失ってしまったものだ");

                            UpdateMainMessage("　　アイン：その失った物がこのダンジョンにあるのはおかしいだろ？");

                            UpdateMainMessage("　　アイン：このダンジョンに神剣フェルトゥーシュは存在しないはずだ、そこはどうなんだ？");

                            UpdateMainMessage("　　支配竜：フェルトゥーシュはこのダンジョンから生まれ");

                            UpdateMainMessage("　　支配竜：そしてこのダンジョンへと還る");

                            UpdateMainMessage("　　アイン：ちょっと待ってくれよ。フェルトゥーシュは俺がラナの母さんから頂いたものだ。");

                            UpdateMainMessage("　　アイン：ダンジョンから生まれたってどういう事だよ？");

                            UpdateMainMessage("　　支配竜：少年が生まれるより遥か古来よりフェルトゥーシュは存在している");

                            UpdateMainMessage("　　アイン：ラナの母さんよりも前？");

                            UpdateMainMessage("　　アイン：ラナの母さんが譲り受けた人よりも前？");

                            UpdateMainMessage("　　アイン：その譲り受けた人のさらに前から・・・？");

                            UpdateMainMessage("　　支配竜：連鎖に終わりは存在しない");

                            UpdateMainMessage("　　アイン：でも元々その剣を創った人は存在するんじゃないのか？");

                            UpdateMainMessage("　　支配竜：剣はこの世が生まれし頃より存在する");

                            UpdateMainMessage("　　支配竜：人の手により創生されし物ではない");

                            UpdateMainMessage("　　支配竜：この世の創生より存在するもの");

                            UpdateMainMessage("　　アイン：なっ・・・マジ・・・か・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：いや、それにしてもだ。");

                            UpdateMainMessage("　　アイン：何で【ダンジョンへと還る】なんて表現になるんだよ？");

                            UpdateMainMessage("　　アイン：俺が失ってからは、自動的にこのダンジョンへ返還されたって事なのか？");

                            UpdateMainMessage("　　支配竜：剣は人の手に渡りそして人の手によりダンジョンへ還される");

                            UpdateMainMessage("　　支配竜：今回のケースにおいても例外なく人の手によりダンジョンへ還されている");

                            UpdateMainMessage("　　アイン：誰なんだよ？そいつは？");

                            UpdateMainMessage("　　支配竜：その者の名は");

                            UpdateMainMessage("　　支配竜：ヴェルス・エクストゥーゼ・アーティス");

                            UpdateMainMessage("　　アイン：・・・　・・・　え・・・");

                            UpdateMainMessage("　　支配竜：少年にとっては聞かぬ名であるが真実の名である");

                            UpdateMainMessage("　　アイン：そ・・・それって・・・まさか！！");

                            UpdateMainMessage("　　アイン：ヴェルゼ・アーティの事を指してるのか！？！？");

                            UpdateMainMessage("　　支配竜：その名は本人が自分自身の生命を保持するために自ら命名したもの");

                            UpdateMainMessage("　　アイン：本人が・・・自分自身のために？");

                            UpdateMainMessage("　　アイン：何でそんな事する必要があったんだよ？");

                            UpdateMainMessage("　　支配竜：現象の連鎖により必然的に起こり得た現象である");

                            UpdateMainMessage("　　支配竜：意味および理由に関しては少年の赴くままである");

                            UpdateMainMessage("　　アイン：わ、そこは分かったけどさ・・・じゃあ、ヴェルゼが剣を返還したって事なのか？");

                            UpdateMainMessage("　　アイン：どうなってんだ・・・一体・・・");

                            UpdateMainMessage("　　アイン：あのDUELの時、俺から奪い取ってこのダンジョンに返還したって事なんだろうか・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：ヴェルゼ・・・そうだ、そういえば！！！");

                            UpdateMainMessage("　　アイン：ヴェルゼ・アーティはいつ俺の傍から居なくなったんだ！？");

                            UpdateMainMessage("　　アイン：４階に降りたら突然居なくなってた感じだった。あの時に居なくなったのか？");

                            UpdateMainMessage("　　支配竜：その者は４階へ到達している");

                            UpdateMainMessage("　　アイン：え！？");

                            UpdateMainMessage("　　支配竜：その者は少年とは別の方法にてこのダンジョン４層に到達している");

                            UpdateMainMessage("　　アイン：べ・・・別の・・・方法だって？");

                            UpdateMainMessage("　　アイン：そ、そんなのがあるのかよ・・・");

                            UpdateMainMessage("　　アイン：俺と離れて・・・一体何のために？");

                            UpdateMainMessage("　　支配竜：神剣フェルトゥーシュをこのダンジョンに還すためである");

                            UpdateMainMessage("　　アイン：ちょ、ちょっと待ってくれ。そこがどうしても分からない・・・");

                            UpdateMainMessage("　　アイン：ヴェルゼが神剣フェルトゥーシュを持っていたとしてだ。");

                            UpdateMainMessage("　　アイン：なんでダンジョンへ還さなくちゃならないんだよ？");

                            UpdateMainMessage("　　支配竜：摂理によって返還されている");

                            UpdateMainMessage("　　アイン：ヴェルゼが摂理そのものだとでも言うつもりか？");

                            UpdateMainMessage("　　支配竜：それは違う");

                            UpdateMainMessage("　　支配竜：摂理とは人の意志にあらず");

                            UpdateMainMessage("　　支配竜：摂理とは人の理由や意味にあらず");

                            UpdateMainMessage("　　支配竜：摂理とは神剣フェルトゥーシュそのもの");

                            UpdateMainMessage("　　支配竜：神剣フェルトゥーシュとは摂理そのもの");

                            UpdateMainMessage("　　支配竜：神剣フェルトゥーシュはこの世の創生から在りしモノ");

                            UpdateMainMessage("　　支配竜：神剣フェルトゥーシュはそれそのものが意志を持つモノ");

                            UpdateMainMessage("　　アイン：剣が・・・意志を？バカな、そんな事あるわけないだろう？");

                            UpdateMainMessage("　　支配竜：少年の理解が及ぶかどうかは少年次第");

                            UpdateMainMessage("　　支配竜：剣が意志を持ち剣の保持者を選定する");

                            UpdateMainMessage("　　支配竜：選定されし強き存在はその自らの身体を使いこのダンジョンへ神具を還しにくる");

                            UpdateMainMessage("　　支配竜：これは少年が生まれる遥か以前より永きにわたり行われ続けている");

                            UpdateMainMessage("　　支配竜：例外は存在しない");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：す、少し待ってくれ・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　（　不思議な感じだった　）");

                            UpdateMainMessage("　　（　ワケの分からない話だらけで、混乱するかと思ったが　）");

                            UpdateMainMessage("　　（　スっと心に染みわたってくる。不快感は一切ない　）");

                            UpdateMainMessage("　　（　そんな感じだった　）");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：論点をまた変えさせてくれ。");

                            UpdateMainMessage("　　アイン：ファージル宮殿、生誕祭の時だ。");

                            UpdateMainMessage("　　アイン：あの時、俺は不覚にも寝てしまったせいで");

                            UpdateMainMessage("　　アイン：そこで、ラナがエルミ国王やファラ王妃に誘われて宝物庫へ行ったという事を俺は知らない。");

                            UpdateMainMessage("　　アイン：だが、このダンジョン４層で、俺にそれは見えた。");

                            UpdateMainMessage("　　アイン：どうしてだ？");

                            UpdateMainMessage("　　支配竜：少女ラナ・アミリアによる精神干渉がこのダンジョンを対象として行われているためである");

                            UpdateMainMessage("　　アイン：なっ、ラナが！？");

                            UpdateMainMessage("　　支配竜：少女ラナ・アミリアが死の間際にて生前の最も刻み込まれた記憶をダンジョンに封じ込めた");

                            UpdateMainMessage("　　支配竜：また少年がそれを感知する潜在意識が存在するためビジョンが見えるのは必然である");

                            UpdateMainMessage("　　アイン：そんな・・・死の間際でなんでそんな・・・");

                            UpdateMainMessage("　　アイン：いや、いやいやいや。待ってくれよ。");

                            UpdateMainMessage("　　アイン：俺が見たのは４層を進めてる間だ。");

                            UpdateMainMessage("　　アイン：ラナは最後の銅像のトコで死んだ。");

                            UpdateMainMessage("　　アイン：時間的に辻褄が合わねえ。順序が逆じゃねえのか？");

                            UpdateMainMessage("　　支配竜：時間軸に問題は存在しない");

                            UpdateMainMessage("　　支配竜：少年が知る事になったのは少女ラナ・アミリアが死亡した時である");

                            UpdateMainMessage("　　アイン：いや、だからそこが逆だって話だろ？");

                            UpdateMainMessage("　　支配竜：少年が意を介せないかどうかは関与に値しない");

                            UpdateMainMessage("　　支配竜：我は真実を語るのみ");

                            UpdateMainMessage("　　アイン：ばかな・・・ありえねえだろ・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　（　自分の言葉とは真逆の感性が、この時、俺の中で湧きあがった　）");

                            UpdateMainMessage("　　（　この語り手のヤツに信頼をおくとかどうとかは関係なく　）");

                            UpdateMainMessage("　　（　ヤツは在り様をそのまま伝えてくるだけだ　）");

                            UpdateMainMessage("　　（　ウソやホント、正や偽、表と裏、事実と証明　）");

                            UpdateMainMessage("　　（　そういった事が完全に存在しない　）");

                            UpdateMainMessage("　　（　強いて誤りがあるとすれば　）");

                            UpdateMainMessage("　　（　ここでいう誤りは、すなわち、自分の感情や経験だ　）");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：別の話をさせてくれ。");

                            UpdateMainMessage("　　アイン：３階に関してだ。");

                            UpdateMainMessage("　　アイン：あの鏡、秤の三面鏡はどういった内容なんだ。");

                            UpdateMainMessage("　　支配竜：対象の思考から人物像を読み取りそれを具現化する鏡である");

                            UpdateMainMessage("　　支配竜：表面思考");

                            UpdateMainMessage("　　支配竜：原理思考");

                            UpdateMainMessage("　　支配竜：潜在思考");

                            UpdateMainMessage("　　支配竜：合わせて３つの像が鏡に映し出される");

                            UpdateMainMessage("　　支配竜：対象はそれら３つの像と対話を行うことが可能となる");

                            UpdateMainMessage("　　アイン：像って言うのは何だ？本物ってわけじゃないのにどうして会話が成立するんだ？");

                            UpdateMainMessage("　　支配竜：対象の思考パターンの通りに３つの像は語る");

                            UpdateMainMessage("　　アイン：それって・・・対象となったヤツが自分自身に問いかけてるのと同じって事か？");

                            UpdateMainMessage("　　支配竜：３つの像の発言は対象の者の意のままである");

                            UpdateMainMessage("　　支配竜：像自身に自意識かつ自発的発言はない");

                            UpdateMainMessage("　　支配竜：あるのは虚構のみ");

                            UpdateMainMessage("　　アイン：像はラナの思考そのものでしか喋らなかったって事なのか・・・？");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：ラナがその鏡を使った結果どうなったんだ？教えてくれ");

                            UpdateMainMessage("　　支配竜：少女ラナ・アミリアにさしたる変化はない");

                            UpdateMainMessage("　　支配竜：心の在り様が増幅されるのみである");

                            UpdateMainMessage("　　アイン：俺のダンジョン探索にラナが着いてくる事はないと思っていた。鏡を見て心変わりしたって事か？");

                            UpdateMainMessage("　　支配竜：少女ラナ・アミリアはもとより少年に着いていく心がはじめから存在している");

                            UpdateMainMessage("　　支配竜：虚無の鏡はその精神を増幅するまで");

                            UpdateMainMessage("　　支配竜：結果への因果に影響はしない");

                            UpdateMainMessage("　　アイン：そんな・・・どうして・・・");

                            UpdateMainMessage("　　アイン：待てよ、さっきから虚無って言ってるが・・・");

                            UpdateMainMessage("　　アイン：あれは秤の三面鏡だろ？俺でもさすがにそのぐらい知識として知っているぜ。");

                            UpdateMainMessage("　　支配竜：少年の言う鏡は我が生成したもの");

                            UpdateMainMessage("　　支配竜：名は虚無の鏡という");

                            UpdateMainMessage("　　アイン：待ってくれよ。それは秤の三面鏡だって事は巷でも聞いてるし国宝として正式名称でもある、間違いないはずだ。");

                            UpdateMainMessage("　　支配竜：秤の三面鏡とは人が命名した名である");

                            UpdateMainMessage("　　支配竜：鏡の名が人間からどのように呼ばれようと変化はしない");

                            UpdateMainMessage("　　支配竜：虚無の鏡は対象をより虚構へと導く");

                            UpdateMainMessage("　　アイン：虚構って・・・そんな・・・");

                            UpdateMainMessage("　　アイン：何でそんなものをラナに見せたりしたんだ、国王エルミとファラ王妃は・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：そうか、ひょっとして");

                            UpdateMainMessage("　　アイン：ファラ王妃の何でもお見通しっていうカラクリは、そういう事か。");

                            UpdateMainMessage("　　アイン：鏡を使って一般市民からあらゆる情報を引き出していたって事なんじゃないのか。");

                            UpdateMainMessage("　　アイン：本人にとって意味は無くとも、そこから得られる情報は国王や王妃にとって貴重な情報源だ。");

                            UpdateMainMessage("　　アイン：だとしたら・・・");

                            UpdateMainMessage("　　アイン：俺がダンジョンを挑む事を・・・ラナを鏡に照らし合わせる事で既に引き出されていた情報だったんだ。");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：３階でもう一つ質問がある。");

                            UpdateMainMessage("　　アイン：【正解】、【無限解】、【原点解】に関してだ。");

                            UpdateMainMessage("　　アイン：【正解】、【無限解】はおいとくにしても");

                            UpdateMainMessage("　　アイン：【原点解】ってのは、明確にどこかに存在するのか？");

                            UpdateMainMessage("　　支配竜：原点解は３階に存在する");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：俺はその原点解には到達できていないが、この最下層には辿り着いた。");

                            UpdateMainMessage("　　アイン：ひょっとしてだが、最下層に来ること自体が誤りなのか？");

                            UpdateMainMessage("　　支配竜：誤りかどうかは我は関与しない");

                            UpdateMainMessage("　　アイン：そうだった・・・ええと・・・");

                            UpdateMainMessage("　　アイン：【正解】さえ得ていれば、この最下層には辿りつけるのか？");

                            UpdateMainMessage("　　支配竜：正解を得た者は最下層へ到達する権利を持つ");

                            UpdateMainMessage("　　支配竜：最下層へ到達せし者は神の遺産を受諾する権利を持つ");

                            UpdateMainMessage("　　アイン：じゃあ、【原点解】とは何なんだ？");

                            UpdateMainMessage("　　支配竜：原点解とは真実世界へと遷移するための鍵を手に入れる事である");

                            UpdateMainMessage("　　アイン：真実世界？一体どういう事だ？");

                            UpdateMainMessage("　　支配竜：真実世界とは少年が今ここにいる世界には非ず");

                            UpdateMainMessage("　　アイン：今ここにいる世界ってのは何なんだ？");

                            UpdateMainMessage("　　支配竜：今ここに現存する世界は少年およびその関連する人物が創り上げた過去の幻想世界");

                            UpdateMainMessage("　　支配竜：人の幻想が過去を構築する");

                            UpdateMainMessage("　　支配竜：人の認識が現実を構築する");

                            UpdateMainMessage("　　支配竜：生命の波動が真実を構築する");

                            UpdateMainMessage("　　支配竜：生命そのものが真実世界を開く鍵となる");

                            UpdateMainMessage("　　アイン：・・・待ってくれ。");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：もし、そういう真実世界があるとして");

                            UpdateMainMessage("　　アイン：俺達が生きてきた現実世界はどうなる？消えてしまうのか？");

                            UpdateMainMessage("　　支配竜：過去としての世界は残り続ける");

                            UpdateMainMessage("　　支配竜：人が認識する現実世界が消える事はない");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：仮に今ここが過去の幻想世界だとしてだ");

                            UpdateMainMessage("　　アイン：この中で【原点解】をもし入手していれば");

                            UpdateMainMessage("　　アイン：ラナが死なずに済む方法があるって事だよな？");

                            UpdateMainMessage("　　支配竜：真実世界とは生命波動の連続性で生成される世界");

                            UpdateMainMessage("　　支配竜：真実世界で少女ラナ・アミリアが死なずに済む方法があるかどうかは不確定である");

                            UpdateMainMessage("　　支配竜：その可能性は変化する時間軸により変化する");

                            UpdateMainMessage("　　支配竜：それは０％でもあり１００％でもある");

                            UpdateMainMessage("　　支配竜：人の意識が束縛を生み不変を創り出す");

                            UpdateMainMessage("　　支配竜：人の行為が真実から事象を遠ざけ幻想を生み出す");

                            UpdateMainMessage("　　支配竜：真実とは永遠に変化するものでありそれこそが永遠なる不変の理である");

                            UpdateMainMessage("　　支配竜：少年アイン・ウォーレンス　これを認識せよ");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　（　考え方がまったく追いつかない　）");

                            UpdateMainMessage("　　（　途中までは何となく理解できるが　）");

                            UpdateMainMessage("　　（　その途中から突如、解釈方法が不明の領域へと放り込まれる　）");

                            UpdateMainMessage("　　（　俺の思考範囲では、この支配竜の言葉は完全に遠く及ばぬ領域だ　）");

                            UpdateMainMessage("　　（　どうするべきなのか、何をしなくちゃいけないとか、考え方を改めるべきとか・・・　）");

                            UpdateMainMessage("　　（　そういう類のレベルから大きくかけ離れる　）");

                            UpdateMainMessage("　　（　俺たち人間の言う「思考」や「根拠」「正当性」「理論的」などがあるが　）");

                            UpdateMainMessage("　　（　それら人間の行動原理の全てが　）");

                            UpdateMainMessage("　　（　とても陳腐に感じられる　）");

                            UpdateMainMessage("　　（　この支配竜は次元が違いすぎる　）");

                            UpdateMainMessage("　　（　・・・　・・・　・・・　）");
                            
                            UpdateMainMessage("　　（　だからこそ、自分という中の知識や感性を全部捨てて、問いかける事ができる　）");

                            UpdateMainMessage("　　（　支配竜は俺には分からないレベルの領域から明確に答えてくれる　）");

                            UpdateMainMessage("　　（　そんな感じだ　）");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：【原点解】をもし見つけていれば、と俺は今思っているが");

                            UpdateMainMessage("　　アイン：【原点解】を見つけるためには、一定の規則や条件、ルールといったものが存在するんじゃないのか？");

                            UpdateMainMessage("　　アイン：・・・頼む・・・教えてくれ。");

                            UpdateMainMessage("　　支配竜：神々の詩を詠唱せよ");

                            UpdateMainMessage("　　アイン：神々の・・・詩？");

                            UpdateMainMessage("　　支配竜：詠唱の間にて神々の詩を一部欠ける事なく発するがよい");

                            UpdateMainMessage("　　支配竜：原点解への導きはその詩を鍵として開かれる");

                            UpdateMainMessage("　　アイン：ちょっと待ってくれ。何なんだその【神々の詩】ってのは");

                            UpdateMainMessage("　　支配竜：世界の理を呼び覚ます詩");

                            UpdateMainMessage("　　支配竜：人がその領域へ意識が向けられる唯一の方法");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：それは、俺自身知っている詩なのか？");

                            UpdateMainMessage("　　支配竜：我が知りうる少年自身の系譜の中にその詩は存在する");

                            UpdateMainMessage("　　支配竜：世界の創生より生まれし詩は時を経てなお消滅せず");

                            UpdateMainMessage("　　支配竜：人から人へ永遠に受け継がれし詩である");

                            UpdateMainMessage("　　アイン：人から人へ・・・受け継がれし・・・");

                            UpdateMainMessage("　　アイン：まさか、ラナの母さんから聞かされていたヤツの事か？");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：待てよ、そういえば");

                            UpdateMainMessage("　　アイン：支配竜よ、答えてくれ。");

                            UpdateMainMessage("　　アイン：【詠唱の間】ってのは明確にどこかに存在するのか？");

                            UpdateMainMessage("　　支配竜：詠唱の間は２階に存在する");

                            UpdateMainMessage("　　アイン：やっぱり、そういう事か・・・");

                            UpdateMainMessage("　　（　試練の台座と呼ばれる場所があったはずだ　）");

                            UpdateMainMessage("　　（　あれがおそらく、支配竜が語る真実の名称としては【詠唱の間】なんだ　）");

                            UpdateMainMessage("　　（　何で今まで気付かなかったんだろう、俺にとっては、分かってしまえば当たり前すぎる内容だ　）");

                            UpdateMainMessage("　　（　看板、そして壁面の文字にばかり気を取られていたから、気付けなかったのか　）");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：支配竜よ、教えてくれ。");

                            UpdateMainMessage("　　アイン：もしもだ。仮にこのダンジョンに挑んでいるのが俺じゃないとしたら");

                            UpdateMainMessage("　　アイン：ダンジョン内の構成として、【詠唱の間】は存在しない事になるのか？");

                            UpdateMainMessage("　　支配竜：連続的な因果律の影響により来るべく来たる少年アイン・ウォーレンスよ");

                            UpdateMainMessage("　　支配竜：他の者がここへ訪れる事はない");

                            UpdateMainMessage("　　支配竜：少年が訪れたのは必然である");

                            UpdateMainMessage("　　支配竜：少年ではない何者かがここへ来る事は存在しない事象である");

                            UpdateMainMessage("　　アイン：どうしてそう言い切れるんだ？");

                            UpdateMainMessage("　　アイン：このダンジョンにはいろんな奴が挑戦しにきてるはずだ。");

                            UpdateMainMessage("　　アイン：俺じゃない誰かが来る可能性は十分にある、違うか？");

                            UpdateMainMessage("　　支配竜：人は人として意志を持って行動する");

                            UpdateMainMessage("　　支配竜：それは自由意志への呼びかけに応じて行われるもの");

                            UpdateMainMessage("　　支配竜：我はそれら全ての自由意志を認識する者である");

                            UpdateMainMessage("　　支配竜：全ては既に知りえし事象");

                            UpdateMainMessage("　　支配竜：可能性という概念は人が生み出した幻想である");

                            UpdateMainMessage("　　支配竜：全ては起こるべくして起こる事象であり必然でしかない");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：俺がダンジョンへ行こうと思ったのも、知っていたって事か？");

                            UpdateMainMessage("　　支配竜：少年がここに来る事は遥か以前より決定されている");

                            UpdateMainMessage("　　支配竜：知っているという概念ではなく語られるべき事象として少年は訪れた");

                            UpdateMainMessage("　　支配竜：因果律が固定であれば少年が訪れるべき時代もまた固定である");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　（　まるで、何かの物語のような感触だ　）");

                            UpdateMainMessage("　　（　俺たち人間の感性で言う自由な振る舞いというのは　）");

                            UpdateMainMessage("　　（　この支配竜にとっては全て決定された事象だと語っている　）");

                            UpdateMainMessage("　　（　俺が来るべき・・・この地・・・この支配竜との対話・・・　）");

                            UpdateMainMessage("　　（　不思議と　）");

                            UpdateMainMessage("　　（　心の中に綺麗に波紋が広がっていくのを感じた　）");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：俺が【詠唱の間】に訪れる前にラナがパーティとして加わった。");

                            UpdateMainMessage("　　アイン：ラナが一緒にこのダンジョンに来たいと言った事に関して");

                            UpdateMainMessage("　　アイン：支配竜よ、お前はそれも知っているのか？");

                            UpdateMainMessage("　　支配竜：ヒトの感性に値する感知方法に我は関与しない");

                            UpdateMainMessage("　　支配竜：少女ラナ・アミリアが来る事も語られるべき事象の一つに過ぎない");

                            UpdateMainMessage("ｓ　　支配竜：少女ラナ・アミリアが来る事はこの世の創生が始まりし時代より紡がれる事象");

                            UpdateMainMessage("　　支配竜：少女ラナ・アミリアとして生を受ける以前よりその者の生命波動は放たれておる");

                            UpdateMainMessage("　　支配竜：これは定められし事象である");

                            UpdateMainMessage("　　アイン：っな・・・なんだって・・・");

                            UpdateMainMessage("　　アイン：じゃ、じゃあ・・・ダンジョンへ俺が向かおうと思うよりも前からか？");

                            UpdateMainMessage("　　支配竜：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：ファージルの生誕祭よりも前からか？");

                            UpdateMainMessage("　　支配竜：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：俺が傭兵訓練施設で師匠と出会う前からか？");

                            UpdateMainMessage("　　支配竜：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・っくそ・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　（　嫌な予感がした　）");

                            UpdateMainMessage("　　（　今まで感じた事のない感情　）");

                            UpdateMainMessage("　　（　俺がこうして幾つか支配竜に問いかけ続け　）");

                            UpdateMainMessage("　　（　次第に支配竜は　）");

                            UpdateMainMessage("　　（　答えなくなっていった　）");

                            UpdateMainMessage("　　（　今、支配竜はもう返答をすることもなく　）");

                            UpdateMainMessage("　　（　ただひたすらに俺の方を直視している　）");

                            UpdateMainMessage("　　（　言葉のやりとりはもう不要だという事なんだろうか　）");

                            UpdateMainMessage("　　（　支配竜がある特定の事象を一つ俺に向けている様にも思えてくる　）");

                            UpdateMainMessage("　　（　そうしている内に　）");

                            UpdateMainMessage("　　（　一つの直観が全身を駆け巡った　）");

                            UpdateMainMessage("　　（　この直観は支配竜が俺に授けてくれてるんじゃないかと思うぐらいだ　）");

                            UpdateMainMessage("　　アイン：・・・　まさか　・・・");

                            UpdateMainMessage("　　アイン：今、俺はこうして、ここにいる。");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：ひょっとして・・・");

                            UpdateMainMessage("　　支配竜：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　支配竜：少年アイン・ウォーレンスよ");

                            UpdateMainMessage("　　支配竜：少年の生命波動は既に我に届いている");

                            UpdateMainMessage("　　支配竜：言葉にせよ少年アイン・ウォーレンスよ");

                            UpdateMainMessage("　　アイン：・・・　わかった　・・・");

                            UpdateMainMessage("　　（　答えを初めから知っている様な奇妙な感触に襲われた　）");

                            UpdateMainMessage("　　アイン：俺は今まで・・・");

                            UpdateMainMessage("　　（　絶望の感触が今まで以上に拡がるのを実感し　）");

                            UpdateMainMessage("　　アイン：今までにおいて、そして、今回を含めて");

                            UpdateMainMessage("　　（　それを感じた上でこう問いかけた　）");

                            UpdateMainMessage("　　アイン：このダンジョンに一体何回挑んでいるんだ？");

                            UpdateMainMessage("　　（　絶望という単語では表しきれない感情　）");

                            UpdateMainMessage("　　支配竜：少年アイン・ウォーレンスがこのダンジョンに挑んだ回数は");

                            UpdateMainMessage("　　支配竜：" + Database.MUGEN_LOOP + "回目となる");

                            UpdateMainMessage("　　（　そして、一切の感情が吹き飛んだ感じがした　）");

                            UpdateMainMessage("　　（　言葉という言葉はもう喉から出てこない　）");

                            UpdateMainMessage("　　（　頭の中が真っ白になった事すら認識できなくなった　）");

                            UpdateMainMessage("　　支配竜：少年よ");

                            UpdateMainMessage("　　支配竜：聞くがよい");

                            UpdateMainMessage("　　支配竜：絶望の光を少年に今から照らそう");

                            UpdateMainMessage("　　アイン：！！！");

                            UpdateMainMessage("　　支配竜：神の遺産と引き換えに");

                            UpdateMainMessage("　　支配竜：ラナ・アミリア復活の方法を少年に授けよう");

                            UpdateMainMessage("　　支配竜：聞くがよい");

                            UpdateMainMessage("　　支配竜：終わりを告げる場所");

                            UpdateMainMessage("　　支配竜：少年に制覇は不可");

                            UpdateMainMessage("　　支配竜：少年アイン・ウォーレンス");

                            UpdateMainMessage("　　支配竜：少年はなにを望む");

                            UpdateMainMessage("　　支配竜：答えよ少年アイン・ウォーレンス");

                            UpdateMainMessage("　　アイン：ラナが・・・");

                            UpdateMainMessage("　　アイン：・・・死んでしまった。");

                            UpdateMainMessage("　　アイン：ラナが死んだのは俺のせいだ。");

                            UpdateMainMessage("　　アイン：お、俺の・・・せいで！！");

                            UpdateMainMessage("　　アイン：頼む！ラナを生き返らせてくれ！！");

                            UpdateMainMessage("　　支配竜：・・・　・・・　・・・");

                            UpdateMainMessage("　　支配竜：叶わぬ事");

                            UpdateMainMessage("　　アイン：何でだよ、教えてくれ頼む！！！");

                            UpdateMainMessage("　　アイン：最下層では望みが叶うってのはウソだったのかよ！？");

                            UpdateMainMessage("　　支配竜：初期条件の相違");

                            UpdateMainMessage("　　支配竜：少年の当初の願いそれにあらず");

                            UpdateMainMessage("　　アイン：最強の力が欲しかった。");

                            UpdateMainMessage("　　アイン：絶対的な強さ、誰にも負けない強さだ。");

                            UpdateMainMessage("　　アイン：そうすればラナをずっと守る事が出来る、そう考えたんだ。");

                            UpdateMainMessage("　　アイン：そのためには、神の遺産とやらを欲しがった時期があったのも確かだ。");

                            UpdateMainMessage("　　アイン：でも、ラナが死んでしまった今、そんなことは全て無意味だ、どうだっていい。");

                            UpdateMainMessage("　　アイン：俺の始めの願いは取り下げてくれ。　今の願いを叶えてくれよ！");

                            UpdateMainMessage("　　支配竜：・・・　・・・　・・・");

                            UpdateMainMessage("　　支配竜：心は満たず");

                            UpdateMainMessage("　　支配竜：満たぬモノに授けるのはただ一つ");

                            UpdateMainMessage("　　支配竜：次はなにを願う");

                            UpdateMainMessage("　　支配竜：次なるは始まり");

                            UpdateMainMessage("　　支配竜：完全なる始まり始動");

                            UpdateMainMessage("　　アイン：完全なる・・・始まり？？どういう意味だよ！？");

                            UpdateMainMessage("　　支配竜：少年の記憶の一切を消去する");

                            UpdateMainMessage("　　支配竜：時間はヒトの定義する過去と呼ばれる因称律へと");

                            UpdateMainMessage("　　支配竜：空間は始まりへと遷移させられる事となろう");

                            UpdateMainMessage("　　アイン：・・・ま、まさか！！！");

                            UpdateMainMessage("　　アイン：もう一度ダンジョンの始まりから、やれって事なのかよ！？");

                            UpdateMainMessage("　　支配竜：満たぬ主の最終選択肢");

                            UpdateMainMessage("　　支配竜：この最下層を現実とし世界へ還るか");

                            UpdateMainMessage("　　支配竜：完全なる始まりを始動とするか");

                            UpdateMainMessage("　　支配竜：決めよ少年アイン・ウォーレンス");

                            UpdateMainMessage("　　アイン：・・・もし、俺がうまくやれば、ラナは死なずに済むって事だよな！？");

                            UpdateMainMessage("　　支配竜：心満たぬままの少年であれば結果は同じコト");

                            UpdateMainMessage("　　アイン：やってみなきゃわからないだろ！？");

                            UpdateMainMessage("　　支配竜：幼きヒトよ同じコト");

                            UpdateMainMessage("　　アイン：ッグ・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・た・・・　・・・");

                            UpdateMainMessage("　　アイン：頼む。　それでもやらせてくれ。");

                            UpdateMainMessage("　　アイン：ラナの居ない世界で現実に戻ったとして");

                            UpdateMainMessage("　　アイン：それで人生を過ごすとすれば");

                            UpdateMainMessage("　　アイン：そんな人生、死んだも同然だ。");

                            UpdateMainMessage("　　アイン：このダンジョンに向かったのは俺のせいだ。");

                            UpdateMainMessage("　　アイン：俺さえ変な気を起こさなければ、ラナは死なずに済んだ。");

                            UpdateMainMessage("　　アイン：頼む、支配竜よ。俺にチャンスをくれ、頼む！");

                            UpdateMainMessage("　　支配竜：・・・　・・・　・・・");

                            UpdateMainMessage("　　支配竜：完全なる始まり我の深淵にあり");

                            UpdateMainMessage("　　支配竜：少年アイン・ウォーレンスよ");

                            UpdateMainMessage("　　支配竜：選びそして我に挑め");

                            UpdateMainMessage("　　＜＜＜　突如、アインの後方に新しく像が現れた！！　＞＞＞　）");

                            UpdateMainMessage("　　アイン：こ・・・これは・・・");

                            UpdateMainMessage("　　アイン：（・・・　・・・　・・・）");

                            UpdateMainMessage("　　アイン：（　像を調べてみるか　）");

                            GroundOne.WE2.SeekerEvent506 = true;
                        }
                        else if (GroundOne.WE2.SeekerEvent506 && !GroundOne.WE2.SeekerEvent507)
                        {
                            UpdateMainMessage("　　アイン：（　今は像を調べてみよう　）");
                            UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            dungeonField.Invalidate();
                        }
                        else if (GroundOne.WE2.SeekerEvent506 && GroundOne.WE2.SeekerEvent507 && !GroundOne.WE2.SeekerEvent508)
                        {
                            GroundOne.StopDungeonMusic();

                            RefreshWater();
                            SetupPlayerStatus();
                            UpdateMainMessage("『　ライフ／スキル／マナが全回復しました。　』");


                            UpdateMainMessage("　　支配竜：心満たぬ少年よ");

                            UpdateMainMessage("　　＜＜＜　突如、部屋全体に埋め込まれている、無数の小さい白と黒の球体が発光し始めた！！　＞＞＞　）");

                            UpdateMainMessage("　　支配竜：我に挑むがよい");

                            bool result = EncountBattle(Database.ENEMY_BOSS_BYSTANDER_EMPTINESS, String.Empty, String.Empty, false, false, false, false);

                            bool tempFlag = GroundOne.WE2.SeekerEvent508_fail;
                            if (tempFlag)
                            {
                                using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                                {
                                    ynrw.StartPosition = FormStartPosition.CenterParent;
                                    ynrw.MainMessage = "戦闘をスキップし、勝利した状態からストーリーを進めますか？\r\n戦闘スキップによるペナルティはありません。";
                                    ynrw.ShowDialog();
                                    if (ynrw.DialogResult == DialogResult.Yes)
                                    {
                                        result = true;
                                    }
                                }
                            }

                            if (!result)
                            {
                                GroundOne.WE2.SeekerEvent508_fail = true;
                                UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y, false);
                                this.dungeonField.Invalidate();
                                UpdateMainMessage("", true);
                            }
                            else
                            {
                                UpdateMainMessage("　　支配竜：・・・　・・・　・・・");

                                UpdateMainMessage("　　＜＜＜　支配竜の形成が徐々に薄れ始めている　＞＞＞");

                                UpdateMainMessage("　　支配竜：少年よ");

                                UpdateMainMessage("　　支配竜：叶わぬ願いではあるが");

                                UpdateMainMessage("　　支配竜：断ち切るとよい");

                                UpdateMainMessage("　　アイン：えっ？");

                                UpdateMainMessage("　　＜＜＜　支配竜の形成はほとんど見えなくなり　＞＞＞");

                                UpdateMainMessage("　　支配竜：決して及ばず");

                                UpdateMainMessage("　　支配竜：だが決して伏せず屈せず");

                                UpdateMainMessage("　　支配竜：赴くがよい完全なる始まりの地へ");

                                UpdateMainMessage("　　アイン：・・・　・・・");

                                UpdateMainMessage("　　＜＜＜　支配竜はその場から自然に消滅していた　＞＞＞");

                                UpdateMainMessage("　　アイン：始まりの・・・地か・・・");

                                UpdateMainMessage("　　アイン：・・・ラナ・・・");

                                GroundOne.WE2.SeekerEvent508 = true;
                            }
                        }
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        break;
                    #endregion
                    #region "ホログラムによるパーティ編成"
                    case 7:
                        if (!GroundOne.WE2.SeekerEvent508)
                        {
                            if (GroundOne.WE2.SeekerEvent506 && !GroundOne.WE2.SeekerEvent507)
                            {
                                UpdateMainMessage("　　アイン：こ・・・これは・・・");

                                UpdateMainMessage("　　アイン：師匠・・・それにカールのおっさん・・・ラナも居る");

                                UpdateMainMessage("　　アイン：なんなんだ、この像は？");

                                UpdateMainMessage("　　支配竜：選ぶがよい少年よ");

                                UpdateMainMessage("　　アイン：パーティメンバーを・・・選べって事か？");

                                UpdateMainMessage("　　アイン：・・・　・・・");

                                UpdateMainMessage("　　アイン：（　２人選ぼう　）");

                                UpdateMainMessage("　　アイン：（　カール爵は魔法のエキスパート　）");

                                UpdateMainMessage("　　アイン：（　師匠は典型的なカウンタータイプ、もちろん普通に攻勢にも立ち回れる。　）");

                                UpdateMainMessage("　　アイン：（　ラナは魔法がそこそこ、武術もかなり行ける方だ　）");

                                UpdateMainMessage("　　アイン：（　どうする・・・　）");

                                using (TruthSelectCharacter TSC = new TruthSelectCharacter())
                                {
                                    TSC.StartPosition = FormStartPosition.CenterScreen;
                                    TSC.SC = this.sc;
                                    TSC.TC = this.tc;
                                    TSC.ShowDialog();
                                    this.SC = TSC.playerList[0];
                                    this.TC = TSC.playerList[1];
                                }

                                we.AvailableSecondCharacter = true;
                                we.AvailableThirdCharacter = true;
                                SetupPlayerStatus();

                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                                dungeonField.Invalidate();

                                UpdateMainMessage("　　アイン：よし、決めたぜ。");

                                UpdateMainMessage("　　アイン：『" + this.sc.Name + "』と『" + this.tc.Name + "』で行く。");

                                UpdateMainMessage("　　支配竜：生命波動を認識");

                                UpdateMainMessage("　　＜＜＜　その時、部屋全体の壁面にある歯車が、高速に回転しはじめた！　＞＞＞　）");

                                UpdateMainMessage("　　支配竜：少年アイン・ウォーレンスよ");

                                UpdateMainMessage("　　支配竜：我に挑め");

                                UpdateMainMessage("　　アイン：よし・・・");

                                UpdateMainMessage("　　アイン：パーティの魔法／スキルを見直してから、戦闘開始だ。");

                                GroundOne.WE2.SeekerEvent507 = true;
                            }
                            else if (GroundOne.WE2.SeekerEvent506 && GroundOne.WE2.SeekerEvent507)
                            {
                                UpdateMainMessage("　　アイン：（石像はもう無いみたいだな・・・）", true);
                            }
                            Method.AutoSaveTruthWorldEnvironment();
                            Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        }
                        else
                        {
                            UpdateMainMessage("アイン：（　もう、戻る必要はないんだ、行こう。　）");
                            UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            dungeonField.Invalidate();
                        }
                        break;
                    #endregion
                    #region "真実世界への入り口"
                    case 8:
                        if (!GroundOne.WE2.SeekerEvent509)
                        {
                            UpdateMainMessage("　　アイン：こ・・・これは・・・");

                            UpdateMainMessage("　　アイン：ラナのイヤリングだ。");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：そうか、そういう事か。");

                            UpdateMainMessage("　　アイン：やっぱり、あの支配竜の言ってた事がそのまま事実なんだ・・・");

                            UpdateMainMessage("　　アイン：ラナが死んだ瞬間、血しぶきが噴き出し");

                            UpdateMainMessage("　　アイン：ラナのイヤリングが落ちた瞬間は、はっきり覚えてる。");

                            UpdateMainMessage("　　アイン：あの時、頭の中に耐え難い激痛が走った。");

                            UpdateMainMessage("　　アイン：俺はその瞬間の状況に対して、精神的に絶えられなくなった。");
                            
                            UpdateMainMessage("　　アイン：その瞬間から俺は一歩も進めてない。");

                            UpdateMainMessage("　　アイン：それを認めたくない。その一心がさっきの支配竜に伝わったんだ。");

                            UpdateMainMessage("　　アイン：それでこの無限に過去へ循環する中に・・・閉じ込められた。");

                            UpdateMainMessage("　　アイン：いいや、自らが進んで入ったんだ。");

                            UpdateMainMessage("　　アイン：そんな現実を受け入れないために。");

                            UpdateMainMessage("　　アイン：・・・　・・・");

                            UpdateMainMessage("　　アイン：行こう。始まりの地へ・・・");

                            UpdateMainMessage("　　アイン：支配竜がくれたチャンスだ。何かが用意されている。");

                            UpdateMainMessage("　　アイン：今回までで過去にさかのぼった合計は、" + Database.MUGEN_LOOP +"回");

                            UpdateMainMessage("　　アイン：・・・かまうもんか。");

                            UpdateMainMessage("　　アイン：何度だってやってやる。");

                            UpdateMainMessage("　　アイン：・・・掴み取るんだ。今度こそ。");

                            GroundOne.WE2.SeekerEvent509 = true;
                        }
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        break;
                    #endregion
                    #region "真実世界、開始直前"
                    case 9:
                        UpdateUnknownTileArea(this.knownTileInfo5, 2, 2, 2, 3);
                        if (!GroundOne.WE2.SeekerEvent510)
                        {
                            UpdateMainMessage("　　アイン：何だ・・・？");

                            UpdateMainMessage("　　アイン：何かが浮いている・・・");

                            UpdateMainMessage("　　アイン：これって・・・遠見の青水晶じゃねえか！？");

                            UpdateMainMessage("　　アイン：そうか・・・そもそもこれも、支配竜が創った神具の一つだったのか。");

                            UpdateMainMessage("　　アイン：戻りたい場所へ戻る事が出来る水晶。");

                            UpdateMainMessage("　　アイン：って事は、おそらく俺が一番初めにこのダンジョンの最下層に来た時、これを手に入れてたんだ。");

                            UpdateMainMessage("　　アイン：それで・・・毎回こうして最下層に来ては、一番初めのダンジョンに戻って・・・");

                            UpdateMainMessage("　　アイン：そういった記憶が微かに残っていて・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：これに手をかざせば、ダンジョンの一番始まりの所まで戻れそうだ。");

                            UpdateMainMessage("　　アイン：よし、待ってろラナ。");

                            UpdateMainMessage("　　アイン：俺は今度こそ、お前を死なせない方法を導きだしてやる。");

                            UpdateMainMessage("　　アイン：絶対だ。");

                            UpdateMainMessage("　　アイン：・・・強く・・・強く心にイメージを持つんだ。");

                            UpdateMainMessage("　　アイン：支配竜は、連続的な因果律の影響とか言ってた。");

                            UpdateMainMessage("　　アイン：少しずつ・・・");
                            
                            UpdateMainMessage("　　アイン：少しづつ・・・変化してきてるはずなんだ。");

                            UpdateMainMessage("　　アイン：回数の累積がある以上、完全じゃねえはずだ。");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：・・・　・・・　強く・・・");

                            UpdateMainMessage("　　アイン：・・・　強く　・・・");

                            UpdateMainMessage("　　アイン：強くイメージだ。");

                            UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                            UpdateMainMessage("　　アイン：青水晶に手をかざそう。");

                            GroundOne.WE2.SeekerEvent510 = true;
                        }
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        break;
                    #endregion
                    #region "真実世界、開始"
                    case 10:
                        if (!GroundOne.WE2.SeekerEvent511)
                        {
                            TurnToBlack();

                            UpdateMainMessage("　　支配竜：少年の記憶これまでの出来事を消滅受諾せよ");

                            UpdateMainMessage("　　アイン：ああ、受諾する。完全に消し去ってくれて構わねえ。");

                            UpdateMainMessage("　　支配竜：少年のこれまでの時間全て消滅過去へ戻すコトを受諾せよ");

                            UpdateMainMessage("　　アイン：ああ、受諾する。ダンジョンへ向かう所まで完全に戻してくれ。");

                            UpdateMainMessage("　　支配竜：現実を並行世界とし空間を補正遷移これを受諾せよ");

                            UpdateMainMessage("　　アイン：ああ、受諾する。なんでもやってくれ。");

                            UpdateMainMessage("　　支配竜：生命波動より受諾感知");

                            UpdateMainMessage("　　支配竜：転送開始");

                            UpdateMainMessage("　　支配竜：少年アイン・ウォーレンスよ");

                            UpdateMainMessage("　　支配竜：願え");

                            UpdateMainMessage("　　支配竜：　　願え");

                            UpdateMainMessage("　　支配竜：　　　　願え");

                            UpdateMainMessage("　　支配竜：次なる願い心の奥底に");

                            UpdateMainMessage("　　アイン：ああ。");

                            UpdateMainMessage("　　アイン：・・・");

                            UpdateMainMessage("　　アイン：（ラナが死んだのは）");

                            UpdateMainMessage("　　アイン：（俺が弱かったせいだ）");

                            UpdateMainMessage("　　アイン：（俺が甘かったせいだ）");

                            UpdateMainMessage("　　アイン：（次は、必ず強くなって）");

                            UpdateMainMessage("　　アイン：（ラナが死なないように）");

                            UpdateMainMessage("　　アイン：（やってみせる）");

                            UpdateMainMessage("　　アイン：（ラナ・・・）");

                            UpdateMainMessage("　　アイン：（お前を必ず・・・）");

                            UpdateMainMessage("　　アイン：（・・・）");

                            ReturnToNormal();
                        }
                        Method.RemoveParty(this.we, this.tc);
                        Method.RemoveParty(this.we, this.sc);
                        // 遠見の青水晶を手放す
                        ItemBackPack[] backpackInfo = this.mc.GetBackPackInfo();
                        for (int jj = 0; jj < backpackInfo.Length; jj++)
                        {
                            if (backpackInfo[jj] != null)
                            {
                                if ((backpackInfo[jj].Name == Database.RARE_TOOMI_BLUE_SUISYOU) ||
                                    (backpackInfo[jj].Name == Database.POOR_PRACTICE_SWORD_ZERO) ||
                                    (backpackInfo[jj].Name == Database.POOR_PRACTICE_SWORD) ||
                                    (backpackInfo[jj].Name == Database.POOR_PRACTICE_SWORD_1) ||
                                    (backpackInfo[jj].Name == Database.POOR_PRACTICE_SWORD_2) ||
                                    (backpackInfo[jj].Name == Database.COMMON_PRACTICE_SWORD_3) ||
                                    (backpackInfo[jj].Name == Database.COMMON_PRACTICE_SWORD_4) ||
                                    (backpackInfo[jj].Name == Database.RARE_PRACTICE_SWORD_5) ||
                                    (backpackInfo[jj].Name == Database.RARE_PRACTICE_SWORD_6) ||
                                    (backpackInfo[jj].Name == Database.EPIC_PRACTICE_SWORD_7) ||
                                    (backpackInfo[jj].Name == Database.LEGENDARY_FELTUS))
                                {
                                    this.mc.DeleteBackPack(backpackInfo[jj]);
                                }
                            }
                        }
                        this.we.GameDay = 1;
                        GroundOne.WE2.SeekerEvent511 = true;
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                        CallHomeTown();
                        break;
                    #endregion

                }
            }
            #endregion
            return false;
        }

        #region "各階層でもちいた変数やラッパーメソッド"

        private void UniteMessage_40()
        {
            if (!we.dungeonEvent445)
            {
                UpdateMainMessage("アイン：おっ、看板だな。");
            }
        }

        private void UniteMessage_41()
        {
            if (!we.dungeonEvent445)
            {
                UpdateMainMessage("アイン：これは・・・");

                UpdateMainMessage("アイン：・・・");

                UpdateMainMessage("ラナ：アイン、看板の右下に小さいレバーがあるわよ。");

                UpdateMainMessage("アイン：マジかよ？　見せてくれ。");

                UpdateMainMessage("ラナ：ホラ、ここ");

                UpdateMainMessage("アイン：本当だ。お前よくこういうの見つけるよな。");

                UpdateMainMessage("ラナ：アンタが調べなさすぎなだけよ。");

                UpdateMainMessage("ラナ：ッホラ、どうすんのよこのレバー。");

                UpdateMainMessage("アイン：うーん・・・そうだなあ・・・");
            }
            else
            {
                UpdateMainMessage("アイン：レバーがある。どうすっかな・・・");
            }
            we.dungeonEvent445 = true;
        }

        private void UniteMessage_42()
        {
            UpdateMainMessage("　《カチャ》 ");
            if (!we.dungeonEvent446)
            {
                we.dungeonEvent446 = true;
                UpdateMainMessage("アイン：・・・何も起きねえな。");

                UpdateMainMessage("ラナ：他も一通り探索してみましょ。");

                UpdateMainMessage("アイン：そうだな。");
            }
            else
            {
                UpdateMainMessage("アイン：おしっ、次行くか");
            }
        }

        private void UpdateArea4_3_LeverInfo(int number)
        {
            if (number == 1)
            {
                if (!we.dungeonEvent447 && !we.dungeonEvent448 && !we.dungeonEvent449 && !we.dungeonEvent450 && !we.dungeonEvent451 && !we.dungeonEvent452 && !we.dungeonEvent453 && !we.dungeonEvent454 && !we.dungeonEvent455 && !we.dungeonEvent456)
                {
                    return; // OK
                }
            }
            else if (number == 2)
            {
                if (we.dungeonEvent447 && !we.dungeonEvent448 && !we.dungeonEvent449 && !we.dungeonEvent450 && !we.dungeonEvent451 && !we.dungeonEvent452 && !we.dungeonEvent453 && !we.dungeonEvent454 && !we.dungeonEvent455 && !we.dungeonEvent456)
                {
                    return; // OK
                }
            }
            else if (number == 3)
            {
                if (we.dungeonEvent447 && we.dungeonEvent448 && !we.dungeonEvent449 && !we.dungeonEvent450 && !we.dungeonEvent451 && !we.dungeonEvent452 && !we.dungeonEvent453 && !we.dungeonEvent454 && !we.dungeonEvent455 && !we.dungeonEvent456)
                {
                    return; // OK
                }
            }
            else if (number == 4)
            {
                if (we.dungeonEvent447 && we.dungeonEvent448 && we.dungeonEvent449 && !we.dungeonEvent450 && !we.dungeonEvent451 && !we.dungeonEvent452 && !we.dungeonEvent453 && !we.dungeonEvent454 && !we.dungeonEvent455 && !we.dungeonEvent456)
                {
                    return; // OK
                }
            }
            else if (number == 5)
            {
                if (we.dungeonEvent447 && we.dungeonEvent448 && we.dungeonEvent449 && we.dungeonEvent450 && !we.dungeonEvent451 && !we.dungeonEvent452 && !we.dungeonEvent453 && !we.dungeonEvent454 && !we.dungeonEvent455 && !we.dungeonEvent456)
                {
                    return; // OK
                }
            }
            else if (number == 6)
            {
                if (we.dungeonEvent447 && we.dungeonEvent448 && we.dungeonEvent449 && we.dungeonEvent450 && we.dungeonEvent451 && !we.dungeonEvent452 && !we.dungeonEvent453 && !we.dungeonEvent454 && !we.dungeonEvent455 && !we.dungeonEvent456)
                {
                    return; // OK
                }
            }
            else if (number == 7)
            {
                if (we.dungeonEvent447 && we.dungeonEvent448 && we.dungeonEvent449 && we.dungeonEvent450 && we.dungeonEvent451 && we.dungeonEvent452 && !we.dungeonEvent453 && !we.dungeonEvent454 && !we.dungeonEvent455 && !we.dungeonEvent456)
                {
                    return; // OK
                }
            }
            else if (number == 8)
            {
                if (we.dungeonEvent447 && we.dungeonEvent448 && we.dungeonEvent449 && we.dungeonEvent450 && we.dungeonEvent451 && we.dungeonEvent452 && we.dungeonEvent453 && !we.dungeonEvent454 && !we.dungeonEvent455 && !we.dungeonEvent456)
                {
                    return; // OK
                }
            }
            else if (number == 9)
            {
                if (we.dungeonEvent447 && we.dungeonEvent448 && we.dungeonEvent449 && we.dungeonEvent450 && we.dungeonEvent451 && we.dungeonEvent452 && we.dungeonEvent453 && we.dungeonEvent454 && !we.dungeonEvent455 && !we.dungeonEvent456)
                {
                    return; // OK
                }
            }
            else if (number == 10)
            {
                if (we.dungeonEvent447 && we.dungeonEvent448 && we.dungeonEvent449 && we.dungeonEvent450 && we.dungeonEvent451 && we.dungeonEvent452 && we.dungeonEvent453 && we.dungeonEvent454 && we.dungeonEvent455 && !we.dungeonEvent456)
                {
                    we.dungeonEvent444_storyok = true;
                    //we.dungeonEvent4_Area3_1_Fail = false; // 一度失敗した記憶を消すわけではないため、ココはコメントアウト
                    return; // OK
                }
            }
            // NG
            we.dungeonEvent444_storyok = false;
            we.dungeonEvent4_Area3_1_Fail = true;
        }

        private void UpdateArea4_3_2_LeverInfo(int number)
        {
            // 真実世界へのルートはこの時点でプレイヤーには伝わりきってないため、順序までは要求できない。ロジックを変更する。
            if (we.dungeonEvent462 && we.dungeonEvent463 && we.dungeonEvent464 && we.dungeonEvent465 && we.dungeonEvent466 && we.dungeonEvent467 && we.dungeonEvent468 && we.dungeonEvent469 && we.dungeonEvent470 && we.dungeonEvent471)
            {
                we.dungeonEvent461_storyok = true;
                we.dungeonEvent4_Area3_2_Fail = false;
            }
            else
            {
                we.dungeonEvent461_storyok = false;
                we.dungeonEvent4_Area3_2_Fail = true;
            }
            //if (number == 1)
            //{
            //    if (!we.dungeonEvent462 && !we.dungeonEvent463 && !we.dungeonEvent464 && !we.dungeonEvent465 && !we.dungeonEvent466 && !we.dungeonEvent467 && !we.dungeonEvent468 && !we.dungeonEvent469 && !we.dungeonEvent470 && !we.dungeonEvent471)
            //    {
            //        return; // OK
            //    }
            //}
            //else if (number == 2)
            //{
            //    if (we.dungeonEvent462 && !we.dungeonEvent463 && !we.dungeonEvent464 && !we.dungeonEvent465 && !we.dungeonEvent466 && !we.dungeonEvent467 && !we.dungeonEvent468 && !we.dungeonEvent469 && !we.dungeonEvent470 && !we.dungeonEvent471)
            //    {
            //        return; // OK
            //    }
            //}
            //else if (number == 3)
            //{
            //    if (we.dungeonEvent462 && we.dungeonEvent463 && !we.dungeonEvent464 && !we.dungeonEvent465 && !we.dungeonEvent466 && !we.dungeonEvent467 && !we.dungeonEvent468 && !we.dungeonEvent469 && !we.dungeonEvent470 && !we.dungeonEvent471)
            //    {
            //        return; // OK
            //    }
            //}
            //else if (number == 4)
            //{
            //    if (we.dungeonEvent462 && we.dungeonEvent463 && we.dungeonEvent464 && !we.dungeonEvent465 && !we.dungeonEvent466 && !we.dungeonEvent467 && !we.dungeonEvent468 && !we.dungeonEvent469 && !we.dungeonEvent470 && !we.dungeonEvent471)
            //    {
            //        return; // OK
            //    }
            //}
            //else if (number == 5)
            //{
            //    if (we.dungeonEvent462 && we.dungeonEvent463 && we.dungeonEvent464 && we.dungeonEvent465 && !we.dungeonEvent466 && !we.dungeonEvent467 && !we.dungeonEvent468 && !we.dungeonEvent469 && !we.dungeonEvent470 && !we.dungeonEvent471)
            //    {
            //        return; // OK
            //    }
            //}
            //else if (number == 6)
            //{
            //    if (we.dungeonEvent462 && we.dungeonEvent463 && we.dungeonEvent464 && we.dungeonEvent465 && we.dungeonEvent466 && !we.dungeonEvent467 && !we.dungeonEvent468 && !we.dungeonEvent469 && !we.dungeonEvent470 && !we.dungeonEvent471)
            //    {
            //        return; // OK
            //    }
            //}
            //else if (number == 7)
            //{
            //    if (we.dungeonEvent462 && we.dungeonEvent463 && we.dungeonEvent464 && we.dungeonEvent465 && we.dungeonEvent466 && we.dungeonEvent467 && !we.dungeonEvent468 && !we.dungeonEvent469 && !we.dungeonEvent470 && !we.dungeonEvent471)
            //    {
            //        return; // OK
            //    }
            //}
            //else if (number == 8)
            //{
            //    if (we.dungeonEvent462 && we.dungeonEvent463 && we.dungeonEvent464 && we.dungeonEvent465 && we.dungeonEvent466 && we.dungeonEvent467 && we.dungeonEvent468 && !we.dungeonEvent469 && !we.dungeonEvent470 && !we.dungeonEvent471)
            //    {
            //        return; // OK
            //    }
            //}
            //else if (number == 9)
            //{
            //    if (we.dungeonEvent462 && we.dungeonEvent463 && we.dungeonEvent464 && we.dungeonEvent465 && we.dungeonEvent466 && we.dungeonEvent467 && we.dungeonEvent468 && we.dungeonEvent469 && !we.dungeonEvent470 && !we.dungeonEvent471)
            //    {
            //        return; // OK
            //    }
            //}
            //else if (number == 10)
            //{
            //    if (we.dungeonEvent462 && we.dungeonEvent463 && we.dungeonEvent464 && we.dungeonEvent465 && we.dungeonEvent466 && we.dungeonEvent467 && we.dungeonEvent468 && we.dungeonEvent469 && we.dungeonEvent470 && !we.dungeonEvent471)
            //    {
            //        we.dungeonEvent461_storyok = true;
            //        //we.dungeonEvent4_Area3_2_Fail = false; // 一度失敗した記憶を消すわけではないため、ココはコメントアウト
            //        return; // OK
            //    }
            //}
            //we.dungeonEvent461_storyok = false;
            //we.dungeonEvent4_Area3_2_Fail = true;
        }

        private void TurnToBlack()
        {
            this.BackColor = Color.Black;
            this.mainMessage.ForeColor = Color.White;
            this.backgroundData = null;
            this.Invalidate();
        }
        private void ReturnToNormal()
        {
            this.BackColor = Color.RoyalBlue;
            mainMessage.ForeColor = Color.Black;
            mainMessage.BackColor = Color.Transparent;
            this.backgroundData = Image.FromFile(Database.BaseResourceFolder + Database.DUNGEON_BACKGROUND);
            this.Invalidate();
        }
        // ３階無限回廊のナンバー
        const int INFINITE_LOOP_MAX = 12; // 無限回廊の組み合わせ最大数
        int[] infinityLoopNumber = new int[INFINITE_LOOP_MAX]; // 無限解
        int[] playerLoopNumber = new int[INFINITE_LOOP_MAX]; // プレイヤー解
        //const int[] originNumber = { 1, 3, 4, 5, 4, 2, 3, 1, 4, 2, 5, 5 }; // 原点解
        System.Collections.ObjectModel.ReadOnlyCollection<int> originNumber = Array.AsReadOnly<int>(new int[] { 1, 3, 4, 5, 4, 2, 3, 1, 4, 2, 5, 5 });
        private bool CheckInfiniteLoopResult()
        {
            for (int zz = 0; zz < INFINITE_LOOP_MAX; zz++)
            {
                if (this.infinityLoopNumber[zz] != this.playerLoopNumber[zz])
                {
                    return false;
                }
            }
            return true;
        }

        private void MessageInfiniteLoopResult()
        {
            MessageInfiniteLoopResult(0);
        }
        private void MessageInfiniteLoopResult(int num)
        {
            string[] correct = new string[INFINITE_LOOP_MAX];
            for (int zz = 0; zz < INFINITE_LOOP_MAX; zz++)
            {
                if (this.infinityLoopNumber[zz] == this.playerLoopNumber[zz])
                {
                    correct[zz] = "○";
                }
                else
                {
                    correct[zz] = "×";
                }
            }
            if (num == 1)
            {
                string commentString = "　　　　『　原点を知りし者、　　向かうは　　　　【死】　』\r\n　　　　　　";
                if (we.dungeonEvent328)
                {
                    commentString = "　　　　『　原点を知りし者、　　向かうは　【生】【死】　』\r\n　　　　　　";
                }
                UpdateMainMessage(commentString
                                    + this.infinityLoopNumber[0] + " - " + this.playerLoopNumber[0] + " = " + correct[0] + "    "
                                    + this.infinityLoopNumber[1] + " - " + this.playerLoopNumber[1] + " = " + correct[1] + "    "
                                    + this.infinityLoopNumber[2] + " - " + this.playerLoopNumber[2] + " = " + correct[2] + "    "
                                    + this.infinityLoopNumber[3] + " - " + this.playerLoopNumber[3] + " = " + correct[3] + "\r\n　　　　　　"
                                    + this.infinityLoopNumber[4] + " - " + this.playerLoopNumber[4] + " = " + correct[4] + "    "
                                    + this.infinityLoopNumber[5] + " - " + this.playerLoopNumber[5] + " = " + correct[5] + "    "
                                    + this.infinityLoopNumber[6] + " - " + this.playerLoopNumber[6] + " = " + correct[6] + "    "
                                    + this.infinityLoopNumber[7] + " - " + this.playerLoopNumber[7] + " = " + correct[7] + "\r\n　　　　　　"
                                    + this.infinityLoopNumber[8] + " - " + this.playerLoopNumber[8] + " = " + correct[8] + "    "
                                    + this.infinityLoopNumber[9] + " - " + this.playerLoopNumber[9] + " = " + correct[9] + "    "
                                    + this.infinityLoopNumber[10] + " - " + this.playerLoopNumber[10] + " = " + correct[10] + "    "
                                    + this.infinityLoopNumber[11] + " - " + this.playerLoopNumber[11] + " = " + correct[11] + "    "
                                    );
            }
            else
            {
                UpdateMainMessage("　　　　『　正解を導きし者、無限解の探求にて永遠に彷徨い、原点を知ること無く、回り続けるがよい　』\r\n　　　　　　"
                                    + this.infinityLoopNumber[0] + " - " + this.playerLoopNumber[0] + " = " + correct[0] + "    "
                                    + this.infinityLoopNumber[1] + " - " + this.playerLoopNumber[1] + " = " + correct[1] + "    "
                                    + this.infinityLoopNumber[2] + " - " + this.playerLoopNumber[2] + " = " + correct[2] + "    "
                                    + this.infinityLoopNumber[3] + " - " + this.playerLoopNumber[3] + " = " + correct[3] + "\r\n　　　　　　"
                                    + this.infinityLoopNumber[4] + " - " + this.playerLoopNumber[4] + " = " + correct[4] + "    "
                                    + this.infinityLoopNumber[5] + " - " + this.playerLoopNumber[5] + " = " + correct[5] + "    "
                                    + this.infinityLoopNumber[6] + " - " + this.playerLoopNumber[6] + " = " + correct[6] + "    "
                                    + this.infinityLoopNumber[7] + " - " + this.playerLoopNumber[7] + " = " + correct[7] + "\r\n　　　　　　"
                                    + this.infinityLoopNumber[8] + " - " + this.playerLoopNumber[8] + " = " + correct[8] + "    "
                                    + this.infinityLoopNumber[9] + " - " + this.playerLoopNumber[9] + " = " + correct[9] + "    "
                                    + this.infinityLoopNumber[10] + " - " + this.playerLoopNumber[10] + " = " + correct[10] + "    "
                                    + this.infinityLoopNumber[11] + " - " + this.playerLoopNumber[11] + " = " + correct[11] + "    "
                                    );
            }
        }

        private void MakeCorrectAnswer(int num)
        {
            // 95, 96, 97, 105, 112, 113, 121, 124, 125, 133, 138, 144
            // [122-123] [142-143] [145-146]
            // [98-100] [106-108] [109-111] [114-116] [130-132] [139-141]
            // [101-104] [117-120] [126-129] [134-137] [147-150]

            // グループ１なら、４，４，２
            // グループ２なら、４，４，１
            // グループ３なら、４，４
            // グループ４なら、４，３
            // と思ったが、よく考えるとX1A->B->C->D->戻るで一つづつ開いていく方が楽しいのでその方向で作り込む。
            // いやいや、Ｘルートから最初の地点へ戻った時にオープンする方が楽しそう。

            int totalOpenNum = 0;
            if (GroundOne.WE2.TruthWay95 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay96 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay97 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay98 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay99 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay100 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay101 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay102 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay103 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay104 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay105 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay106 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay107 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay108 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay109 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay110 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay111 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay112 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay113 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay114 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay115 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay116 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay117 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay118 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay119 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay120 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay121 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay122 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay123 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay124 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay125 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay126 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay127 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay128 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay129 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay130 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay131 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay132 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay133 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay134 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay135 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay136 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay137 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay138 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay139 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay140 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay141 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay142 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay143 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay144 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay145 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay146 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay147 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay148 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay149 == -1) totalOpenNum++;
            if (GroundOne.WE2.TruthWay150 == -1) totalOpenNum++;

            if (totalOpenNum >= 55) return;

            // 全体のオープンしていない数を数えておき、合計１１を開くようにしなければならない。
            // 初めのオープン場所はnumで指定されているため、それをそのまま開く。
            int ElevenCounter = 11;
            int[] group1 = { 95, 96, 97, 105, 112, 113, 121, 124, 125, 133, 138, 144 };
            foreach (int current in group1)
            {
                if (current == num)
                {
                    MakeWrongAnswerSub1(num); ElevenCounter -= 1;
                    OpenWrongElevenAnswer(ElevenCounter);
                    return;
                }
            }
            int[] group2 = new int[] { 122, 123, 142, 143, 145, 146 };
            foreach (int current in group2)
            {
                if (current == num)
                {
                    MakeWrongAnswerSub2(num); ElevenCounter -= 2;
                    OpenWrongElevenAnswer(ElevenCounter);
                    return;
                }
            }

            int[] group3 = new int[] { 98, 99, 100, 106, 107, 108, 109, 110, 111, 114, 115, 116, 130, 131, 132, 139, 140, 141 };
            foreach (int current in group3)
            {
                if (current == num)
                {
                    MakeWrongAnswerSub3(num); ElevenCounter -= 3;
                    OpenWrongElevenAnswer(ElevenCounter);
                    return;
                }
            }
            int[] group4 = new int[] { 101, 102, 103, 104, 117, 118, 119, 120, 126, 127, 128, 129, 134, 135, 136, 137, 147, 148, 149, 150 };
            foreach (int current in group4)
            {
                if (current == num)
                {
                    MakeWrongAnswerSub4(num); ElevenCounter -= 4;
                    OpenWrongElevenAnswer(ElevenCounter);
                    return;
                }
            }
        }

        private void OpenWrongElevenAnswer(int ElevenCounter)
        {
            while (ElevenCounter > 0)
            {
                if (ElevenCounter >= 4)
                {
                    if (SearchArriveGroup4() > 0) { MakeWrongAnswerSub4(); ElevenCounter -= 4; }
                    else if (SearchArriveGroup3() > 0) { MakeWrongAnswerSub3(); ElevenCounter -= 3; }
                    else if (SearchArriveGroup2() > 0) { MakeWrongAnswerSub2(); ElevenCounter -= 2; }
                    else if (SearchArriveGroup1() > 0) { MakeWrongAnswerSub1(); ElevenCounter -= 1; }
                }
                else if (ElevenCounter == 3)
                {
                    if (SearchArriveGroup3() > 0) { MakeWrongAnswerSub3(); ElevenCounter -= 3; }
                    else if (SearchArriveGroup2() > 0) { MakeWrongAnswerSub2(); ElevenCounter -= 2; }
                    else if (SearchArriveGroup1() > 0) { MakeWrongAnswerSub1(); ElevenCounter -= 1; }
                }
                else if (ElevenCounter == 2)
                {
                    if (SearchArriveGroup2() > 0) { MakeWrongAnswerSub2(); ElevenCounter -= 2; }
                    else if (SearchArriveGroup1() > 0) { MakeWrongAnswerSub1(); ElevenCounter -= 1; }
                }
                else
                {
                    if (SearchArriveGroup1() > 0) { MakeWrongAnswerSub1(); ElevenCounter -= 1; }
                    else { return; } // 万が一にも通らないが、万が一のため。
                }
            }
        }

        private int SearchArriveGroup1()
        {
            int result = 0;
            if (GroundOne.WE2.TruthWay95 == 0) result++;
            if (GroundOne.WE2.TruthWay96 == 0) result++;
            if (GroundOne.WE2.TruthWay97 == 0) result++;
            if (GroundOne.WE2.TruthWay105 == 0) result++;
            if (GroundOne.WE2.TruthWay112 == 0) result++;
            if (GroundOne.WE2.TruthWay113 == 0) result++;
            if (GroundOne.WE2.TruthWay121 == 0) result++;
            if (GroundOne.WE2.TruthWay124 == 0) result++;
            if (GroundOne.WE2.TruthWay125 == 0) result++;
            if (GroundOne.WE2.TruthWay133 == 0) result++;
            if (GroundOne.WE2.TruthWay138 == 0) result++;
            if (GroundOne.WE2.TruthWay144 == 0) result++;

            return result;
        }
        private int SearchArriveGroup2()
        {
            int result = 0;
            if (GroundOne.WE2.TruthWay122 == 0) result++;
            if (GroundOne.WE2.TruthWay142 == 0) result++;
            if (GroundOne.WE2.TruthWay145 == 0) result++;

            return result;
        }
        private int SearchArriveGroup3()
        {
            int result = 0;
            if (GroundOne.WE2.TruthWay98 == 0) result++;
            if (GroundOne.WE2.TruthWay106 == 0) result++;
            if (GroundOne.WE2.TruthWay109 == 0) result++;
            if (GroundOne.WE2.TruthWay114 == 0) result++;
            if (GroundOne.WE2.TruthWay130 == 0) result++;
            if (GroundOne.WE2.TruthWay139 == 0) result++;

            return result;
        }
        private int SearchArriveGroup4()
        {
            int result = 0;
            if (GroundOne.WE2.TruthWay101 == 0) result++;
            if (GroundOne.WE2.TruthWay117 == 0) result++;
            if (GroundOne.WE2.TruthWay126 == 0) result++;
            if (GroundOne.WE2.TruthWay134 == 0) result++;
            if (GroundOne.WE2.TruthWay147 == 0) result++;

            return result;
        }

        private void MakeWrongAnswerSub1()
        {
            MakeWrongAnswerSub1(0);
        }
        private void MakeWrongAnswerSub1(int num)
        {
            if (GroundOne.WE2.TruthWay95 == 0 && (num == 0 || num == 95)) { GroundOne.WE2.TruthWay95 = -1; UpdateUnknownTileArea3_One(29, 36); UpdateUnknownTileArea3_Area5(); return; }
            if (GroundOne.WE2.TruthWay96 == 0 && (num == 0 || num == 96)) { GroundOne.WE2.TruthWay96 = -1; UpdateUnknownTileArea3_One(9, 50); UpdateUnknownTileArea3_Area6(); return; }
            if (GroundOne.WE2.TruthWay97 == 0 && (num == 0 || num == 97)) { GroundOne.WE2.TruthWay97 = -1; UpdateUnknownTileArea3_One(14, 45); UpdateUnknownTileArea3_Area7(); return; }
            if (GroundOne.WE2.TruthWay105 == 0 && (num == 0 || num == 105)) { GroundOne.WE2.TruthWay105 = -1; UpdateUnknownTileArea3_One(10, 42); UpdateUnknownTileArea3_Area13(); return; }
            if (GroundOne.WE2.TruthWay112 == 0 && (num == 0 || num == 112)) { GroundOne.WE2.TruthWay112 = -1; UpdateUnknownTileArea3_One(12, 41); UpdateUnknownTileArea3_Area19(); return; }
            if (GroundOne.WE2.TruthWay113 == 0 && (num == 0 || num == 113)) { GroundOne.WE2.TruthWay113 = -1; UpdateUnknownTileArea3_One(17, 21); UpdateUnknownTileArea3_Area20(); return; }
            if (GroundOne.WE2.TruthWay121 == 0 && (num == 0 || num == 121)) { GroundOne.WE2.TruthWay121 = -1; UpdateUnknownTileArea3_One(9, 35); UpdateUnknownTileArea3_Area26(); return; }
            if (GroundOne.WE2.TruthWay124 == 0 && (num == 0 || num == 124)) { GroundOne.WE2.TruthWay124 = -1; UpdateUnknownTileArea3_One(24, 31); UpdateUnknownTileArea3_Area31(); return; }
            if (GroundOne.WE2.TruthWay125 == 0 && (num == 0 || num == 125)) { GroundOne.WE2.TruthWay125 = -1; UpdateUnknownTileArea3_One(39, 47); UpdateUnknownTileArea3_Area32(); return; }
            if (GroundOne.WE2.TruthWay133 == 0 && (num == 0 || num == 133)) { GroundOne.WE2.TruthWay133 = -1; UpdateUnknownTileArea3_One(25, 34); UpdateUnknownTileArea3_Area36(); return; }
            if (GroundOne.WE2.TruthWay138 == 0 && (num == 0 || num == 138)) { GroundOne.WE2.TruthWay138 = -1; UpdateUnknownTileArea3_One(17, 42); UpdateUnknownTileArea3_Area41(); return; }
            if (GroundOne.WE2.TruthWay144 == 0 && (num == 0 || num == 144)) { GroundOne.WE2.TruthWay144 = -1; UpdateUnknownTileArea3_One(24, 53); UpdateUnknownTileArea3_Area46(); return; }
        }

        private void MakeWrongAnswerSub2()
        {
            MakeWrongAnswerSub2(0);
        }
        private void MakeWrongAnswerSub2(int num)
        {
            if (GroundOne.WE2.TruthWay122 == 0 && (num == 0 || num == 122 || num == 123))
            {
                GroundOne.WE2.TruthWay122 = -1; UpdateUnknownTileArea3_One(20, 50);
                GroundOne.WE2.TruthWay123 = -1; UpdateUnknownTileArea3_One(20, 52);
                UpdateUnknownTileArea3_Area28();
                return;
            }
            if (GroundOne.WE2.TruthWay142 == 0 && (num == 0 || num == 142 || num == 143))
            {
                GroundOne.WE2.TruthWay142 = -1; UpdateUnknownTileArea3_One(24, 44);
                GroundOne.WE2.TruthWay143 = -1; UpdateUnknownTileArea3_One(26, 44);
                UpdateUnknownTileArea3_Area45();
                return;
            }
            if (GroundOne.WE2.TruthWay145 == 0 && (num == 0 || num == 145 || num == 146))
            {
                GroundOne.WE2.TruthWay145 = -1; UpdateUnknownTileArea3_One(6, 51);
                GroundOne.WE2.TruthWay146 = -1; UpdateUnknownTileArea3_One(6, 52);
                UpdateUnknownTileArea3_Area47();
                return;
            }
        }

        private void MakeWrongAnswerSub3()
        {
            MakeWrongAnswerSub3(0);
        }
        private void MakeWrongAnswerSub3(int num)
        {
            if (GroundOne.WE2.TruthWay98 == 0 && (num == 0 || num == 98 || num == 99 || num == 100))
            {
                GroundOne.WE2.TruthWay98 = -1; UpdateUnknownTileArea3_One(30, 27);
                GroundOne.WE2.TruthWay99 = -1; UpdateUnknownTileArea3_One(30, 29);
                GroundOne.WE2.TruthWay100 = -1; UpdateUnknownTileArea3_One(30, 31);
                UpdateUnknownTileArea3_Area9();
                return;
            }
            if (GroundOne.WE2.TruthWay106 == 0 && (num == 0 || num == 106 || num == 107 || num == 108))
            {
                GroundOne.WE2.TruthWay106 = -1; UpdateUnknownTileArea3_One(34, 49);
                GroundOne.WE2.TruthWay107 = -1; UpdateUnknownTileArea3_One(36, 49);
                GroundOne.WE2.TruthWay108 = -1; UpdateUnknownTileArea3_One(38, 49);
                UpdateUnknownTileArea3_Area14();
                return;
            }
            if (GroundOne.WE2.TruthWay109 == 0 && (num == 0 || num == 109 || num == 110 || num == 111))
            {
                GroundOne.WE2.TruthWay109 = -1; UpdateUnknownTileArea3_One(31, 37);
                GroundOne.WE2.TruthWay110 = -1; UpdateUnknownTileArea3_One(33, 37);
                GroundOne.WE2.TruthWay111 = -1; UpdateUnknownTileArea3_One(35, 37);
                UpdateUnknownTileArea3_Area17();
                return;
            }
            if (GroundOne.WE2.TruthWay114 == 0 && (num == 0 || num == 114 || num == 115 || num == 116))
            {
                GroundOne.WE2.TruthWay114 = -1; UpdateUnknownTileArea3_One(23, 24);
                GroundOne.WE2.TruthWay115 = -1; UpdateUnknownTileArea3_One(23, 26);
                GroundOne.WE2.TruthWay116 = -1; UpdateUnknownTileArea3_One(23, 28);
                UpdateUnknownTileArea3_Area21();
                return;
            }
            if (GroundOne.WE2.TruthWay130 == 0 && (num == 0 || num == 130 || num == 131 || num == 132))
            {
                GroundOne.WE2.TruthWay130 = -1; UpdateUnknownTileArea3_One(22, 48);
                GroundOne.WE2.TruthWay131 = -1; UpdateUnknownTileArea3_One(22, 50);
                GroundOne.WE2.TruthWay132 = -1; UpdateUnknownTileArea3_One(22, 52);
                UpdateUnknownTileArea3_Area35();
                return;
            }
            if (GroundOne.WE2.TruthWay139 == 0 && (num == 0 || num == 139 || num == 140 || num == 141))
            {
                GroundOne.WE2.TruthWay139 = -1; UpdateUnknownTileArea3_One(8, 22);
                GroundOne.WE2.TruthWay140 = -1; UpdateUnknownTileArea3_One(6, 22);
                GroundOne.WE2.TruthWay141 = -1; UpdateUnknownTileArea3_One(5, 21);
                UpdateUnknownTileArea3_Area43();
                return;
            }
        }

        private void MakeWrongAnswerSub4()
        {
            MakeWrongAnswerSub4(0);
        }
        private void MakeWrongAnswerSub4(int num)
        {
            if (GroundOne.WE2.TruthWay101 == 0 && (num == 0 || num == 101 || num == 102 || num == 103 || num == 104))
            {
                GroundOne.WE2.TruthWay101 = -1; UpdateUnknownTileArea3_One(15, 29);
                GroundOne.WE2.TruthWay102 = -1; UpdateUnknownTileArea3_One(11, 34);
                GroundOne.WE2.TruthWay103 = -1; UpdateUnknownTileArea3_One(11, 24);
                GroundOne.WE2.TruthWay104 = -1; UpdateUnknownTileArea3_One(3, 24);
                UpdateUnknownTileArea3_Area10();
                return;
            }
            if (GroundOne.WE2.TruthWay117 == 0 && (num == 0 || num == 117 || num == 118 || num == 119 || num == 120))
            {
                GroundOne.WE2.TruthWay117 = -1; UpdateUnknownTileArea3_One(26, 34);
                GroundOne.WE2.TruthWay118 = -1; UpdateUnknownTileArea3_One(28, 34);
                GroundOne.WE2.TruthWay119 = -1; UpdateUnknownTileArea3_One(30, 34);
                GroundOne.WE2.TruthWay120 = -1; UpdateUnknownTileArea3_One(32, 34);
                UpdateUnknownTileArea3_Area25();
                return;
            }
            if (GroundOne.WE2.TruthWay126 == 0 && (num == 0 || num == 126 || num == 127 || num == 128 || num == 129))
            {
                GroundOne.WE2.TruthWay126 = -1; UpdateUnknownTileArea3_One(10, 54);
                GroundOne.WE2.TruthWay127 = -1; UpdateUnknownTileArea3_One(8, 41);
                GroundOne.WE2.TruthWay128 = -1; UpdateUnknownTileArea3_One(5, 46);
                GroundOne.WE2.TruthWay129 = -1; UpdateUnknownTileArea3_One(15, 42);
                UpdateUnknownTileArea3_Area33();
                return;
            }

            if (GroundOne.WE2.TruthWay134 == 0 && (num == 0 || num == 134 || num == 135 || num == 136 || num == 137))
            {
                GroundOne.WE2.TruthWay134 = -1; UpdateUnknownTileArea3_One(17, 26);
                GroundOne.WE2.TruthWay135 = -1; UpdateUnknownTileArea3_One(18, 27);
                GroundOne.WE2.TruthWay136 = -1; UpdateUnknownTileArea3_One(19, 28);
                GroundOne.WE2.TruthWay137 = -1; UpdateUnknownTileArea3_One(20, 29);
                UpdateUnknownTileArea3_Area40();
                return;
            }
            if (GroundOne.WE2.TruthWay147 == 0 && (num == 0 || num == 147 || num == 148 || num == 149 || num == 150))
            {
                GroundOne.WE2.TruthWay147 = -1; UpdateUnknownTileArea3_One(31, 24);
                GroundOne.WE2.TruthWay148 = -1; UpdateUnknownTileArea3_One(26, 22);
                GroundOne.WE2.TruthWay149 = -1; UpdateUnknownTileArea3_One(25, 22);
                GroundOne.WE2.TruthWay150 = -1; UpdateUnknownTileArea3_One(21, 24);
                UpdateUnknownTileArea3_Area48();
                return;
            }

        }

        private void JumpByNormal(int Y, int X)
        {
            int viewY = Y - 11; if (viewY <= 0) viewY = 0; if (Y >= 30) viewY = 20;
            int viewX = X - 12; if (viewX <= 0) viewX = 0; if (X >= 40) viewX = 30;
            JumpByMirror(Y, X, viewX, viewY, true);
        }
        private void JumpByMirror(int Y, int X)
        {
            int viewY = Y - 11; if (viewY <= 0) viewY = 0; if (Y >= 30) viewY = 20;
            int viewX = X - 12; if (viewX <= 0) viewX = 0; if (X >= 40) viewX = 30;
            JumpByMirror(Y, X, viewX, viewY, false);
        }
        private void JumpByMirror(int Y, int X, int viewX, int viewY)
        {
            JumpByMirror(Y, X, viewX, viewY, false);
        }
        private void JumpByMirror(int Y, int X, int viewX, int viewY, bool ignoreMessage)
        {
            if (!ignoreMessage)
            {
                if (GroundOne.WE2.StartSeeker)
                {
                    UpdateMainMessage("　　『　アインはラナの事を一心に考え、鏡に手を添えた瞬間、辺りは白く光はじめた！　』　　");
                }
                else
                {
                    UpdateMainMessage("　　『　ラナがそっと鏡に手を添えた瞬間、辺りは白く光はじめた！　』　　");
                }
            }

            UpdateViewPoint(-Database.DUNGEON_MOVE_LEN * viewX, -Database.DUNGEON_MOVE_LEN * viewY);
            UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * (X - viewX), Database.DUNGEON_MOVE_LEN * (Y - viewY));
            UpdateUnknownTile();
            dungeonField.Invalidate();

            if (!ignoreMessage)
            {
                UpdateMainMessage("　　　『ッバシュ！！！』　　", true);
            }
        }
        private void JumpByMirror_Instant(int Y, int X)
        {
            int viewY = Y - 11; if (viewY <= 0) viewY = 0; if (Y >= 30) viewY = 20;
            int viewX = X - 12; if (viewX <= 0) viewX = 0; if (X >= 40) viewX = 30;

            UpdateViewPoint(-Database.DUNGEON_MOVE_LEN * viewX, -Database.DUNGEON_MOVE_LEN * viewY);
            UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * (X - viewX), Database.DUNGEON_MOVE_LEN * (Y - viewY));
            UpdateUnknownTile();
            dungeonField.Invalidate();

            UpdateMainMessage("　　　『ッバシュ！！！』　　", true);
        }

        // ダンジョン２階の知・技・力・心の部屋各種２レバー解答
        private void JudgeEightAnswer(bool fromStrengthRoom)
        {
            if (GroundOne.WE2.TruthAnswer2_1 && GroundOne.WE2.TruthAnswer2_2 && GroundOne.WE2.TruthAnswer2_3 &&
                GroundOne.WE2.TruthAnswer2_4 && GroundOne.WE2.TruthAnswer2_5 && GroundOne.WE2.TruthAnswer2_6 &&
                GroundOne.WE2.TruthAnswer2_7 && GroundOne.WE2.TruthAnswer2_8 && GroundOne.WE2.TruthAnswer2_OK == false)
            {
                UpdateMainMessage("　　　【アインがレバーを倒したその瞬間！】　");

                UpdateMainMessage("　　　『ブウゥゥン！！』");

                UpdateMainMessage("アイン：おお！　更に浮遊文字が出現したぞ！？");

                UpdateMainMessage("ラナ：本当に驚かされるわね、ここの仕掛け。");

                UpdateMainMessage("アイン：一体どうやって浮遊文字なんか出してるんだろうな・・・");

                UpdateMainMessage("ラナ：まあそれは良いとして、読むわよ？");

                UpdateMainMessage("アイン：ああ。");

                CancelKeyDownMovement();
                int failCounter = 0;
                while (true)
                {
                    using (TruthDecision2 td = new TruthDecision2())
                    {
                        td.StartPosition = FormStartPosition.CenterScreen;
                        td.Description = "４つのフロアを心得し者、その順列を示せ。";
                        td.SelectPermutation = true;
                        td.AnswerTop = "知";
                        td.AnswerLeft = "技";
                        td.AnswerRight = "力";
                        td.AnswerBottom = "心";
                        td.ShowDialog();

                        if (td.DialogResult == System.Windows.Forms.DialogResult.Cancel)
                        {
                            failCounter++;
                            if (we.AvailableThirdCharacter)
                            {
                                if (failCounter == 1)
                                {
                                    UpdateMainMessage("アイン：・・・何もおきねえな。");

                                    UpdateMainMessage("ランディス：オイ、寝ぼけてんじゃねぇぞ。");

                                    UpdateMainMessage("ランディス：そのまま放っておくつもりか？");

                                    UpdateMainMessage("アイン：あ、いやいや、そうじゃなくて。");

                                    UpdateMainMessage("ランディス：しくじってんじゃねぇ、とっととやれ。");

                                    UpdateMainMessage("アイン：わわ、分かったって！");
                                }
                                else if (failCounter == 2)
                                {
                                    UpdateMainMessage("ランディス：ザコが・・・潰す");

                                    UpdateMainMessage("アイン：わーー、タンマタンマ！！");

                                    UpdateMainMessage("アイン：今思い出してるから、タンマっととと！");

                                    UpdateMainMessage("ランディス：ほぉ？　思い出してる最中か。");

                                    UpdateMainMessage("ランディス：次はキッチリ正解出来るんだろうなぁ？");

                                    UpdateMainMessage("アイン：と、当然当然！");
                                }
                                else if (failCounter == 3)
                                {
                                    UpdateMainMessage("ランディス：何を思い出せたのか、言ってもらおうじゃねぇか。");

                                    UpdateMainMessage("アイン：そ・・・それは・・・");

                                    UpdateMainMessage("ランディス：次にミスったら、てめぇはこの場で潰す。");

                                    UpdateMainMessage("アイン：うわわ、分かったって。今度こそ！");
                                }
                                else
                                {
                                    UpdateMainMessage("ランディス：よおおぉぉぉぉし、いい度胸してんじゃねぇか！");

                                    UpdateMainMessage("アイン：わーーー、っちょ！　ホントタンマタンマタンマ！！！");

                                    UpdateMainMessage("ランディス：いっぺん死んでこいやああぁぁぁぁ！！！");

                                    UpdateMainMessage(" 〜　THE　END　〜　（そして永遠へ）");

                                    this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                                    using (ESCMenu esc = new ESCMenu())
                                    {
                                        esc.MC = this.MC;
                                        esc.SC = this.SC;
                                        esc.TC = this.TC;
                                        esc.WE = this.we;
                                        esc.KnownTileInfo = null;
                                        esc.KnownTileInfo2 = null;
                                        esc.KnownTileInfo3 = null;
                                        esc.KnownTileInfo4 = null;
                                        esc.KnownTileInfo5 = null;
                                        esc.Truth_KnownTileInfo = this.Truth_KnownTileInfo;
                                        esc.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2;
                                        esc.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3;
                                        esc.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4;
                                        esc.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5;
                                        esc.StartPosition = FormStartPosition.CenterParent;
                                        esc.TruthStory = true;
                                        esc.OnlySave = true;
                                        esc.ShowDialog();
                                    }
                                    return;
                                }
                            }
                            else
                            {
                                if (failCounter == 1)
                                {
                                    UpdateMainMessage("アイン：・・・何もおきねえな。");

                                    UpdateMainMessage("ラナ：上手く行けば、何かしらの音がしそうよね。");

                                    UpdateMainMessage("アイン：どうしろってんだ、設問自体の意図が何となく・・・");

                                    UpdateMainMessage("ラナ：とりあえずもういっぺんやってみたら？");

                                    UpdateMainMessage("アイン：そうだな。");
                                }
                                else if (failCounter == 2)
                                {
                                    UpdateMainMessage("ラナ：ちょっと、あんまり適当すぎても駄目じゃない？");

                                    UpdateMainMessage("アイン：おかしいな・・・これでも駄目かよ。");

                                    UpdateMainMessage("ラナ：４つのエリアを心得し者って書いてあるじゃない。思い出せないワケ？");

                                    UpdateMainMessage("アイン：い、いやいや・・・分かってるって。任せておけって！");
                                }
                                else if (failCounter == 3)
                                {
                                    UpdateMainMessage("アイン：・・・ぐぬぬ・・・");

                                    UpdateMainMessage("ラナ：ちょーーっと！？次駄目だったら、私もう帰るわよ？");

                                    UpdateMainMessage("アイン：マジかよ！？何でそうなるんだよ！？");

                                    UpdateMainMessage("ラナ：ココで正解出来ないアインなんてもう知らないわよ。ちゃんとやってよね！？");

                                    UpdateMainMessage("アイン：うあっつ・・・分かったって。今度こそ！");
                                }
                                else
                                {
                                    UpdateMainMessage("ラナ：・・・・・・");

                                    UpdateMainMessage("ラナ：っさ、もう帰りましょ♪");

                                    UpdateMainMessage("アイン：っな！どうしてそうなるんだよ！？頼む、もう一度だけ！！");

                                    UpdateMainMessage("ラナ：ううん、もう良いの帰りましょ、アイン♪");

                                    UpdateMainMessage("アイン：ま、待てラナ！！　待ってくれえぇぇ！！");

                                    UpdateMainMessage(" 〜　THE　END　〜　（見捨てられし者）");

                                    using (ESCMenu esc = new ESCMenu())
                                    {
                                        esc.MC = this.MC;
                                        esc.SC = this.SC;
                                        esc.TC = this.TC;
                                        esc.WE = this.we;
                                        esc.KnownTileInfo = null;
                                        esc.KnownTileInfo2 = null;
                                        esc.KnownTileInfo3 = null;
                                        esc.KnownTileInfo4 = null;
                                        esc.KnownTileInfo5 = null;
                                        esc.Truth_KnownTileInfo = this.Truth_KnownTileInfo;
                                        esc.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2;
                                        esc.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3;
                                        esc.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4;
                                        esc.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5;
                                        esc.StartPosition = FormStartPosition.CenterParent;
                                        esc.TruthStory = true;
                                        esc.OnlySave = true;
                                        esc.ShowDialog();
                                    }
                                    this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                                    return;
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                }

                UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                dungeonTile[26 * Database.TRUTH_DUNGEON_COLUMN + 13].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                dungeonTile[26 * Database.TRUTH_DUNGEON_COLUMN + 13].Name = Database.TILEINFO_13;
                tileInfo2[26 * Database.TRUTH_DUNGEON_COLUMN + 13] = Database.TILEINFO_13;
                dungeonField.Invalidate();
                UpdateMainMessage("アイン：っお！何か開いた音だな！？");

                if (fromStrengthRoom)
                {
                    UpdateMainMessage("ラナ：見て、あっちの壁が開いているわよ。");

                    UpdateMainMessage("アイン：ようやく開いたってか・・・隠し部屋。");

                    UpdateMainMessage("アイン：っしゃ、さっそく行ってみようぜ！");
                }
                else
                {
                    UpdateMainMessage("ラナ：どこかの扉かもしくは壁が開く音よね。");

                    UpdateMainMessage("アイン：ようやく開いたってか・・・隠し部屋。");

                    UpdateMainMessage("アイン：っしゃ、さっそく開いた隠し部屋を探して回るとするか！");
                }

                GroundOne.WE2.TruthAnswer2_OK = true;
            }
        }

        // ダンジョン２階の技の部屋、エリア２に関する記述
        int ShadowTileNumber = -1;
        int BeforeDirectionNumber = 0; // 1:左 2:上 3:下
        private bool JudgeCorrectDirection()
        {
            // 特に何も設定されていない場合はTrueで返す
            if ((this.ShadowTileNumber == -1) && (this.BeforeDirectionNumber == 0))
            {
                return true;
            }

            // 左指示に対して、前回の位置から１歩左ならTrueで返す
            if (this.BeforeDirectionNumber == 1)
            {
                if ((GetTileNumber(this.Player.Location) + 1) == this.ShadowTileNumber)
                {
                    return true;
                }
            }
            // 上指示に対して、前回の位置から１歩上ならTrueで返す
            else if (this.BeforeDirectionNumber == 2)
            {
                if ((GetTileNumber(this.Player.Location) + 1 * Database.TRUTH_DUNGEON_COLUMN) == this.ShadowTileNumber)
                {
                    return true;
                }
            }
            // 下指示に対して、前回の位置から１歩下ならTrueで返す
            else if (this.BeforeDirectionNumber == 3)
            {
                if ((GetTileNumber(this.Player.Location) - 1 * Database.TRUTH_DUNGEON_COLUMN) == this.ShadowTileNumber)
                {
                    return true;
                }
            }
            return false;
        }
        // ダンジョン２階の技の部屋、エリア４に関する記述
        int Area4_InnerTimerCount = 0;
        int Area4_ShadowTileNum = -1;
        #endregion

        private bool CheckTriggeredEvent(int eventNum)
        {
            int tilenum = GetTileNumber(Player.Location);
            int row = tilenum / Database.TRUTH_DUNGEON_COLUMN;
            int column = tilenum % Database.TRUTH_DUNGEON_COLUMN;

            switch (we.DungeonArea)
            {
                #region "１階"
                case 1:
                    // 看板１
                    if (row == 8 && column == 42 && eventNum == 0)
                    {
                        return true;
                    }
                    // 看板２
                    if (row == 3 && column == 37 && eventNum == 1)
                    {
                        return true;
                    }
                    // 看板３
                    if (row == 31 && column == 18 && eventNum == 2)
                    {
                        return true;
                    }
                    // 看板４
                    if (row == 21 && column == 54 && eventNum == 3)
                    {
                        return true;
                    }
                    // 看板５
                    if (row == 6 && column == 3 && eventNum == 4)
                    {
                        return true;
                    }
                    // 町への帰還
                    if (row == 14 && column == 39 && eventNum == 5)
                    {
                        return true;
                    }
                    // 宝箱１−１
                    if (row == 13 && column == 34 && !we.TruthTreasure11 && eventNum == 6)
                    {
                        return true;
                    }
                    // 宝箱１−２
                    if (row == 21 && column == 53 && !we.TruthTreasure12 && eventNum == 7)
                    {
                        return true;
                    }
                    // 宝箱１−３
                    if (row == 29 && column == 29 && !we.TruthTreasure13 && eventNum == 8)
                    {
                        return true;
                    }
                    // 宝箱１−４
                    if (row == 8 && column == 33 && !we.TruthTreasure14 && eventNum == 9)
                    {
                        return true;
                    }
                    // 宝箱１−５
                    if (row == 1 && column == 22 && !we.TruthTreasure15 && eventNum == 10)
                    {
                        return true;
                    }
                    // ボス１
                    if (row == 4 && column == 11 && !we.TruthCompleteSlayBoss1 && eventNum == 11)
                    {
                        return true;
                    }
                    // 大広間右下右扉
                    if (row == 33 && column == 22 && eventNum == 12)
                    {
                        return true;
                    }
                    // 大広間前、右下右の入り口
                    if (row == 33 && column == 24 && eventNum == 13)
                    {
                        return true;
                    }
                    // 大広間右下下扉
                    if (row == 34 && column == 21 && eventNum == 14)
                    {
                        return true;
                    }
                    // 大広間右下下の入り口
                    if (row == 36 && column == 21 && eventNum == 15)
                    {
                        return true;
                    }
                    // 大広間右上右扉
                    if (row == 28 && column == 22 && eventNum == 16)
                    {
                        return true;
                    }
                    // 大広間右上右の入り口
                    if (row == 28 && column == 24 && eventNum == 17)
                    {
                        return true;
                    }
                    // 大広間右上上扉
                    if (row == 27 && column == 21 && eventNum == 18)
                    {
                        return true;
                    }
                    // 大広間右上上の入り口
                    if (row == 25 && column == 21 && eventNum == 19)
                    {
                        return true;
                    }
                    // 中央一本道の扉右２
                    if (row == 10 && column == 17 && eventNum == 20)
                    {
                        return true;
                    }
                    // 中央一本道の扉右１
                    if (row == 10 && column == 16 && eventNum == 21)
                    {
                        return true;
                    }
                    // 宝箱２−１
                    if (row == 1 && column == 40 && !we.TruthTreasure121 && eventNum == 22)
                    {
                        return true;
                    }
                    // 宝箱２−２
                    if (row == 1 && column == 53 && !we.TruthTreasure122 && eventNum == 23)
                    {
                        return true;
                    }
                    // 宝箱２−３
                    if (row == 8 && column == 49 && !we.TruthTreasure123 && eventNum == 24)
                    {
                        return true;
                    }
                    // 宝箱２−４
                    if (row == 12 && column == 24 && !we.TruthTreasure124 && eventNum == 25)
                    {
                        return true;
                    }
                    // 宝箱２−５
                    if (row == 18 && column == 9 && !we.TruthTreasure125 && eventNum == 26)
                    {
                        return true;
                    }
                    // 宝箱２−６
                    if (row == 20 && column == 45 && !we.TruthTreasure126 && eventNum == 27)
                    {
                        return true;
                    }
                    // 宝箱２−７
                    if (row == 24 && column == 52 && !we.TruthTreasure127 && eventNum == 28)
                    {
                        return true;
                    }
                    // 宝箱２−８
                    if (row == 26 && column == 52 && !we.TruthTreasure128 && eventNum == 29)
                    {
                        return true;
                    }
                    // 宝箱２−９
                    if (row == 28 && column == 43 && !we.TruthTreasure129 && eventNum == 30)
                    {
                        return true;
                    }
                    // 宝箱２−１０
                    if (row == 35 && column == 26 && !we.TruthTreasure1210 && eventNum == 31)
                    {
                        return true;
                    }
                    // 宝箱２−１１
                    if (row == 35 && column == 34 && !we.TruthTreasure1211 && eventNum == 32)
                    {
                        return true;
                    }
                    // 宝箱２−１２
                    if (row == 38 && column == 48 && !we.TruthTreasure1212 && eventNum == 33)
                    {
                        return true;
                    }
                    // 宝箱３−１
                    if (row == 9 && column == 7 && !we.TruthTreasure131 && eventNum == 34)
                    {
                        return true;
                    }
                    // 宝箱３−２
                    if (row == 18 && column == 1 && !we.TruthTreasure132 && eventNum == 35)
                    {
                        return true;
                    }
                    // 宝箱３−３
                    if (row == 22 && column == 8 && !we.TruthTreasure133 && eventNum == 36)
                    {
                        return true;
                    }
                    // 宝箱３−４
                    if (row == 36 && column == 12 && !we.TruthTreasure134 && eventNum == 37)
                    {
                        return true;
                    }
                    // 宝箱４−１
                    if (row == 8 && column == 19 && !we.TruthTreasure141 && eventNum == 38)
                    {
                        return true;
                    }
                    // 宝箱４−２
                    if (row == 16 && column == 8 && !we.TruthTreasure142 && eventNum == 39)
                    {
                        return true;
                    }
                    // 中央一本道下　右２
                    if (row == 16 && column == 14 && eventNum == 40)
                    {
                        return true;
                    }
                    // 中央一本道下　右１
                    if (row == 16 && column == 13 && eventNum == 41)
                    {
                        return true;
                    }
                    // 小広間左下扉
                    if (row == 12 && column == 2 && eventNum == 42)
                    {
                        return true;
                    }
                    // 小広間左下入り口
                    if (row == 14 && column == 2 && eventNum == 43)
                    {
                        return true;
                    }
                    // 小広間下右扉
                    if (row == 12 && column == 4 && eventNum == 44)
                    {
                        return true;
                    }
                    // 小広間下右入り口
                    if (row == 14 && column == 4 && eventNum == 45)
                    {
                        return true;
                    }
                    // 小広間右下扉
                    if (row == 11 && column == 5 && eventNum == 46)
                    {
                        return true;
                    }
                    // 小広間右下入り口
                    if (row == 11 && column == 7 && eventNum == 47)
                    {
                        return true;
                    }
                    // 小広間右上扉
                    if (row == 2 && column == 5 && eventNum == 48)
                    {
                        return true;
                    }
                    // 小広間右上入り口
                    if (row == 2 && column == 7 && eventNum == 49)
                    {
                        return true;
                    }
                    // 小広間左上扉
                    if (row == 6 && column == 5 && eventNum == 50)
                    {
                        return true;
                    }
                    // ２階への階段
                    if (row == 6 && column == 17 && eventNum == 51)
                    {
                        return true;
                    }
                    // 大広間左上上扉
                    if (row == 27 && column == 14 && eventNum == 52)
                    {
                        return true;
                    }
                    // 大広間左上左扉
                    if (row == 28 && column == 13 && eventNum == 53)
                    {
                        return true;
                    }
                    // 大広間左下左扉
                    if (row == 33 && column == 13 && eventNum == 54)
                    {
                        return true;
                    }
                    // 大広間左下下扉
                    if (row == 34 && column == 14 && eventNum == 55)
                    {
                        return true;
                    }
                    // 真実解入り口
                    if (row == 29 && column == 50 && eventNum == 56)
                    {
                        return true;
                    }
                    // 真実解のイベント
                    if (row == 29 && column == 47 && eventNum == 57)
                    {
                        return true;
                    }
                    break;

                #endregion
                #region "２階"
                case 2:
                    // 上り階段
                    if (row == 19 && column == 29 && eventNum == 0)
                    {
                        return true;
                    }
                    // 中央４看板１
                    else if (row == 19 && column == 33 && eventNum == 1)
                    {
                        return true;
                    }
                    // 中央４看板２
                    else if (row == 23 && column == 29 && eventNum == 2)
                    {
                        return true;
                    }
                    // 中央４看板３
                    else if (row == 15 && column == 29 && eventNum == 3)
                    {
                        return true;
                    }
                    // 中央４看板４
                    else if (row == 19 && column == 25 && eventNum == 4)
                    {
                        return true;
                    }
                    // 知の部屋、看板１
                    else if (row == 8 && column == 49 && eventNum == 5)
                    {
                        return true;
                    }
                    // 知の部屋　ファースト：チェックポイント１
                    else if (row == 2 && column == 35 && eventNum == 8)
                    {
                        return true;
                    }
                    // 知の部屋　ファースト：チェックポイント２
                    else if (row == 20 && column == 57 && eventNum == 9)
                    {
                        return true;
                    }
                    // 知の部屋　ファースト：チェックポイント３
                    else if (row == 4 && column == 35 && eventNum == 10)
                    {
                        return true;
                    }
                    // 知の部屋　セカンド：チェックポイント４（上通路、中央部屋）
                    else if (row == 5 && column == 42 && eventNum == 11)
                    {
                        return true;
                    }
                    // 知の部屋　セカンド：チェックポイント５（左通路、右部屋）
                    else if (row == 5 && column == 46 && eventNum == 12)
                    {
                        return true;
                    }
                    // 知の部屋　セカンド：チェックポイント６（下通路、下部屋）
                    else if (row == 17 && column == 56 && eventNum == 13)
                    {
                        return true;
                    }
                    // 知の部屋　サード：チェックポイント７（右通路、中央部屋）
                    else if (row == 14 && column == 52 && eventNum == 14)
                    {
                        return true;
                    }
                    // 知の部屋　サード：チェックポイント８（左通路、左部屋）
                    else if (row == 5 && column == 38 && eventNum == 15)
                    {
                        return true;
                    }
                    // 知の部屋　サード：チェックポイント９（下通路、上部屋）
                    else if (row == 11 && column == 56 && eventNum == 16)
                    {
                        return true;
                    }
                    // 知の部屋、一本書き看板
                    else if (row == 15 && column == 42 && eventNum == 17)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル０−１
                    else if (row == 13 && column == 42 && eventNum == 18)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル１
                    else if (row == 11 && column == 42 && eventNum == 19)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル１−１
                    else if (row == 11 && column == 40 && eventNum == 20)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル１−２
                    else if (row == 11 && column == 38 && eventNum == 21)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル２
                    else if (row == 13 && column == 38 && eventNum == 22)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル２−１
                    else if (row == 13 && column == 40 && eventNum == 23)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル３
                    else if (row == 15 && column == 40 && eventNum == 24)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル３−１
                    else if (row == 15 && column == 38 && eventNum == 25)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル３−２
                    else if (row == 17 && column == 38 && eventNum == 26)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル４
                    else if (row == 19 && column == 38 && eventNum == 27)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル４−１
                    else if (row == 19 && column == 40 && eventNum == 28)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル４−２
                    else if (row == 17 && column == 40 && eventNum == 29)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル５
                    else if (row == 17 && column == 42 && eventNum == 30)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル５−１
                    else if (row == 19 && column == 42 && eventNum == 31)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル５−２
                    else if (row == 19 && column == 44 && eventNum == 32)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル６
                    else if (row == 19 && column == 46 && eventNum == 33)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル６−１
                    else if (row == 17 && column == 46 && eventNum == 34)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル６−２
                    else if (row == 17 && column == 44 && eventNum == 35)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル６−３
                    else if (row == 15 && column == 44 && eventNum == 36)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル６−４
                    else if (row == 13 && column == 44 && eventNum == 37)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル７
                    else if (row == 11 && column == 44 && eventNum == 38)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル７−１
                    else if (row == 11 && column == 46 && eventNum == 39)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル７−２
                    else if (row == 13 && column == 46 && eventNum == 40)
                    {
                        return true;
                    }
                    // 知の部屋、１本書き、タイル８
                    else if (row == 15 && column == 46 && eventNum == 41)
                    {
                        return true;
                    }
                    // 知の部屋、複合レバーの看板１
                    else if (row == 5 && column == 51 && eventNum == 42)
                    {
                        return true;
                    }
                    // 知の部屋、複合レバー１−１
                    else if (row == 4 && column == 51 && eventNum == 43)
                    {
                        return true;
                    }
                    // 知の部屋、複合レバー１−２
                    else if (row == 6 && column == 51 && eventNum == 44)
                    {
                        return true;
                    }
                    // 技の部屋、看板１
                    else if (row == 27 && column == 57 && eventNum == 45)
                    {
                        return true;
                    }
                    // 技の部屋、ルームＡ
                    else if ((row == 26 && column == 56 && eventNum == 46) ||
                             (row == 26 && column == 55 && eventNum == 46) ||
                             (row == 26 && column == 54 && eventNum == 46) ||
                             (row == 26 && column == 53 && eventNum == 46) ||
                             (row == 26 && column == 52 && eventNum == 46) ||
                             (row == 26 && column == 51 && eventNum == 46) ||
                             (row == 26 && column == 50 && eventNum == 46) ||
                             (row == 26 && column == 49 && eventNum == 46) ||
                             (row == 26 && column == 48 && eventNum == 46) ||

                             (row == 27 && column == 56 && eventNum == 46) ||
                             (row == 27 && column == 55 && eventNum == 46) ||
                             (row == 27 && column == 54 && eventNum == 46) ||
                             (row == 27 && column == 53 && eventNum == 46) ||
                             (row == 27 && column == 52 && eventNum == 46) ||
                             (row == 27 && column == 51 && eventNum == 46) ||
                             (row == 27 && column == 50 && eventNum == 46) ||
                             (row == 27 && column == 49 && eventNum == 46) ||
                             (row == 27 && column == 48 && eventNum == 46) ||

                             (row == 28 && column == 56 && eventNum == 46) ||
                             (row == 28 && column == 55 && eventNum == 46) ||
                             (row == 28 && column == 54 && eventNum == 46) ||
                             (row == 28 && column == 53 && eventNum == 46) ||
                             (row == 28 && column == 52 && eventNum == 46) ||
                             (row == 28 && column == 51 && eventNum == 46) ||
                             (row == 28 && column == 50 && eventNum == 46) ||
                             (row == 28 && column == 49 && eventNum == 46) ||
                             (row == 28 && column == 48 && eventNum == 46))
                    {
                        return true;
                    }
                    // 技の部屋、ルームＡクリア
                    else if ((row == 26 && column == 47 && eventNum == 47) ||
                             (row == 27 && column == 47 && eventNum == 47) ||
                             (row == 28 && column == 47 && eventNum == 47))
                    {
                        return true;
                    }
                    // 技の部屋、看板２
                    else if (row == 27 && column == 45 && eventNum == 48)
                    {
                        return true;
                    }
                    // 技の部屋、ルームＢ
                    else if ((row == 26 && column == 44 && eventNum == 49) ||
                             (row == 26 && column == 43 && eventNum == 49) ||
                             (row == 26 && column == 42 && eventNum == 49) ||
                             (row == 26 && column == 41 && eventNum == 49) ||
                             (row == 26 && column == 40 && eventNum == 49) ||
                             (row == 26 && column == 39 && eventNum == 49) ||
                             (row == 26 && column == 38 && eventNum == 49) ||
                             (row == 26 && column == 37 && eventNum == 49) ||
                             (row == 26 && column == 36 && eventNum == 49) ||

                             (row == 27 && column == 44 && eventNum == 49) ||
                             (row == 27 && column == 43 && eventNum == 49) ||
                             (row == 27 && column == 42 && eventNum == 49) ||
                             (row == 27 && column == 41 && eventNum == 49) ||
                             (row == 27 && column == 40 && eventNum == 49) ||
                             (row == 27 && column == 39 && eventNum == 49) ||
                             (row == 27 && column == 38 && eventNum == 49) ||
                             (row == 27 && column == 37 && eventNum == 49) ||
                             (row == 27 && column == 36 && eventNum == 49) ||

                             (row == 28 && column == 44 && eventNum == 49) ||
                             (row == 28 && column == 43 && eventNum == 49) ||
                             (row == 28 && column == 42 && eventNum == 49) ||
                             (row == 28 && column == 41 && eventNum == 49) ||
                             (row == 28 && column == 40 && eventNum == 49) ||
                             (row == 28 && column == 39 && eventNum == 49) ||
                             (row == 28 && column == 38 && eventNum == 49) ||
                             (row == 28 && column == 37 && eventNum == 49) ||
                             (row == 28 && column == 36 && eventNum == 49))
                    {
                        return true;
                    }
                    // 技の部屋、ルームＢクリア
                    else if ((row == 26 && column == 35 && eventNum == 50) ||
                             (row == 27 && column == 35 && eventNum == 50) ||
                             (row == 28 && column == 35 && eventNum == 50))
                    {
                        return true;
                    }
                    // 技の部屋、看板３
                    else if (row == 27 && column == 33 && eventNum == 51)
                    {
                        return true;
                    }
                    // 技の部屋、ルームＣ
                    else if ((row == 26 && column == 32 && eventNum == 52) ||
                             (row == 26 && column == 31 && eventNum == 52) ||
                             (row == 26 && column == 30 && eventNum == 52) ||
                             (row == 26 && column == 29 && eventNum == 52) ||
                             (row == 26 && column == 28 && eventNum == 52) ||

                             (row == 27 && column == 32 && eventNum == 52) ||
                             (row == 27 && column == 31 && eventNum == 52) ||
                             (row == 27 && column == 30 && eventNum == 52) ||
                             (row == 27 && column == 29 && eventNum == 52) ||
                             (row == 27 && column == 28 && eventNum == 52) ||

                             (row == 28 && column == 32 && eventNum == 52) ||
                             (row == 28 && column == 31 && eventNum == 52) ||
                             (row == 28 && column == 30 && eventNum == 52) ||
                             (row == 28 && column == 29 && eventNum == 52) ||
                             (row == 28 && column == 28 && eventNum == 52) ||

                             (row == 29 && column == 30 && eventNum == 52) ||
                             (row == 29 && column == 29 && eventNum == 52) ||
                             (row == 29 && column == 28 && eventNum == 52) ||

                             (row == 30 && column == 30 && eventNum == 52) ||
                             (row == 30 && column == 29 && eventNum == 52) ||
                             (row == 30 && column == 28 && eventNum == 52) ||

                             (row == 31 && column == 30 && eventNum == 52) ||
                             (row == 31 && column == 29 && eventNum == 52) ||
                             (row == 31 && column == 28 && eventNum == 52) ||

                             (row == 32 && column == 30 && eventNum == 52) ||
                             (row == 32 && column == 29 && eventNum == 52) ||
                             (row == 32 && column == 28 && eventNum == 52) ||

                             (row == 33 && column == 32 && eventNum == 52) ||
                             (row == 33 && column == 31 && eventNum == 52) ||
                             (row == 33 && column == 30 && eventNum == 52) ||
                             (row == 33 && column == 29 && eventNum == 52) ||
                             (row == 33 && column == 28 && eventNum == 52) ||

                             (row == 34 && column == 32 && eventNum == 52) ||
                             (row == 34 && column == 31 && eventNum == 52) ||
                             (row == 34 && column == 30 && eventNum == 52) ||
                             (row == 34 && column == 29 && eventNum == 52) ||
                             (row == 34 && column == 28 && eventNum == 52) ||

                             (row == 35 && column == 32 && eventNum == 52) ||
                             (row == 35 && column == 31 && eventNum == 52) ||
                             (row == 35 && column == 30 && eventNum == 52) ||
                             (row == 35 && column == 29 && eventNum == 52) ||
                             (row == 35 && column == 28 && eventNum == 52))
                    {
                        return true;
                    }
                    // 技の部屋、ルームＣクリア
                    else if ((row == 33 && column == 33 && eventNum == 53) ||
                             (row == 34 && column == 33 && eventNum == 53) ||
                             (row == 35 && column == 33 && eventNum == 53))
                    {
                        return true;
                    }
                    // 技の部屋、看板４
                    else if (row == 34 && column == 35 && eventNum == 54)
                    {
                        return true;
                    }
                    // 技の部屋、ルームＤ
                    else if ((row == 33 && column == 36 && eventNum == 55) ||
                             (row == 33 && column == 37 && eventNum == 55) ||
                             (row == 33 && column == 38 && eventNum == 55) ||
                             (row == 33 && column == 39 && eventNum == 55) ||
                             (row == 33 && column == 40 && eventNum == 55) ||
                             (row == 33 && column == 41 && eventNum == 55) ||
                             (row == 33 && column == 42 && eventNum == 55) ||
                             (row == 33 && column == 43 && eventNum == 55) ||
                             (row == 33 && column == 44 && eventNum == 55) ||

                             (row == 34 && column == 36 && eventNum == 55) ||
                             (row == 34 && column == 37 && eventNum == 55) ||
                             (row == 34 && column == 38 && eventNum == 55) ||
                             (row == 34 && column == 39 && eventNum == 55) ||
                             (row == 34 && column == 40 && eventNum == 55) ||
                             (row == 34 && column == 41 && eventNum == 55) ||
                             (row == 34 && column == 42 && eventNum == 55) ||
                             (row == 34 && column == 43 && eventNum == 55) ||
                             (row == 34 && column == 44 && eventNum == 55) ||

                             (row == 35 && column == 36 && eventNum == 55) ||
                             (row == 35 && column == 37 && eventNum == 55) ||
                             (row == 35 && column == 38 && eventNum == 55) ||
                             (row == 35 && column == 39 && eventNum == 55) ||
                             (row == 35 && column == 40 && eventNum == 55) ||
                             (row == 35 && column == 41 && eventNum == 55) ||
                             (row == 35 && column == 42 && eventNum == 55) ||
                             (row == 35 && column == 43 && eventNum == 55) ||
                             (row == 35 && column == 44 && eventNum == 55))
                    {
                        return true;
                    }
                    // 技の部屋、ルームＤクリア
                    else if ((row == 33 && column == 45 && eventNum == 56) ||
                             (row == 34 && column == 45 && eventNum == 56) ||
                             (row == 35 && column == 45 && eventNum == 56))
                    {
                        return true;
                    }
                    // 技の部屋、看板５
                    else if (row == 34 && column == 47 && eventNum == 57)
                    {
                        return true;
                    }
                    // 技の部屋、ルームＥ
                    else if ((row == 34 && column == 48 && eventNum == 58))
                    {
                        return true;
                    }
                    // 技の部屋、ルームＥクリア
                    else if ((row == 33 && column == 57 && eventNum == 59) ||
                             (row == 34 && column == 57 && eventNum == 59) ||
                             (row == 35 && column == 57 && eventNum == 59))
                    {
                        return true;
                    }
                    // 技の部屋、看板６
                    else if (row == 34 && column == 59 && eventNum == 60)
                    {
                        return true;
                    }
                    // 心の部屋、ヒント１
                    else if (row == 12 && column == 0 && eventNum == 61)
                    {
                        return true;
                    }
                    // 心の部屋、題材１
                    else if ((row == 0 && column == 0 && eventNum == 62) ||
                             (row == 1 && column == 0 && eventNum == 62) ||
                             (row == 2 && column == 0 && eventNum == 62) ||
                             (row == 3 && column == 0 && eventNum == 62) ||
                             (row == 4 && column == 0 && eventNum == 62))
                    {
                        return true;
                    }
                    // 心の部屋、題材２
                    else if ((row == 0 && column == 9 && eventNum == 63) ||
                             (row == 0 && column == 10 && eventNum == 63) ||
                             (row == 0 && column == 11 && eventNum == 63) ||
                             (row == 0 && column == 12 && eventNum == 63) ||
                             (row == 0 && column == 13 && eventNum == 63) ||
                             (row == 0 && column == 14 && eventNum == 63))
                    {
                        return true;
                    }
                    // 心の部屋、題材３
                    else if ((row == 0 && column == 28 && eventNum == 64))
                    {
                        return true;
                    }
                    // 心の部屋、題材４
                    else if ((row == 4 && column == 3 && eventNum == 65) ||
                             (row == 4 && column == 4 && eventNum == 65) ||
                             (row == 4 && column == 5 && eventNum == 65) ||
                             (row == 5 && column == 3 && eventNum == 65) ||
                             (row == 5 && column == 4 && eventNum == 65) ||
                             (row == 5 && column == 5 && eventNum == 65) ||
                             (row == 6 && column == 3 && eventNum == 65) ||
                             (row == 6 && column == 4 && eventNum == 65) ||
                             (row == 6 && column == 5 && eventNum == 65)
                        )
                    {
                        return true;
                    }
                    // 心の部屋、題材５
                    else if ((row == 2 && column == 9 && eventNum == 66) ||
                             (row == 2 && column == 10 && eventNum == 66) ||
                             (row == 2 && column == 11 && eventNum == 66) ||
                             (row == 3 && column == 9 && eventNum == 66) ||
                             (row == 3 && column == 10 && eventNum == 66) ||
                             (row == 3 && column == 11 && eventNum == 66) ||
                             (row == 4 && column == 9 && eventNum == 66) ||
                             (row == 4 && column == 10 && eventNum == 66) ||
                             (row == 4 && column == 11 && eventNum == 66)
                        )
                    {
                        return true;
                    }
                    // 心の部屋、題材６
                    else if ((row == 2 && column == 22 && eventNum == 67) ||
                             (row == 2 && column == 23 && eventNum == 67) ||
                             (row == 2 && column == 24 && eventNum == 67) ||
                             (row == 3 && column == 22 && eventNum == 67) ||
                             (row == 3 && column == 23 && eventNum == 67) ||
                             (row == 3 && column == 24 && eventNum == 67) ||
                             (row == 4 && column == 22 && eventNum == 67) ||
                             (row == 4 && column == 23 && eventNum == 67) ||
                             (row == 4 && column == 24 && eventNum == 67)
                        )
                    {
                        return true;
                    }
                    // 心の部屋、題材７
                    else if ((row == 6 && column == 14 && eventNum == 68) ||
                             (row == 6 && column == 15 && eventNum == 68) ||
                             (row == 6 && column == 16 && eventNum == 68) ||
                             (row == 7 && column == 14 && eventNum == 68) ||
                             (row == 7 && column == 15 && eventNum == 68) ||
                             (row == 7 && column == 16 && eventNum == 68) ||
                             (row == 8 && column == 14 && eventNum == 68) ||
                             (row == 8 && column == 15 && eventNum == 68) ||
                             (row == 8 && column == 16 && eventNum == 68)
                        )
                    {
                        return true;
                    }
                    // 心の部屋、題材８
                    else if ((row == 5 && column == 28 && eventNum == 69) ||
                             (row == 6 && column == 28 && eventNum == 69) ||
                             (row == 7 && column == 28 && eventNum == 69)
                             )
                    {
                        return true;
                    }
                    // 心の部屋、題材９
                    else if ((row == 8 && column == 20 && eventNum == 70) ||
                             (row == 8 && column == 21 && eventNum == 70) ||
                             (row == 8 && column == 22 && eventNum == 70) ||
                             (row == 8 && column == 23 && eventNum == 70) ||
                             (row == 8 && column == 24 && eventNum == 70) ||
                             (row == 8 && column == 25 && eventNum == 70) ||
                             (row == 9 && column == 20 && eventNum == 70) ||
                             (row == 9 && column == 21 && eventNum == 70) ||
                             (row == 9 && column == 22 && eventNum == 70) ||
                             (row == 9 && column == 23 && eventNum == 70) ||
                             (row == 9 && column == 24 && eventNum == 70) ||
                             (row == 9 && column == 25 && eventNum == 70) ||
                             (row == 10 && column == 20 && eventNum == 70) ||
                             (row == 10 && column == 21 && eventNum == 70) ||
                             (row == 10 && column == 22 && eventNum == 70) ||
                             (row == 10 && column == 23 && eventNum == 70) ||
                             (row == 10 && column == 24 && eventNum == 70) ||
                             (row == 10 && column == 25 && eventNum == 70)
                        )
                    {
                        return true;
                    }
                    // 心の部屋、題材１０
                    else if ((row == 12 && column == 9 && eventNum == 71) ||
                             (row == 12 && column == 10 && eventNum == 71) ||
                             (row == 12 && column == 11 && eventNum == 71) ||
                             (row == 12 && column == 12 && eventNum == 71) ||
                             (row == 12 && column == 13 && eventNum == 71) ||
                             (row == 12 && column == 14 && eventNum == 71)
                        )
                    {
                        return true;
                    }
                    // 力の部屋、ボス１
                    else if (row == 37 && column == 22 && eventNum == 72)
                    {
                        return true;
                    }
                    // 力の部屋、ボス２
                    else if (row == 27 && column == 22 && eventNum == 73)
                    {
                        return true;
                    }
                    // 力の部屋、ボス３
                    else if (row == 19 && column == 16 && eventNum == 74)
                    {
                        return true;
                    }
                    // 力の部屋、ボス４
                    else if (row == 22 && column == 2 && eventNum == 75)
                    {
                        return true;
                    }
                    // 力の部屋、ボス５
                    else if (row == 31 && column == 3 && eventNum == 76)
                    {
                        return true;
                    }
                    // 力の部屋、ボス６
                    else if (row == 36 && column == 14 && eventNum == 77)
                    {
                        return true;
                    }
                    // 宝箱１
                    else if (row == 16 && column == 59 && !we.TruthTreasure21 && eventNum == 78)
                    {
                        return true;
                    }
                    // 宝箱２
                    else if (row == 12 && column == 35 && !we.TruthTreasure22 && eventNum == 79)
                    {
                        return true;
                    }
                    // 宝箱３
                    else if (row == 5 && column == 55 && !we.TruthTreasure23 && eventNum == 80)
                    {
                        return true;
                    }
                    // 宝箱４
                    else if (row == 25 && column == 59 && !we.TruthTreasure24 && eventNum == 81)
                    {
                        return true;
                    }
                    // 宝箱５
                    else if (row == 27 && column == 46 && !we.TruthTreasure25 && eventNum == 82)
                    {
                        return true;
                    }
                    // 宝箱６
                    else if (row == 27 && column == 34 && !we.TruthTreasure26 && eventNum == 83)
                    {
                        return true;
                    }
                    // 宝箱７
                    else if (row == 34 && column == 34 && !we.TruthTreasure27 && eventNum == 84)
                    {
                        return true;
                    }
                    // 宝箱８
                    else if (row == 34 && column == 46 && !we.TruthTreasure28 && eventNum == 85)
                    {
                        return true;
                    }
                    // 宝箱９
                    else if (row == 34 && column == 58 && !we.TruthTreasure29 && eventNum == 86)
                    {
                        return true;
                    }
                    // 宝箱１０
                    else if (row == 39 && column == 31 && !we.TruthTreasure210 && eventNum == 87)
                    {
                        return true;
                    }
                    // 宝箱１１
                    else if (row == 15 && column == 13 && !we.TruthTreasure211 && eventNum == 88)
                    {
                        return true;
                    }
                    // 宝箱１２
                    else if (row == 6 && column == 29 && !we.TruthTreasure212 && eventNum == 89)
                    {
                        return true;
                    }
                    // 宝箱１３
                    else if (row == 39 && column == 23 && !we.TruthTreasure213 && eventNum == 90)
                    {
                        return true;
                    }
                    // 宝箱１４
                    else if (row == 31 && column == 22 && !we.TruthTreasure214 && eventNum == 91)
                    {
                        return true;
                    }
                    // 宝箱１５
                    else if (row == 19 && column == 22 && !we.TruthTreasure215 && eventNum == 92)
                    {
                        return true;
                    }
                    // 宝箱１６
                    else if (row == 19 && column == 4 && !we.TruthTreasure216 && eventNum == 93)
                    {
                        return true;
                    }
                    // 宝箱１７
                    else if (row == 28 && column == 6 && !we.TruthTreasure217 && eventNum == 94)
                    {
                        return true;
                    }
                    // 宝箱１８
                    else if (row == 39 && column == 10 && !we.TruthTreasure218 && eventNum == 95)
                    {
                        return true;
                    }
                    // 技の部屋、複合レバーの看板１
                    else if (row == 37 && column == 30 && eventNum == 96)
                    {
                        return true;
                    }
                    // 技の部屋、複合レバー２−１
                    else if (row == 37 && column == 29 && eventNum == 97)
                    {
                        return true;
                    }
                    // 技の部屋、複合レバー２−２
                    else if (row == 37 && column == 31 && eventNum == 98)
                    {
                        return true;
                    }
                    // 力の部屋、複合レバーの看板１
                    else if (row == 26 && column == 14 && eventNum == 99)
                    {
                        return true;
                    }
                    // 力の部屋、複合レバー３−１
                    else if (row == 26 && column == 13 && eventNum == 100)
                    {
                        return true;
                    }
                    // 力の部屋、複合レバー３−２
                    else if (row == 26 && column == 15 && eventNum == 101)
                    {
                        return true;
                    }
                    // 心の部屋、複合レバーの看板１
                    else if (row == 6 && column == 30 && eventNum == 102)
                    {
                        return true;
                    }
                    // 心の部屋、複合レバー３−１
                    else if (row == 5 && column == 30 && eventNum == 103)
                    {
                        return true;
                    }
                    // 心の部屋、複合レバー３−２
                    else if (row == 7 && column == 30 && eventNum == 104)
                    {
                        return true;
                    }
                    // 技の部屋、隠し通路
                    else if (row == 37 && column == 59 && eventNum == 105)
                    {
                        return true;
                    }
                    // ３階への階段前
                    else if (row == 26 && column == 16 && eventNum == 106)
                    {
                        return true;
                    }
                    // ３階への階段
                    else if (row == 26 && column == 17 && eventNum == 107)
                    {
                        return true;
                    }
                    // 真実解のイベント２
                    else if (row == 26 && column == 10 && eventNum == 108)
                    {
                        return true;
                    }
                    // 技の部屋、ラストの部屋でダッシュ中戦闘発生を回避
                    else if ((row == 33 && column == 48 && eventNum == 109) ||
                             (row == 33 && column == 49 && eventNum == 109) ||
                             (row == 33 && column == 50 && eventNum == 109) ||
                             (row == 33 && column == 51 && eventNum == 109) ||
                             (row == 33 && column == 52 && eventNum == 109) ||
                             (row == 33 && column == 53 && eventNum == 109) ||
                             (row == 33 && column == 54 && eventNum == 109) ||
                             (row == 33 && column == 55 && eventNum == 109) ||
                             (row == 33 && column == 56 && eventNum == 109) ||

                             (row == 34 && column == 48 && eventNum == 109) ||
                             (row == 34 && column == 49 && eventNum == 109) ||
                             (row == 34 && column == 50 && eventNum == 109) ||
                             (row == 34 && column == 51 && eventNum == 109) ||
                             (row == 34 && column == 52 && eventNum == 109) ||
                             (row == 34 && column == 53 && eventNum == 109) ||
                             (row == 34 && column == 54 && eventNum == 109) ||
                             (row == 34 && column == 55 && eventNum == 109) ||
                             (row == 34 && column == 56 && eventNum == 109) ||

                             (row == 35 && column == 48 && eventNum == 109) ||
                             (row == 35 && column == 49 && eventNum == 109) ||
                             (row == 35 && column == 50 && eventNum == 109) ||
                             (row == 35 && column == 51 && eventNum == 109) ||
                             (row == 35 && column == 52 && eventNum == 109) ||
                             (row == 35 && column == 53 && eventNum == 109) ||
                             (row == 35 && column == 54 && eventNum == 109) ||
                             (row == 35 && column == 55 && eventNum == 109) ||
                             (row == 35 && column == 56 && eventNum == 109))
                    {
                        return true;
                    }
                    break;
                #endregion
                #region "３階"
                case 3:
                    // 上り階段
                    if (row == 19 && column == 0 && eventNum == 0)
                    {
                        return true;
                    }
                    // 始めの誘導
                    else if ((row == 19 && column == 3 && eventNum == 1) ||
                             (row == 20 && column == 3 && eventNum == 1))
                    {
                        return true;
                    }
                    // 始めの誘導縛り
                    else if (row == 18 && column == 3 && eventNum == 2)
                    {
                        return true;
                    }
                    else if (row == 21 && column == 3 && eventNum == 3)
                    {
                        return true;
                    }
                    else if (row == 19 && column == 9 && eventNum == 4)
                    {
                        return true;
                    }
                    else if (row == 20 && column == 9 && eventNum == 5)
                    {
                        return true;
                    }
                    // 鏡解説（１）
                    else if (row == 16 && column == 3 && eventNum == 6)
                    {
                        return true;
                    }
                    else if (row == 23 && column == 3 && eventNum == 7)
                    {
                        return true;
                    }
                    // 鏡ワープ１−１
                    else if (row == 1 && column == 4 && eventNum == 8)
                    {
                        return true;
                    }
                    else if (row == 4 && column == 4 && eventNum == 9)
                    {
                        return true;
                    }
                    else if (row == 7 && column == 4 && eventNum == 10)
                    {
                        return true;
                    }
                    else if (row == 10 && column == 4 && eventNum == 11)
                    {
                        return true;
                    }
                    else if (row == 13 && column == 4 && eventNum == 12)
                    {
                        return true;
                    }
                    else if (row == 16 && column == 4 && eventNum == 13)
                    {
                        return true;
                    }
                    else if (row == 23 && column == 4 && eventNum == 14)
                    {
                        return true;
                    }
                    else if (row == 26 && column == 4 && eventNum == 15)
                    {
                        return true;
                    }
                    else if (row == 29 && column == 4 && eventNum == 16)
                    {
                        return true;
                    }
                    else if (row == 32 && column == 4 && eventNum == 17)
                    {
                        return true;
                    }
                    else if (row == 35 && column == 4 && eventNum == 18)
                    {
                        return true;
                    }
                    else if (row == 38 && column == 4 && eventNum == 19)
                    {
                        return true;
                    }
                    // 鏡ワープ１−２
                    else if (row == 19 && column == 17 && eventNum == 20)
                    {
                        return true;
                    }
                    else if (row == 25 && column == 15 && eventNum == 21)
                    {
                        return true;
                    }
                    else if (row == 10 && column == 17 && eventNum == 22)
                    {
                        return true;
                    }
                    else if (row == 17 && column == 15 && eventNum == 23)
                    {
                        return true;
                    }
                    else if (row == 1 && column == 17 && eventNum == 24)
                    {
                        return true;
                    }
                    else if (row == 3 && column == 15 && eventNum == 25)
                    {
                        return true;
                    }
                    else if (row == 1 && column == 6 && eventNum == 26)
                    {
                        return true;
                    }
                    else if (row == 6 && column == 10 && eventNum == 27)
                    {
                        return true;
                    }
                    else if (row == 35 && column == 17 && eventNum == 28)
                    {
                        return true;
                    }
                    else if (row == 38 && column == 11 && eventNum == 29)
                    {
                        return true;
                    }
                    else if (row == 8 && column == 9 && eventNum == 30)
                    {
                        return true;
                    }
                    else if (row == 17 && column == 6 && eventNum == 31)
                    {
                        return true;
                    }
                    else if (row == 16 && column == 11 && eventNum == 32)
                    {
                        return true;
                    }
                    else if (row == 25 && column == 13 && eventNum == 33)
                    {
                        return true;
                    }
                    else if (row == 22 && column == 9 && eventNum == 34)
                    {
                        return true;
                    }
                    else if (row == 24 && column == 6 && eventNum == 35)
                    {
                        return true;
                    }
                    // 鏡ワープ１−３
                    else if (row == 27 && column == 12 && eventNum == 36)
                    {
                        return true;
                    }
                    else if (row == 30 && column == 18 && eventNum == 37)
                    {
                        return true;
                    }
                    else if (row == 5 && column == 15 && eventNum == 38)
                    {
                        return true;
                    }
                    else if (row == 8 && column == 17 && eventNum == 39)
                    {
                        return true;
                    }
                    else if (row == 9 && column == 11 && eventNum == 40)
                    {
                        return true;
                    }
                    else if (row == 14 && column == 13 && eventNum == 41)
                    {
                        return true;
                    }
                    else if (row == 36 && column == 6 && eventNum == 42)
                    {
                        return true;
                    }
                    else if (row == 38 && column == 9 && eventNum == 43)
                    {
                        return true;
                    }
                    // 鏡ワープ１−４
                    else if (row == 31 && column == 10 && eventNum == 44)
                    {
                        return true;
                    }
                    // 鏡ワープ１ーClear
                    else if (row == 31 && column == 1 && eventNum == 45)
                    {
                        return true;
                    }
                    // 鏡ワープ失敗
                    else if ((row == 18 && column == 0 && eventNum == 46) ||
                             (row == 21 && column == 2 && eventNum == 46) ||
                             (row == 21 && column == 4 && eventNum == 46) ||
                             (row == 33 && column == 6 && eventNum == 46) ||
                             (row == 31 && column == 6 && eventNum == 46) ||
                             (row == 26 && column == 6 && eventNum == 46) ||
                             (row == 26 && column == 10 && eventNum == 46) ||
                             (row == 0 && column == 11 && eventNum == 46) ||
                             (row == 0 && column == 13 && eventNum == 46) ||
                             (row == 20 && column == 18 && eventNum == 46) ||
                             (row == 33 && column == 17 && eventNum == 46) ||
                             (row == 39 && column == 17 && eventNum == 46) ||
                             (row == 18 && column == 19 && eventNum == 46) ||
                             (row == 20 && column == 19 && eventNum == 46))
                    {
                        return true;
                    }
                    // 真実解のイベント１
                    else if (row == 35 && column == 1 && eventNum == 47)
                    {
                        return true;
                    }
                    // 鏡ワープ２−１
                    else if (row == 14 && column == 22 && eventNum == 48) // 38
                    {
                        return true;
                    }
                    else if (row == 14 && column == 24 && eventNum == 49) // 39
                    {
                        return true;
                    }
                    else if (row == 14 && column == 26 && eventNum == 50) // 40
                    {
                        return true;
                    }
                    else if (row == 34 && column == 41 && eventNum == 51) // 41
                    {
                        return true;
                    }
                    else if (row == 34 && column == 43 && eventNum == 52) // 42
                    {
                        return true;
                    }
                    else if (row == 34 && column == 45 && eventNum == 53) // 43
                    {
                        return true;
                    }
                    else if (row == 9 && column == 45 && eventNum == 54) // 44
                    {
                        return true;
                    }
                    else if (row == 9 && column == 47 && eventNum == 55) // 45
                    {
                        return true;
                    }
                    else if (row == 32 && column == 21 && eventNum == 56) // 46
                    {
                        return true;
                    }
                    else if (row == 11 && column == 33 && eventNum == 57) // 47
                    {
                        return true;
                    }
                    else if (row == 13 && column == 32 && eventNum == 58) // 48
                    {
                        return true;
                    }
                    else if (row == 18 && column == 41 && eventNum == 59) // 49
                    {
                        return true;
                    }
                    else if (row == 22 && column == 25 && eventNum == 60) // 50
                    {
                        return true;
                    }
                    else if (row == 28 && column == 23 && eventNum == 61) // 51
                    {
                        return true;
                    }
                    else if (row == 9 && column == 53 && eventNum == 62) // 52
                    {
                        return true;
                    }
                    else if (row == 16 && column == 53 && eventNum == 63) // 53
                    {
                        return true;
                    }
                    else if (row == 34 && column == 31 && eventNum == 64) // 54
                    {
                        return true;
                    }
                    else if (row == 34 && column == 33 && eventNum == 65) // 55
                    {
                        return true;
                    }
                    else if (row == 1 && column == 27 && eventNum == 66) // 56
                    {
                        return true;
                    }
                    else if (row == 1 && column == 53 && eventNum == 67) // 57
                    {
                        return true;
                    }
                    else if (row == 3 && column == 34 && eventNum == 68) // 58
                    {
                        return true;
                    }
                    else if (row == 28 && column == 27 && eventNum == 69) // 59
                    {
                        return true;
                    }
                    else if (row == 28 && column == 29 && eventNum == 70) // 60
                    {
                        return true;
                    }
                    else if (row == 28 && column == 31 && eventNum == 71) // 61
                    {
                        return true;
                    }
                    else if (row == 13 && column == 39 && eventNum == 72) // 62
                    {
                        return true;
                    }
                    else if (row == 13 && column == 40 && eventNum == 73) // 63
                    {
                        return true;
                    }
                    else if (row == 30 && column == 38 && eventNum == 74) // 64
                    {
                        return true;
                    }
                    else if (row == 33 && column == 21 && eventNum == 75) // 65
                    {
                        return true;
                    }
                    else if (row == 23 && column == 39 && eventNum == 76) // 66
                    {
                        return true;
                    }
                    else if (row == 28 && column == 50 && eventNum == 77) // 67
                    {
                        return true;
                    }
                    else if (row == 28 && column == 52 && eventNum == 78) // 68
                    {
                        return true;
                    }
                    else if (row == 28 && column == 54 && eventNum == 79) // 69
                    {
                        return true;
                    }
                    else if (row == 11 && column == 21 && eventNum == 80) // 70
                    {
                        return true;
                    }
                    else if (row == 18 && column == 23 && eventNum == 81) // 71
                    {
                        return true;
                    }
                    else if (row == 27 && column == 40 && eventNum == 82) // 72
                    {
                        return true;
                    }
                    else if (row == 3 && column == 25 && eventNum == 83) // 73
                    {
                        return true;
                    }
                    else if (row == 3 && column == 27 && eventNum == 84) // 74
                    {
                        return true;
                    }
                    else if (row == 3 && column == 29 && eventNum == 85) // 75
                    {
                        return true;
                    }
                    else if (row == 11 && column == 39 && eventNum == 86) // 76
                    {
                        return true;
                    }
                    else if (row == 11 && column == 41 && eventNum == 87) // 77
                    {
                        return true;
                    }
                    else if (row == 16 && column == 34 && eventNum == 88) // 78
                    {
                        return true;
                    }
                    else if (row == 16 && column == 30 && eventNum == 89) // 79
                    {
                        return true;
                    }
                    else if (row == 18 && column == 48 && eventNum == 90) // 80
                    {
                        return true;
                    }
                    else if (row == 19 && column == 36 && eventNum == 91) // 81
                    {
                        return true;
                    }
                    else if (row == 21 && column == 35 && eventNum == 92) // 82
                    {
                        return true;
                    }
                    else if (row == 23 && column == 34 && eventNum == 93) // 83
                    {
                        return true;
                    }
                    else if (row == 25 && column == 33 && eventNum == 94) // 84
                    {
                        return true;
                    }
                    else if (row == 29 && column == 36 && eventNum == 95) // 85
                    {
                        return true;
                    }
                    else if (row == 9 && column == 50 && eventNum == 96) // 86
                    {
                        return true;
                    }
                    else if (row == 14 && column == 45 && eventNum == 97) // 87
                    {
                        return true;
                    }
                    else if (row == 30 && column == 27 && eventNum == 98) // 88
                    {
                        return true;
                    }
                    else if (row == 30 && column == 29 && eventNum == 99) // 89
                    {
                        return true;
                    }
                    else if (row == 30 && column == 31 && eventNum == 100) // 90
                    {
                        return true;
                    }
                    else if (row == 15 && column == 29 && eventNum == 101) // 91
                    {
                        return true;
                    }
                    else if (row == 11 && column == 34 && eventNum == 102) // 92
                    {
                        return true;
                    }
                    else if (row == 11 && column == 24 && eventNum == 103) // 93
                    {
                        return true;
                    }
                    else if (row == 3 && column == 24 && eventNum == 104) // 94
                    {
                        return true;
                    }
                    else if (row == 10 && column == 42 && eventNum == 105) // 95
                    {
                        return true;
                    }
                    else if (row == 34 && column == 49 && eventNum == 106) // 96
                    {
                        return true;
                    }
                    else if (row == 36 && column == 49 && eventNum == 107) // 97
                    {
                        return true;
                    }
                    else if (row == 38 && column == 49 && eventNum == 108) // 98
                    {
                        return true;
                    }
                    else if (row == 31 && column == 37 && eventNum == 109) // 99
                    {
                        return true;
                    }
                    else if (row == 33 && column == 37 && eventNum == 110) // 100
                    {
                        return true;
                    }
                    else if (row == 35 && column == 37 && eventNum == 111) // 101
                    {
                        return true;
                    }
                    else if (row == 12 && column == 41 && eventNum == 112) // 102
                    {
                        return true;
                    }
                    else if (row == 17 && column == 21 && eventNum == 113) // 103
                    {
                        return true;
                    }
                    else if (row == 23 && column == 24 && eventNum == 114) // 104
                    {
                        return true;
                    }
                    else if (row == 23 && column == 26 && eventNum == 115) // 105
                    {
                        return true;
                    }
                    else if (row == 23 && column == 28 && eventNum == 116) // 106
                    {
                        return true;
                    }
                    else if (row == 26 && column == 34 && eventNum == 117) // 107
                    {
                        return true;
                    }
                    else if (row == 28 && column == 34 && eventNum == 118) // 108
                    {
                        return true;
                    }
                    else if (row == 30 && column == 34 && eventNum == 119) // 109
                    {
                        return true;
                    }
                    else if (row == 32 && column == 34 && eventNum == 120) // 110
                    {
                        return true;
                    }
                    else if (row == 9 && column == 35 && eventNum == 121) // 111
                    {
                        return true;
                    }
                    else if (row == 20 && column == 50 && eventNum == 122) // 112
                    {
                        return true;
                    }
                    else if (row == 20 && column == 52 && eventNum == 123) // 113
                    {
                        return true;
                    }
                    else if (row == 24 && column == 31 && eventNum == 124) // 114
                    {
                        return true;
                    }
                    else if (row == 39 && column == 47 && eventNum == 125) // 115
                    {
                        return true;
                    }
                    else if (row == 10 && column == 54 && eventNum == 126) // 116
                    {
                        return true;
                    }
                    else if (row == 8 && column == 41 && eventNum == 127) // 117
                    {
                        return true;
                    }
                    else if (row == 5 && column == 46 && eventNum == 128) // 118
                    {
                        return true;
                    }
                    else if (row == 15 && column == 42 && eventNum == 129) // 119
                    {
                        return true;
                    }
                    else if (row == 22 && column == 48 && eventNum == 130) // 120
                    {
                        return true;
                    }
                    else if (row == 22 && column == 50 && eventNum == 131) // 121
                    {
                        return true;
                    }
                    else if (row == 22 && column == 52 && eventNum == 132) // 122
                    {
                        return true;
                    }
                    else if (row == 25 && column == 34 && eventNum == 133) // 123
                    {
                        return true;
                    }
                    else if (row == 17 && column == 26 && eventNum == 134) // 124
                    {
                        return true;
                    }
                    else if (row == 18 && column == 27 && eventNum == 135) // 125
                    {
                        return true;
                    }
                    else if (row == 19 && column == 28 && eventNum == 136) // 126
                    {
                        return true;
                    }
                    else if (row == 20 && column == 29 && eventNum == 137) // 127
                    {
                        return true;
                    }
                    else if (row == 17 && column == 42 && eventNum == 138) // 128
                    {
                        return true;
                    }
                    else if (row == 8 && column == 22 && eventNum == 139) // 129
                    {
                        return true;
                    }
                    else if (row == 6 && column == 22 && eventNum == 140) // 130
                    {
                        return true;
                    }
                    else if (row == 5 && column == 21 && eventNum == 141) // 131
                    {
                        return true;
                    }
                    else if (row == 24 && column == 44 && eventNum == 142) // 132
                    {
                        return true;
                    }
                    else if (row == 26 && column == 44 && eventNum == 143) // 133
                    {
                        return true;
                    }
                    else if (row == 24 && column == 53 && eventNum == 144) // 134
                    {
                        return true;
                    }
                    else if (row == 6 && column == 51 && eventNum == 145) // 135
                    {
                        return true;
                    }
                    else if (row == 6 && column == 52 && eventNum == 146) // 136
                    {
                        return true;
                    }
                    else if (row == 31 && column == 24 && eventNum == 147) // 137
                    {
                        return true;
                    }
                    else if (row == 26 && column == 22 && eventNum == 148) // 138
                    {
                        return true;
                    }
                    else if (row == 25 && column == 22 && eventNum == 149) // 139
                    {
                        return true;
                    }
                    else if (row == 21 && column == 24 && eventNum == 150) // 140
                    {
                        return true;
                    }
                    // ５Ｘ-１ルート
                    else if (row == 31 && column == 47 && eventNum == 151) // X1B
                    {
                        return true;
                    }
                    else if (row == 2 && column == 39 && eventNum == 152) // X1C
                    {
                        return true;
                    }
                    else if (row == 38 && column == 54 && eventNum == 153) // X1D
                    {
                        return true;
                    }
                    // ５Ｘ-２ルート
                    else if (row == 20 && column == 46 && eventNum == 154) // X2B
                    {
                        return true;
                    }
                    else if (row == 3 && column == 21 && eventNum == 155) // X2C
                    {
                        return true;
                    }
                    else if (row == 38 && column == 40 && eventNum == 156) // X2D
                    {
                        return true;
                    }
                    // ５Ｘ-３ルート
                    else if (row == 29 && column == 21 && eventNum == 157) // X3B
                    {
                        return true;
                    }
                    else if (row == 13 && column == 44 && eventNum == 158) // X3C
                    {
                        return true;
                    }
                    else if (row == 0 && column == 39 && eventNum == 159) // X2D
                    {
                        return true;
                    }
                    // ５Ｘ-４ルート
                    else if (row == 39 && column == 42 && eventNum == 160) // X4B
                    {
                        return true;
                    }
                    else if (row == 33 && column == 51 && eventNum == 161) // X4C
                    {
                        return true;
                    }
                    else if (row == 13 && column == 52 && eventNum == 162) // X4D
                    {
                        return true;
                    }
                    // ５Ｘ-５ルート
                    else if (row == 27 && column == 21 && eventNum == 163) // X5B
                    {
                        return true;
                    }
                    else if (row == 29 && column == 43 && eventNum == 164) // X5C
                    {
                        return true;
                    }
                    else if (row == 37 && column == 45 && eventNum == 165) // X5D
                    {
                        return true;
                    }
                    // ５Ｘ-Ｚ１
                    else if (row == 21 && column == 42 && eventNum == 166) // Z1
                    {
                        return true;
                    }
                    else if (row == 28 && column == 47 && eventNum == 167) // Z1
                    {
                        return true;
                    }
                    else if (row == 21 && column == 53 && eventNum == 168) // Z1
                    {
                        return true;
                    }
                    else if (row == 14 && column == 47 && eventNum == 169) // Z1
                    {
                        return true;
                    }
                    // ５Ｘ-Ｚ２
                    else if (row == 7 && column == 25 && eventNum == 170) // Z2
                    {
                        return true;
                    }
                    else if (row == 7 && column == 27 && eventNum == 171) // Z2
                    {
                        return true;
                    }
                    else if (row == 7 && column == 29 && eventNum == 172) // Z2
                    {
                        return true;
                    }
                    else if (row == 8 && column == 30 && eventNum == 173) // Z2
                    {
                        return true;
                    }
                    else if (row == 10 && column == 30 && eventNum == 174) // Z2
                    {
                        return true;
                    }
                    else if (row == 12 && column == 30 && eventNum == 175) // Z2
                    {
                        return true;
                    }
                    // ５Ｘ-Ｚ３
                    else if (row == 35 && column == 21 && eventNum == 176) // Z3
                    {
                        return true;
                    }
                    else if (row == 35 && column == 23 && eventNum == 177) // Z3
                    {
                        return true;
                    }
                    else if (row == 35 && column == 25 && eventNum == 178) // Z3
                    {
                        return true;
                    }
                    else if (row == 35 && column == 27 && eventNum == 179) // Z3
                    {
                        return true;
                    }
                    else if (row == 37 && column == 22 && eventNum == 180) // Z3
                    {
                        return true;
                    }
                    else if (row == 37 && column == 24 && eventNum == 181) // Z3
                    {
                        return true;
                    }
                    else if (row == 37 && column == 26 && eventNum == 182) // Z3
                    {
                        return true;
                    }
                    // ５Ｘ-Ｚ４
                    else if (row == 5 && column == 50 && eventNum == 183) // Z4
                    {
                        return true;
                    }
                    else if (row == 4 && column == 44 && eventNum == 184) // Z4
                    {
                        return true;
                    }
                    else if (row == 9 && column == 51 && eventNum == 185) // Z4
                    {
                        return true;
                    }
                    else if (row == 6 && column == 46 && eventNum == 186) // Z4
                    {
                        return true;
                    }
                    else if (row == 26 && column == 40 && eventNum == 187) // Z4
                    {
                        return true;
                    }
                    else if (row == 35 && column == 42 && eventNum == 188) // Z4
                    {
                        return true;
                    }
                    else if (row == 27 && column == 53 && eventNum == 189) // Z4
                    {
                        return true;
                    }
                    else if (row == 37 && column == 53 && eventNum == 190) // Z4
                    {
                        return true;
                    }
                    // Final、無限、１
                    else if (row == 35 && column == 55 && eventNum == 191) // 11
                    {
                        return true;
                    }
                    else if (row == 35 && column == 56 && eventNum == 192) // 12
                    {
                        return true;
                    }
                    else if (row == 35 && column == 57 && eventNum == 193) // 13
                    {
                        return true;
                    }
                    else if (row == 35 && column == 58 && eventNum == 194) // 14
                    {
                        return true;
                    }
                    else if (row == 35 && column == 59 && eventNum == 195) // 15
                    {
                        return true;
                    }
                    // Final、無限、２
                    else if (row == 32 && column == 55 && eventNum == 196) // 21
                    {
                        return true;
                    }
                    else if (row == 32 && column == 56 && eventNum == 197) // 22
                    {
                        return true;
                    }
                    else if (row == 32 && column == 57 && eventNum == 198) // 23
                    {
                        return true;
                    }
                    else if (row == 32 && column == 58 && eventNum == 199) // 24
                    {
                        return true;
                    }
                    else if (row == 32 && column == 59 && eventNum == 200) // 25
                    {
                        return true;
                    }
                    // Final、無限、３
                    else if (row == 29 && column == 55 && eventNum == 201) // 31
                    {
                        return true;
                    }
                    else if (row == 29 && column == 56 && eventNum == 202) // 32
                    {
                        return true;
                    }
                    else if (row == 29 && column == 57 && eventNum == 203) // 33
                    {
                        return true;
                    }
                    else if (row == 29 && column == 58 && eventNum == 204) // 34
                    {
                        return true;
                    }
                    else if (row == 29 && column == 59 && eventNum == 205) // 35
                    {
                        return true;
                    }
                    // Final、無限、４
                    else if (row == 26 && column == 55 && eventNum == 206) // 41
                    {
                        return true;
                    }
                    else if (row == 26 && column == 56 && eventNum == 207) // 42
                    {
                        return true;
                    }
                    else if (row == 26 && column == 57 && eventNum == 208) // 43
                    {
                        return true;
                    }
                    else if (row == 26 && column == 58 && eventNum == 209) // 44
                    {
                        return true;
                    }
                    else if (row == 26 && column == 59 && eventNum == 210) // 45
                    {
                        return true;
                    }
                    // Final、無限、５
                    else if (row == 23 && column == 55 && eventNum == 211) // 51
                    {
                        return true;
                    }
                    else if (row == 23 && column == 56 && eventNum == 212) // 52
                    {
                        return true;
                    }
                    else if (row == 23 && column == 57 && eventNum == 213) // 53
                    {
                        return true;
                    }
                    else if (row == 23 && column == 58 && eventNum == 214) // 54
                    {
                        return true;
                    }
                    else if (row == 23 && column == 59 && eventNum == 215) // 55
                    {
                        return true;
                    }
                    // Final、無限、６
                    else if (row == 20 && column == 55 && eventNum == 216) // 61
                    {
                        return true;
                    }
                    else if (row == 20 && column == 56 && eventNum == 217) // 62
                    {
                        return true;
                    }
                    else if (row == 20 && column == 57 && eventNum == 218) // 63
                    {
                        return true;
                    }
                    else if (row == 20 && column == 58 && eventNum == 219) // 64
                    {
                        return true;
                    }
                    else if (row == 20 && column == 59 && eventNum == 220) // 65
                    {
                        return true;
                    }
                    // Final、無限、７
                    else if (row == 17 && column == 55 && eventNum == 221) // 71
                    {
                        return true;
                    }
                    else if (row == 17 && column == 56 && eventNum == 222) // 72
                    {
                        return true;
                    }
                    else if (row == 17 && column == 57 && eventNum == 223) // 73
                    {
                        return true;
                    }
                    else if (row == 17 && column == 58 && eventNum == 224) // 74
                    {
                        return true;
                    }
                    else if (row == 17 && column == 59 && eventNum == 225) // 75
                    {
                        return true;
                    }
                    // Final、無限、８
                    else if (row == 14 && column == 55 && eventNum == 226) // 81
                    {
                        return true;
                    }
                    else if (row == 14 && column == 56 && eventNum == 227) // 82
                    {
                        return true;
                    }
                    else if (row == 14 && column == 57 && eventNum == 228) // 83
                    {
                        return true;
                    }
                    else if (row == 14 && column == 58 && eventNum == 229) // 84
                    {
                        return true;
                    }
                    else if (row == 14 && column == 59 && eventNum == 230) // 85
                    {
                        return true;
                    }
                    // Final、無限、９
                    else if (row == 11 && column == 55 && eventNum == 231) // 91
                    {
                        return true;
                    }
                    else if (row == 11 && column == 56 && eventNum == 232) // 92
                    {
                        return true;
                    }
                    else if (row == 11 && column == 57 && eventNum == 233) // 93
                    {
                        return true;
                    }
                    else if (row == 11 && column == 58 && eventNum == 234) // 94
                    {
                        return true;
                    }
                    else if (row == 11 && column == 59 && eventNum == 235) // 95
                    {
                        return true;
                    }
                    // Final、無限、１０
                    else if (row == 8 && column == 55 && eventNum == 236) // 101
                    {
                        return true;
                    }
                    else if (row == 8 && column == 56 && eventNum == 237) // 102
                    {
                        return true;
                    }
                    else if (row == 8 && column == 57 && eventNum == 238) // 103
                    {
                        return true;
                    }
                    else if (row == 8 && column == 58 && eventNum == 239) // 104
                    {
                        return true;
                    }
                    else if (row == 8 && column == 59 && eventNum == 240) // 105
                    {
                        return true;
                    }
                    // Final、無限、１１
                    else if (row == 5 && column == 55 && eventNum == 241) // 111
                    {
                        return true;
                    }
                    else if (row == 5 && column == 56 && eventNum == 242) // 112
                    {
                        return true;
                    }
                    else if (row == 5 && column == 57 && eventNum == 243) // 113
                    {
                        return true;
                    }
                    else if (row == 5 && column == 58 && eventNum == 244) // 114
                    {
                        return true;
                    }
                    else if (row == 5 && column == 59 && eventNum == 245) // 115
                    {
                        return true;
                    }
                    // Final、無限、１２
                    else if (row == 2 && column == 55 && eventNum == 246) // 121
                    {
                        return true;
                    }
                    else if (row == 2 && column == 56 && eventNum == 247) // 122
                    {
                        return true;
                    }
                    else if (row == 2 && column == 57 && eventNum == 248) // 123
                    {
                        return true;
                    }
                    else if (row == 2 && column == 58 && eventNum == 249) // 124
                    {
                        return true;
                    }
                    else if (row == 2 && column == 59 && eventNum == 250) // 125
                    {
                        return true;
                    }
                    // ボス
                    else if (row == 39 && column == 55 && eventNum == 251)
                    {
                        return true;
                    }
                    // 鏡エリア２の看板
                    else if (row == 16 && column == 24 && eventNum == 252)
                    {
                        return true;
                    }
                    // 宝箱
                    else if (row == 0 && column == 3 && !we.TruthTreasure301 && eventNum == 253)
                    {
                        return true;
                    }
                    else if (row == 39 && column == 3 && !we.TruthTreasure302 && eventNum == 254)
                    {
                        return true;
                    }
                    else if (row == 4 && column == 19 && !we.TruthTreasure303 && eventNum == 255)
                    {
                        return true;
                    }
                    else if (row == 24 && column == 19 && !we.TruthTreasure304 && eventNum == 256)
                    {
                        return true;
                    }
                    else if (row == 9 && column == 1 && !we.TruthTreasure305 && eventNum == 257)
                    {
                        return true;
                    }
                    else if (row == 24 && column == 2 && !we.TruthTreasure306 && eventNum == 258)
                    {
                        return true;
                    }
                    else if (row == 33 && column == 47 && !we.TruthTreasure307 && eventNum == 259)
                    {
                        return true;
                    }
                    else if (row == 7 && column == 20 && !we.TruthTreasure308 && eventNum == 260)
                    {
                        return true;
                    }
                    else if (row == 17 && column == 45 && !we.TruthTreasure309 && eventNum == 261)
                    {
                        return true;
                    }
                    else if (row == 38 && column == 31 && !we.TruthTreasure310 && eventNum == 262)
                    {
                        return true;
                    }
                    else if (row == 27 && column == 48 && !we.TruthTreasure311 && eventNum == 263)
                    {
                        return true;
                    }
                    else if (row == 34 && column == 40 && !we.TruthTreasure312 && eventNum == 264)
                    {
                        return true;
                    }
                    // area2 看板X1
                    else if (row == 21 && column == 47 && eventNum == 265)
                    {
                        return true;
                    }
                    // area2 看板X2
                    else if (row == 10 && column == 27 && eventNum == 266)
                    {
                        return true;
                    }
                    // area2 看板X3
                    else if (row == 37 && column == 20 && eventNum == 267)
                    {
                        return true;
                    }
                    // area2 看板X4
                    else if (row == 16 && column == 43 && eventNum == 268)
                    {
                        return true;
                    }
                    // area2 看板X5
                    else if (row == 19 && column == 37 && eventNum == 269)
                    {
                        return true;
                    }
                    // area2 看板X6
                    else if (row == 7 && column == 37 && eventNum == 270)
                    {
                        return true;
                    }
                    // area2 看板前の扉
                    else if (row == 39 && column == 54 && eventNum == 271)
                    {
                        return true;
                    }
                    // ４階への階段
                    else if (row == 39 && column == 59 && eventNum == 272)
                    {
                        return true;
                    }
                    // ボス横の看板
                    else if (row == 39 && column == 56 && eventNum == 273)
                    {
                        return true;
                    }
                    // 鏡エリア２−５帰り道
                    else if (row == 1 && column == 21 && eventNum == 274)
                    {
                        return true;
                    }
                    // 鏡エリア２−原点解帰り道
                    else if (row == 12 && column == 37 && eventNum == 275)
                    {
                        return true;
                    }
                    // 鏡エリア２−原点解、聖者
                    else if (row == 5 && column == 36 && eventNum == 276)
                    {
                        return true;
                    }
                    // 鏡エリア２−原点解、愚者
                    else if (row == 5 && column == 38 && eventNum == 277)
                    {
                        return true;
                    }
                    // ４階への階段（２）
                    else if (row == 0 && column == 59 && eventNum == 278)
                    {
                        return true;
                    }
                    // 無限回廊突破後の看板
                    else if (row == 1 && column == 55 && eventNum == 279)
                    {
                        return true;
                    }
                    // 真実解のイベント２
                    else if (row == 25 && column == 1 && eventNum == 280)
                    {
                        return true;
                    }
                    else if (row == 22 && column == 1 && eventNum == 281)
                    {
                        return true;
                    }
                    // 真実解のイベント３
                    else if (row == 14 && column == 1 && eventNum == 282)
                    {
                        return true;
                    }
                    else if (row == 17 && column == 1 && eventNum == 283)
                    {
                        return true;
                    }
                    // 真実解のイベント４
                    else if (row == 4 && column == 1 && eventNum == 284)
                    {
                        return true;
                    }
                    else if (row == 8 && column == 1 && eventNum == 285)
                    {
                        return true;
                    }
                    break;
                #endregion
                #region "４階"
                case 4:
                    #region "エリア１"
                    // 上り階段
                    if (row == 18 && column == 52 && eventNum == 0)
                    {
                        return true;
                    }
                    // 扉１
                    if (row == 18 && column == 49 && eventNum == 1)
                    {
                        return true;
                    }
                    // 看板１
                    if (row == 19 && column == 46 && eventNum == 2)
                    {
                        return true;
                    }
                    // 看板１-１
                    if (row == 12 && column == 44 && eventNum == 3)
                    {
                        return true;
                    }
                    // 宝箱（エリア１-１）
                    if (row == 15 && column == 43 && !we.TruthTreasure401 && eventNum == 4)
                    {
                        return true;
                    }
                    // 宝箱（エリア１-２）
                    if (row == 12 && column == 42 && !we.TruthTreasure402 && eventNum == 5)
                    {
                        return true;
                    }
                    // 宝箱（エリア１-３）
                    if (row == 0 && column == 44 && !we.TruthTreasure403 && eventNum == 6)
                    {
                        return true;
                    }
                    // 宝箱（エリア１-４）
                    if (row == 7 && column == 29 && !we.TruthTreasure404 && eventNum == 7)
                    {
                        return true;
                    }
                    // 宝箱（エリア１-５）
                    if (row == 12 && column == 29 && !we.TruthTreasure405 && eventNum == 8)
                    {
                        return true;
                    }
                    // 宝箱（エリア１-６）
                    if (row == 3 && column == 46 && !we.TruthTreasure406 && eventNum == 9)
                    {
                        return true;
                    }
                    // 宝箱（エリア１-７）
                    if (row == 10 && column == 59 && !we.TruthTreasure407 && eventNum == 10)
                    {
                        return true;
                    }
                    // 宝箱（エリア１-８）
                    if (row == 9 && column == 52 && !we.TruthTreasure408 && eventNum == 11)
                    {
                        return true;
                    }
                    // 鍵（エリア１-１）
                    if (row == 16 && column == 46 && eventNum == 12)
                    {
                        return true;
                    }
                    // 鍵（エリア１-２）
                    if (row == 11 && column == 47 && eventNum == 13)
                    {
                        return true;
                    }
                    // 鍵（エリア１-３）
                    if (row == 8 && column == 37 && eventNum == 14)
                    {
                        return true;
                    }
                    // 鍵（エリア１-４）
                    if (row == 4 && column == 32 && eventNum == 15)
                    {
                        return true;
                    }
                    // 鍵（エリア１-５）
                    if (row == 10 && column == 30 && eventNum == 16)
                    {
                        return true;
                    }
                    // 鍵（エリア１-６）
                    if (row == 13 && column == 40 && eventNum == 17)
                    {
                        return true;
                    }
                    // 鍵（エリア１-７）
                    if (row == 1 && column == 51 && eventNum == 18)
                    {
                        return true;
                    }
                    // 鍵（エリア１-８）
                    if (row == 4 && column == 56 && eventNum == 19)
                    {
                        return true;
                    }
                    // 鍵（エリア１-９）
                    if (row == 16 && column == 54 && eventNum == 20)
                    {
                        return true;
                    }
                    // 扉（エリア１-１）
                    if (row == 11 && column == 43 && eventNum == 21)
                    {
                        return true;
                    }
                    // 扉（エリア１-２）
                    if (row == 6 && column == 45 && eventNum == 22)
                    {
                        return true;
                    }
                    // 扉（エリア１-３）
                    if (row == 4 && column == 36 && eventNum == 23)
                    {
                        return true;
                    }
                    // 扉（エリア１-４）
                    if (row == 3 && column == 31 && eventNum == 24)
                    {
                        return true;
                    }
                    // 扉（エリア１-５）
                    if (row == 12 && column == 34 && eventNum == 25)
                    {
                        return true;
                    }
                    // 扉（エリア１-６）
                    if (row == 6 && column == 47 && eventNum == 26)
                    {
                        return true;
                    }
                    // 扉（エリア１-７）
                    if (row == 3 && column == 53 && eventNum == 27)
                    {
                        return true;
                    }
                    // 扉（エリア１-８）
                    if (row == 1 && column == 56 && eventNum == 28)
                    {
                        return true;
                    }
                    // 扉（エリア１-９）
                    if (row == 11 && column == 51 && eventNum == 29)
                    {
                        return true;
                    }
                    // 真実の回想１-１
                    if (row == 5 && column == 42 && eventNum == 30)
                    {
                        return true;
                    }
                    // 真実の回想１-２
                    if (row == 16 && column == 37 && eventNum == 31)
                    {
                        return true;
                    }
                    // 真実の回想１-３
                    if (row == 13 && column == 57 && eventNum == 32)
                    {
                        return true;
                    }
                    // 真実の回想２-１
                    if (row == 4 && column == 5 && eventNum == 33)
                    {
                        return true;
                    }
                    // 真実の回想２-２
                    if (row == 5 && column == 14 && eventNum == 34)
                    {
                        return true;
                    }
                    // 真実の回想２-３
                    if (row == 15 && column == 14 && eventNum == 35)
                    {
                        return true;
                    }
                    // 真実の回想３-１
                    if (row == 28 && column == 3 && eventNum == 36)
                    {
                        return true;
                    }
                    // 真実の回想３-２
                    if (row == 37 && column == 25 && eventNum == 37)
                    {
                        return true;
                    }
                    // 真実の回想４-１
                    if (row == 36 && column == 54 && eventNum == 38)
                    {
                        return true;
                    }
                    // 真実の回想４-２
                    if (row == 25 && column == 50 && eventNum == 39)
                    {
                        return true;
                    }
                    // 看板１-２
                    if (row == 7 && column == 46 && eventNum == 40)
                    {
                        return true;
                    }
                    // 看板１-３
                    if (row == 3 && column == 37 && eventNum == 41)
                    {
                        return true;
                    }
                    // 看板１-４
                    if (row == 2 && column == 30 && eventNum == 42)
                    {
                        return true;
                    }
                    // 看板１-５
                    if (row == 11 && column == 35 && eventNum == 43)
                    {
                        return true;
                    }
                    // 看板１-６
                    if (row == 4 && column == 52 && eventNum == 44)
                    {
                        return true;
                    }
                    // 看板１-７
                    if (row == 2 && column == 57 && eventNum == 45)
                    {
                        return true;
                    }
                    // 看板１-８
                    if (row == 10 && column == 50 && eventNum == 46)
                    {
                        return true;
                    }
                    // エリア１ボス前
                    if (row == 14 && column == 47 && eventNum == 47)
                    {
                        return true;
                    }
                    // エリア１ボス
                    if (row == 16 && column == 47 && eventNum == 48)
                    {
                        return true;
                    }
                    // エリア１から２への通路
                    if (row == 19 && column == 44 && eventNum == 49)
                    {
                        return true;
                    }
                    // エリア２スタート
                    if (row == 19 && column == 23 && eventNum == 50)
                    {
                        return true;
                    }
                    #endregion
                    #region "エリア２"
                    // エリア２看板
                    if (row == 19 && column == 20 && eventNum == 51)
                    {
                        return true;
                    }
                    // エリア２-１
                    if (row == 8 && column == 11 && eventNum == 52)
                    {
                        return true;
                    }
                    // 鍵Ｘ-１
                    if (row == 6 && column == 1 && eventNum == 53)
                    {
                        return true;
                    }
                    // 鍵Ｘ-２
                    if (row == 10 && column == 10 && eventNum == 54)
                    {
                        return true;
                    }
                    // 鍵Ｘ-３
                    if (row == 15 && column == 1 && eventNum == 55)
                    {
                        return true;
                    }
                    // 鍵Ｘ-４
                    if (row == 18 && column == 8 && eventNum == 56)
                    {
                        return true;
                    }
                    // 鍵Ｘ-５
                    if (row == 23 && column == 18 && eventNum == 57)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-１
                    if (row == 7 && column == 0 && !we.TruthTreasure409 && eventNum == 58)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-２
                    if (row == 9 && column == 3 && !we.TruthTreasure410 && eventNum == 59)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-３
                    if (row == 11 && column == 1 && !we.TruthTreasure411 && eventNum == 60)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-４
                    if (row == 12 && column == 5 && !we.TruthTreasure412 && eventNum == 61)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-５
                    if (row == 13 && column == 8 && !we.TruthTreasure413 && eventNum == 62)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-６
                    if (row == 15 && column == 7 && !we.TruthTreasure414 && eventNum == 63)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-７
                    if (row == 20 && column == 4 && !we.TruthTreasure415 && eventNum == 64)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-８
                    if (row == 21 && column == 13 && !we.TruthTreasure416 && eventNum == 65)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-９
                    if (row == 24 && column == 2 && !we.TruthTreasure417 && eventNum == 66)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-１０
                    if (row == 23 && column == 3 && !we.TruthTreasure418 && eventNum == 67)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-１１
                    if (row == 23 && column == 7 && !we.TruthTreasure419 && eventNum == 68)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-１２
                    if (row == 24 && column == 10 && !we.TruthTreasure420 && eventNum == 69)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-１３
                    if (row == 23 && column == 13 && !we.TruthTreasure421 && eventNum == 70)
                    {
                        return true;
                    }
                    // 宝箱Ｘ-１４
                    if (row == 20 && column == 14 && !we.TruthTreasure422 && eventNum == 71)
                    {
                        return true;
                    }
                    // 扉Ｘ１
                    if (row == 8 && column == 6 && eventNum == 72)
                    {
                        return true;
                    }
                    // 扉Ｘ２
                    if (row == 7 && column == 10 && eventNum == 73)
                    {
                        return true;
                    }
                    // 鍵Ｙ-１
                    if (row == 0 && column == 0 && eventNum == 74)
                    {
                        return true;
                    }
                    // 鍵Ｙ-２
                    if (row == 7 && column == 13 && eventNum == 75)
                    {
                        return true;
                    }
                    // 鍵Ｙ-３
                    if (row == 0 && column == 18 && eventNum == 76)
                    {
                        return true;
                    }
                    // 鍵Ｙ-４
                    if (row == 7 && column == 28 && eventNum == 77)
                    {
                        return true;
                    }
                    // 鍵Ｙ-５
                    if (row == 13 && column == 22 && eventNum == 78)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-１
                    if (row == 6 && column == 8 && !we.TruthTreasure423 && eventNum == 79)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-２
                    if (row == 3 && column == 10 && !we.TruthTreasure424 && eventNum == 80)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-３
                    if (row == 0 && column == 5 && !we.TruthTreasure425 && eventNum == 81)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-４
                    if (row == 0 && column == 12 && !we.TruthTreasure426 && eventNum == 82)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-５
                    if (row == 0 && column == 27 && !we.TruthTreasure427 && eventNum == 83)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-６
                    if (row == 2 && column == 27 && !we.TruthTreasure428 && eventNum == 84)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-７
                    if (row == 11 && column == 27 && !we.TruthTreasure429 && eventNum == 85)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-８
                    if (row == 13 && column == 25 && !we.TruthTreasure430 && eventNum == 86)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-９
                    if (row == 4 && column == 18 && !we.TruthTreasure431 && eventNum == 87)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-１０
                    if (row == 2 && column == 23 && !we.TruthTreasure432 && eventNum == 88)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-１１
                    if (row == 6 && column == 24 && !we.TruthTreasure433 && eventNum == 89)
                    {
                        return true;
                    }
                    // 宝箱Ｙ-１２
                    if (row == 6 && column == 18 && !we.TruthTreasure434 && eventNum == 90)
                    {
                        return true;
                    }
                    // 扉Ｙ１
                    if (row == 2 && column == 11 && eventNum == 91)
                    {
                        return true;
                    }
                    // 扉Ｙ２
                    if (row == 7 && column == 12 && eventNum == 92)
                    {
                        return true;
                    }
                    // 鍵Ｚ-１
                    if (row == 9 && column == 13 && eventNum == 93)
                    {
                        return true;
                    }
                    // 鍵Ｚ-２
                    if (row == 9 && column == 18 && eventNum == 94)
                    {
                        return true;
                    }
                    // 鍵Ｚ-３
                    if (row == 14 && column == 22 && eventNum == 95)
                    {
                        return true;
                    }
                    // 鍵Ｚ-４
                    if (row == 17 && column == 23 && eventNum == 96)
                    {
                        return true;
                    }
                    // 鍵Ｚ-５
                    if (row == 15 && column == 27 && eventNum == 97)
                    {
                        return true;
                    }
                    // 宝箱Ｚ-１
                    if (row == 9 && column == 15 && !we.TruthTreasure435 && eventNum == 98)
                    {
                        return true;
                    }
                    // 宝箱Ｚ-２
                    if (row == 10 && column == 17 && !we.TruthTreasure436 && eventNum == 99)
                    {
                        return true;
                    }
                    // 宝箱Ｚ-３
                    if (row == 10 && column == 21 && !we.TruthTreasure437 && eventNum == 100)
                    {
                        return true;
                    }
                    // 宝箱Ｚ-４
                    if (row == 14 && column == 17 && !we.TruthTreasure438 && eventNum == 101)
                    {
                        return true;
                    }
                    // 宝箱Ｚ-５
                    if (row == 12 && column == 20 && !we.TruthTreasure439 && eventNum == 102)
                    {
                        return true;
                    }
                    // 宝箱Ｚ-６
                    if (row == 14 && column == 20 && !we.TruthTreasure440 && eventNum == 103)
                    {
                        return true;
                    }
                    // 宝箱Ｚ-７
                    if (row == 15 && column == 23 && !we.TruthTreasure441 && eventNum == 104)
                    {
                        return true;
                    }
                    // 宝箱Ｚ-８
                    if (row == 17 && column == 27 && !we.TruthTreasure442 && eventNum == 105)
                    {
                        return true;
                    }
                    // 扉Ｚ１
                    if (row == 13 && column == 16 && eventNum == 106)
                    {
                        return true;
                    }
                    // エリア２ボス前
                    if (row == 16 && column == 17 && eventNum == 107)
                    {
                        return true;
                    }
                    // エリア２ボス
                    if (row == 16 && column == 20 && eventNum == 108)
                    {
                        return true;
                    }
                    // エリア２から３への通路
                    if (row == 21 && column == 20 && eventNum == 109)
                    {
                        return true;
                    }
                    #endregion                   
                    #region "エリア３"
                    // エリア３スタート
                    if (row == 32 && column == 20 && eventNum == 110)
                    {
                        return true;
                    }
                    // エリア３看板
                    if (row == 34 && column == 20 && eventNum == 111)
                    {
                        return true;
                    }
                    // エリア３-１（始まり）
                    if (row == 27 && column == 16 && eventNum == 112)
                    {
                        return true;
                    }
                    // エリア３-１（看板１）
                    if (row == 26 && column == 16 && eventNum == 113)
                    {
                        return true;
                    }
                    // エリア３-１（事実１）
                    if (row == 27 && column == 9 && eventNum == 114)
                    {
                        return true;
                    }
                    // エリア３-１（事実２）
                    if (row == 28 && column == 11 && eventNum == 115)
                    {
                        return true;
                    }
                    // エリア３-１（事実３）
                    if (row == 29 && column == 14 && eventNum == 116)
                    {
                        return true;
                    }
                    // エリア３-１（事実４）
                    if (row == 31 && column == 6 && eventNum == 117)
                    {
                        return true;
                    }
                    // エリア３-１（事実５）
                    if (row == 31 && column == 8 && eventNum == 118)
                    {
                        return true;
                    }
                    // エリア３-１（事実６）
                    if (row == 33 && column == 8 && eventNum == 119)
                    {
                        return true;
                    }
                    // エリア３-１（事実７）
                    if (row == 33 && column == 10 && eventNum == 120)
                    {
                        return true;
                    }
                    // エリア３-１（事実８）
                    if (row == 33 && column == 11 && eventNum == 121)
                    {
                        return true;
                    }
                    // エリア３-１（事実９）
                    if (row == 34 && column == 14 && eventNum == 122)
                    {
                        return true;
                    }
                    // エリア３-１（事実１０）
                    if (row == 34 && column == 17 && eventNum == 123)
                    {
                        return true;
                    }
                    // エリア３-２への扉
                    if (row == 25 && column == 7 && eventNum == 124)
                    {
                        return true;
                    }
                    // エリア３-２開始
                    if (row == 32 && column == 2 && eventNum == 125)
                    {
                        return true;
                    }
                    // エリア３-２看板
                    if (row == 31 && column == 2 && eventNum == 126)
                    {
                        return true;
                    }
                    // エリア３-２（真実１）
                    if (row == 33 && column == 0 && eventNum == 127)
                    {
                        return true;
                    }
                    // エリア３-２（真実２）
                    if (row == 33 && column == 5 && eventNum == 128)
                    {
                        return true;
                    }
                    // エリア３-２（真実３）
                    if (row == 39 && column == 1 && eventNum == 129)
                    {
                        return true;
                    }
                    // エリア３-２（真実４）
                    if (row == 37 && column == 4 && eventNum == 130)
                    {
                        return true;
                    }
                    // エリア３-２（真実５）
                    if (row == 32 && column == 6 && eventNum == 131)
                    {
                        return true;
                    }
                    // エリア３-２（真実６）
                    if (row == 39 && column == 7 && eventNum == 132)
                    {
                        return true;
                    }
                    // エリア３-２（真実７）
                    if (row == 34 && column == 8 && eventNum == 133)
                    {
                        return true;
                    }
                    // エリア３-２（真実８）
                    if (row == 35 && column == 11 && eventNum == 134)
                    {
                        return true;
                    }
                    // エリア３-２（真実９）
                    if (row == 36 && column == 14 && eventNum == 135)
                    {
                        return true;
                    }
                    // エリア３-２（真実１０）
                    if (row == 37 && column == 18 && eventNum == 136)
                    {
                        return true;
                    }                  
                    // 宝箱エリア３-１
                    if (row == 29 && column == 7 && !we.TruthTreasure443 && eventNum == 137)
                    {
                        return true;
                    }
                    // 宝箱エリア３-２
                    if (row == 35 && column == 10 && !we.TruthTreasure444 && eventNum == 138)
                    {
                        return true;
                    }
                    // 宝箱エリア３-３
                    if (row == 33 && column == 14 && !we.TruthTreasure445 && eventNum == 139)
                    {
                        return true;
                    }
                    // 宝箱エリア３-４
                    if (row == 36 && column == 3 && !we.TruthTreasure446 && eventNum == 140)
                    {
                        return true;
                    }
                    // 宝箱エリア３-５
                    if (row == 34 && column == 5 && !we.TruthTreasure447 && eventNum == 141)
                    {
                        return true;
                    }
                    // 宝箱エリア３-６
                    if (row == 39 && column == 10 && !we.TruthTreasure448 && eventNum == 142)
                    {
                        return true;
                    }
                    // 宝箱エリア３-７
                    if (row == 36 && column == 12 && !we.TruthTreasure449 && eventNum == 143)
                    {
                        return true;
                    }
                    // 宝箱エリア３-８
                    if (row == 39 && column == 14 && !we.TruthTreasure450 && eventNum == 144)
                    {
                        return true;
                    }
                    // エリア３−２終了の扉
                    if (row == 39 && column == 22 && eventNum == 145)
                    {
                        return true;
                    }
                    // エリア３ボス前
                    if (row == 38 && column == 23 && eventNum == 146)
                    {
                        return true;
                    }
                    // エリア３ボス
                    if (row == 35 && column == 23 && eventNum == 147)
                    {
                        return true;
                    }
                    // エリア３から４への通路
                    if (row == 34 && column == 22 && eventNum == 148)
                    {
                        return true;
                    }

                    #endregion
                    #region "エリア４"
                    // エリア４スタート
                    if (row == 34 && column == 44 && eventNum == 149)
                    {
                        return true;
                    }
                    // エリア４看板
                    if (row == 34 && column == 46 && eventNum == 150)
                    {
                        return true;
                    }
                    // エリア４-１看板広間
                    if (row == 37 && column == 43 && eventNum == 151)
                    {
                        return true;
                    }
                    // エリア４-１看板
                    if (row == 37 && column == 42 && eventNum == 152)
                    {
                        return true;
                    }
                    // 鍵４-１
                    if (row == 35 && column == 40 && eventNum == 153)
                    {
                        return true;
                    }
                    // 鍵４-２
                    if (row == 36 && column == 33 && eventNum == 154)
                    {
                        return true;
                    }
                    // 鍵４-３
                    if (row == 37 && column == 31 && eventNum == 155)
                    {
                        return true;
                    }
                    // 鍵４-４
                    if (row == 37 && column == 39 && eventNum == 156)
                    {
                        return true;
                    }
                    // 鍵４-５
                    if (row == 37 && column == 35 && eventNum == 157)
                    {
                        return true;
                    }
                    // 宝箱４-１
                    if (row == 36 && column == 37 && !we.TruthTreasure451 && eventNum == 158)
                    {
                        return true;
                    }
                    // 宝箱４-２
                    if (row == 36 && column == 29 && !we.TruthTreasure452 && eventNum == 159)
                    {
                        return true;
                    }
                    // 宝箱４-３
                    if (row == 39 && column == 39 && !we.TruthTreasure453 && eventNum == 160)
                    {
                        return true;
                    }
                    // 宝箱４-４
                    if (row == 39 && column == 41 && !we.TruthTreasure454 && eventNum == 161)
                    {
                        return true;
                    }
                    // エリア４-１扉
                    if (row == 39 && column == 47 && eventNum == 162)
                    {
                        return true;
                    }
                    // エリア４-１終了
                    if (row == 35 && column == 51 && eventNum == 163)
                    {
                        return true;
                    }
                    // エリア４-２看板
                    if (row == 34 && column == 52 && eventNum == 164)
                    {
                        return true;
                    }
                    // 鍵４-２-１
                    if (row == 31 && column == 50 && eventNum == 165)
                    {
                        return true;
                    }
                    // 鍵４-２-２
                    if (row == 33 && column == 53 && eventNum == 166)
                    {
                        return true;
                    }
                    // 鍵４-２-３
                    if (row == 34 && column == 58 && eventNum == 167)
                    {
                        return true;
                    }
                    // 鍵４-２-４
                    if (row == 30 && column == 56 && eventNum == 168)
                    {
                        return true;
                    }
                    // 鍵４-２-５
                    if (row == 31 && column == 58 && eventNum == 169)
                    {
                        return true;
                    }
                    // 鍵４-２-６
                    if (row == 27 && column == 55 && eventNum == 170)
                    {
                        return true;
                    }
                    // 鍵４-２-７
                    if (row == 24 && column == 55 && eventNum == 171)
                    {
                        return true;
                    }
                    // 鍵４-２-８
                    if (row == 24 && column == 58 && eventNum == 172)
                    {
                        return true;
                    }
                    // 宝箱４-２-１
                    if (row == 32 && column == 55 && !we.TruthTreasure455 && eventNum == 173)
                    {
                        return true;
                    }
                    // 宝箱４-２-２
                    if (row == 31 && column == 56 && !we.TruthTreasure456 && eventNum == 174)
                    {
                        return true;
                    }
                    // 宝箱４-２-３
                    if (row == 28 && column == 59 && !we.TruthTreasure457 && eventNum == 175)
                    {
                        return true;
                    }
                    // 宝箱４-２-４
                    if (row == 22 && column == 59 && !we.TruthTreasure458 && eventNum == 176)
                    {
                        return true;
                    }
                    // 宝箱４-２-５
                    if (row == 21 && column == 50 && !we.TruthTreasure459 && eventNum == 177)
                    {
                        return true;
                    }
                    // エリア４-２扉
                    if (row == 22 && column == 49 && eventNum == 178)
                    {
                        return true;
                    }
                    // エリア４-２終了
                    if (row == 31 && column == 48 && eventNum == 179)
                    {
                        return true;
                    }
                    // エリア４から１への通路
                    if (row == 32 && column == 46 && eventNum == 180)
                    {
                        return true;
                    }
                    // そして、現実世界へ
                    if (row == 31 && column == 46 && eventNum == 181)
                    {
                        return true;
                    }
                    // 究極の二択
                    if (row == 22 && column == 46 && eventNum == 182)
                    {
                        return true;
                    }
                    // 最下層への階段前の扉
                    if (row == 20 && column == 48 && eventNum == 183)
                    {
                        return true;
                    }
                    // 下り階段
                    if (row == 20 && column == 52 && eventNum == 184)
                    {
                        return true;
                    }
                    // 現実世界、移動ブロック
                    if (row == 23 && column == 46 && eventNum == 185)
                    {
                        return true;
                    }
                    if (row == 17 && column == 45 && eventNum == 186)
                    {
                        return true;
                    }
                    if (row == 17 && column == 47 && eventNum == 187)
                    {
                        return true;
                    }
                    if (row == 18 && column == 48 && eventNum == 188)
                    {
                        return true;
                    }
                    #endregion
                    break;
                #endregion
                #region "５階"
                case 5:
                    // 上り階段
                    if (row == 2 && column == 57 && eventNum == 0)
                    {
                        return true;
                    }
                    // 細い通路の始まり
                    if (row == 5 && column == 57 && eventNum == 1)
                    {
                        return true;
                    }
                    // 大通路の始まり
                    if (row == 29 && column == 57 && eventNum == 2)
                    {
                        return true;
                    }
                    // 大通路の中間１
                    if (((row == 30 && column == 44) ||
                        (row == 31 && column == 44) ||
                        (row == 32 && column == 44) ||
                        (row == 33 && column == 44) ||
                        (row == 34 && column == 44))
                        && eventNum == 3)
                    {
                        return true;
                    }
                    // 大通路の中間２
                    if (((row == 31 && column == 32) ||
                         (row == 32 && column == 32) ||
                         (row == 33 && column == 32))
                        && eventNum == 4)
                    {
                        return true;
                    }
                    // 大通路の終わり
                    if (row == 32 && column == 20 && eventNum == 5)
                    {
                        return true;
                    }
                    // ボス
                    if (row == 32 && column == 9 && eventNum == 6)
                    {
                        return true;
                    }
                    // ホログラムによるパーティ編成
                    if (row == 32 && column == 11 && eventNum == 7)
                    {
                        return true;
                    }
                    // 真実世界への入り口
                    if (row == 27 && column == 2 && eventNum == 8)
                    {
                        return true;
                    }
                    // 真実世界、開始前
                    if (row == 4 && column == 2 && eventNum == 9)
                    {
                        return true;
                    }
                    // 青水晶到達、真実世界へ
                    if (row == 2 && column == 2 && eventNum == 10)
                    {
                        return true;
                    }

                    break;
                #endregion
            }
            return false;
        }

        private void EncountEnemy()
        {
            if (GroundOne.WE2.SeekerEvent507)
            {
                // 最下層、パーティメンバー選定後、雑魚敵で稼ぐのを許可するため、スルー

                // 最下層、支配竜を倒した後は雑魚敵を出さない。
                if (GroundOne.WE2.SeekerEvent508)
                {
                    if (GroundOne.WE2.SeekerEvent1014)
                    {
                        // 最下層、真実世界の最後は雑魚的で稼ぐので、スルー
                    }
                    else
                    {
                        return;
                    }
                }
            }
            else if (we.dungeonEvent4_SlayBoss3 && !GroundOne.WE2.SeekerEvent925)
            {
                return;
            }

            Random rd = new Random(DateTime.Now.Millisecond * Environment.TickCount);
            int resultValue = rd.Next(1, 101);
            if (we.CompleteSlayBoss5) resultValue = 100;

            if (labelVigilance.Text == Database.TEXT_VIGILANCE_MODE)
            {
                stepCounter += 1;
            }
            else
            {
                stepCounter += 3;
            }
            int encountBorder = 0;
            if (labelVigilance.Text == Database.TEXT_VIGILANCE_MODE)
            {
                if (we.DungeonArea == 4)
                {
                    encountBorder = Database.ENCOUNT_ENEMY + (int)(stepCounter / 20);
                }
                else
                {
                    encountBorder = Database.ENCOUNT_ENEMY + (int)(stepCounter / 10);
                }
            }
            else
            {
                encountBorder = Database.ENCOUNT_ENEMY + (int)(stepCounter / 5);
            }

            if (resultValue <= encountBorder)
            {
                stepCounter = 0;
                string enemyName = "";
                string enemyName2 = "";
                string enemyName3 = "";
                string[] monsterName = null;
                string[] monsterName2 = null;
                int enemyLevel = tileColor[GetTileNumber(this.Player.Location)];
                // １階は左上：エリア１、左下：エリア２、右上：エリア３、右下：エリア４
                if (we.DungeonArea == 1)
                {
                    if (enemyLevel == 1)
                    {
                        monsterName = new string[4];
                        monsterName[0] = Database.ENEMY_KOUKAKU_WURM;
                        monsterName[1] = Database.ENEMY_HIYOWA_BEATLE;
                        monsterName[2] = Database.ENEMY_GREEN_CHILD;
                        if (mc.Level <= 2)
                        {
                            monsterName[3] = monsterName[2];
                        }
                        else
                        {
                            monsterName[3] = Database.ENEMY_MANDRAGORA;
                        }
                        monsterName2 = new string[3];
                        monsterName2[0] = monsterName[0];
                        monsterName2[1] = monsterName[1];
                        monsterName2[2] = monsterName[2];
                    }
                    else if (enemyLevel == 2)
                    {
                        monsterName = new string[5];
                        monsterName[0] = Database.ENEMY_SUN_FLOWER;
                        monsterName[1] = Database.ENEMY_RED_HOPPER;
                        monsterName[2] = Database.ENEMY_EARTH_SPIDER;
                        if (mc.Level <= 2)
                        {
                            monsterName[3] = monsterName[0];
                        }
                        else
                        {
                            monsterName[3] = Database.ENEMY_ALRAUNE;
                        }
                        if (mc.Level <= 4)
                        {
                            monsterName[4] = monsterName[1];
                        }
                        else
                        {
                            monsterName[4] = Database.ENEMY_POISON_MARY;
                        }
                        monsterName2 = new string[3];
                        monsterName2[0] = monsterName[0];
                        monsterName2[1] = monsterName[1];
                        monsterName2[2] = monsterName[2];
                    }
                    else if (enemyLevel == 3)
                    {
                        monsterName = new string[5];
                        monsterName[0] = Database.ENEMY_SPEEDY_TAKA;
                        monsterName[1] = Database.ENEMY_ZASSYOKU_RABBIT;
                        if (mc.Level <= 2)
                        {
                            monsterName[2] = monsterName[0];
                        }
                        else
                        {
                            monsterName[2] = Database.ENEMY_WONDER_SEED;
                        }
                        if (mc.Level <= 2)
                        {
                            monsterName[3] = monsterName[1];
                        }
                        else
                        {
                            monsterName[3] = Database.ENEMY_FLANSIS_KNIGHT;
                        }
                        if (mc.Level <= 4)
                        {
                            monsterName[4] = monsterName[0];
                        }
                        else
                        {
                            monsterName[4] = Database.ENEMY_SHOTGUN_HYUI;
                        }
                        monsterName2 = new string[2];
                        monsterName2[0] = monsterName[0];
                        monsterName2[1] = monsterName[1];
                    }
                    else if (enemyLevel == 4)
                    {
                        monsterName = new string[4];
                        monsterName[0] = Database.ENEMY_BRILLIANT_BUTTERFLY;
                        monsterName[1] = Database.ENEMY_WAR_WOLF;
                        if (mc.Level <= 2)
                        {
                            monsterName[2] = monsterName[0];
                        }
                        else
                        {
                            monsterName[2] = Database.ENEMY_BLOOD_MOSS;
                        }
                        if (mc.Level <= 4)
                        {
                            monsterName[3] = monsterName[0];
                        }
                        else
                        {
                            monsterName[3] = Database.ENEMY_MOSSGREEN_DADDY;
                        }
                        monsterName2 = new string[2];
                        monsterName2[0] = monsterName[0];
                        monsterName2[1] = monsterName[1];
                    }
                    enemyName = monsterName[AP.Math.RandomInteger(monsterName.Length)];
                    enemyName2 = monsterName2[AP.Math.RandomInteger(monsterName2.Length)];
                    enemyName3 = monsterName2[AP.Math.RandomInteger(monsterName2.Length)];
                }
                else if (we.DungeonArea == 2)
                {
                    if (enemyLevel == 1)
                    {
                        monsterName = new string[4];
                        monsterName[0] = Database.ENEMY_DAGGER_FISH;
                        monsterName[1] = Database.ENEMY_SIPPU_FLYING_FISH;
                        monsterName[2] = Database.ENEMY_ORB_SHELLFISH;
                        monsterName[3] = Database.ENEMY_SPLASH_KURIONE;

                        monsterName2 = new string[3];
                        monsterName2[0] = monsterName[0];
                        monsterName2[1] = monsterName[1];
                        monsterName2[2] = monsterName[2];
                    }
                    else if (enemyLevel == 2)
                    {
                        monsterName = new string[5];
                        monsterName[0] = Database.ENEMY_ROLLING_MAGURO;
                        monsterName[1] = Database.ENEMY_RANBOU_SEA_ARTINE;
                        monsterName[2] = Database.ENEMY_BLUE_SEA_WASI;
                        monsterName[3] = Database.ENEMY_GANGAME;
                        monsterName[4] = Database.ENEMY_BIGMOUSE_JOE;

                        monsterName2 = new string[3];
                        monsterName2[0] = monsterName[0];
                        monsterName2[1] = monsterName[1];
                        monsterName2[2] = monsterName[2];
                    }
                    else if (enemyLevel == 3)
                    {
                        monsterName = new string[5];
                        monsterName[0] = Database.ENEMY_MOGURU_MANTA;
                        monsterName[1] = Database.ENEMY_FLOATING_GOLD_FISH;
                        monsterName[2] = Database.ENEMY_GOEI_HERMIT_CLUB;
                        monsterName[3] = Database.ENEMY_VANISHING_CORAL;
                        monsterName[4] = Database.ENEMY_CASSY_CANCER;

                        monsterName2 = new string[2];
                        monsterName2[0] = monsterName[0];
                        monsterName2[1] = monsterName[1];
                    }
                    else if (enemyLevel == 4)
                    {
                        monsterName = new string[4];
                        monsterName[0] = Database.ENEMY_BLACK_STARFISH;
                        monsterName[1] = Database.ENEMY_RAINBOW_ANEMONE;
                        monsterName[2] = Database.ENEMY_EDGED_HIGH_SHARK;
                        monsterName[3] = Database.ENEMY_EIGHT_EIGHT;

                        monsterName2 = new string[2];
                        monsterName2[0] = monsterName[0];
                        monsterName2[1] = monsterName[1];
                    }
                    enemyName = monsterName[AP.Math.RandomInteger(monsterName.Length)];
                    enemyName2 = monsterName2[AP.Math.RandomInteger(monsterName2.Length)];
                    enemyName3 = monsterName2[AP.Math.RandomInteger(monsterName2.Length)];
                }
                else if (we.DungeonArea == 3)
                {
                    Random rand = new Random();
                    if (enemyLevel == 1)
                    {
                        int result = rand.Next(0, 4);
                        if (result == 0)
                        {
                            enemyName = Database.ENEMY_WAR_MAMMOTH;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 1)
                        {
                            enemyName = Database.ENEMY_SNOW_CAT;
                            enemyName2 = Database.ENEMY_SNOW_CAT;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 2)
                        {
                            enemyName = Database.ENEMY_TOSSIN_ORC;
                            enemyName2 = Database.ENEMY_TOSSIN_ORC;
                            enemyName3 = String.Empty;
                        }
                        else
                        {
                            enemyName = Database.ENEMY_WINGED_COLD_FAIRY;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                    }
                    else if (enemyLevel == 2)
                    {
                        int result = rand.Next(0, 5);
                        if (result == 0)
                        {
                            enemyName = Database.ENEMY_BRUTAL_OGRE;
                            enemyName2 = Database.ENEMY_WINGED_COLD_FAIRY;
                            enemyName3 = Database.ENEMY_BRUTAL_OGRE;
                        }
                        else if (result == 1)
                        {
                            enemyName = Database.ENEMY_HYDRO_LIZARD;
                            enemyName2 = Database.ENEMY_HYDRO_LIZARD;
                            enemyName3 = Database.ENEMY_WINGED_COLD_FAIRY;
                        }
                        else if (result == 2)
                        {
                            enemyName = Database.ENEMY_PENGUIN_STAR;
                            enemyName2 = Database.ENEMY_PENGUIN_STAR;
                            enemyName3 = Database.ENEMY_PENGUIN_STAR;
                        }
                        else if (result == 3)
                        {
                            enemyName = Database.ENEMY_FEROCIOUS_RAGE_BEAR;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 4)
                        {
                            enemyName = Database.ENEMY_SWORD_TOOTH_TIGER;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                    }
                    else if (enemyLevel == 3)
                    {
                        int result = rand.Next(0, 5);
                        if (result == 0)
                        {
                            enemyName = Database.ENEMY_WINTER_ORB;
                            enemyName2 = Database.ENEMY_WINGED_COLD_FAIRY;
                            enemyName3 = Database.ENEMY_WINGED_COLD_FAIRY;
                        }
                        else if (result == 1)
                        {
                            enemyName = Database.ENEMY_PATHFINDING_LIGHTNING_AZARASI;
                            enemyName2 = Database.ENEMY_PATHFINDING_LIGHTNING_AZARASI;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 2)
                        {
                            enemyName = Database.ENEMY_INTELLIGENCE_ARGONIAN;
                            enemyName2 = Database.ENEMY_PENGUIN_STAR;
                            enemyName3 = Database.ENEMY_PENGUIN_STAR;
                        }
                        else if (result == 3)
                        {
                            enemyName = Database.ENEMY_MAGIC_HYOU_RIFLE;
                            enemyName2 = Database.ENEMY_WINTER_ORB;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 4)
                        {
                            enemyName = Database.ENEMY_PURE_BLIZZARD_CRYSTAL;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                    }
                    else if (enemyLevel == 4)
                    {
                        int result = rand.Next(0, 4);
                        if (result == 0)
                        {
                            enemyName = Database.ENEMY_PURPLE_EYE_WARE_WOLF;
                            enemyName2 = Database.ENEMY_FROST_HEART;
                            enemyName3 = Database.ENEMY_PURPLE_EYE_WARE_WOLF;
                        }
                        else if (result == 1)
                        {
                            enemyName = Database.ENEMY_FROST_HEART;
                            enemyName2 = Database.ENEMY_PURPLE_EYE_WARE_WOLF;
                            enemyName3 = Database.ENEMY_FROST_HEART;
                        }
                        else if (result == 2)
                        {
                            enemyName = Database.ENEMY_WIND_BREAKER;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 3)
                        {
                            enemyName = Database.ENEMY_TUNDRA_LONGHORN_DEER;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                    }
                }
                else if (we.DungeonArea == 4)
                {
                    Random rand = new Random();
                    if (enemyLevel == 1)
                    {
                        int result = rand.Next(0, 4);
                        if (result == 0)
                        {
                            enemyName = Database.ENEMY_GENAN_HUNTER;
                            enemyName2 = Database.ENEMY_BEAST_MASTER;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 1)
                        {
                            enemyName = Database.ENEMY_BEAST_MASTER;
                            enemyName2 = Database.ENEMY_ELDER_ASSASSIN;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 2)
                        {
                            enemyName = Database.ENEMY_ELDER_ASSASSIN;
                            enemyName2 = Database.ENEMY_GENAN_HUNTER;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 3)
                        {
                            enemyName = Database.ENEMY_FALLEN_SEEKER;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                    }
                    else if (enemyLevel == 2)
                    {
                        int result = rand.Next(0, 5);
                        if (result == 0)
                        {
                            enemyName = Database.ENEMY_MASTER_LOAD;
                            enemyName2 = Database.ENEMY_DARK_MESSENGER;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 1)
                        {
                            enemyName = Database.ENEMY_EXECUTIONER;
                            enemyName2 = Database.ENEMY_DARK_MESSENGER;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 2)
                        {
                            enemyName = Database.ENEMY_EXECUTIONER;
                            enemyName2 = Database.ENEMY_MASTER_LOAD;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 3)
                        {
                            enemyName = Database.ENEMY_BLACKFIRE_MASTER_BLADE;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 4)
                        {
                            enemyName = Database.ENEMY_SIN_THE_DARKELF;
                            enemyName2 = Database.ENEMY_EXECUTIONER;
                            enemyName3 = Database.ENEMY_DARK_MESSENGER;
                        }
                    }
                    else if (enemyLevel == 3)
                    {
                        int result = rand.Next(0, 5);
                        if (result == 0)
                        {
                            enemyName = Database.ENEMY_SUN_STRIDER;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 1)
                        {
                            enemyName = Database.ENEMY_ARC_DEMON;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 2)
                        {
                            enemyName = Database.ENEMY_BALANCE_IDLE;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 3)
                        {
                            enemyName = Database.ENEMY_GO_FLAME_SLASHER;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 4)
                        {
                            enemyName = Database.ENEMY_DEVIL_CHILDREN;
                            enemyName2 = Database.ENEMY_SUN_STRIDER;
                            enemyName3 = Database.ENEMY_ARC_DEMON;
                        }
                    }
                    else if (enemyLevel == 4)
                    {
                        // エリア４でストーリー上はもう、モンスターを出せない。
                        return;
                    }
                    else if (enemyLevel == 6) // 現実世界の中央部
                    {
                        int result = rand.Next(0, 4);
                        if (result == 0)
                        {
                            enemyName = Database.ENEMY_PHOENIX;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 1)
                        {
                            enemyName = Database.ENEMY_NINE_TAIL;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 2)
                        {
                            enemyName = Database.ENEMY_JUDGEMENT;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 3)
                        {
                            enemyName = Database.ENEMY_EMERALD_DRAGON;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                    }
                }
                else if (we.DungeonArea == 5)
                {
                    Random rand = new Random();
                    //if (enemyLevel == 6) // 現実世界の中央部
                    {
                        int result = rand.Next(0, 4);
                        if (result == 0)
                        {
                            enemyName = Database.ENEMY_PHOENIX;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 1)
                        {
                            enemyName = Database.ENEMY_NINE_TAIL;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 2)
                        {
                            enemyName = Database.ENEMY_JUDGEMENT;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                        else if (result == 3)
                        {
                            enemyName = Database.ENEMY_EMERALD_DRAGON;
                            enemyName2 = String.Empty;
                            enemyName3 = String.Empty;
                        }
                    }
                }
                
                this.Update();

                UpdateMainMessage("アイン：敵と遭遇だ！", true);
                EncountBattle(enemyName, enemyName2, enemyName3, false, false, false, false);
                UpdateMainMessage("", true);
            }
        }

        private string DecisionEnemyName(string[] monsterName)
        {
            string enemyName = "";
            enemyName = monsterName[AP.Math.RandomInteger(monsterName.Length)];
            return enemyName;
        }

        private bool EncountBattle(string enemyName, string enemyName2, string enemyName3, bool duel, bool hiSpeed, bool final, bool lifecount)
        {
            CancelKeyDownMovement();

            GroundOne.StopDungeonMusic();

            bool endFlag = false;
            while (!endFlag)
            {
                System.Threading.Thread.Sleep(500);
                using (TruthBattleEnemy be = new TruthBattleEnemy())
                {
                    MainCharacter tempMC = new MainCharacter();
                    MainCharacter tempSC = new MainCharacter();
                    MainCharacter tempTC = new MainCharacter();
                    WorldEnvironment tempWE = new WorldEnvironment();
                    TruthWorldEnvironment tempWE2 = new TruthWorldEnvironment();

                    tempMC.MainArmor = this.MC.MainArmor;
                    tempMC.SubWeapon = this.MC.SubWeapon;
                    tempMC.MainWeapon = this.MC.MainWeapon;
                    tempMC.Accessory = this.MC.Accessory;
                    tempMC.Accessory2 = this.MC.Accessory2;

                    tempSC.MainArmor = this.SC.MainArmor;
                    tempSC.SubWeapon = this.SC.SubWeapon;
                    tempSC.MainWeapon = this.SC.MainWeapon;
                    tempSC.Accessory = this.SC.Accessory;
                    tempSC.Accessory2 = this.SC.Accessory2;

                    tempTC.MainArmor = this.TC.MainArmor;
                    tempTC.SubWeapon = this.TC.SubWeapon;
                    tempTC.MainWeapon = this.TC.MainWeapon;
                    tempTC.Accessory = this.TC.Accessory;
                    tempTC.Accessory2 = this.TC.Accessory2;

                    ItemBackPack[] tempBackPack = new ItemBackPack[this.MC.GetBackPackInfo().Length];
                    tempBackPack = mc.GetBackPackInfo();
                    be.MC = tempMC;
                    for (int ii = 0; ii < Database.MAX_BACKPACK_SIZE; ii++)
                    {
                        if (tempBackPack[ii] != null)
                        {
                            int stack = tempBackPack[ii].StackValue;
                            for (int jj = 0; jj < stack; jj++)
                            {
                                be.MC.AddBackPack(tempBackPack[ii]);
                            }
                        }
                    }

                    if (we.AvailableSecondCharacter)
                    {
                        ItemBackPack[] tempBackPack2 = new ItemBackPack[this.SC.GetBackPackInfo().Length];
                        tempBackPack2 = sc.GetBackPackInfo();
                        be.SC = tempSC;
                        for (int ii = 0; ii < Database.MAX_BACKPACK_SIZE; ii++)
                        {
                            if (tempBackPack2[ii] != null)
                            {
                                int stack = tempBackPack2[ii].StackValue;
                                for (int jj = 0; jj < stack; jj++)
                                {
                                    be.SC.AddBackPack(tempBackPack2[ii]);
                                }
                            }
                        }
                    }
                    else
                    {
                        be.SC = null;
                    }

                    if (we.AvailableThirdCharacter)
                    {
                        ItemBackPack[] tempBackPack3 = new ItemBackPack[this.TC.GetBackPackInfo().Length];
                        tempBackPack3 = tc.GetBackPackInfo();
                        be.TC = tempTC;
                        for (int ii = 0; ii < Database.MAX_BACKPACK_SIZE; ii++)
                        {
                            if (tempBackPack3[ii] != null)
                            {
                                int stack = tempBackPack3[ii].StackValue;
                                for (int jj = 0; jj < stack; jj++)
                                {
                                    be.TC.AddBackPack(tempBackPack3[ii]);
                                }
                            }
                        }
                    }
                    else
                    {
                        be.TC = null;
                    }

                    Type type = tempMC.GetType();
                    foreach (PropertyInfo pi in type.GetProperties())
                    {
                        // [警告]：catch構文はSetプロパティがない場合だが、それ以外のケースも見えなくなってしまうので要分析方法検討。
                        if (pi.PropertyType == typeof(System.Int32))
                        {
                            try
                            {
                                pi.SetValue(tempMC, (System.Int32)(type.GetProperty(pi.Name).GetValue(this.MC, null)), null);
                                pi.SetValue(tempSC, (System.Int32)(type.GetProperty(pi.Name).GetValue(this.SC, null)), null);
                                pi.SetValue(tempTC, (System.Int32)(type.GetProperty(pi.Name).GetValue(this.TC, null)), null);
                            }
                            catch { }
                        }
                        else if (pi.PropertyType == typeof(System.String))
                        {
                            try
                            {
                                pi.SetValue(tempMC, (string)(type.GetProperty(pi.Name).GetValue(this.MC, null)), null);
                                pi.SetValue(tempSC, (string)(type.GetProperty(pi.Name).GetValue(this.SC, null)), null);
                                pi.SetValue(tempTC, (string)(type.GetProperty(pi.Name).GetValue(this.TC, null)), null);
                            }
                            catch { }
                        }
                        else if (pi.PropertyType == typeof(System.Boolean))
                        {
                            try
                            {
                                pi.SetValue(tempMC, (System.Boolean)(type.GetProperty(pi.Name).GetValue(this.MC, null)), null);
                                pi.SetValue(tempSC, (System.Boolean)(type.GetProperty(pi.Name).GetValue(this.SC, null)), null);
                                pi.SetValue(tempTC, (System.Boolean)(type.GetProperty(pi.Name).GetValue(this.TC, null)), null);
                            }
                            catch { }
                        }
                        // s 後編追加
                        else if (pi.PropertyType == typeof(PlayerStance))
                        {
                            try
                            {
                                pi.SetValue(tempMC, (PlayerStance)(Enum.Parse(typeof(PlayerStance), type.GetProperty(pi.Name).GetValue(this.MC, null).ToString())), null);
                                pi.SetValue(tempSC, (PlayerStance)(Enum.Parse(typeof(PlayerStance), type.GetProperty(pi.Name).GetValue(this.SC, null).ToString())), null);
                                pi.SetValue(tempTC, (PlayerStance)(Enum.Parse(typeof(PlayerStance), type.GetProperty(pi.Name).GetValue(this.TC, null).ToString())), null);
                            }
                            catch { }
                        }
                        // e 後編追加
                        // s 後編追加
                        else if (pi.PropertyType == typeof(AdditionalSpellType))
                        {
                            try
                            {
                                pi.SetValue(tempMC, (AdditionalSpellType)(Enum.Parse(typeof(AdditionalSpellType), type.GetProperty(pi.Name).GetValue(this.MC, null).ToString())), null);
                                pi.SetValue(tempSC, (AdditionalSpellType)(Enum.Parse(typeof(AdditionalSpellType), type.GetProperty(pi.Name).GetValue(this.SC, null).ToString())), null);
                                pi.SetValue(tempTC, (AdditionalSpellType)(Enum.Parse(typeof(AdditionalSpellType), type.GetProperty(pi.Name).GetValue(this.TC, null).ToString())), null);
                            }
                            catch { }
                        }
                        else if (pi.PropertyType == typeof(AdditionalSkillType))
                        {
                            try
                            {
                                pi.SetValue(tempMC, (AdditionalSkillType)(Enum.Parse(typeof(AdditionalSkillType), type.GetProperty(pi.Name).GetValue(this.MC, null).ToString())), null);
                                pi.SetValue(tempSC, (AdditionalSkillType)(Enum.Parse(typeof(AdditionalSkillType), type.GetProperty(pi.Name).GetValue(this.SC, null).ToString())), null);
                                pi.SetValue(tempTC, (AdditionalSkillType)(Enum.Parse(typeof(AdditionalSkillType), type.GetProperty(pi.Name).GetValue(this.TC, null).ToString())), null);
                            }
                            catch { }
                        }
                        // e 後編追加
                    }


                    Type type2 = tempWE.GetType();
                    foreach (PropertyInfo pi in type2.GetProperties())
                    {
                        // [警告]：catch構文はSetプロパティがない場合だが、それ以外のケースも見えなくなってしまうので要分析方法検討。
                        if (pi.PropertyType == typeof(System.Int32))
                        {
                            try
                            {
                                pi.SetValue(tempWE, (System.Int32)(type2.GetProperty(pi.Name).GetValue(this.WE, null)), null);
                            }
                            catch { }
                        }
                        else if (pi.PropertyType == typeof(System.String))
                        {
                            try
                            {
                                pi.SetValue(tempWE, (string)(type2.GetProperty(pi.Name).GetValue(this.WE, null)), null);
                            }
                            catch { }
                        }
                        else if (pi.PropertyType == typeof(System.Boolean))
                        {
                            try
                            {
                                pi.SetValue(tempWE, (System.Boolean)(type2.GetProperty(pi.Name).GetValue(this.WE, null)), null);
                            }
                            catch { }
                        }
                    }

                    Type type3 = tempWE2.GetType();
                    foreach (PropertyInfo pi in type3.GetProperties())
                    {
                        // [警告]：catch構文はSetプロパティがない場合だが、それ以外のケースも見えなくなってしまうので要分析方法検討。
                        if (pi.PropertyType == typeof(System.Int32))
                        {
                            try
                            {
                                pi.SetValue(tempWE2, (System.Int32)(type3.GetProperty(pi.Name).GetValue(GroundOne.WE2, null)), null);
                            }
                            catch { }
                        }
                        else if (pi.PropertyType == typeof(System.String))
                        {
                            try
                            {
                                pi.SetValue(tempWE2, (string)(type3.GetProperty(pi.Name).GetValue(GroundOne.WE2, null)), null);
                            }
                            catch { }
                        }
                        else if (pi.PropertyType == typeof(System.Boolean))
                        {
                            try
                            {
                                pi.SetValue(tempWE2, (System.Boolean)(type3.GetProperty(pi.Name).GetValue(GroundOne.WE2, null)), null);
                            }
                            catch { }
                        }
                    }

                    TruthEnemyCharacter ec1 = new TruthEnemyCharacter(enemyName);
                    be.EC1 = ec1;
                    // １階初期パーティが１人の場合を考慮して以下の形式
                    if (we.AvailableSecondCharacter && enemyName2 != String.Empty)
                    {
                        if ((ec1.Rare == TruthEnemyCharacter.RareString.Black) ||
                            (ec1.Rare == TruthEnemyCharacter.RareString.Blue))
                        {
                            TruthEnemyCharacter ec2 = new TruthEnemyCharacter(enemyName2);
                            be.EC2 = ec2;
                        }
                    }
                    // ２階初期パーティが２人の場合を考慮して以下の形式
                    if (we.AvailableThirdCharacter && enemyName3 != String.Empty)
                    {
                        if ((ec1.Rare == TruthEnemyCharacter.RareString.Black) ||
                            (ec1.Rare == TruthEnemyCharacter.RareString.Blue))
                        {
                            TruthEnemyCharacter ec3 = new TruthEnemyCharacter(enemyName3);
                            be.EC3 = ec3;
                        }
                    }

                    // ２階、力の部屋以降、ボスが２人以上を考慮して以下の形式
                    if (enemyName2 != String.Empty)
                    {
                        if (ec1.Rare == TruthEnemyCharacter.RareString.Gold)
                        {
                            TruthEnemyCharacter ec2 = new TruthEnemyCharacter(enemyName2);
                            be.EC2 = ec2;
                        }
                    }
                    if (enemyName3 != String.Empty)
                    {
                        if (ec1.Rare == TruthEnemyCharacter.RareString.Gold)
                        {
                            TruthEnemyCharacter ec3 = new TruthEnemyCharacter(enemyName3);
                            be.EC3 = ec3;
                        }
                    }

                    be.WE = tempWE;
                    be.StartPosition = FormStartPosition.CenterParent;
                    //be.IgnoreApplicationDoEvent = true;
                    be.DuelMode = duel;
                    be.HiSpeedAnimation = hiSpeed;
                    be.FinalBattle = final;
                    be.LifeCountBattle = lifecount;
                    be.ShowDialog();
                    if (be.DialogResult == DialogResult.Retry)
                    {
                        // 死亡時、再挑戦する場合、はじめから呼びなおす。
                        this.Update();
                        continue;
                    }
                    if (be.DialogResult == DialogResult.Abort)
                    {
                        // 逃げた時、経験値とゴールドは入らない。
                        this.MC = tempMC;
                        this.MC.ReplaceBackPack(tempMC.GetBackPackInfo());
                        if (we.AvailableSecondCharacter)
                        {
                            this.SC = tempSC;
                            this.SC.ReplaceBackPack(tempSC.GetBackPackInfo());
                        }
                        if (we.AvailableThirdCharacter)
                        {
                            this.TC = tempTC;
                            this.TC.ReplaceBackPack(tempTC.GetBackPackInfo());
                        }
                        this.WE = tempWE;

                        GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        SetupPlayerStatus();
                        return false;
                    }
                    else if (be.DialogResult == DialogResult.Ignore)
                    {
                        using (YesNoReqWithMessage yerw = new YesNoReqWithMessage())
                        {
                            if (ec1.Name == Database.ENEMY_BOSS_KARAMITUKU_FLANSIS)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            }
                            if (ec1.Name == Database.ENEMY_BOSS_LEVIATHAN)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                            }
                            if (ec1.Name == Database.ENEMY_BOSS_HOWLING_SEIZER)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            }
                            if (ec1.Name == Database.ENEMY_BOSS_LEGIN_ARZE_1)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            }
                            if (ec1.Name == Database.ENEMY_BOSS_BYSTANDER_EMPTINESS)
                            {
                                UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                            }
                            //if (ec1.Name == Database.ENEMY_LAST_VERZE_ARTIE ||
                            //    ec1.Name == Database.ENEMY_LAST_SIN_VERZE_ARTIE)
                            //{
                            //    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                            //}

                            // DUELモードは現実世界でDUEL戦闘となった時に再戦を判断させたいため、一旦ここでfalse返しとする。
                            if (duel)
                            {
                                return false;
                            }

                            yerw.StartPosition = FormStartPosition.CenterParent;
                            yerw.MainMessage = "タイトルへ戻ります。今までのデータをセーブしますか？";
                            yerw.ShowDialog();
                            if (yerw.DialogResult == DialogResult.Yes)
                            {
                                using (ESCMenu esc = new ESCMenu())
                                {
                                    esc.MC = this.MC;
                                    esc.SC = this.SC;
                                    esc.TC = this.TC;
                                    esc.WE = this.WE;
                                    esc.KnownTileInfo = this.knownTileInfo;
                                    esc.KnownTileInfo2 = this.knownTileInfo2;
                                    esc.KnownTileInfo3 = this.knownTileInfo3;
                                    esc.KnownTileInfo4 = this.knownTileInfo4;
                                    esc.KnownTileInfo5 = this.knownTileInfo5;
                                    esc.Truth_KnownTileInfo = this.Truth_KnownTileInfo;
                                    esc.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2;
                                    esc.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3;
                                    esc.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4;
                                    esc.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5;
                                    esc.StartPosition = FormStartPosition.CenterParent;
                                    esc.OnlySave = true;
                                    esc.TruthStory = true;
                                    esc.ShowDialog();
                                }
                            }
                        }
                        endFlag = true;
                        this.Visible = false;
                    }
                    else
                    {
                        bool alreadyPlayBackMusic = false;
                        if (we.AvailableFirstCharacter)
                        {
                            this.MC = tempMC;
                            this.MC.ReplaceBackPack(tempMC.GetBackPackInfo());
                            if (mc.Level < Database.CHARACTER_MAX_LEVEL5)
                            {
                                mc.Exp += be.EC1.Exp;
                            }
                            mc.Gold += be.EC1.Gold;

                            int levelUpPoint = 0;
                            int cumultiveLvUpValue = 0;
                            while (true)
                            {
                                if (mc.Exp >= mc.NextLevelBorder && mc.Level < Database.CHARACTER_MAX_LEVEL5)
                                {
                                    levelUpPoint += mc.LevelUpPointTruth;
                                    mc.BaseLife += mc.LevelUpLifeTruth;
                                    mc.BaseMana += mc.LevelUpManaTruth;
                                    mc.Exp = mc.Exp - mc.NextLevelBorder;
                                    mc.Level += 1;
                                    cumultiveLvUpValue++;
                                }
                                else
                                {
                                    break;
                                }
                            }

                            if (cumultiveLvUpValue > 0)
                            {
                                GroundOne.PlaySoundEffect("LvUp.mp3");
                                if (!alreadyPlayBackMusic)
                                {
                                    alreadyPlayBackMusic = true;
                                    GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                                }
                                using (TruthStatusPlayer sp = new TruthStatusPlayer())
                                {
                                    sp.WE = we;
                                    sp.MC = mc;
                                    sp.SC = sc;
                                    sp.TC = tc;
                                    sp.CurrentStatusView = mc.PlayerStatusColor;
                                    sp.LevelUp = true;
                                    sp.UpPoint = levelUpPoint;
                                    sp.CumultiveLvUpValue = cumultiveLvUpValue;
                                    sp.StartPosition = FormStartPosition.CenterParent;
                                    sp.ShowDialog();
                                }

                                #region "アイン・レベルアップ習得表"
                                if ((mc.Level >= 3) && (!mc.StraightSmash)) { mc.AvailableSkill = true; mc.StraightSmash = true; ShowActiveSkillSpell(mc, Database.STRAIGHT_SMASH); mc.BattleActionCommand3 = Database.STRAIGHT_SMASH; }
                                if ((mc.Level >= 4) && (!mc.FreshHeal)) { mc.AvailableMana = true; mc.FreshHeal = true; ShowActiveSkillSpell(mc, Database.FRESH_HEAL); mc.BattleActionCommand4 = Database.FRESH_HEAL; }
                                if ((mc.Level >= 5) && (!mc.FireBall)) { mc.FireBall = true; ShowActiveSkillSpell(mc, Database.FIRE_BALL); mc.BattleActionCommand5 = Database.FIRE_BALL; }
                                if ((mc.Level >= 6) && (!mc.Protection)) { mc.Protection = true; ShowActiveSkillSpell(mc, Database.PROTECTION); mc.BattleActionCommand6 = Database.PROTECTION; }
                                if ((mc.Level >= 7) && (!mc.DoubleSlash)) { mc.DoubleSlash = true; ShowActiveSkillSpell(mc, Database.DOUBLE_SLASH); mc.BattleActionCommand7 = Database.DOUBLE_SLASH; }
                                if ((mc.Level >= 8) && (!mc.FlameAura)) { mc.FlameAura = true; ShowActiveSkillSpell(mc, Database.FLAME_AURA); mc.BattleActionCommand8 = Database.FLAME_AURA; }
                                if ((mc.Level >= 9) && (!mc.StanceOfStanding)) { mc.StanceOfStanding = true; ShowActiveSkillSpell(mc, Database.STANCE_OF_STANDING); mc.BattleActionCommand9 = Database.STANCE_OF_STANDING; }
                                if ((mc.Level >= 10) && (!mc.WordOfPower)) { mc.WordOfPower = true; ShowActiveSkillSpell(mc, Database.WORD_OF_POWER); }
                                if ((mc.Level >= 11) && (!mc.HolyShock)) { mc.HolyShock = true; ShowActiveSkillSpell(mc, Database.HOLY_SHOCK); }
                                if ((mc.Level >= 12) && (!mc.TruthVision)) { mc.TruthVision = true; ShowActiveSkillSpell(mc, Database.TRUTH_VISION); }
                                if ((mc.Level >= 13) && (!mc.HeatBoost)) { mc.HeatBoost = true; ShowActiveSkillSpell(mc, Database.HEAT_BOOST); }
                                if ((mc.Level >= 14) && (!mc.SaintPower)) { mc.SaintPower = true; ShowActiveSkillSpell(mc, Database.SAINT_POWER); }
                                if ((mc.Level >= 15) && (!mc.GaleWind)) { mc.GaleWind = true; ShowActiveSkillSpell(mc, Database.GALE_WIND); }
                                if ((mc.Level >= 16) && (!mc.InnerInspiration)) { mc.InnerInspiration = true; ShowActiveSkillSpell(mc, Database.INNER_INSPIRATION); }
                                if ((mc.Level >= 17) && (!mc.WordOfLife)) { mc.WordOfLife = true; ShowActiveSkillSpell(mc, Database.WORD_OF_LIFE); }
                                if ((mc.Level >= 18) && (!mc.FlameStrike)) { mc.FlameStrike = true; ShowActiveSkillSpell(mc, Database.FLAME_STRIKE); }
                                if ((mc.Level >= 19) && (!mc.HighEmotionality)) { mc.HighEmotionality = true; ShowActiveSkillSpell(mc, Database.HIGH_EMOTIONALITY); }
                                if ((mc.Level >= 20) && (!mc.WordOfFortune)) { mc.WordOfFortune = true; ShowActiveSkillSpell(mc, Database.WORD_OF_FORTUNE); }
                                // [警告] ここで一気にレベルを挙げられると、複合魔法・スキルの習得に違和感が出てしまう。
                                // 複合魔法・スキルはガンツ武具屋のテレポート先、カール爵より習得するようにする。
                                if ((mc.Level >= 24) && (!mc.Glory)) { mc.Glory = true; ShowActiveSkillSpell(mc, Database.GLORY); }
                                if ((mc.Level >= 25) && (!mc.VolcanicWave)) { mc.VolcanicWave = true; ShowActiveSkillSpell(mc, Database.VOLCANIC_WAVE); }
                                if ((mc.Level >= 26) && (!mc.AetherDrive)) { mc.AetherDrive = true; ShowActiveSkillSpell(mc, Database.AETHER_DRIVE); }

                                if ((mc.Level >= 36) && (!mc.CrushingBlow)) { mc.CrushingBlow = true; ShowActiveSkillSpell(mc, Database.CRUSHING_BLOW); }
                                if ((mc.Level >= 37) && (!mc.KineticSmash)) { mc.KineticSmash = true; ShowActiveSkillSpell(mc, Database.KINETIC_SMASH); }
                                if ((mc.Level >= 38) && (!mc.StanceOfEyes)) { mc.StanceOfEyes = true; ShowActiveSkillSpell(mc, Database.STANCE_OF_EYES); }
                                if ((mc.Level >= 39) && (!mc.Resurrection)) { mc.Resurrection = true; ShowActiveSkillSpell(mc, Database.RESURRECTION); }
                                if ((mc.Level >= 41) && (!mc.StaticBarrier)) { mc.StaticBarrier = true; ShowActiveSkillSpell(mc, Database.STATIC_BARRIER); }
                                if ((mc.Level >= 42) && (!mc.Genesis)) { mc.Genesis = true; ShowActiveSkillSpell(mc, Database.GENESIS); }
                                if ((mc.Level >= 43) && (!mc.LightDetonator)) { mc.LightDetonator = true; ShowActiveSkillSpell(mc, Database.LIGHT_DETONATOR); }
                                if ((mc.Level >= 44) && (!mc.ImmortalRave)) { mc.ImmortalRave = true; ShowActiveSkillSpell(mc, Database.IMMORTAL_RAVE); }
                                if ((mc.Level >= 45) && (!mc.ExaltedField)) { mc.ExaltedField = true; ShowActiveSkillSpell(mc, Database.EXALTED_FIELD); }
                                if ((mc.Level >= 46) && (!mc.PiercingFlame)) { mc.PiercingFlame = true; ShowActiveSkillSpell(mc, Database.PIERCING_FLAME); }
                                if ((mc.Level >= 47) && (!mc.SacredHeal)) { mc.SacredHeal = true; ShowActiveSkillSpell(mc, Database.SACRED_HEAL); }
                                if ((mc.Level >= 48) && (!mc.RisingAura)) { mc.RisingAura = true; ShowActiveSkillSpell(mc, Database.RISING_AURA); }
                                if ((mc.Level >= 49) && (!mc.ChillBurn)) { mc.ChillBurn = true; ShowActiveSkillSpell(mc, Database.CHILL_BURN); }
                                if ((mc.Level >= 50) && (!mc.SoulInfinity)) { mc.SoulInfinity = true; ShowActiveSkillSpell(mc, Database.SOUL_INFINITY); }

                                if ((mc.Level >= 51) && (!mc.HymnContract)) { mc.HymnContract = true; ShowActiveSkillSpell(mc, Database.HYMN_CONTRACT); }
                                if ((mc.Level >= 52) && (!mc.Catastrophe)) { mc.Catastrophe = true; ShowActiveSkillSpell(mc, Database.CATASTROPHE); }
                                if ((mc.Level >= 53) && (!mc.CelestialNova)) { mc.CelestialNova = true; ShowActiveSkillSpell(mc, Database.CELESTIAL_NOVA); }
                                if ((mc.Level >= 54) && (!mc.OnslaughtHit)) { mc.OnslaughtHit = true; ShowActiveSkillSpell(mc, Database.ONSLAUGHT_HIT); }
                                if ((mc.Level >= 55) && (!mc.PainfulInsanity)) { mc.PainfulInsanity = true; ShowActiveSkillSpell(mc, Database.PAINFUL_INSANITY); }
                                if ((mc.Level >= 56) && (!mc.LavaAnnihilation)) { mc.LavaAnnihilation = true; ShowActiveSkillSpell(mc, Database.LAVA_ANNIHILATION); }
                                if ((mc.Level >= 57) && (!mc.ConcussiveHit)) { mc.ConcussiveHit = true; ShowActiveSkillSpell(mc, Database.CONCUSSIVE_HIT); }
                                if ((mc.Level >= 58) && (!mc.EternalPresence)) { mc.EternalPresence = true; ShowActiveSkillSpell(mc, Database.ETERNAL_PRESENCE); }
                                if ((mc.Level >= 59) && (!mc.AusterityMatrix)) { mc.AusterityMatrix = true; ShowActiveSkillSpell(mc, Database.AUSTERITY_MATRIX); }
                                if ((mc.Level >= 60) && (!mc.SigilOfHomura)) { mc.SigilOfHomura = true; ShowActiveSkillSpell(mc, Database.SIGIL_OF_HOMURA); }

                                if ((mc.Level >= 61) && (!mc.EverDroplet)) { mc.EverDroplet = true; ShowActiveSkillSpell(mc, Database.EVER_DROPLET); }
                                if ((mc.Level >= 62) && (!mc.ONEAuthority)) { mc.ONEAuthority = true; ShowActiveSkillSpell(mc, Database.ONE_AUTHORITY); }
                                if ((mc.Level >= 63) && (!mc.AscendantMeteor)) { mc.AscendantMeteor = true; ShowActiveSkillSpell(mc, Database.ASCENDANT_METEOR); }
                                if ((mc.Level >= 64) && (!mc.FatalBlow)) { mc.FatalBlow = true; ShowActiveSkillSpell(mc, Database.FATAL_BLOW); }
                                if ((mc.Level >= 65) && (!mc.StanceOfDouble)) { mc.StanceOfDouble = true; ShowActiveSkillSpell(mc, Database.STANCE_OF_DOUBLE); }
                                if ((mc.Level >= 66) && (!mc.ZetaExplosion)) { mc.ZetaExplosion = true; ShowActiveSkillSpell(mc, Database.ZETA_EXPLOSION); }
                                #endregion
                            }

                            bool detect = false;
                            string targetGetName = String.Empty;
                            if (mc.MainWeapon != null)
                            {
                                if (mc.MainWeapon.Name == Database.POOR_PRACTICE_SWORD_ZERO && GroundOne.WE2.PracticeSwordCount >= 5)
                                {
                                    targetGetName = Database.POOR_PRACTICE_SWORD_1;
                                }
                                else if (mc.MainWeapon.Name == Database.POOR_PRACTICE_SWORD_1 && GroundOne.WE2.PracticeSwordCount >= 15)
                                {
                                    targetGetName = Database.POOR_PRACTICE_SWORD_2;
                                }
                                else if (mc.MainWeapon.Name == Database.POOR_PRACTICE_SWORD_2 && GroundOne.WE2.PracticeSwordCount >= 30 && we.CompleteSlayBoss2)
                                {
                                    targetGetName = Database.COMMON_PRACTICE_SWORD_3;
                                }
                                else if (mc.MainWeapon.Name == Database.COMMON_PRACTICE_SWORD_3 && GroundOne.WE2.PracticeSwordCount >= 50 && we.CompleteSlayBoss2)
                                {
                                    targetGetName = Database.COMMON_PRACTICE_SWORD_4;
                                }
                                else if (mc.MainWeapon.Name == Database.COMMON_PRACTICE_SWORD_4 && GroundOne.WE2.PracticeSwordCount >= 75 && we.CompleteSlayBoss3)
                                {
                                    targetGetName = Database.RARE_PRACTICE_SWORD_5;
                                }
                                else if (mc.MainWeapon.Name == Database.RARE_PRACTICE_SWORD_5 && GroundOne.WE2.PracticeSwordCount >= 105 && we.CompleteSlayBoss3)
                                {
                                    targetGetName = Database.RARE_PRACTICE_SWORD_6;
                                }
                                else if (mc.MainWeapon.Name == Database.RARE_PRACTICE_SWORD_6 && GroundOne.WE2.PracticeSwordCount >= 140 && we.CompleteSlayBoss4)
                                {
                                    targetGetName = Database.EPIC_PRACTICE_SWORD_7;
                                }
                                else if (mc.MainWeapon.Name == Database.EPIC_PRACTICE_SWORD_7 && GroundOne.WE2.PracticeSwordCount >= 180 && we.CompleteSlayBoss5)
                                {
                                    targetGetName = Database.LEGENDARY_FELTUS;
                                }

                                if (targetGetName != String.Empty)
                                {
                                    mc.MainWeapon = new ItemBackPack(targetGetName);
                                    detect = true;
                                }
                            }
                            if ((mc.SubWeapon != null))
                            {
                                if (mc.SubWeapon.Name == Database.POOR_PRACTICE_SWORD_ZERO && GroundOne.WE2.PracticeSwordCount >= 5)
                                {
                                    targetGetName = Database.POOR_PRACTICE_SWORD_1;
                                }
                                else if (mc.SubWeapon.Name == Database.POOR_PRACTICE_SWORD_1 && GroundOne.WE2.PracticeSwordCount >= 20)
                                {
                                    targetGetName = Database.POOR_PRACTICE_SWORD_2;
                                }
                                else if (mc.SubWeapon.Name == Database.POOR_PRACTICE_SWORD_2 && GroundOne.WE2.PracticeSwordCount >= 50 && we.CompleteSlayBoss2)
                                {
                                    targetGetName = Database.COMMON_PRACTICE_SWORD_3;
                                }
                                else if (mc.SubWeapon.Name == Database.COMMON_PRACTICE_SWORD_3 && GroundOne.WE2.PracticeSwordCount >= 100 && we.CompleteSlayBoss2)
                                {
                                    targetGetName = Database.COMMON_PRACTICE_SWORD_4;
                                }
                                else if (mc.SubWeapon.Name == Database.COMMON_PRACTICE_SWORD_4 && GroundOne.WE2.PracticeSwordCount >= 200 && we.CompleteSlayBoss3)
                                {
                                    targetGetName = Database.RARE_PRACTICE_SWORD_5;
                                }
                                else if (mc.SubWeapon.Name == Database.RARE_PRACTICE_SWORD_5 && GroundOne.WE2.PracticeSwordCount >= 400 && we.CompleteSlayBoss3)
                                {
                                    targetGetName = Database.RARE_PRACTICE_SWORD_6;
                                }
                                else if (mc.SubWeapon.Name == Database.RARE_PRACTICE_SWORD_6 && GroundOne.WE2.PracticeSwordCount >= 700 && we.CompleteSlayBoss4)
                                {
                                    targetGetName = Database.EPIC_PRACTICE_SWORD_7;
                                }
                                else if (mc.SubWeapon.Name == Database.EPIC_PRACTICE_SWORD_7 && GroundOne.WE2.PracticeSwordCount >= 1000 && we.CompleteSlayBoss5)
                                {
                                    targetGetName = Database.LEGENDARY_FELTUS;
                                }

                                if (targetGetName != String.Empty)
                                {
                                    mc.SubWeapon = new ItemBackPack(targetGetName);
                                    detect = true;
                                }
                            }

                            if (detect)
                            {
                                if (targetGetName == Database.POOR_PRACTICE_SWORD_1)
                                {
                                    UpdateMainMessage("アイン：（この剣・・・）");

                                    UpdateMainMessage("アイン：（何か持つ感触が変わったな。以前より鋭くなった感じがする。）");

                                    UpdateMainMessage("アイン：（すげえ・・・ひょっとして成長する剣だったりするのか！？）");

                                    UpdateMainMessage("アイン：（サンキューガンツ伯父さん、ありがたく使わせてもらうぜ。）");
                                }
                                else if (targetGetName == Database.POOR_PRACTICE_SWORD_2)
                                {
                                    UpdateMainMessage("アイン：（っしゃ、来たぜ！剣レベルアップ！）");

                                    UpdateMainMessage("アイン：（でも、何だろうな・・・何か違う感じもするが・・・）");

                                    UpdateMainMessage("アイン：（まあ、良いか。このままガンガン使っていくぜ！）");
                                }
                                else if (targetGetName == Database.COMMON_PRACTICE_SWORD_3)
                                {
                                    UpdateMainMessage("アイン：（っしゃ、来たぜ！剣レベルアップ！）");

                                    UpdateMainMessage("アイン：（すげえぜ、この剣。最大値ばかりが上がって行くな。）");

                                    UpdateMainMessage("アイン：（使いこなせるかどうかだが・・・）");

                                    UpdateMainMessage("アイン：（まあ、この際だ。使えるだけ使ってみるとするか！）");
                                }
                                else if (targetGetName == Database.COMMON_PRACTICE_SWORD_4)
                                {
                                    UpdateMainMessage("アイン：（っしゃ、来たぜ！剣レベルアップ！）");

                                    UpdateMainMessage("アイン：（しかしどんどん値が伸びていくな・・・）");

                                    UpdateMainMessage("アイン：（今の俺でどこまで使いこなせるか、わかんねえけどな）");

                                    UpdateMainMessage("アイン：（まあ気にしててもしょうがねえ、ドンドン上げていくぜ！）");
                                }
                                else if (targetGetName == Database.RARE_PRACTICE_SWORD_5)
                                {
                                    UpdateMainMessage("アイン：（っしゃ、来たぜ！剣レベルアップ！）");

                                    UpdateMainMessage("アイン：（しかし、新しくなってるハズなんだが・・・");

                                    UpdateMainMessage("アイン：（何となく懐かしい感じもするんだよな）");

                                    UpdateMainMessage("アイン：（MAXまで上げきったら、ガンツ伯父さんにでも聞いてみるか）");
                                }
                                else if (targetGetName == Database.RARE_PRACTICE_SWORD_6)
                                {
                                    UpdateMainMessage("アイン：（っしゃ、来たぜ！剣レベルアップ！）");

                                    UpdateMainMessage("アイン：（練習用の剣なんて、大嘘もいいとこじゃねえか）");

                                    UpdateMainMessage("アイン：（・・・この、モヤモヤした感覚・・・）");

                                    UpdateMainMessage("アイン：（・・・　・・・まあ、上げてくか！）");
                                }
                                else if (targetGetName == Database.EPIC_PRACTICE_SWORD_7)
                                {
                                    UpdateMainMessage("アイン：（剣レベルアップ・・・と言いたい所だが）");

                                    UpdateMainMessage("アイン：（そっか・・・何を忘れてたんだろうな、俺）");

                                    UpdateMainMessage("アイン：（ッハハハ・・・そりゃ、そうだよな。情けねえぜ）");

                                    UpdateMainMessage("アイン：（たぶん次でラストのレベルアップだ。やらせてもらうぜ）");
                                }
                                else if (targetGetName == Database.LEGENDARY_FELTUS)
                                {
                                    // [コメント] 何か演出が欲しい。
                                    UpdateMainMessage("アイン：（神剣、フェルトゥーシュだったんだ、コレ・・・）");

                                    UpdateMainMessage("アイン：（そうさ・・・俺はコイツで・・・）");

                                    UpdateMainMessage("アイン：（いや、これを受け止めなければならないんだ、俺は）");

                                    UpdateMainMessage("アイン：（・・・今度こそ、心に決めたぜ）");

                                    UpdateMainMessage("アイン：（この剣からは逃げない）");

                                    UpdateMainMessage("アイン：（っしゃ！　それじゃ使うぜ、フェルトゥーシュを！）");
                                }
                                using (MessageDisplayWithIcon mdwi = new MessageDisplayWithIcon())
                                {
                                    ItemBackPack item = new ItemBackPack(targetGetName);
                                    mdwi.Message = item.Name + "を入手した！";
                                    mdwi.Item = item;
                                    GroundOne.PlaySoundEffect(Database.SOUND_LVUP_FELTUS);
                                    mdwi.StartPosition = FormStartPosition.CenterParent;
                                    mdwi.ShowDialog();
                                }
                            }
                        }



                        if (we.AvailableSecondCharacter)
                        {
                            this.SC = tempSC;
                            this.SC.ReplaceBackPack(tempSC.GetBackPackInfo());
                            if (sc.Level < Database.CHARACTER_MAX_LEVEL5)
                            {
                                sc.Exp += be.EC1.Exp;
                            }
                            //SC.Gold += be.EC1.Gold; // [警告]：ゴールドの所持は別クラスにするべきです。

                            int levelUpPoint = 0;
                            int cumultiveLvUpValue = 0;
                            while (true)
                            {
                                if (sc.Exp >= sc.NextLevelBorder && sc.Level < Database.CHARACTER_MAX_LEVEL5)
                                {
                                    levelUpPoint += sc.LevelUpPointTruth;
                                    sc.BaseLife += sc.LevelUpLifeTruth;
                                    sc.BaseMana += sc.LevelUpManaTruth;
                                    sc.Exp = sc.Exp - sc.NextLevelBorder;
                                    sc.Level += 1;
                                    cumultiveLvUpValue++;
                                }
                                else
                                {
                                    break;
                                }
                            }

                            if (cumultiveLvUpValue > 0)
                            {
                                GroundOne.PlaySoundEffect("LvUp.mp3");
                                if (!alreadyPlayBackMusic)
                                {
                                    alreadyPlayBackMusic = true;
                                    GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                                }
                                using (TruthStatusPlayer sp = new TruthStatusPlayer())
                                {
                                    sp.WE = we;
                                    sp.MC = mc;
                                    sp.SC = sc;
                                    sp.TC = tc;
                                    sp.CurrentStatusView = sc.PlayerStatusColor;
                                    sp.LevelUp = true;
                                    sp.UpPoint = levelUpPoint;
                                    sp.CumultiveLvUpValue = cumultiveLvUpValue;
                                    sp.StartPosition = FormStartPosition.CenterParent;
                                    sp.ShowDialog();
                                }
                                #region "ラナ・レベルアップ習得表"
                                if ((sc.Level >= 3) && (!sc.IceNeedle)) { sc.AvailableMana = true; sc.IceNeedle = true; ShowActiveSkillSpell(sc, Database.ICE_NEEDLE); sc.BattleActionCommand3 = Database.ICE_NEEDLE; }
                                if ((sc.Level >= 4) && (!sc.CounterAttack)) { sc.AvailableSkill = true; sc.CounterAttack = true; ShowActiveSkillSpell(sc, Database.COUNTER_ATTACK); sc.BattleActionCommand4 = Database.COUNTER_ATTACK; }
                                if ((sc.Level >= 5) && (!sc.DarkBlast)) { sc.DarkBlast = true; ShowActiveSkillSpell(sc, Database.DARK_BLAST); sc.BattleActionCommand5 = Database.DARK_BLAST; }
                                if ((sc.Level >= 6) && (!sc.AbsorbWater)) { sc.AbsorbWater = true; ShowActiveSkillSpell(sc, Database.ABSORB_WATER); sc.BattleActionCommand6 = Database.ABSORB_WATER; }
                                if ((sc.Level >= 7) && (!sc.StanceOfFlow)) { sc.StanceOfFlow = true; ShowActiveSkillSpell(sc, Database.STANCE_OF_FLOW); sc.BattleActionCommand7 = Database.STANCE_OF_FLOW; }
                                if ((sc.Level >= 8) && (!sc.ShadowPact)) { sc.ShadowPact = true; ShowActiveSkillSpell(sc, Database.SHADOW_PACT); sc.BattleActionCommand8 = Database.SHADOW_PACT; }
                                if ((sc.Level >= 9) && (!sc.DispelMagic)) { sc.DispelMagic = true; ShowActiveSkillSpell(sc, Database.DISPEL_MAGIC); sc.BattleActionCommand9 = Database.DISPEL_MAGIC; }
                                if ((sc.Level >= 10) && (!sc.LifeTap)) { sc.LifeTap = true; ShowActiveSkillSpell(sc, Database.LIFE_TAP); }
                                if ((sc.Level >= 11) && (!sc.PurePurification)) { sc.PurePurification = true; ShowActiveSkillSpell(sc, Database.PURE_PURIFICATION); }
                                if ((sc.Level >= 12) && (!sc.EnigmaSence)) { sc.EnigmaSence = true; ShowActiveSkillSpell(sc, Database.ENIGMA_SENSE); }
                                if ((sc.Level >= 13) && (!sc.BlackContract)) { sc.BlackContract = true; ShowActiveSkillSpell(sc, Database.BLACK_CONTRACT); }
                                if ((sc.Level >= 14) && (!sc.Cleansing)) { sc.Cleansing = true; ShowActiveSkillSpell(sc, Database.CLEANSING); }
                                if ((sc.Level >= 15) && (!sc.Negate)) { sc.Negate = true; ShowActiveSkillSpell(sc, Database.NEGATE); }
                                if ((sc.Level >= 16) && (!sc.FrozenLance)) { sc.FrozenLance = true; ShowActiveSkillSpell(sc, Database.FROZEN_LANCE); }
                                if ((sc.Level >= 17) && (!sc.RiseOfImage)) { sc.RiseOfImage = true; ShowActiveSkillSpell(sc, Database.RISE_OF_IMAGE); }
                                if ((sc.Level >= 18) && (!sc.Deflection)) { sc.Deflection = true; ShowActiveSkillSpell(sc, Database.DEFLECTION); }
                                if ((sc.Level >= 19) && (!sc.Tranquility)) { sc.Tranquility = true; ShowActiveSkillSpell(sc, Database.TRANQUILITY); }
                                if ((sc.Level >= 20) && (!sc.VoidExtraction)) { sc.VoidExtraction = true; ShowActiveSkillSpell(sc, Database.VOID_EXTRACTION); }
                                // [警告] ここで一気にレベルを挙げられると、複合魔法・スキルの習得に違和感が出てしまう。
                                if ((sc.Level >= 24) && (!sc.DevouringPlague)) { sc.DevouringPlague = true; ShowActiveSkillSpell(sc, Database.DEVOURING_PLAGUE); }
                                if ((sc.Level >= 25) && (!sc.MirrorImage)) { sc.MirrorImage = true; ShowActiveSkillSpell(sc, Database.MIRROR_IMAGE); }
                                if ((sc.Level >= 26) && (!sc.OneImmunity)) { sc.OneImmunity = true; ShowActiveSkillSpell(sc, Database.ONE_IMMUNITY); }

                                if ((sc.Level >= 36) && (!sc.AntiStun)) { sc.AntiStun = true; ShowActiveSkillSpell(sc, Database.ANTI_STUN); }
                                if ((sc.Level >= 37) && (!sc.SilentRush)) { sc.SilentRush = true; ShowActiveSkillSpell(sc, Database.SILENT_RUSH); }
                                if ((sc.Level >= 38) && (!sc.CarnageRush)) { sc.CarnageRush = true; ShowActiveSkillSpell(sc, Database.CARNAGE_RUSH); }
                                if ((sc.Level >= 39) && (!sc.BloodyVengeance)) { sc.BloodyVengeance = true; ShowActiveSkillSpell(sc, Database.BLOODY_VENGEANCE); }
                                if ((sc.Level >= 41) && (!sc.SacredHeal)) { sc.SacredHeal = true; ShowActiveSkillSpell(sc, Database.SACRED_HEAL); }
                                if ((sc.Level >= 42) && (!sc.WhiteOut)) { sc.WhiteOut = true; ShowActiveSkillSpell(sc, Database.WHITE_OUT); }
                                if ((sc.Level >= 43) && (!sc.DeepMirror)) { sc.DeepMirror = true; ShowActiveSkillSpell(sc, Database.DEEP_MIRROR); }
                                if ((sc.Level >= 44) && (!sc.PromisedKnowledge)) { sc.PromisedKnowledge = true; ShowActiveSkillSpell(sc, Database.PROMISED_KNOWLEDGE); }
                                if ((sc.Level >= 45) && (!sc.DoomBlade)) { sc.DoomBlade = true; ShowActiveSkillSpell(sc, Database.DOOM_BLADE); }
                                if ((sc.Level >= 46) && (!sc.VortexField)) { sc.VortexField = true; ShowActiveSkillSpell(sc, Database.VORTEX_FIELD); }
                                if ((sc.Level >= 47) && (!sc.AngelBreath)) { sc.AngelBreath = true; ShowActiveSkillSpell(sc, Database.ANGEL_BREATH); }
                                if ((sc.Level >= 48) && (!sc.UnknownShock)) { sc.UnknownShock = true; ShowActiveSkillSpell(sc, Database.UNKNOWN_SHOCK); }
                                if ((sc.Level >= 49) && (!sc.BlindJustice)) { sc.BlindJustice = true; ShowActiveSkillSpell(sc, Database.BLIND_JUSTICE); }
                                if ((sc.Level >= 50) && (!sc.StanceOfDeath)) { sc.StanceOfDeath = true; ShowActiveSkillSpell(sc, Database.STANCE_OF_DEATH); }

                                if ((sc.Level >= 51) && (!sc.EclipseEnd)) { sc.EclipseEnd = true; ShowActiveSkillSpell(sc, Database.ECLIPSE_END); }
                                if ((sc.Level >= 52) && (!sc.OboroImpact)) { sc.OboroImpact = true; ShowActiveSkillSpell(sc, Database.OBORO_IMPACT); }
                                if ((sc.Level >= 53) && (!sc.Damnation)) { sc.Damnation = true; ShowActiveSkillSpell(sc, Database.DAMNATION); }
                                if ((sc.Level >= 54) && (!sc.MindKilling)) { sc.MindKilling = true; ShowActiveSkillSpell(sc, Database.MIND_KILLING); }
                                if ((sc.Level >= 55) && (!sc.NothingOfNothingness)) { sc.NothingOfNothingness = true; ShowActiveSkillSpell(sc, Database.NOTHING_OF_NOTHINGNESS); }
                                if ((sc.Level >= 56) && (!sc.AbsoluteZero)) { sc.AbsoluteZero = true; ShowActiveSkillSpell(sc, Database.ABSOLUTE_ZERO); }
                                if ((sc.Level >= 57) && (!sc.NourishSense)) { sc.NourishSense = true; ShowActiveSkillSpell(sc, Database.NOURISH_SENSE); }
                                if ((sc.Level >= 58) && (!sc.TimeStop)) { sc.TimeStop = true; ShowActiveSkillSpell(sc, Database.TIME_STOP); }
                                if ((sc.Level >= 59) && (!sc.EverDroplet)) { sc.EverDroplet = true; ShowActiveSkillSpell(sc, Database.EVER_DROPLET); }
                                if ((sc.Level >= 60) && (!sc.BlueDragonWill)) { sc.BlueDragonWill = true; ShowActiveSkillSpell(sc, Database.BLUE_DRAGON_WILL); }

                                if ((sc.Level >= 61) && (!sc.EndlessAnthem)) { sc.EndlessAnthem = true; ShowActiveSkillSpell(sc, Database.ENDLESS_ANTHEM); }
                                if ((sc.Level >= 62) && (!sc.ImpulseHit)) { sc.ImpulseHit = true; ShowActiveSkillSpell(sc, Database.IMPULSE_HIT); }
                                if ((sc.Level >= 63) && (!sc.DeathDeny)) { sc.DeathDeny = true; ShowActiveSkillSpell(sc, Database.DEATH_DENY); }
                                if ((sc.Level >= 64) && (!sc.ConcussiveHit)) { sc.ConcussiveHit = true; ShowActiveSkillSpell(sc, Database.CONCUSSIVE_HIT); }
                                if ((sc.Level >= 65) && (!sc.SoulExecution)) { sc.SoulExecution = true; ShowActiveSkillSpell(sc, Database.SOUL_EXECUTION); }
                                if ((sc.Level >= 66) && (!sc.TranscendentWish)) { sc.TranscendentWish = true; ShowActiveSkillSpell(sc, Database.TRANSCENDENT_WISH); }
                                #endregion
                            }
                        }

                        if (we.AvailableThirdCharacter)
                        {
                            this.TC = tempTC;
                            this.TC.ReplaceBackPack(tempTC.GetBackPackInfo());
                            if (tc.FullName == Database.OL_LANDIS_FULL)
                            {
                                if (tc.Level < Database.CHARACTER_MAX_LEVEL2)
                                {
                                    tc.Exp += be.EC1.Exp;
                                }
                            }
                            else if (tc.FullName == Database.VERZE_ARTIE_FULL)
                            {
                                if (tc.Level < Database.CHARACTER_MAX_LEVEL5)
                                {
                                    tc.Exp += be.EC1.Exp;
                                }
                            }
                            //TC.Gold += be.EC1.Gold; // [警告]：ゴールドの所持は別クラスにするべきです。

                            int levelUpPoint = 0;
                            int cumultiveLvUpValue = 0;
                            while (true)
                            {
                                if (tc.Exp >= tc.NextLevelBorder && tc.Level < Database.CHARACTER_MAX_LEVEL5)
                                {
                                    levelUpPoint += tc.LevelUpPointTruth;
                                    tc.BaseLife += tc.LevelUpLifeTruth;
                                    tc.BaseMana += tc.LevelUpManaTruth;
                                    tc.Exp = tc.Exp - tc.NextLevelBorder;
                                    tc.Level += 1;
                                    cumultiveLvUpValue++;
                                }
                                else
                                {
                                    break;
                                }
                            }

                            if (cumultiveLvUpValue > 0)
                            {
                                GroundOne.PlaySoundEffect("LvUp.mp3");
                                if (!alreadyPlayBackMusic)
                                {
                                    alreadyPlayBackMusic = true;
                                    GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                                }
                                using (TruthStatusPlayer sp = new TruthStatusPlayer())
                                {
                                    sp.WE = we;
                                    sp.MC = mc;
                                    sp.SC = sc;
                                    sp.TC = tc;
                                    sp.CurrentStatusView = tc.PlayerStatusColor;
                                    sp.LevelUp = true;
                                    sp.UpPoint = levelUpPoint;
                                    sp.CumultiveLvUpValue = cumultiveLvUpValue;
                                    sp.StartPosition = FormStartPosition.CenterParent;
                                    sp.ShowDialog();
                                }

                                // ランディスはレベル上限MAX35からスタートのため、習得はない。

                                #region "ヴェルゼ・レベルアップ習得表"

                                if ((tc.Level >= 36) && (!tc.StanceOfEyes)) { tc.StanceOfEyes = true; ShowActiveSkillSpell(tc, Database.STANCE_OF_EYES); }
                                if ((tc.Level >= 37) && (!tc.SwiftStep)) { tc.SwiftStep = true; ShowActiveSkillSpell(tc, Database.SWIFT_STEP); }
                                if ((tc.Level >= 38) && (!tc.Resurrection)) { tc.Resurrection = true; ShowActiveSkillSpell(tc, Database.RESURRECTION); }
                                if ((tc.Level >= 39) && (!tc.BlindJustice)) { tc.BlindJustice = true; ShowActiveSkillSpell(tc, Database.BLIND_JUSTICE); }
                                if ((tc.Level >= 41) && (!tc.Genesis)) { tc.Genesis = true; ShowActiveSkillSpell(tc, Database.GENESIS); }
                                if ((tc.Level >= 42) && (!tc.DeepMirror)) { tc.DeepMirror = true; ShowActiveSkillSpell(tc, Database.DEEP_MIRROR); }
                                if ((tc.Level >= 43) && (!tc.ImmortalRave)) { tc.ImmortalRave = true; ShowActiveSkillSpell(tc, Database.IMMORTAL_RAVE); }
                                if ((tc.Level >= 44) && (!tc.DoomBlade)) { tc.DoomBlade = true; ShowActiveSkillSpell(tc, Database.DOOM_BLADE); }
                                if ((tc.Level >= 45) && (!tc.CarnageRush)) { tc.CarnageRush = true; ShowActiveSkillSpell(tc, Database.CARNAGE_RUSH); }
                                if ((tc.Level >= 46) && (!tc.ChillBurn)) { tc.ChillBurn = true; ShowActiveSkillSpell(tc, Database.CHILL_BURN); }
                                if ((tc.Level >= 47) && (!tc.WhiteOut)) { tc.WhiteOut = true; ShowActiveSkillSpell(tc, Database.WHITE_OUT); }
                                if ((tc.Level >= 48) && (!tc.PhantasmalWind)) { tc.PhantasmalWind = true; ShowActiveSkillSpell(tc, Database.PHANTASMAL_WIND); }
                                if ((tc.Level >= 49) && (!tc.PainfulInsanity)) { tc.PainfulInsanity = true; ShowActiveSkillSpell(tc, Database.PAINFUL_INSANITY); }
                                if ((tc.Level >= 50) && (!tc.FatalBlow)) { tc.FatalBlow = true; ShowActiveSkillSpell(tc, Database.FATAL_BLOW); }

                                if ((tc.Level >= 51) && (!tc.StaticBarrier)) { tc.StaticBarrier = true; ShowActiveSkillSpell(tc, Database.STATIC_BARRIER); }
                                if ((tc.Level >= 52) && (!tc.StanceOfDeath)) { tc.StanceOfDeath = true; ShowActiveSkillSpell(tc, Database.STANCE_OF_DEATH); }
                                if ((tc.Level >= 53) && (!tc.EverDroplet)) { tc.EverDroplet = true; ShowActiveSkillSpell(tc, Database.EVER_DROPLET); }
                                if ((tc.Level >= 54) && (!tc.Catastrophe)) { tc.Catastrophe = true; ShowActiveSkillSpell(tc, Database.CATASTROPHE); }
                                if ((tc.Level >= 55) && (!tc.CelestialNova)) { tc.CelestialNova = true; ShowActiveSkillSpell(tc, Database.CELESTIAL_NOVA); }
                                if ((tc.Level >= 56) && (!tc.MindKilling)) { tc.MindKilling = true; ShowActiveSkillSpell(tc, Database.MIND_KILLING); }
                                if ((tc.Level >= 57) && (!tc.NothingOfNothingness)) { tc.NothingOfNothingness = true; ShowActiveSkillSpell(tc, Database.NOTHING_OF_NOTHINGNESS); }
                                if ((tc.Level >= 58) && (!tc.AbsoluteZero)) { tc.AbsoluteZero = true; ShowActiveSkillSpell(tc, Database.ABSOLUTE_ZERO); }
                                if ((tc.Level >= 59) && (!tc.AusterityMatrix)) { tc.AusterityMatrix = true; ShowActiveSkillSpell(tc, Database.AUSTERITY_MATRIX); }
                                if ((tc.Level >= 60) && (!tc.VigorSense)) { tc.VigorSense = true; ShowActiveSkillSpell(tc, Database.VIGOR_SENSE); }

                                if ((tc.Level >= 61) && (!tc.LavaAnnihilation)) { tc.LavaAnnihilation = true; ShowActiveSkillSpell(tc, Database.LAVA_ANNIHILATION); }
                                if ((tc.Level >= 62) && (!tc.EclipseEnd)) { tc.EclipseEnd = true; ShowActiveSkillSpell(tc, Database.ECLIPSE_END); }
                                if ((tc.Level >= 63) && (!tc.TimeStop)) { tc.TimeStop = true; ShowActiveSkillSpell(tc, Database.TIME_STOP); }
                                if ((tc.Level >= 64) && (!tc.SinFortune)) { tc.SinFortune = true; ShowActiveSkillSpell(tc, Database.SIN_FORTUNE); }
                                if ((tc.Level >= 65) && (!tc.DemonicIgnite)) { tc.DemonicIgnite = true; ShowActiveSkillSpell(tc, Database.DEMONIC_IGNITE); }
                                if ((tc.Level >= 66) && (!tc.StanceOfDouble)) { tc.StanceOfDouble = true; ShowActiveSkillSpell(tc, Database.STANCE_OF_DOUBLE); }
                                if ((tc.Level >= 67) && (!tc.WarpGate)) { tc.WarpGate = true; ShowActiveSkillSpell(tc, Database.WARP_GATE); }
                                if ((tc.Level >= 68) && (!tc.StanceOfMystic)) { tc.StanceOfMystic = true; ShowActiveSkillSpell(tc, Database.STANCE_OF_MYSTIC); }
                                if ((tc.Level >= 69) && (!tc.SoulExecution)) { tc.SoulExecution = true; ShowActiveSkillSpell(tc, Database.SOUL_EXECUTION); }
                                if ((tc.Level >= 70) && (!tc.ZetaExplosion)) { tc.ZetaExplosion = true; ShowActiveSkillSpell(tc, Database.ZETA_EXPLOSION); }
                                #endregion
                            }
                        }
                        this.WE = tempWE;

                        if (!alreadyPlayBackMusic && ( ec1.Name != "五階の守護者：Bystander" && enemyName != Database.ENEMY_BOSS_BYSTANDER_EMPTINESS && enemyName != Database.ENEMY_LAST_SINIKIA_KAHLHANZ && enemyName != Database.ENEMY_LAST_OL_LANDIS))
                        {
                            alreadyPlayBackMusic = true;
                            GroundOne.PlayDungeonMusic(Database.BGM14, Database.BGM14LoopBegin);
                        }
                        SetupPlayerStatus();
                        return true;
                    }
                }
            }

            this.DialogResult = DialogResult.Cancel;
            return false;
        }

        private void ShowActiveSkillSpell(MainCharacter player, string skillSpellName)
        {
            using (TruthSkillSpellDesc skillSpell = new TruthSkillSpellDesc())
            {
                skillSpell.StartPosition = FormStartPosition.CenterParent;
                skillSpell.SkillSpellName = skillSpellName;
                skillSpell.Player = player;
                skillSpell.ShowDialog();
            }
        }

        private int GetTileNumber(Point pos)
        {
            Point adjustPos = new Point(pos.X, pos.Y);
            int number = ((-viewPoint.X + adjustPos.X - 0) / Database.DUNGEON_MOVE_LEN) % Database.TRUTH_DUNGEON_COLUMN + ((-viewPoint.Y + adjustPos.Y - 0) / Database.DUNGEON_MOVE_LEN) * Database.TRUTH_DUNGEON_COLUMN;
            int row = number / Database.TRUTH_DUNGEON_COLUMN;
            int column = number % Database.TRUTH_DUNGEON_COLUMN;
            //label1.Text = "row: " + row.ToString() + "  column: " + column.ToString() + "  viewPoint.X: " + viewPoint.X.ToString() + "  viewPoint.Y: " + viewPoint.Y.ToString() + "  Player.Location.X: " + Player.Location.X.ToString() + "  Player.Location.Y: " + Player.Location.Y.ToString() + "  number: " + number.ToString();
            //label1.Update();
            return number;
        }

        private void UpdatePlayerLocationInfo(int x, int y)
        {
            UpdatePlayerLocationInfo(x, y, true);
        }
        private void UpdatePlayerLocationInfo(int x, int y, bool noSound)
        {
            we.DungeonPosX = x;
            we.DungeonPosY = y;
            this.Player.Visible = false;
            this.Player.Location = new Point(x, y);
            this.Player.Visible = true;
            if (!noSound)
            {
                //GroundOne.PlaySoundEffect("footstep.mp3");
            }
            dungeonField.Invalidate();
        }

        private void UpdateViewPoint(int x, int y)
        {
            we.dungeonViewPointX = x;
            we.dungeonViewPointY = y;
            this.viewPoint = new Point(x, y);
        }

        private void TruthDungeon_KeyUp(object sender, KeyEventArgs e)
        {
            this.keyDown = false;
            this.keyUp = false;
            this.keyRight = false;
            this.keyLeft = false;
            movementTimer.Enabled = false;
            movementTimer.Stop();
        }

        Image backgroundData = Image.FromFile(Database.BaseResourceFolder + "background.png");
        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            if (backgroundData != null)
            {
                e.Graphics.DrawImage(backgroundData, new Point(0, 0));
            }
        }

        Point viewPoint = new Point();
        int adjustDraw = 2;
        private void dungeonField_Paint(object sender, PaintEventArgs e)
        {
            Graphics g = e.Graphics;

            int BluePenWidth = 3;
            Pen BlueWallPen = new Pen(Brushes.Blue, BluePenWidth);
            Brush BlackPen = Brushes.Black;// new Brush(Brushes.White);
            // ４階、究極の２択を選択する直前の演出
            if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd && we.DungeonArea == 4 && GroundOne.WE2.SeekerEvent1 == false)
            {
                for (int ii = 0; ii < Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW; ii++)
                {
                    if ((ii == 22 * Database.TRUTH_DUNGEON_COLUMN + 46) ||
                        (ii == 23 * Database.TRUTH_DUNGEON_COLUMN + 46) ||
                        (ii == 24 * Database.TRUTH_DUNGEON_COLUMN + 46) ||
                        (ii == 25 * Database.TRUTH_DUNGEON_COLUMN + 46) ||
                        (ii == 26 * Database.TRUTH_DUNGEON_COLUMN + 46) ||
                        (ii == 27 * Database.TRUTH_DUNGEON_COLUMN + 46) ||
                        (ii == 28 * Database.TRUTH_DUNGEON_COLUMN + 46) ||
                        (ii == 29 * Database.TRUTH_DUNGEON_COLUMN + 46) ||
                        (ii == 30 * Database.TRUTH_DUNGEON_COLUMN + 46) ||
                        (ii == 31 * Database.TRUTH_DUNGEON_COLUMN + 46))
                    {
                        if (unknownTile[ii].Visible)
                        {
                            if (unknownTile[ii].Image != null)
                            {
                                g.DrawImage(unknownTile[ii].Image, (float)(viewPoint.X + unknownTile[ii].Location.X), (float)(viewPoint.Y + unknownTile[ii].Location.Y));
                            }
                        }
                    }
                    else
                    {
                        g.FillRectangle(BlackPen, (float)(viewPoint.X + unknownTile[ii].Location.X), (float)(viewPoint.Y + unknownTile[ii].Location.Y), Database.DUNGEON_MOVE_LEN, Database.DUNGEON_MOVE_LEN);
                    }
                }
                g.DrawImage(this.Player.BackgroundImage, this.Player.Location.X + 2, this.Player.Location.Y + 2);
                return;
            }
            if (GroundOne.WE2.StartSeeker && GroundOne.WE2.RealDungeonArea == 3 && GroundOne.WE2.SeekerEvent912 && !GroundOne.WE2.SeekerEvent913)
            {
                for (int ii = 0; ii < Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW; ii++)
                {
                    g.FillRectangle(BlackPen, (float)(viewPoint.X + unknownTile[ii].Location.X), (float)(viewPoint.Y + unknownTile[ii].Location.Y), Database.DUNGEON_MOVE_LEN, Database.DUNGEON_MOVE_LEN);
                }
                g.DrawImage(this.Player.BackgroundImage, this.Player.Location.X + 2, this.Player.Location.Y + 2);
                return;
            }
            if (GroundOne.WE2.StartSeeker && GroundOne.WE2.RealDungeonArea == 4 && GroundOne.WE2.SeekerEvent1013 && GroundOne.WE2.SeekerEvent1014 == false)
            {
                for (int ii = 0; ii < Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW; ii++)
                {
                    g.FillRectangle(Brushes.White, (float)(viewPoint.X + unknownTile[ii].Location.X), (float)(viewPoint.Y + unknownTile[ii].Location.Y), Database.DUNGEON_MOVE_LEN, Database.DUNGEON_MOVE_LEN);
                }
                g.DrawImage(this.Player.BackgroundImage, this.Player.Location.X + 2, this.Player.Location.Y + 2);
                return;
            }
            if (GroundOne.WE2.StartSeeker && GroundOne.WE2.RealDungeonArea == 5 && GroundOne.WE2.SeekerEvent1104)
            {
                for (int ii = 0; ii < Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW; ii++)
                {
                    g.FillRectangle(Brushes.White, (float)(viewPoint.X + unknownTile[ii].Location.X), (float)(viewPoint.Y + unknownTile[ii].Location.Y), Database.DUNGEON_MOVE_LEN, Database.DUNGEON_MOVE_LEN);
                }
                g.DrawImage(this.Player.BackgroundImage, this.Player.Location.X + 2, this.Player.Location.Y + 2);
                return;
            }
            for (int ii = 0; ii < Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW; ii++)
            {
                // ダンジョン壁を描画
                Bitmap current = (Bitmap)dungeonTile[ii].Image;
                //current.MakeTransparent(Color.FromArgb(255, 249, 189));
                g.DrawImage(current, (float)(viewPoint.X + dungeonTile[ii].Location.X), (float)(viewPoint.Y + dungeonTile[ii].Location.Y));

                // 立て札や宝箱などを描画
                if (treasureBoxTile[ii])
                {
                    if ((((we.TruthTreasure11 && (ii == 13 * Database.TRUTH_DUNGEON_COLUMN + 34)) ||
                          (we.TruthTreasure12 && (ii == 21 * Database.TRUTH_DUNGEON_COLUMN + 53)) ||
                          (we.TruthTreasure13 && (ii == 29 * Database.TRUTH_DUNGEON_COLUMN + 29)) ||
                          (we.TruthTreasure14 && (ii == 8 * Database.TRUTH_DUNGEON_COLUMN + 33)) ||
                          (we.TruthTreasure15 && (ii == 1 * Database.TRUTH_DUNGEON_COLUMN + 22)) ||
                          (we.TruthTreasure121 && (ii == 1 * Database.TRUTH_DUNGEON_COLUMN + 40)) ||
                          (we.TruthTreasure122 && (ii == 1 * Database.TRUTH_DUNGEON_COLUMN + 53)) ||
                          (we.TruthTreasure123 && (ii == 8 * Database.TRUTH_DUNGEON_COLUMN + 49)) ||
                          (we.TruthTreasure124 && (ii == 12 * Database.TRUTH_DUNGEON_COLUMN + 24)) ||
                          (we.TruthTreasure125 && (ii == 18 * Database.TRUTH_DUNGEON_COLUMN + 9)) ||
                          (we.TruthTreasure126 && (ii == 20 * Database.TRUTH_DUNGEON_COLUMN + 45)) ||
                          (we.TruthTreasure127 && (ii == 24 * Database.TRUTH_DUNGEON_COLUMN + 52)) ||
                          (we.TruthTreasure128 && (ii == 26 * Database.TRUTH_DUNGEON_COLUMN + 52)) ||
                          (we.TruthTreasure129 && (ii == 28 * Database.TRUTH_DUNGEON_COLUMN + 43)) ||
                          (we.TruthTreasure1210 && (ii == 35 * Database.TRUTH_DUNGEON_COLUMN + 26)) ||
                          (we.TruthTreasure1211 && (ii == 35 * Database.TRUTH_DUNGEON_COLUMN + 34)) ||
                          (we.TruthTreasure1212 && (ii == 38 * Database.TRUTH_DUNGEON_COLUMN + 48)) ||
                          (we.TruthTreasure131 && (ii == 9 * Database.TRUTH_DUNGEON_COLUMN + 7)) ||
                          (we.TruthTreasure132 && (ii == 18 * Database.TRUTH_DUNGEON_COLUMN + 1)) ||
                          (we.TruthTreasure133 && (ii == 22 * Database.TRUTH_DUNGEON_COLUMN + 8)) ||
                          (we.TruthTreasure134 && (ii == 36 * Database.TRUTH_DUNGEON_COLUMN + 12)) ||
                          (we.TruthTreasure141 && (ii == 8 * Database.TRUTH_DUNGEON_COLUMN + 19)) ||
                          (we.TruthTreasure142 && (ii == 16 * Database.TRUTH_DUNGEON_COLUMN + 8))) && we.DungeonArea == 1) ||
                        (((we.TruthTreasure21 && (ii == 16 * Database.TRUTH_DUNGEON_COLUMN + 59)) ||
                          (we.TruthTreasure22 && (ii == 12 * Database.TRUTH_DUNGEON_COLUMN + 35)) ||
                          (we.TruthTreasure23 && (ii == 5 * Database.TRUTH_DUNGEON_COLUMN + 55)) ||
                          (we.TruthTreasure24 && (ii == 25 * Database.TRUTH_DUNGEON_COLUMN + 59)) ||
                          (we.TruthTreasure25 && (ii == 27 * Database.TRUTH_DUNGEON_COLUMN + 46)) ||
                          (we.TruthTreasure26 && (ii == 27 * Database.TRUTH_DUNGEON_COLUMN + 34)) ||
                          (we.TruthTreasure27 && (ii == 34 * Database.TRUTH_DUNGEON_COLUMN + 34)) ||
                          (we.TruthTreasure28 && (ii == 34 * Database.TRUTH_DUNGEON_COLUMN + 46)) ||
                          (we.TruthTreasure29 && (ii == 34 * Database.TRUTH_DUNGEON_COLUMN + 58)) ||
                          (we.TruthTreasure210 && (ii == 39 * Database.TRUTH_DUNGEON_COLUMN + 31)) ||
                          (we.TruthTreasure211 && (ii == 15 * Database.TRUTH_DUNGEON_COLUMN + 13)) ||
                          (we.TruthTreasure212 && (ii == 6 * Database.TRUTH_DUNGEON_COLUMN + 29)) ||
                          (we.TruthTreasure213 && (ii == 39 * Database.TRUTH_DUNGEON_COLUMN + 23)) ||
                          (we.TruthTreasure214 && (ii == 31 * Database.TRUTH_DUNGEON_COLUMN + 22)) ||
                          (we.TruthTreasure215 && (ii == 19 * Database.TRUTH_DUNGEON_COLUMN + 22)) ||
                          (we.TruthTreasure216 && (ii == 19 * Database.TRUTH_DUNGEON_COLUMN + 4)) ||
                          (we.TruthTreasure217 && (ii == 28 * Database.TRUTH_DUNGEON_COLUMN + 6)) ||
                          (we.TruthTreasure218 && (ii == 39 * Database.TRUTH_DUNGEON_COLUMN + 10))) && we.DungeonArea == 2) ||
                        (((we.TruthTreasure301 && (ii == 0 * Database.TRUTH_DUNGEON_COLUMN + 3)) ||
                          (we.TruthTreasure302 && (ii == 39 * Database.TRUTH_DUNGEON_COLUMN + 3)) ||
                          (we.TruthTreasure303 && (ii == 4 * Database.TRUTH_DUNGEON_COLUMN + 19)) ||
                          (we.TruthTreasure304 && (ii == 24 * Database.TRUTH_DUNGEON_COLUMN + 19)) ||
                          (we.TruthTreasure305 && (ii == 9 * Database.TRUTH_DUNGEON_COLUMN + 1)) ||
                          (we.TruthTreasure306 && (ii == 24 * Database.TRUTH_DUNGEON_COLUMN + 2)) ||
                          (we.TruthTreasure307 && (ii == 33 * Database.TRUTH_DUNGEON_COLUMN + 47)) ||
                          (we.TruthTreasure308 && (ii == 7 * Database.TRUTH_DUNGEON_COLUMN + 20)) ||
                          (we.TruthTreasure309 && (ii == 17 * Database.TRUTH_DUNGEON_COLUMN + 45)) ||
                          (we.TruthTreasure310 && (ii == 38 * Database.TRUTH_DUNGEON_COLUMN + 31)) ||
                          (we.TruthTreasure311 && (ii == 27 * Database.TRUTH_DUNGEON_COLUMN + 48)) ||
                          (we.TruthTreasure312 && (ii == 34 * Database.TRUTH_DUNGEON_COLUMN + 40))) && we.DungeonArea == 3) ||
                        (((we.TruthTreasure401 && (ii == 15 * Database.TRUTH_DUNGEON_COLUMN + 43)) ||
                          (we.TruthTreasure402 && (ii == 12 * Database.TRUTH_DUNGEON_COLUMN + 42)) ||
                          (we.TruthTreasure403 && (ii == 0 * Database.TRUTH_DUNGEON_COLUMN + 44)) ||
                          (we.TruthTreasure404 && (ii == 7 * Database.TRUTH_DUNGEON_COLUMN + 29)) ||
                          (we.TruthTreasure405 && (ii == 12 * Database.TRUTH_DUNGEON_COLUMN + 29)) ||
                          (we.TruthTreasure406 && (ii == 3 * Database.TRUTH_DUNGEON_COLUMN + 46)) ||
                          (we.TruthTreasure407 && (ii == 10 * Database.TRUTH_DUNGEON_COLUMN + 59)) ||
                          (we.TruthTreasure408 && (ii == 9 * Database.TRUTH_DUNGEON_COLUMN + 52)) ||
                          (we.dungeonEvent4_key1_1 && (ii == 16 * Database.TRUTH_DUNGEON_COLUMN + 46)) ||
                          (we.dungeonEvent4_key1_2 && (ii == 11 * Database.TRUTH_DUNGEON_COLUMN + 47)) ||
                          (we.dungeonEvent4_key1_3 && (ii == 8 * Database.TRUTH_DUNGEON_COLUMN + 37)) ||
                          (we.dungeonEvent4_key1_4 && (ii == 4 * Database.TRUTH_DUNGEON_COLUMN + 32)) ||
                          (we.dungeonEvent4_key1_5 && (ii == 10 * Database.TRUTH_DUNGEON_COLUMN + 30)) ||
                          (we.dungeonEvent4_key1_6 && (ii == 13 * Database.TRUTH_DUNGEON_COLUMN + 40)) ||
                          (we.dungeonEvent4_key1_7 && (ii == 1 * Database.TRUTH_DUNGEON_COLUMN + 51)) ||
                          (we.dungeonEvent4_key1_8 && (ii == 4 * Database.TRUTH_DUNGEON_COLUMN + 56)) ||
                          (we.dungeonEvent4_key1_9 && (ii == 16 * Database.TRUTH_DUNGEON_COLUMN + 54)) ||
                          (we.TruthTreasure409 && (ii == 7 * Database.TRUTH_DUNGEON_COLUMN + 0)) ||
                          (we.TruthTreasure410 && (ii == 9 * Database.TRUTH_DUNGEON_COLUMN + 3)) ||
                          (we.TruthTreasure411 && (ii == 11 * Database.TRUTH_DUNGEON_COLUMN + 1)) ||
                          (we.TruthTreasure412 && (ii == 12 * Database.TRUTH_DUNGEON_COLUMN + 5)) ||
                          (we.TruthTreasure413 && (ii == 13 * Database.TRUTH_DUNGEON_COLUMN + 8)) ||
                          (we.TruthTreasure414 && (ii == 15 * Database.TRUTH_DUNGEON_COLUMN + 7)) ||
                          (we.TruthTreasure415 && (ii == 20 * Database.TRUTH_DUNGEON_COLUMN + 4)) ||
                          (we.TruthTreasure416 && (ii == 21 * Database.TRUTH_DUNGEON_COLUMN + 13)) ||
                          (we.TruthTreasure417 && (ii == 24 * Database.TRUTH_DUNGEON_COLUMN + 2)) ||
                          (we.TruthTreasure418 && (ii == 23 * Database.TRUTH_DUNGEON_COLUMN + 3)) ||
                          (we.TruthTreasure419 && (ii == 23 * Database.TRUTH_DUNGEON_COLUMN + 7)) ||
                          (we.TruthTreasure420 && (ii == 24 * Database.TRUTH_DUNGEON_COLUMN + 10)) ||
                          (we.TruthTreasure421 && (ii == 23 * Database.TRUTH_DUNGEON_COLUMN + 13)) ||
                          (we.TruthTreasure422 && (ii == 20 * Database.TRUTH_DUNGEON_COLUMN + 14)) ||
                          (we.dungeonEvent4_key2_1 && (ii == 6 * Database.TRUTH_DUNGEON_COLUMN + 1)) ||
                          (we.dungeonEvent4_key2_2 && (ii == 10 * Database.TRUTH_DUNGEON_COLUMN + 10)) ||
                          (we.dungeonEvent4_key2_3 && (ii == 15 * Database.TRUTH_DUNGEON_COLUMN + 1)) ||
                          (we.dungeonEvent4_key2_4 && (ii == 18 * Database.TRUTH_DUNGEON_COLUMN + 8)) ||
                          (we.dungeonEvent4_key2_5 && (ii == 23 * Database.TRUTH_DUNGEON_COLUMN + 18)) ||
                          (we.dungeonEvent4_key22_1 && (ii == 0 * Database.TRUTH_DUNGEON_COLUMN + 0)) ||
                          (we.dungeonEvent4_key22_2 && (ii == 7 * Database.TRUTH_DUNGEON_COLUMN + 13)) ||
                          (we.dungeonEvent4_key22_3 && (ii == 0 * Database.TRUTH_DUNGEON_COLUMN + 18)) ||
                          (we.dungeonEvent4_key22_4 && (ii == 7 * Database.TRUTH_DUNGEON_COLUMN + 28)) ||
                          (we.dungeonEvent4_key22_5 && (ii == 13 * Database.TRUTH_DUNGEON_COLUMN + 22)) ||
                          (we.dungeonEvent4_key23_1 && (ii == 9 * Database.TRUTH_DUNGEON_COLUMN + 13)) ||
                          (we.dungeonEvent4_key23_2 && (ii == 9 * Database.TRUTH_DUNGEON_COLUMN + 18)) ||
                          (we.dungeonEvent4_key23_3 && (ii == 14 * Database.TRUTH_DUNGEON_COLUMN + 22)) ||
                          (we.dungeonEvent4_key23_4 && (ii == 17 * Database.TRUTH_DUNGEON_COLUMN + 23)) ||
                          (we.dungeonEvent4_key23_5 && (ii == 15 * Database.TRUTH_DUNGEON_COLUMN + 27)) ||
                          (we.TruthTreasure423 && (ii == 6 * Database.TRUTH_DUNGEON_COLUMN + 8)) ||
                          (we.TruthTreasure424 && (ii == 3 * Database.TRUTH_DUNGEON_COLUMN + 10)) ||
                          (we.TruthTreasure425 && (ii == 0 * Database.TRUTH_DUNGEON_COLUMN + 5)) ||
                          (we.TruthTreasure426 && (ii == 0 * Database.TRUTH_DUNGEON_COLUMN + 12)) ||
                          (we.TruthTreasure427 && (ii == 0 * Database.TRUTH_DUNGEON_COLUMN + 27)) ||
                          (we.TruthTreasure428 && (ii == 2 * Database.TRUTH_DUNGEON_COLUMN + 27)) ||
                          (we.TruthTreasure429 && (ii == 11 * Database.TRUTH_DUNGEON_COLUMN + 27)) ||
                          (we.TruthTreasure430 && (ii == 13 * Database.TRUTH_DUNGEON_COLUMN + 25)) ||
                          (we.TruthTreasure431 && (ii == 4 * Database.TRUTH_DUNGEON_COLUMN + 18)) ||
                          (we.TruthTreasure432 && (ii == 2 * Database.TRUTH_DUNGEON_COLUMN + 23)) ||
                          (we.TruthTreasure433 && (ii == 6 * Database.TRUTH_DUNGEON_COLUMN + 24)) ||
                          (we.TruthTreasure434 && (ii == 6 * Database.TRUTH_DUNGEON_COLUMN + 18)) ||
                          (we.TruthTreasure435 && (ii == 9 * Database.TRUTH_DUNGEON_COLUMN + 15)) ||
                          (we.TruthTreasure436 && (ii == 10 * Database.TRUTH_DUNGEON_COLUMN + 17)) ||
                          (we.TruthTreasure437 && (ii == 10 * Database.TRUTH_DUNGEON_COLUMN + 21)) ||
                          (we.TruthTreasure438 && (ii == 14 * Database.TRUTH_DUNGEON_COLUMN + 17)) ||
                          (we.TruthTreasure439 && (ii == 12 * Database.TRUTH_DUNGEON_COLUMN + 20)) ||
                          (we.TruthTreasure440 && (ii == 14 * Database.TRUTH_DUNGEON_COLUMN + 20)) ||
                          (we.TruthTreasure441 && (ii == 15 * Database.TRUTH_DUNGEON_COLUMN + 23)) ||
                          (we.TruthTreasure442 && (ii == 17 * Database.TRUTH_DUNGEON_COLUMN + 27)) ||
                          (we.TruthTreasure443 && (ii == 29 * Database.TRUTH_DUNGEON_COLUMN + 7)) ||
                          (we.TruthTreasure444 && (ii == 35 * Database.TRUTH_DUNGEON_COLUMN + 10)) ||
                          (we.TruthTreasure445 && (ii == 33 * Database.TRUTH_DUNGEON_COLUMN + 14)) ||
                          (we.TruthTreasure446 && (ii == 36 * Database.TRUTH_DUNGEON_COLUMN + 3)) ||
                          (we.TruthTreasure447 && (ii == 34 * Database.TRUTH_DUNGEON_COLUMN + 5)) ||
                          (we.TruthTreasure448 && (ii == 39 * Database.TRUTH_DUNGEON_COLUMN + 10)) ||
                          (we.TruthTreasure449 && (ii == 36 * Database.TRUTH_DUNGEON_COLUMN + 12)) ||
                          (we.TruthTreasure450 && (ii == 39 * Database.TRUTH_DUNGEON_COLUMN + 14)) ||
                          (we.dungeonEvent4_key41_1 && (ii == 35 * Database.TRUTH_DUNGEON_COLUMN + 40)) ||
                          (we.dungeonEvent4_key41_2 && (ii == 36 * Database.TRUTH_DUNGEON_COLUMN + 33)) ||
                          (we.dungeonEvent4_key41_3 && (ii == 37 * Database.TRUTH_DUNGEON_COLUMN + 31)) ||
                          (we.dungeonEvent4_key41_4 && (ii == 37 * Database.TRUTH_DUNGEON_COLUMN + 39)) ||
                          (we.dungeonEvent4_key41_5 && (ii == 37 * Database.TRUTH_DUNGEON_COLUMN + 35)) ||
                          (we.TruthTreasure451 && (ii == 36 * Database.TRUTH_DUNGEON_COLUMN + 37)) ||
                          (we.TruthTreasure452 && (ii == 36 * Database.TRUTH_DUNGEON_COLUMN + 29)) ||
                          (we.TruthTreasure453 && (ii == 39 * Database.TRUTH_DUNGEON_COLUMN + 39)) ||
                          (we.TruthTreasure454 && (ii == 39 * Database.TRUTH_DUNGEON_COLUMN + 41)) ||
                          (we.dungeonEvent4_key42_1 && (ii == 31 * Database.TRUTH_DUNGEON_COLUMN + 50)) ||
                          (we.dungeonEvent4_key42_2 && (ii == 33 * Database.TRUTH_DUNGEON_COLUMN + 53)) ||
                          (we.dungeonEvent4_key42_3 && (ii == 34 * Database.TRUTH_DUNGEON_COLUMN + 58)) ||
                          (we.dungeonEvent4_key42_4 && (ii == 30 * Database.TRUTH_DUNGEON_COLUMN + 56)) ||
                          (we.dungeonEvent4_key42_5 && (ii == 31 * Database.TRUTH_DUNGEON_COLUMN + 58)) ||
                          (we.dungeonEvent4_key42_6 && (ii == 27 * Database.TRUTH_DUNGEON_COLUMN + 55)) ||
                          (we.dungeonEvent4_key42_7 && (ii == 24 * Database.TRUTH_DUNGEON_COLUMN + 55)) ||
                          (we.dungeonEvent4_key42_8 && (ii == 24 * Database.TRUTH_DUNGEON_COLUMN + 58)) ||
                          (we.TruthTreasure455 && (ii == 32 * Database.TRUTH_DUNGEON_COLUMN + 55)) ||
                          (we.TruthTreasure456 && (ii == 31 * Database.TRUTH_DUNGEON_COLUMN + 56)) ||
                          (we.TruthTreasure457 && (ii == 28 * Database.TRUTH_DUNGEON_COLUMN + 59)) ||
                          (we.TruthTreasure458 && (ii == 22 * Database.TRUTH_DUNGEON_COLUMN + 59)) ||
                          (we.TruthTreasure459 && (ii == 21 * Database.TRUTH_DUNGEON_COLUMN + 50)))&& we.DungeonArea == 4) ||
                        (((GroundOne.WE2.SeekerEvent1002 && (ii == 25 * Database.TRUTH_DUNGEON_COLUMN + 27)) ||
                          (GroundOne.WE2.SeekerEvent1003 && (ii == 24 * Database.TRUTH_DUNGEON_COLUMN + 27)) ||
                          (GroundOne.WE2.SeekerEvent1004 && (ii == 31 * Database.TRUTH_DUNGEON_COLUMN + 26)) ||
                          (GroundOne.WE2.SeekerEvent1005 && (ii == 30 * Database.TRUTH_DUNGEON_COLUMN + 43)) ||
                          (GroundOne.WE2.SeekerEvent1006 && (ii == 32 * Database.TRUTH_DUNGEON_COLUMN + 27)) ||
                          (GroundOne.WE2.SeekerEvent1007 && (ii == 28 * Database.TRUTH_DUNGEON_COLUMN + 44)) ||
                          (GroundOne.WE2.SeekerEvent1008 && (ii == 27 * Database.TRUTH_DUNGEON_COLUMN + 31)) ||
                          (GroundOne.WE2.SeekerEvent1009 && (ii == 28 * Database.TRUTH_DUNGEON_COLUMN + 38))) && we.DungeonArea == 4)
                        )
                    {
                        g.DrawImage(treasureOpenImage, (float)(viewPoint.X + dungeonTile[ii].Location.X + adjustDraw), (float)(viewPoint.Y + dungeonTile[ii].Location.Y + adjustDraw));
                    }
                    else
                    {
                        g.DrawImage(treasureImage, (float)(viewPoint.X + dungeonTile[ii].Location.X + adjustDraw), (float)(viewPoint.Y + dungeonTile[ii].Location.Y + adjustDraw));
                    }
                }
                if (boardTile[ii])
                {
                    g.DrawImage(boardImage, (float)(viewPoint.X + dungeonTile[ii].Location.X + adjustDraw), (float)(viewPoint.Y + dungeonTile[ii].Location.Y + adjustDraw));
                }
                if (upstairTile[ii])
                {
                    g.DrawImage(upstairImage, (float)(viewPoint.X + dungeonTile[ii].Location.X + adjustDraw), (float)(viewPoint.Y + dungeonTile[ii].Location.Y + adjustDraw));
                }
                if (downstairTile[ii])
                {
                    g.DrawImage(downstairImage, (float)(viewPoint.X + dungeonTile[ii].Location.X + adjustDraw), (float)(viewPoint.Y + dungeonTile[ii].Location.Y + adjustDraw));
                }
                if (mirrorTile[ii])
                {
                    g.DrawImage(this.mirrorImage, (float)(viewPoint.X + dungeonTile[ii].Location.X + adjustDraw), (float)(viewPoint.Y + dungeonTile[ii].Location.Y + adjustDraw));
                }
                if (blueOrbTile[ii])
                {
                    g.DrawImage(this.blueOrbImage, (float)(viewPoint.X + dungeonTile[ii].Location.X + adjustDraw), (float)(viewPoint.Y + dungeonTile[ii].Location.Y + adjustDraw));
                }
                if (fountainTile[ii])
                {
                    g.DrawImage(this.fountainImage, (float)(viewPoint.X + dungeonTile[ii].Location.X + adjustDraw), (float)(viewPoint.Y + dungeonTile[ii].Location.Y + adjustDraw));
                }

                // 条件付を示す青壁を描画
                if (blueWallTop[ii])
                {
                    g.DrawLine(BlueWallPen, new Point(viewPoint.X + dungeonTile[ii].Location.X, viewPoint.Y + dungeonTile[ii].Location.Y + 1),
                                            new Point(viewPoint.X + dungeonTile[ii].Location.X + Database.DUNGEON_MOVE_LEN, viewPoint.Y + dungeonTile[ii].Location.Y + 1));
                }
                if (blueWallLeft[ii])
                {
                    g.DrawLine(BlueWallPen, new Point(viewPoint.X + dungeonTile[ii].Location.X + 1, viewPoint.Y + dungeonTile[ii].Location.Y + 1),
                                            new Point(viewPoint.X + dungeonTile[ii].Location.X + 1, viewPoint.Y + dungeonTile[ii].Location.Y + Database.DUNGEON_MOVE_LEN - 1));
                }
                if (blueWallRight[ii])
                {
                    g.DrawLine(BlueWallPen, new Point(viewPoint.X + dungeonTile[ii].Location.X + Database.DUNGEON_MOVE_LEN - BluePenWidth + 1, viewPoint.Y + dungeonTile[ii].Location.Y),
                                            new Point(viewPoint.X + dungeonTile[ii].Location.X + Database.DUNGEON_MOVE_LEN - BluePenWidth + 1, viewPoint.Y + dungeonTile[ii].Location.Y + Database.DUNGEON_MOVE_LEN));
                }
                if (blueWallBottom[ii])
                {
                    g.DrawLine(BlueWallPen, new Point(viewPoint.X + dungeonTile[ii].Location.X, viewPoint.Y + dungeonTile[ii].Location.Y + Database.DUNGEON_MOVE_LEN - BluePenWidth + 1),
                                            new Point(viewPoint.X + dungeonTile[ii].Location.X + Database.DUNGEON_MOVE_LEN, viewPoint.Y + dungeonTile[ii].Location.Y + Database.DUNGEON_MOVE_LEN - BluePenWidth + 1));
                }

                if (unknownTile[ii].Visible)
                {
                    if (unknownTile[ii].Image != null)
                    {
                        g.DrawImage(unknownTile[ii].Image, (float)(viewPoint.X + unknownTile[ii].Location.X), (float)(viewPoint.Y + unknownTile[ii].Location.Y));
                    }
                }
            }

            g.DrawImage(this.Player.BackgroundImage, this.Player.Location.X + 2, this.Player.Location.Y + 2);
        }


        private bool CheckBlueWall(int direction) // 0:↑ 1:← 2:→ 3:↓
        {
            // プレイヤーの位置に対応している青壁情報を取得する。
            // 青壁情報を取得して、プレイヤー動作方向に対して青壁情報が一致する場合
            if (blueWallBottom[GetTileNumber(Player.Location)])
            {
                if (direction == 3)
                {
                    UpdateMainMessage("アイン：開かねぇ・・・", true);
                    GroundOne.PlaySoundEffect("WallHit.mp3");
                    CancelKeyDownMovement();
                    return true;
                }
            }

            if (blueWallLeft[GetTileNumber(Player.Location)])
            {
                if (direction == 1)
                {
                    UpdateMainMessage("アイン：開かねぇ・・・", true);
                    GroundOne.PlaySoundEffect("WallHit.mp3");
                    CancelKeyDownMovement();
                    return true;
                }
            }

            if (blueWallRight[GetTileNumber(Player.Location)])
            {
                if (direction == 2)
                {
                    UpdateMainMessage("アイン：開かねぇ・・・", true);
                    GroundOne.PlaySoundEffect("WallHit.mp3");
                    CancelKeyDownMovement();
                    return true;
                }
            }

            if (blueWallTop[GetTileNumber(Player.Location)])
            {
                if (direction == 0)
                {
                    UpdateMainMessage("アイン：開かねぇ・・・", true);
                    GroundOne.PlaySoundEffect("WallHit.mp3");
                    CancelKeyDownMovement();
                    return true;
                }
            }

            UpdateMainMessage("", true, true);
            return false;
        }

        private bool CheckWall(int direction) // 0:↑ 1:← 2:→ 3:↓
        {
            int tilenum = GetTileNumber(Player.Location);
            int row = tilenum / Database.TRUTH_DUNGEON_COLUMN;
            int column = tilenum % Database.TRUTH_DUNGEON_COLUMN;

            string[] targetTileInfo = null;
            if (we.DungeonArea == 1)
            {
                targetTileInfo = tileInfo;
            }
            else if (we.DungeonArea == 2)
            {
                targetTileInfo = tileInfo2;
            }
            else if (we.DungeonArea == 3)
            {
                targetTileInfo = tileInfo3;
            }
            else if (we.DungeonArea == 4)
            {
                targetTileInfo = tileInfo4;
            }
            else if (we.DungeonArea == 5)
            {
                targetTileInfo = tileInfo5;
            }

            // プレイヤーの位置に対応しているタイル情報を取得する。
            // タイル情報にある壁情報を取得して
            // 壁情報とプレイヤー動作方向に対して壁情報が一致する場合
            string WallHitMessage = "アイン：いてぇ！";
            if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd) { WallHitMessage = "アイン：・・・"; }
            switch (targetTileInfo[GetTileNumber(Player.Location)])
            {
                case "Tile1.bmp":
                    break;
                case "Tile1-WallT.bmp":
                    if (direction == 0)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Tile1-WallL.bmp":
                    if (direction == 1)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Tile1-WallR.bmp":
                    if (direction == 2)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Tile1-WallB.bmp":
                    if (direction == 3)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Tile1-WallLR-DummyL.bmp":
                    if (direction == 2)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Tile1-WallRB-DummyB.bmp":
                    if (direction == 2)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Tile1-WallTL.bmp":
                    if (direction == 0 || direction == 1)
                    {
                        // ４階、36、34、上方向を無視
                        if (we.DungeonArea == 4 && row == 36 && column == 34 && direction == 0)
                        {
                            break;
                        }
                        // ４階、38、31、上方向を無視
                        else if (we.DungeonArea == 4 && row == 38 && column == 31 && direction == 0)
                        {
                            break;
                        }
                        else
                        {
                            UpdateMainMessage(WallHitMessage, true);
                            GroundOne.PlaySoundEffect("WallHit.mp3");
                            CancelKeyDownMovement();
                            return true;
                        }
                    }
                    break;
                case "Tile1-WallTR.bmp":
                    if (direction == 0 || direction == 2)
                    {
                        // ４階、35、29、右方向を無視
                        if (we.DungeonArea == 4 && row == 35 && column == 29 && direction == 2)
                        {
                            break;
                        }
                        else
                        {
                            UpdateMainMessage(WallHitMessage, true);
                            GroundOne.PlaySoundEffect("WallHit.mp3");
                            CancelKeyDownMovement();
                            return true;
                        }
                    }
                    break;
                case "Tile1-WallTB.bmp":
                    if (direction == 0 || direction == 3)
                    {
                        // ４階、39、40、上方向を無視
                        if (we.DungeonArea == 4 && row == 39 && column == 40 && direction == 0)
                        {
                            break;
                        }
                        // ４階、28、55、下方向を無視
                        else if (we.DungeonArea == 4 && row == 28 && column == 55 && direction == 3)
                        {
                            break;
                        }
                        else
                        {
                            UpdateMainMessage(WallHitMessage, true);
                            GroundOne.PlaySoundEffect("WallHit.mp3");
                            CancelKeyDownMovement();
                            return true;
                        }
                    }
                    break;
                case "Tile1-WallLR.bmp":
                    if (direction == 1 || direction == 2)
                    {
                        // ４階、31、52、左方向を無視
                        if (we.DungeonArea == 4 && row == 31 && column == 52 && direction == 1)
                        {
                            break;
                        }
                        // ４階、36、59、左方向を無視
                        else if (we.DungeonArea == 4 && row == 36 && column == 59 && direction == 1)
                        {
                            break;
                        }
                        // ４階、29、59、左方向を無視
                        else if (we.DungeonArea == 4 && row == 29 && column == 59 && direction == 1)
                        {
                            break;
                        }
                        // ４階、23、59、左方向を無視
                        else if (we.DungeonArea == 4 && row == 23 && column == 59 && direction == 1)
                        {
                            break;
                        }
                        else
                        {
                            UpdateMainMessage(WallHitMessage, true);
                            GroundOne.PlaySoundEffect("WallHit.mp3");
                            CancelKeyDownMovement();
                            return true;
                        }
                    }
                    break;
                case "Tile1-WallLB.bmp":
                    if (direction == 1 || direction == 3)
                    {
                        // ４階、39、40、左方向を無視
                        if (we.DungeonArea == 4 && row == 38 && column == 39 && direction == 1)
                        {
                            break;
                        }
                        // ４階、34、55、左方向を無視
                        else if (we.DungeonArea == 4 && row == 34 && column == 55 && direction == 1)
                        {
                            break;
                        }
                        // ４階、25、54、左方向を無視
                        else if (we.DungeonArea == 4 && row == 25 && column == 54 && direction == 1)
                        {
                            break;
                        }
                        // ４階、25、57、左方向を無視
                        else if (we.DungeonArea == 4 && row == 25 && column == 57 && direction == 1)
                        {
                            break;
                        }
                        else
                        {
                            UpdateMainMessage(WallHitMessage, true);
                            GroundOne.PlaySoundEffect("WallHit.mp3");
                            CancelKeyDownMovement();
                            return true;
                        }
                    }
                    break;
                case "Tile1-WallRB.bmp":
                    if (direction == 2 || direction == 3)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Tile1-WallTLR.bmp":
                    if (direction == 0 || direction == 1 || direction == 2)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Tile1-WallTLB.bmp":
                    if (direction == 0 || direction == 1 || direction == 3)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Tile1-WallTRB.bmp":
                    if (direction == 0 || direction == 2 || direction == 3)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Tile1-WallLRB.bmp":
                    if (direction == 1 || direction == 2 || direction == 3)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Tile1-WallTLRB.bmp":
                    if (direction == 0 || direction == 1 || direction == 2 || direction == 3)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Upstair-WallLRB.bmp":
                    if (direction == 1 || direction == 2 || direction == 3)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Upstair-WallRB.bmp":
                    if (direction == 2 || direction == 3)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Upstair-WallTLR.bmp":
                    if (direction == 0 || direction == 1 || direction == 2)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Downstair-WallTRB.bmp":
                    if (direction == 0 || direction == 2 || direction == 3)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Downstair-WallT.bmp":
                    if (direction == 0)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Downstair-WallLRB.bmp":
                    if (direction == 1 || direction == 2 || direction == 3)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
                case "Downstair-WallTLB.bmp":
                    if (direction == 0 || direction == 1 || direction == 3)
                    {
                        UpdateMainMessage(WallHitMessage, true);
                        GroundOne.PlaySoundEffect("WallHit.mp3");
                        CancelKeyDownMovement();
                        return true;
                    }
                    break;
            }
            UpdateMainMessage("", true, true);
            return false;
        }

        private void UpdateMainMessageWithBlack(string message)
        {
            UpdateMainMessage(message, false, false, true);
        }

        private void UpdateMainMessage(string message)
        {
            UpdateMainMessage(message, false);
        }
        private void UpdateMainMessage(string message, bool ignoreOk)
        {
            UpdateMainMessage(message, ignoreOk, false, false);
        }
        private void UpdateMainMessage(string message, bool ignoreOk, bool IgnoreCancelMove)
        {
            UpdateMainMessage(message, ignoreOk, IgnoreCancelMove, false);
        }
        private void UpdateMainMessage(string message, bool ignoreOk, bool IgnoreCancelMove, bool blackImage)
        {
            if (IgnoreCancelMove == false)
            {
                CancelKeyDownMovement();
            }

            mainMessage.Text = message;
            mainMessage.Update();

            if (!ignoreOk)
            {
                using (OKRequest ok = new OKRequest())
                {
                    ok.StartPosition = FormStartPosition.Manual;
                    ok.LayoutType = 1;
                    ok.BlackImage = blackImage;
                    ok.Location = new Point(this.Location.X + 647, this.Location.Y + 703);
                    ok.ShowDialog();
                }
            }
        }

        private void SetupDungeonMapping(int area)
        {
            we.DungeonArea = area;
            this.dungeonAreaLabel.Text = we.DungeonArea.ToString() + "　階";
            this.dayLabel.Text = we.GameDay.ToString() + "日目";
            string[] targetTileInfo = null;
            bool[] targetKnownTileInfo = null;

            switch (area)
            {
                case 1:
                    targetTileInfo = tileInfo;
                    targetKnownTileInfo = knownTileInfo;
                    ReadDungeonTileFromXmlFile(@"DungeonMapping_T_1.xml");
                    this.Player.BackgroundImage = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + "Player.bmp");
                    break;
                case 2:
                    targetTileInfo = tileInfo2;
                    targetKnownTileInfo = knownTileInfo2;
                    if (!we.TruthCompleteArea1)
                    {
                        we.TruthCompleteArea1 = true;
                        we.TruthCompleteArea1Day = we.GameDay;
                    }
                    ReadDungeonTileFromXmlFile(@"DungeonMapping_T_2.xml");
                    this.Player.BackgroundImage = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + "Player.bmp");
                    break;
                case 3:
                    targetTileInfo = tileInfo3;
                    targetKnownTileInfo = knownTileInfo3;
                    if (!we.TruthCompleteArea2)
                    {
                        we.TruthCompleteArea2 = true;
                        we.TruthCompleteArea2Day = we.GameDay;
                    }
                    ReadDungeonTileFromXmlFile(@"DungeonMapping_T_3.xml");
                    this.Player.BackgroundImage = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + "Player.bmp");
                    break;
                case 4:
                    targetTileInfo = tileInfo4;
                    targetKnownTileInfo = knownTileInfo4;
                    if (!we.TruthCompleteArea3)
                    {
                        we.TruthCompleteArea3 = true;
                        we.TruthCompleteArea3Day = we.GameDay;
                    }
                    ReadDungeonTileFromXmlFile(@"DungeonMapping_T_4.xml");
                    this.Player.BackgroundImage = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + "Player.bmp");
                    break;
                case 5:
                    targetTileInfo = tileInfo5;
                    targetKnownTileInfo = knownTileInfo5;
                    if (!we.TruthCompleteArea4)
                    {
                        we.TruthCompleteArea4 = true;
                        we.TruthCompleteArea4Day = we.GameDay;
                    }
                    ReadDungeonTileFromXmlFile(@"DungeonMapping_T_5.xml");
                    this.Player.BackgroundImage = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + "Player.bmp");
                    break;
                default:
                    break;
            }
            this.treasureImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TREASURE_BOX);
            this.treasureOpenImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TREASURE_BOX_OPEN);
            this.boardImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.BOARD);
            this.upstairImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.UPSTAIR);
            this.downstairImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.DOWNSTAIR);
            if (we.DungeonArea == 3)
            {
                this.mirrorImage = new Bitmap(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.MIRROR);
            }

            // 高速読み取りのため、データファイル読み出しは１回だけで出来るようにしておく。
            Image bmp1 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_1);
            Image bmp2 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_2);
            Image bmp3 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_3);
            Image bmp4 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_4);
            Image bmp5 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_5);
            Image bmp6 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_6);
            Image bmp7 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_7);
            Image bmp8 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_8);
            Image bmp9 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_9);
            Image bmp10 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_10);
            Image bmp11 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_11);
            Image bmp12 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_12);
            Image bmp13 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
            Image bmp14 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_14);
            Image bmp15 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_15);
            Image bmp16 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_16);
            Image bmp17 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_17);
            Image bmp18 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_18);
            Image bmp19 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_19);
            Image bmp20 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_20);
            Image bmp21 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_21);
            Image bmp22 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_22);
            Image bmp23 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_23);
            Image bmp24 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_24);
            Image bmp25 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_25);
            Image bmp26 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_26);
            Image bmp27 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_27);
            Image bmp28 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_28);
            Image bmp29 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_29);
            Image bmp30 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_30);
            Image bmp31 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_31);

            Image bmpUnknown_2 = null;

            Image bmp32 = null;
            Image bmp33 = null;
            Image bmp34 = null;
            Image bmp35 = null;
            Image bmp36 = null;
            Image bmp37 = null;
            Image bmp38 = null;
            Image bmp39 = null;

            Image bmp42 = null;
            Image bmp43 = null;

            Image bmp44 = null;

            // １階
            if (we.DungeonArea == 1)
            {
                // 真実部屋のチェックタイル
                bmpUnknown_2 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_10_2);
            }
            if (we.DungeonArea == 2)
            {
                // ２階数字タイル
                bmp32 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_32);
                bmp33 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_33);
                bmp34 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_34);
                bmp35 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_35);
                bmp36 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_36);
                bmp37 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_37);
                bmp38 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_38);
                bmp39 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_39);
                // ２階技の部屋、ダミー壁
                bmp42 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_42);
            }
            if (we.DungeonArea == 3)
            {
                bmp43 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_43);
            }
            if (we.DungeonArea == 5)
            {
                bmp44 = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_44);
            }

            Image bmpUnknown = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_10);

            for (int ii = 0; ii < Database.TRUTH_DUNGEON_COLUMN * Database.TRUTH_DUNGEON_ROW; ii++)
            {
                switch (targetTileInfo[ii])
                {
                    case Database.TILEINFO_1:
                        dungeonTile[ii].Image = bmp1;
                        break;
                    case Database.TILEINFO_2:
                        dungeonTile[ii].Image = bmp2;
                        break;
                    case Database.TILEINFO_3:
                        dungeonTile[ii].Image = bmp3;
                        break;
                    case Database.TILEINFO_4:
                        dungeonTile[ii].Image = bmp4;
                        break;
                    case Database.TILEINFO_5:
                        dungeonTile[ii].Image = bmp5;
                        break;
                    case Database.TILEINFO_6:
                        dungeonTile[ii].Image = bmp6;
                        break;
                    case Database.TILEINFO_7:
                        dungeonTile[ii].Image = bmp7;
                        break;
                    case Database.TILEINFO_8:
                        dungeonTile[ii].Image = bmp8;
                        break;
                    case Database.TILEINFO_9:
                        dungeonTile[ii].Image = bmp9;
                        break;
                    case Database.TILEINFO_10:
                        dungeonTile[ii].Image = bmp10;
                        break;
                    case Database.TILEINFO_11:
                        dungeonTile[ii].Image = bmp11;
                        break;
                    case Database.TILEINFO_12:
                        dungeonTile[ii].Image = bmp12;
                        break;
                    case Database.TILEINFO_13:
                        dungeonTile[ii].Image = bmp13;
                        break;
                    case Database.TILEINFO_14:
                        dungeonTile[ii].Image = bmp14;
                        break;
                    case Database.TILEINFO_15:
                        dungeonTile[ii].Image = bmp15;
                        break;
                    case Database.TILEINFO_16:
                        dungeonTile[ii].Image = bmp16;
                        break;
                    case Database.TILEINFO_17:
                        dungeonTile[ii].Image = bmp17;
                        break;
                    case Database.TILEINFO_18:
                        dungeonTile[ii].Image = bmp18;
                        break;
                    case Database.TILEINFO_19:
                        dungeonTile[ii].Image = bmp19;
                        break;
                    case Database.TILEINFO_20:
                        dungeonTile[ii].Image = bmp20;
                        break;
                    case Database.TILEINFO_21:
                        dungeonTile[ii].Image = bmp21;
                        break;
                    case Database.TILEINFO_22:
                        dungeonTile[ii].Image = bmp22;
                        break;
                    case Database.TILEINFO_23:
                        dungeonTile[ii].Image = bmp23;
                        break;
                    case Database.TILEINFO_24:
                        dungeonTile[ii].Image = bmp24;
                        break;
                    case Database.TILEINFO_25:
                        dungeonTile[ii].Image = bmp25;
                        break;
                    case Database.TILEINFO_26:
                        dungeonTile[ii].Image = bmp26;
                        break;
                    case Database.TILEINFO_27:
                        dungeonTile[ii].Image = bmp27;
                        break;
                    case Database.TILEINFO_28:
                        dungeonTile[ii].Image = bmp28;
                        break;
                    case Database.TILEINFO_29:
                        dungeonTile[ii].Image = bmp29;
                        break;
                    case Database.TILEINFO_30:
                        dungeonTile[ii].Image = bmp30;
                        break;
                    case Database.TILEINFO_31:
                        dungeonTile[ii].Image = bmp31;
                        break;
                }

                // １階真実解
                if ((we.DungeonArea == 1) && we.dungeonEvent27 && !we.TruthSpecialInfo1 && (ii == 29 * Database.TRUTH_DUNGEON_COLUMN + 47))
                {
                    unknownTile[ii].Image = bmpUnknown_2;
                }
                else
                {
                    unknownTile[ii].Image = bmpUnknown;
                }

                // ２階数字タイル
                if (we.DungeonArea == 2)
                {
                    if (ii == 11 * Database.TRUTH_DUNGEON_COLUMN + 42)
                    {
                        dungeonTile[ii].Image = bmp32;
                    }
                    if (ii == 13 * Database.TRUTH_DUNGEON_COLUMN + 38)
                    {
                        dungeonTile[ii].Image = bmp33;
                    }
                    if (ii == 15 * Database.TRUTH_DUNGEON_COLUMN + 40)
                    {
                        dungeonTile[ii].Image = bmp34;
                    }
                    if (ii == 19 * Database.TRUTH_DUNGEON_COLUMN + 38)
                    {
                        dungeonTile[ii].Image = bmp35;
                    }
                    if (ii == 17 * Database.TRUTH_DUNGEON_COLUMN + 42)
                    {
                        dungeonTile[ii].Image = bmp36;
                    }
                    if (ii == 19 * Database.TRUTH_DUNGEON_COLUMN + 46)
                    {
                        dungeonTile[ii].Image = bmp37;
                    }
                    if (ii == 11 * Database.TRUTH_DUNGEON_COLUMN + 44)
                    {
                        dungeonTile[ii].Image = bmp38;
                    }
                    if (ii == 15 * Database.TRUTH_DUNGEON_COLUMN + 46)
                    {
                        dungeonTile[ii].Image = bmp39;
                    }
                }

                unknownTile[ii].Visible = !targetKnownTileInfo[ii]; // 反対ですが意味付けは同じ本質です。
            }

            this.Update();
        }

        private void UpdateUnknownTileArea11()
        {
            for (int ii = 13; ii <= 22; ii++)
            {
                for (int jj = 27; jj <= 34; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea12()
        {
            for (int ii = 1; ii <= 5; ii++)
            {
                for (int jj = 1; jj <= 12; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea24()
        {
            for (int ii = 51; ii <= 53; ii++)
            {
                for (int jj = 13; jj <= 15; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea25()
        {
            for (int ii = 37; ii <= 39; ii++)
            {
                for (int jj = 4; jj <= 6; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea26()
        {
            for (int ii = 55; ii <= 57; ii++)
            {
                for (int jj = 10; jj <= 12; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea27()
        {
            for (int ii = 36; ii <= 44; ii++)
            {
                for (int jj = 33; jj <= 35; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea28()
        {
            for (int ii = 48; ii <= 56; ii++)
            {
                for (int jj = 33; jj <= 35; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea29()
        {
            for (int ii = 0; ii <= 28; ii++)
            {
                for (int jj = 0; jj <= 12; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea2_10()
        {
            for (int ii = 29; ii <= 30; ii++)
            {
                for (int jj = 5; jj <= 7; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea2_11()
        {
            for (int ii = 20; ii <= 23; ii++)
            {
                for (int jj = 35; jj <= 37; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea2_12()
        {
            for (int ii = 19; ii <= 23; ii++)
            {
                for (int jj = 24; jj <= 27; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea2_13()
        {
            for (int ii = 11; ii <= 16; ii++)
            {
                for (int jj = 18; jj <= 22; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea2_14()
        {
            for (int ii = 1; ii <= 7; ii++)
            {
                for (int jj = 22; jj <= 27; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea2_15()
        {
            for (int ii = 1; ii <= 8; ii++)
            {
                for (int jj = 31; jj <= 37; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea2_16()
        {
            for (int ii = 10; ii <= 18; ii++)
            {
                for (int jj = 29; jj <= 36; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo2[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_1()
        {
            for (int ii = 3; ii <= 9; ii++)
            {
                for (int jj = 19; jj <= 20; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo3[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            for (int ii = 3; ii <= 3; ii++)
            {
                for (int jj = 1; jj <= 38; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo3[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_1()
        {
            UpdateUnknownTile_Rectangle(19, 15, 25, 17, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_2()
        {
            UpdateUnknownTile_Rectangle(1, 15, 3, 17, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_3()
        {
            UpdateUnknownTile_Rectangle(8, 6, 17, 9, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_4()
        {
            UpdateUnknownTile_Rectangle(22, 6, 24, 9, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_5()
        {
            UpdateUnknownTile_Rectangle(10, 15, 17, 17, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_6()
        {
            UpdateUnknownTile_Rectangle(35, 11, 38, 17, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_7()
        {
            UpdateUnknownTile_Rectangle(16, 11, 25, 13, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_8()
        {
            UpdateUnknownTile_Rectangle(1, 6, 6, 10, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_9()
        {
            UpdateUnknownTile_Rectangle(0, 12, 7, 13, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_10()
        {
            UpdateUnknownTile_Rectangle(36, 6, 38, 9, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_11()
        {
            UpdateUnknownTile_Rectangle(27, 12, 30, 18, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_12()
        {
            UpdateUnknownTile_Rectangle(32, 12, 33, 17, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_13()
        {
            UpdateUnknownTile_Rectangle(33, 6, 34, 9, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_14()
        {
            UpdateUnknownTile_Rectangle(9, 11, 14, 13, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_15()
        {
            UpdateUnknownTile_Rectangle(5, 15, 8, 17, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_0_16()
        {
            UpdateUnknownTile_Rectangle(26, 6, 31, 10, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_Area1()
        {
            UpdateUnknownTile_Rectangle(14, 21, 16, 27, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area2()
        {
            UpdateUnknownTileArea3_One(29, 40, true);
            UpdateUnknownTileArea3_One(30, 40, true);
            UpdateUnknownTileArea3_One(31, 40, true);
            UpdateUnknownTile_Rectangle(31, 41, 34, 45, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area3()
        {
            UpdateUnknownTileArea3_One(7, 33, true);
            UpdateUnknownTileArea3_One(8, 33, true);
            UpdateUnknownTileArea3_One(9, 33, true);
            UpdateUnknownTileArea3_One(10, 33, true);
            UpdateUnknownTileArea3_One(11, 33, true);
            UpdateUnknownTileArea3_One(10, 34, true);
            UpdateUnknownTileArea3_One(10, 35, true);
            UpdateUnknownTileArea3_One(11, 35, true);
            UpdateUnknownTileArea3_One(12, 35, true);
            UpdateUnknownTileArea3_One(13, 35, true);
            UpdateUnknownTileArea3_One(13, 34, true);
            UpdateUnknownTileArea3_One(13, 33, true);
            UpdateUnknownTileArea3_One(13, 32, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area4()
        {
            UpdateUnknownTileArea3_One(23, 29, true);
            UpdateUnknownTileArea3_One(24, 29, true);
            UpdateUnknownTileArea3_One(25, 29, true);
            UpdateUnknownTile_Rectangle(26, 26, 28, 32, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area5()
        {
            UpdateUnknownTileArea3_One(20, 31, true);
            UpdateUnknownTileArea3_One(20, 32, true);
            UpdateUnknownTileArea3_One(20, 33, true);
            UpdateUnknownTileArea3_One(20, 34, true);
            UpdateUnknownTileArea3_One(20, 35, true);
            UpdateUnknownTileArea3_One(20, 36, true);
            UpdateUnknownTileArea3_One(21, 36, true);
            UpdateUnknownTileArea3_One(22, 36, true);
            UpdateUnknownTileArea3_One(23, 36, true);
            UpdateUnknownTileArea3_One(24, 36, true);
            UpdateUnknownTileArea3_One(25, 36, true);
            UpdateUnknownTileArea3_One(26, 36, true);
            UpdateUnknownTileArea3_One(27, 36, true);
            UpdateUnknownTileArea3_One(28, 36, true);
            UpdateUnknownTileArea3_One(29, 36, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area6()
        {
            UpdateUnknownTileArea3_One(4, 52, true);
            UpdateUnknownTileArea3_One(4, 51, true);
            UpdateUnknownTileArea3_One(4, 50, true);
            UpdateUnknownTileArea3_One(4, 49, true);
            UpdateUnknownTileArea3_One(5, 49, true);
            UpdateUnknownTileArea3_One(6, 49, true);
            UpdateUnknownTileArea3_One(7, 49, true);
            UpdateUnknownTileArea3_One(8, 49, true);
            UpdateUnknownTileArea3_One(9, 49, true);
            UpdateUnknownTileArea3_One(9, 50, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area7()
        {
            UpdateUnknownTileArea3_One(12, 52, true);
            UpdateUnknownTileArea3_One(12, 51, true);
            UpdateUnknownTileArea3_One(12, 50, true);
            UpdateUnknownTileArea3_One(12, 49, true);
            UpdateUnknownTileArea3_One(12, 48, true);
            UpdateUnknownTileArea3_One(12, 47, true);
            UpdateUnknownTileArea3_One(12, 46, true);
            UpdateUnknownTileArea3_One(12, 45, true);
            UpdateUnknownTileArea3_One(13, 45, true);
            UpdateUnknownTileArea3_One(14, 45, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area8()
        {
            UpdateUnknownTileArea3_One(24, 42, true);
            UpdateUnknownTileArea3_One(24, 41, true);
            UpdateUnknownTileArea3_One(24, 40, true);
            UpdateUnknownTileArea3_One(24, 39, true);
            UpdateUnknownTileArea3_One(24, 38, true);
            UpdateUnknownTileArea3_One(23, 38, true);
            UpdateUnknownTileArea3_One(22, 38, true);
            UpdateUnknownTileArea3_One(21, 38, true);
            UpdateUnknownTileArea3_One(20, 38, true);
            UpdateUnknownTileArea3_One(19, 38, true);
            UpdateUnknownTileArea3_One(18, 38, true);
            UpdateUnknownTileArea3_One(17, 38, true);
            UpdateUnknownTileArea3_One(16, 38, true);
            UpdateUnknownTile_Rectangle(13, 38, 15, 41, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area9()
        {
            UpdateUnknownTileArea3_One(36, 29, true);
            UpdateUnknownTileArea3_One(35, 29, true);
            UpdateUnknownTileArea3_One(34, 29, true);
            UpdateUnknownTileArea3_One(33, 29, true);
            UpdateUnknownTile_Rectangle(30, 26, 32, 32, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area10()
        {
            UpdateUnknownTileArea3_One(17, 35, true);
            UpdateUnknownTileArea3_One(16, 35, true);
            UpdateUnknownTileArea3_One(15, 35, true);
            UpdateUnknownTileArea3_One(15, 34, true);
            UpdateUnknownTileArea3_One(15, 33, true);
            UpdateUnknownTileArea3_One(16, 33, true);
            UpdateUnknownTileArea3_One(17, 33, true);
            UpdateUnknownTileArea3_One(17, 32, true);
            UpdateUnknownTileArea3_One(17, 31, true);
            UpdateUnknownTileArea3_One(16, 31, true);
            UpdateUnknownTileArea3_One(15, 31, true);
            UpdateUnknownTileArea3_One(14, 31, true);
            UpdateUnknownTileArea3_One(13, 31, true);
            UpdateUnknownTileArea3_One(12, 31, true);
            UpdateUnknownTileArea3_One(11, 31, true);
            UpdateUnknownTileArea3_One(10, 31, true);
            UpdateUnknownTileArea3_One(9, 31, true);
            UpdateUnknownTileArea3_One(8, 31, true);
            UpdateUnknownTileArea3_One(7, 31, true);
            UpdateUnknownTileArea3_One(7, 30, true);
            UpdateUnknownTileArea3_One(6, 30, true);
            UpdateUnknownTileArea3_One(6, 29, true);
            UpdateUnknownTileArea3_One(6, 28, true);
            UpdateUnknownTileArea3_One(6, 27, true);
            UpdateUnknownTileArea3_One(6, 26, true);
            UpdateUnknownTileArea3_One(6, 25, true);
            UpdateUnknownTileArea3_One(6, 24, true);
            UpdateUnknownTileArea3_One(7, 24, true);
            UpdateUnknownTileArea3_One(8, 24, true);
            UpdateUnknownTileArea3_One(9, 24, true);
            UpdateUnknownTileArea3_One(10, 24, true);
            UpdateUnknownTileArea3_One(11, 24, true);
            UpdateUnknownTileArea3_One(5, 24, true);
            UpdateUnknownTileArea3_One(4, 24, true);
            UpdateUnknownTileArea3_One(3, 24, true);
            UpdateUnknownTileArea3_One(12, 32, true);
            UpdateUnknownTileArea3_One(12, 33, true);
            UpdateUnknownTileArea3_One(12, 34, true);
            UpdateUnknownTileArea3_One(11, 34, true);
            UpdateUnknownTileArea3_One(17, 30, true);
            UpdateUnknownTileArea3_One(17, 29, true);
            UpdateUnknownTileArea3_One(16, 29, true);
            UpdateUnknownTileArea3_One(15, 29, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area11()
        {
            UpdateUnknownTileArea3_One(28, 43, true);
            UpdateUnknownTileArea3_One(28, 44, true);
            UpdateUnknownTileArea3_One(28, 45, true);
            UpdateUnknownTileArea3_One(28, 46, true);
            UpdateUnknownTileArea3_One(27, 46, true);
            UpdateUnknownTileArea3_One(26, 46, true);
            UpdateUnknownTileArea3_One(25, 46, true);
            UpdateUnknownTileArea3_One(24, 46, true);
            UpdateUnknownTileArea3_One(23, 46, true);
            UpdateUnknownTileArea3_One(22, 46, true);
            UpdateUnknownTileArea3_One(22, 45, true);
            UpdateUnknownTileArea3_One(22, 44, true);
            UpdateUnknownTileArea3_One(22, 43, true);
            UpdateUnknownTileArea3_One(22, 42, true);
            UpdateUnknownTileArea3_One(22, 41, true);
            UpdateUnknownTileArea3_One(21, 41, true);
            UpdateUnknownTileArea3_One(20, 41, true);
            UpdateUnknownTileArea3_One(19, 41, true);
            UpdateUnknownTileArea3_One(18, 41, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area12()
        {
            UpdateUnknownTileArea3_One(38, 38, true);
            UpdateUnknownTileArea3_One(38, 37, true);
            UpdateUnknownTileArea3_One(37, 37, true);
            UpdateUnknownTileArea3_One(37, 36, true);
            UpdateUnknownTileArea3_One(37, 35, true);
            UpdateUnknownTileArea3_One(37, 34, true);
            UpdateUnknownTileArea3_One(37, 33, true);
            UpdateUnknownTileArea3_One(37, 32, true);
            UpdateUnknownTileArea3_One(37, 31, true);
            UpdateUnknownTileArea3_One(37, 30, true);
            UpdateUnknownTileArea3_One(37, 29, true);
            UpdateUnknownTileArea3_One(37, 28, true);
            UpdateUnknownTileArea3_One(36, 28, true);
            UpdateUnknownTileArea3_One(35, 28, true);
            UpdateUnknownTileArea3_One(34, 28, true);
            UpdateUnknownTileArea3_One(33, 28, true);
            UpdateUnknownTileArea3_One(33, 27, true);
            UpdateUnknownTileArea3_One(33, 26, true);
            UpdateUnknownTileArea3_One(33, 25, true);
            UpdateUnknownTileArea3_One(33, 24, true);
            UpdateUnknownTileArea3_One(33, 23, true);
            UpdateUnknownTileArea3_One(33, 22, true);
            UpdateUnknownTileArea3_One(33, 21, true);
            UpdateUnknownTileArea3_One(36, 37, true);
            UpdateUnknownTileArea3_One(36, 38, true);
            UpdateUnknownTileArea3_One(35, 38, true);
            UpdateUnknownTileArea3_One(34, 38, true);
            UpdateUnknownTileArea3_One(33, 38, true);
            UpdateUnknownTileArea3_One(32, 38, true);
            UpdateUnknownTileArea3_One(31, 38, true);
            UpdateUnknownTileArea3_One(30, 38, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area13()
        {
            UpdateUnknownTileArea3_One(3, 42, true);
            UpdateUnknownTileArea3_One(4, 42, true);
            UpdateUnknownTileArea3_One(5, 42, true);
            UpdateUnknownTileArea3_One(6, 42, true);
            UpdateUnknownTileArea3_One(7, 42, true);
            UpdateUnknownTileArea3_One(8, 42, true);
            UpdateUnknownTileArea3_One(9, 42, true);
            UpdateUnknownTileArea3_One(10, 42, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area14()
        {
            UpdateUnknownTileArea3_One(38, 53, true);
            UpdateUnknownTileArea3_One(38, 52, true);
            UpdateUnknownTile_Rectangle(34, 49, 38, 51, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area15()
        {
            UpdateUnknownTileArea3_One(22, 21, true);
            UpdateUnknownTileArea3_One(22, 22, true);
            UpdateUnknownTileArea3_One(22, 23, true);
            UpdateUnknownTileArea3_One(23, 23, true);
            UpdateUnknownTileArea3_One(24, 23, true);
            UpdateUnknownTileArea3_One(25, 23, true);
            UpdateUnknownTileArea3_One(26, 23, true);
            UpdateUnknownTileArea3_One(27, 23, true);
            UpdateUnknownTileArea3_One(28, 23, true);
            UpdateUnknownTileArea3_One(22, 24, true);
            UpdateUnknownTileArea3_One(22, 25, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area16()
        {
            UpdateUnknownTileArea3_One(16, 40, true);
            UpdateUnknownTileArea3_One(16, 39, true);
            UpdateUnknownTileArea3_One(17, 39, true);
            UpdateUnknownTileArea3_One(18, 39, true);
            UpdateUnknownTileArea3_One(19, 39, true);
            UpdateUnknownTileArea3_One(20, 39, true);
            UpdateUnknownTileArea3_One(21, 39, true);
            UpdateUnknownTileArea3_One(22, 39, true);
            UpdateUnknownTileArea3_One(23, 39, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area17()
        {
            UpdateUnknownTileArea3_One(33, 30, true);
            UpdateUnknownTileArea3_One(33, 31, true);
            UpdateUnknownTileArea3_One(33, 32, true);
            UpdateUnknownTileArea3_One(33, 33, true);
            UpdateUnknownTileArea3_One(33, 34, true);
            UpdateUnknownTile_Rectangle(31, 35, 35, 37, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area18()
        {
            UpdateUnknownTileArea3_One(36, 53, true);
            UpdateUnknownTileArea3_One(35, 53, true);
            UpdateUnknownTileArea3_One(34, 53, true);
            UpdateUnknownTileArea3_One(33, 53, true);
            UpdateUnknownTileArea3_One(32, 53, true);
            UpdateUnknownTile_Rectangle(28, 50, 31, 54, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area19()
        {
            UpdateUnknownTileArea3_One(4, 35, true);
            UpdateUnknownTileArea3_One(4, 36, true);
            UpdateUnknownTileArea3_One(4, 37, true);
            UpdateUnknownTileArea3_One(4, 38, true);
            UpdateUnknownTileArea3_One(4, 39, true);
            UpdateUnknownTileArea3_One(5, 39, true);
            UpdateUnknownTileArea3_One(6, 39, true);
            UpdateUnknownTileArea3_One(7, 39, true);
            UpdateUnknownTileArea3_One(8, 39, true);
            UpdateUnknownTileArea3_One(8, 38, true);
            UpdateUnknownTileArea3_One(9, 38, true);
            UpdateUnknownTileArea3_One(10, 38, true);
            UpdateUnknownTileArea3_One(11, 38, true);
            UpdateUnknownTileArea3_One(12, 38, true);
            UpdateUnknownTileArea3_One(12, 39, true);
            UpdateUnknownTileArea3_One(12, 40, true);
            UpdateUnknownTileArea3_One(12, 41, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area20()
        {
            UpdateUnknownTileArea3_One(17, 23, true);
            UpdateUnknownTileArea3_One(17, 22, true);
            UpdateUnknownTileArea3_One(17, 21, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area21()
        {
            UpdateUnknownTileArea3_One(29, 25, true);
            UpdateUnknownTileArea3_One(28, 25, true);
            UpdateUnknownTileArea3_One(27, 25, true);
            UpdateUnknownTileArea3_One(26, 25, true);
            UpdateUnknownTile_Rectangle(23, 24, 25, 28, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area22()
        {
            UpdateUnknownTileArea3_One(4, 45, true);
            UpdateUnknownTileArea3_One(4, 46, true);
            UpdateUnknownTileArea3_One(4, 47, true);
            UpdateUnknownTileArea3_One(5, 47, true);
            UpdateUnknownTileArea3_One(6, 47, true);
            UpdateUnknownTile_Rectangle(7, 45, 9, 47, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area23()
        {
            UpdateUnknownTileArea3_One(11, 45, true);
            UpdateUnknownTileArea3_One(11, 46, true);
            UpdateUnknownTileArea3_One(11, 47, true);
            UpdateUnknownTileArea3_One(11, 48, true);
            UpdateUnknownTileArea3_One(11, 49, true);
            UpdateUnknownTileArea3_One(11, 50, true);
            UpdateUnknownTileArea3_One(11, 51, true);
            UpdateUnknownTileArea3_One(11, 52, true);
            UpdateUnknownTileArea3_One(11, 53, true);
            UpdateUnknownTileArea3_One(12, 53, true);
            UpdateUnknownTileArea3_One(13, 53, true);
            UpdateUnknownTileArea3_One(14, 53, true);
            UpdateUnknownTileArea3_One(15, 53, true);
            UpdateUnknownTileArea3_One(16, 53, true);
            UpdateUnknownTileArea3_One(10, 53, true);
            UpdateUnknownTileArea3_One(9, 53, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area24()
        {
            UpdateUnknownTileArea3_One(13, 30, true);
            UpdateUnknownTileArea3_One(13, 29, true);
            UpdateUnknownTileArea3_One(13, 28, true);
            UpdateUnknownTileArea3_One(13, 27, true);
            UpdateUnknownTileArea3_One(13, 26, true);
            UpdateUnknownTileArea3_One(13, 25, true);
            UpdateUnknownTileArea3_One(13, 24, true);
            UpdateUnknownTileArea3_One(13, 23, true);
            UpdateUnknownTileArea3_One(13, 22, true);
            UpdateUnknownTileArea3_One(13, 21, true);
            UpdateUnknownTileArea3_One(13, 20, true);
            UpdateUnknownTileArea3_One(14, 20, true);
            UpdateUnknownTileArea3_One(15, 20, true);
            UpdateUnknownTileArea3_One(16, 20, true);
            UpdateUnknownTileArea3_One(17, 20, true);
            UpdateUnknownTileArea3_One(18, 20, true);
            UpdateUnknownTileArea3_One(18, 21, true);
            UpdateUnknownTileArea3_One(18, 22, true);
            UpdateUnknownTileArea3_One(18, 23, true);
            UpdateUnknownTileArea3_One(12, 20, true);
            UpdateUnknownTileArea3_One(11, 20, true);
            UpdateUnknownTileArea3_One(11, 21, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area25()
        {
            UpdateUnknownTileArea3_One(29, 26, true);
            UpdateUnknownTileArea3_One(29, 27, true);
            UpdateUnknownTileArea3_One(29, 28, true);
            UpdateUnknownTileArea3_One(29, 29, true);
            UpdateUnknownTileArea3_One(29, 30, true);
            UpdateUnknownTileArea3_One(29, 31, true);
            UpdateUnknownTileArea3_One(29, 32, true);
            UpdateUnknownTile_Rectangle(26, 33, 32, 34, true);
            UpdateUnknownTileArea3_One(29, 33, true);
            UpdateUnknownTileArea3_One(28, 33, true);
            UpdateUnknownTileArea3_One(27, 33, true);
            UpdateUnknownTileArea3_One(26, 33, true);
            UpdateUnknownTileArea3_One(30, 33, true);
            UpdateUnknownTileArea3_One(31, 33, true);
            UpdateUnknownTileArea3_One(32, 33, true);
            UpdateUnknownTileArea3_One(26, 34, true);
            UpdateUnknownTileArea3_One(28, 34, true);
            UpdateUnknownTileArea3_One(30, 34, true);
            UpdateUnknownTileArea3_One(32, 34, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area26()
        {
            UpdateUnknownTileArea3_One(4, 30, true);
            UpdateUnknownTileArea3_One(4, 31, true);
            UpdateUnknownTileArea3_One(4, 32, true);
            UpdateUnknownTileArea3_One(5, 32, true);
            UpdateUnknownTileArea3_One(5, 33, true);
            UpdateUnknownTileArea3_One(6, 33, true);
            UpdateUnknownTileArea3_One(6, 34, true);
            UpdateUnknownTileArea3_One(7, 34, true);
            UpdateUnknownTileArea3_One(8, 34, true);
            UpdateUnknownTileArea3_One(9, 34, true);
            UpdateUnknownTileArea3_One(9, 35, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area27()
        {
            UpdateUnknownTileArea3_One(30, 41, true);
            UpdateUnknownTileArea3_One(29, 41, true);
            UpdateUnknownTileArea3_One(28, 41, true);
            UpdateUnknownTileArea3_One(27, 41, true);
            UpdateUnknownTileArea3_One(27, 40, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area28()
        {
            UpdateUnknownTileArea3_One(15, 51, true);
            UpdateUnknownTileArea3_One(16, 51, true);
            UpdateUnknownTileArea3_One(17, 51, true);
            UpdateUnknownTile_Rectangle(18, 49, 20, 53, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area29()
        {
            UpdateUnknownTileArea3_One(36, 36, true);
            UpdateUnknownTileArea3_One(36, 35, true);
            UpdateUnknownTile_Rectangle(34, 30, 36, 34, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area30()
        {
            UpdateUnknownTileArea3_One(11, 32, true);
            UpdateUnknownTileArea3_One(10, 32, true);
            UpdateUnknownTileArea3_One(9, 32, true);
            UpdateUnknownTileArea3_One(8, 32, true);
            UpdateUnknownTileArea3_One(7, 32, true);
            UpdateUnknownTileArea3_One(6, 32, true);
            UpdateUnknownTileArea3_One(6, 31, true);
            UpdateUnknownTileArea3_One(5, 31, true);
            UpdateUnknownTileArea3_One(5, 30, true);
            UpdateUnknownTile_Rectangle(3, 25, 5, 29, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area31()
        {
            UpdateUnknownTileArea3_One(22, 31, true);
            UpdateUnknownTileArea3_One(22, 32, true);
            UpdateUnknownTileArea3_One(22, 33, true);
            UpdateUnknownTileArea3_One(22, 34, true);
            UpdateUnknownTileArea3_One(22, 35, true);
            UpdateUnknownTileArea3_One(23, 35, true);
            UpdateUnknownTileArea3_One(24, 35, true);
            UpdateUnknownTileArea3_One(24, 34, true);
            UpdateUnknownTileArea3_One(24, 33, true);
            UpdateUnknownTileArea3_One(24, 32, true);
            UpdateUnknownTileArea3_One(24, 31, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area32()
        {
            UpdateUnknownTileArea3_One(33, 39, true);
            UpdateUnknownTileArea3_One(34, 39, true);
            UpdateUnknownTileArea3_One(35, 39, true);
            UpdateUnknownTileArea3_One(36, 39, true);
            UpdateUnknownTileArea3_One(36, 40, true);
            UpdateUnknownTileArea3_One(37, 40, true);
            UpdateUnknownTileArea3_One(37, 41, true);
            UpdateUnknownTileArea3_One(38, 41, true);
            UpdateUnknownTileArea3_One(38, 42, true);
            UpdateUnknownTileArea3_One(38, 43, true);
            UpdateUnknownTileArea3_One(39, 43, true);
            UpdateUnknownTileArea3_One(39, 44, true);
            UpdateUnknownTileArea3_One(39, 45, true);
            UpdateUnknownTileArea3_One(39, 46, true);
            UpdateUnknownTileArea3_One(39, 47, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area33()
        {
            UpdateUnknownTileArea3_One(0, 41, true);
            UpdateUnknownTileArea3_One(0, 42, true);
            UpdateUnknownTileArea3_One(0, 43, true);
            UpdateUnknownTileArea3_One(0, 44, true);
            UpdateUnknownTileArea3_One(0, 45, true);
            UpdateUnknownTileArea3_One(0, 46, true);
            UpdateUnknownTileArea3_One(0, 47, true);
            UpdateUnknownTileArea3_One(0, 48, true);
            UpdateUnknownTileArea3_One(0, 49, true);
            UpdateUnknownTileArea3_One(0, 50, true);
            UpdateUnknownTileArea3_One(0, 51, true);
            UpdateUnknownTileArea3_One(0, 52, true);
            UpdateUnknownTileArea3_One(0, 53, true);
            UpdateUnknownTileArea3_One(0, 54, true);
            UpdateUnknownTileArea3_One(1, 54, true);
            UpdateUnknownTileArea3_One(2, 54, true);
            UpdateUnknownTileArea3_One(2, 53, true);
            UpdateUnknownTileArea3_One(2, 52, true);
            UpdateUnknownTileArea3_One(2, 51, true);
            UpdateUnknownTileArea3_One(2, 50, true);
            UpdateUnknownTileArea3_One(2, 49, true);
            UpdateUnknownTileArea3_One(2, 48, true);
            UpdateUnknownTileArea3_One(2, 47, true);
            UpdateUnknownTileArea3_One(2, 46, true);
            UpdateUnknownTileArea3_One(2, 45, true);
            UpdateUnknownTileArea3_One(2, 44, true);
            UpdateUnknownTileArea3_One(2, 43, true);
            UpdateUnknownTileArea3_One(3, 43, true);
            UpdateUnknownTileArea3_One(4, 43, true);
            UpdateUnknownTileArea3_One(5, 43, true);
            UpdateUnknownTileArea3_One(6, 43, true);
            UpdateUnknownTileArea3_One(7, 43, true);
            UpdateUnknownTileArea3_One(8, 43, true);
            UpdateUnknownTileArea3_One(9, 43, true);
            UpdateUnknownTileArea3_One(10, 43, true);
            UpdateUnknownTileArea3_One(11, 43, true);
            UpdateUnknownTileArea3_One(11, 42, true);
            UpdateUnknownTileArea3_One(12, 42, true);
            UpdateUnknownTileArea3_One(13, 42, true);
            UpdateUnknownTileArea3_One(14, 42, true);
            UpdateUnknownTileArea3_One(15, 42, true);
            UpdateUnknownTileArea3_One(5, 44, true);
            UpdateUnknownTileArea3_One(5, 45, true);
            UpdateUnknownTileArea3_One(5, 46, true);
            UpdateUnknownTileArea3_One(2, 42, true);
            UpdateUnknownTileArea3_One(2, 41, true);
            UpdateUnknownTileArea3_One(3, 41, true);
            UpdateUnknownTileArea3_One(4, 41, true);
            UpdateUnknownTileArea3_One(5, 41, true);
            UpdateUnknownTileArea3_One(6, 41, true);
            UpdateUnknownTileArea3_One(7, 41, true);
            UpdateUnknownTileArea3_One(8, 41, true);
            UpdateUnknownTileArea3_One(3, 54, true);
            UpdateUnknownTileArea3_One(4, 54, true);
            UpdateUnknownTileArea3_One(5, 54, true);
            UpdateUnknownTileArea3_One(6, 54, true);
            UpdateUnknownTileArea3_One(7, 54, true);
            UpdateUnknownTileArea3_One(8, 54, true);
            UpdateUnknownTileArea3_One(9, 54, true);
            UpdateUnknownTileArea3_One(10, 54, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area34()
        {
            UpdateUnknownTileArea3_One(4, 40, true);
            UpdateUnknownTileArea3_One(5, 40, true);
            UpdateUnknownTileArea3_One(6, 40, true);
            UpdateUnknownTileArea3_One(7, 40, true);
            UpdateUnknownTileArea3_One(8, 40, true);
            UpdateUnknownTile_Rectangle(9, 39, 11, 41, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area35()
        {
            UpdateUnknownTileArea3_One(11, 54, true);
            UpdateUnknownTileArea3_One(12, 54, true);
            UpdateUnknownTileArea3_One(13, 54, true);
            UpdateUnknownTileArea3_One(14, 54, true);
            UpdateUnknownTileArea3_One(15, 54, true);
            UpdateUnknownTileArea3_One(16, 54, true);
            UpdateUnknownTileArea3_One(17, 54, true);
            UpdateUnknownTileArea3_One(18, 54, true);
            UpdateUnknownTileArea3_One(19, 54, true);
            UpdateUnknownTileArea3_One(20, 54, true);
            UpdateUnknownTileArea3_One(21, 54, true);
            UpdateUnknownTileArea3_One(22, 54, true);
            UpdateUnknownTileArea3_One(23, 54, true);
            UpdateUnknownTileArea3_One(24, 54, true);
            UpdateUnknownTileArea3_One(25, 54, true);
            UpdateUnknownTileArea3_One(25, 53, true);
            UpdateUnknownTile_Rectangle(22, 48, 25, 52, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area36()
        {
            UpdateUnknownTileArea3_One(26, 37, true);
            UpdateUnknownTileArea3_One(27, 37, true);
            UpdateUnknownTileArea3_One(28, 37, true);
            UpdateUnknownTileArea3_One(29, 37, true);
            UpdateUnknownTileArea3_One(30, 37, true);
            UpdateUnknownTileArea3_One(30, 36, true);
            UpdateUnknownTileArea3_One(30, 35, true);
            UpdateUnknownTileArea3_One(29, 35, true);
            UpdateUnknownTileArea3_One(28, 35, true);
            UpdateUnknownTileArea3_One(27, 35, true);
            UpdateUnknownTileArea3_One(26, 35, true);
            UpdateUnknownTileArea3_One(25, 35, true);
            UpdateUnknownTileArea3_One(25, 34, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area37()
        {
            UpdateUnknownTileArea3_One(30, 21, true);
            UpdateUnknownTileArea3_One(30, 22, true);
            UpdateUnknownTileArea3_One(30, 23, true);
            UpdateUnknownTileArea3_One(30, 24, true);
            UpdateUnknownTileArea3_One(30, 25, true);
            UpdateUnknownTileArea3_One(31, 25, true);
            UpdateUnknownTileArea3_One(32, 25, true);
            UpdateUnknownTileArea3_One(32, 24, true);
            UpdateUnknownTileArea3_One(32, 23, true);
            UpdateUnknownTileArea3_One(32, 22, true);
            UpdateUnknownTileArea3_One(32, 21, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area38()
        {
            UpdateUnknownTileArea3_One(0, 40, true);
            UpdateUnknownTileArea3_One(1, 40, true);
            UpdateUnknownTileArea3_One(2, 40, true);
            UpdateUnknownTileArea3_One(3, 40, true);
            UpdateUnknownTileArea3_One(3, 39, true);
            UpdateUnknownTileArea3_One(3, 38, true);
            UpdateUnknownTileArea3_One(3, 37, true);
            UpdateUnknownTileArea3_One(3, 36, true);
            UpdateUnknownTileArea3_One(3, 35, true);
            UpdateUnknownTileArea3_One(3, 34, true);
            UpdateUnknownTileArea3_One(1, 41, true);
            UpdateUnknownTileArea3_One(1, 42, true);
            UpdateUnknownTileArea3_One(1, 43, true);
            UpdateUnknownTileArea3_One(1, 44, true);
            UpdateUnknownTileArea3_One(1, 45, true);
            UpdateUnknownTileArea3_One(1, 46, true);
            UpdateUnknownTileArea3_One(1, 47, true);
            UpdateUnknownTileArea3_One(1, 48, true);
            UpdateUnknownTileArea3_One(1, 49, true);
            UpdateUnknownTileArea3_One(1, 50, true);
            UpdateUnknownTileArea3_One(1, 51, true);
            UpdateUnknownTileArea3_One(1, 52, true);
            UpdateUnknownTileArea3_One(1, 53, true);
            UpdateUnknownTileArea3_One(1, 39, true);
            UpdateUnknownTileArea3_One(1, 38, true);
            UpdateUnknownTileArea3_One(1, 37, true);
            UpdateUnknownTileArea3_One(1, 36, true);
            UpdateUnknownTileArea3_One(1, 35, true);
            UpdateUnknownTileArea3_One(1, 34, true);
            UpdateUnknownTileArea3_One(1, 33, true);
            UpdateUnknownTileArea3_One(1, 32, true);
            UpdateUnknownTileArea3_One(1, 31, true);
            UpdateUnknownTileArea3_One(1, 30, true);
            UpdateUnknownTileArea3_One(1, 29, true);
            UpdateUnknownTileArea3_One(1, 28, true);
            UpdateUnknownTileArea3_One(1, 27, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area39()
        {
            UpdateUnknownTileArea3_One(16, 32, true);
            UpdateUnknownTileArea3_One(15, 32, true);
            UpdateUnknownTileArea3_One(14, 32, true);
            UpdateUnknownTileArea3_One(14, 33, true);
            UpdateUnknownTileArea3_One(14, 34, true);
            UpdateUnknownTileArea3_One(14, 35, true);
            UpdateUnknownTileArea3_One(14, 36, true);
            UpdateUnknownTileArea3_One(15, 36, true);
            UpdateUnknownTileArea3_One(16, 36, true);
            UpdateUnknownTileArea3_One(17, 36, true);
            UpdateUnknownTileArea3_One(18, 36, true);
            UpdateUnknownTileArea3_One(18, 35, true);
            UpdateUnknownTileArea3_One(18, 34, true);
            UpdateUnknownTileArea3_One(18, 33, true);
            UpdateUnknownTileArea3_One(18, 32, true);
            UpdateUnknownTileArea3_One(18, 31, true);
            UpdateUnknownTileArea3_One(18, 30, true);
            UpdateUnknownTileArea3_One(18, 29, true);
            UpdateUnknownTileArea3_One(18, 28, true);
            UpdateUnknownTileArea3_One(17, 28, true);
            UpdateUnknownTileArea3_One(16, 28, true);
            UpdateUnknownTileArea3_One(15, 28, true);
            UpdateUnknownTileArea3_One(14, 28, true);
            UpdateUnknownTileArea3_One(14, 29, true);
            UpdateUnknownTileArea3_One(14, 30, true);
            UpdateUnknownTileArea3_One(15, 30, true);
            UpdateUnknownTileArea3_One(16, 30, true);
            UpdateUnknownTileArea3_One(17, 34, true);
            UpdateUnknownTileArea3_One(16, 34, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area40()
        {
            UpdateUnknownTileArea3_One(20, 20, true);
            UpdateUnknownTileArea3_One(20, 21, true);
            UpdateUnknownTileArea3_One(20, 22, true);
            UpdateUnknownTileArea3_One(20, 23, true);
            UpdateUnknownTileArea3_One(20, 24, true);
            UpdateUnknownTile_Rectangle(17, 25, 21, 27, true);
            UpdateUnknownTile_Rectangle(19, 28, 21, 29, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area41()
        {
            UpdateUnknownTileArea3_One(20, 45, true);
            UpdateUnknownTileArea3_One(20, 44, true);
            UpdateUnknownTileArea3_One(20, 43, true);
            UpdateUnknownTileArea3_One(20, 42, true);
            UpdateUnknownTileArea3_One(19, 42, true);
            UpdateUnknownTileArea3_One(18, 42, true);
            UpdateUnknownTileArea3_One(17, 42, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area42()
        {
            UpdateUnknownTileArea3_One(20, 48, true);
            UpdateUnknownTileArea3_One(19, 48, true);
            UpdateUnknownTileArea3_One(18, 48, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area43()
        {
            UpdateUnknownTileArea3_One(9, 21, true);
            UpdateUnknownTile_Rectangle(5, 21, 9, 22, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area44()
        {
            UpdateUnknownTileArea3_One(22, 26, true);
            UpdateUnknownTileArea3_One(22, 27, true);
            UpdateUnknownTileArea3_One(22, 28, true);
            UpdateUnknownTileArea3_One(22, 29, true);
            UpdateUnknownTileArea3_One(22, 30, true);
            UpdateUnknownTileArea3_One(23, 30, true);
            UpdateUnknownTileArea3_One(23, 31, true);
            UpdateUnknownTileArea3_One(23, 32, true);
            UpdateUnknownTileArea3_One(23, 33, true);
            UpdateUnknownTileArea3_One(23, 34, true);
            UpdateUnknownTileArea3_One(24, 30, true);
            UpdateUnknownTileArea3_One(25, 30, true);
            UpdateUnknownTileArea3_One(25, 31, true);
            UpdateUnknownTileArea3_One(25, 32, true);
            UpdateUnknownTileArea3_One(25, 33, true);
            UpdateUnknownTileArea3_One(21, 30, true);
            UpdateUnknownTileArea3_One(21, 31, true);
            UpdateUnknownTileArea3_One(21, 32, true);
            UpdateUnknownTileArea3_One(21, 33, true);
            UpdateUnknownTileArea3_One(21, 34, true);
            UpdateUnknownTileArea3_One(21, 35, true);
            UpdateUnknownTileArea3_One(20, 30, true);
            UpdateUnknownTileArea3_One(19, 30, true);
            UpdateUnknownTileArea3_One(19, 31, true);
            UpdateUnknownTileArea3_One(19, 32, true);
            UpdateUnknownTileArea3_One(19, 33, true);
            UpdateUnknownTileArea3_One(19, 34, true);
            UpdateUnknownTileArea3_One(19, 35, true);
            UpdateUnknownTileArea3_One(19, 36, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area45()
        {
            UpdateUnknownTileArea3_One(28, 40, true);
            UpdateUnknownTileArea3_One(28, 39, true);
            UpdateUnknownTileArea3_One(27, 39, true);
            UpdateUnknownTileArea3_One(26, 39, true);
            UpdateUnknownTileArea3_One(25, 39, true);
            UpdateUnknownTileArea3_One(25, 40, true);
            UpdateUnknownTileArea3_One(25, 41, true);
            UpdateUnknownTileArea3_One(25, 42, true);
            UpdateUnknownTile_Rectangle(24, 43, 26, 44, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area46()
        {
            UpdateUnknownTileArea3_One(22, 53, true);
            UpdateUnknownTileArea3_One(23, 53, true);
            UpdateUnknownTileArea3_One(24, 53, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area47()
        {
            UpdateUnknownTileArea3_One(10, 52, true);
            UpdateUnknownTileArea3_One(9, 52, true);
            UpdateUnknownTile_Rectangle(6, 50, 8, 53, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area48()
        {
            UpdateUnknownTileArea3_One(34, 27, true);
            UpdateUnknownTileArea3_One(34, 26, true);
            UpdateUnknownTileArea3_One(34, 25, true);
            UpdateUnknownTileArea3_One(34, 24, true);
            UpdateUnknownTileArea3_One(34, 23, true);
            UpdateUnknownTileArea3_One(34, 22, true);
            UpdateUnknownTileArea3_One(34, 21, true);
            UpdateUnknownTileArea3_One(34, 20, true);
            UpdateUnknownTileArea3_One(33, 20, true);
            UpdateUnknownTileArea3_One(32, 20, true);
            UpdateUnknownTileArea3_One(31, 20, true);
            UpdateUnknownTileArea3_One(30, 20, true);
            UpdateUnknownTileArea3_One(29, 20, true);
            UpdateUnknownTileArea3_One(28, 20, true);
            UpdateUnknownTileArea3_One(27, 20, true);
            UpdateUnknownTileArea3_One(26, 20, true);
            UpdateUnknownTileArea3_One(25, 20, true);
            UpdateUnknownTileArea3_One(24, 20, true);
            UpdateUnknownTileArea3_One(23, 20, true);
            UpdateUnknownTileArea3_One(22, 20, true);
            UpdateUnknownTileArea3_One(21, 20, true);
            UpdateUnknownTileArea3_One(21, 21, true);
            UpdateUnknownTileArea3_One(21, 22, true);
            UpdateUnknownTileArea3_One(21, 23, true);
            UpdateUnknownTileArea3_One(21, 24, true);
            UpdateUnknownTileArea3_One(23, 21, true);
            UpdateUnknownTileArea3_One(23, 22, true);
            UpdateUnknownTileArea3_One(24, 22, true);
            UpdateUnknownTileArea3_One(25, 22, true);
            UpdateUnknownTileArea3_One(28, 21, true);
            UpdateUnknownTileArea3_One(28, 22, true);
            UpdateUnknownTileArea3_One(27, 22, true);
            UpdateUnknownTileArea3_One(26, 22, true);
            UpdateUnknownTileArea3_One(31, 21, true);
            UpdateUnknownTileArea3_One(31, 22, true);
            UpdateUnknownTileArea3_One(31, 23, true);
            UpdateUnknownTileArea3_One(31, 24, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area49()
        {
            UpdateUnknownTileArea3_One(36, 43, true);
            UpdateUnknownTileArea3_One(36, 44, true);
            UpdateUnknownTileArea3_One(36, 45, true);
            UpdateUnknownTileArea3_One(36, 46, true);
            UpdateUnknownTileArea3_One(36, 47, true);
            UpdateUnknownTileArea3_One(35, 47, true);
            UpdateUnknownTileArea3_One(34, 47, true);
            UpdateUnknownTileArea3_One(33, 47, true);
            UpdateUnknownTileArea3_One(32, 47, true);
            UpdateUnknownTileArea3_One(31, 47, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area50()
        {
            UpdateUnknownTileArea3_One(2, 31, true);
            UpdateUnknownTileArea3_One(2, 32, true);
            UpdateUnknownTileArea3_One(2, 33, true);
            UpdateUnknownTileArea3_One(2, 34, true);
            UpdateUnknownTileArea3_One(2, 35, true);
            UpdateUnknownTileArea3_One(2, 36, true);
            UpdateUnknownTileArea3_One(2, 37, true);
            UpdateUnknownTileArea3_One(2, 38, true);
            UpdateUnknownTileArea3_One(2, 39, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area51()
        {
            UpdateUnknownTileArea3_One(32, 54, true);
            UpdateUnknownTileArea3_One(33, 54, true);
            UpdateUnknownTileArea3_One(34, 54, true);
            UpdateUnknownTileArea3_One(35, 54, true);
            UpdateUnknownTileArea3_One(36, 54, true);
            UpdateUnknownTileArea3_One(37, 54, true);
            UpdateUnknownTileArea3_One(38, 54, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area52()
        {
            UpdateUnknownTileArea3_One(21, 42, true);
            UpdateUnknownTileArea3_One(21, 43, true);
            UpdateUnknownTileArea3_One(21, 44, true);
            UpdateUnknownTileArea3_One(21, 45, true);
            UpdateUnknownTileArea3_One(21, 46, true);
            UpdateUnknownTileArea3_One(14, 47, true);
            UpdateUnknownTileArea3_One(15, 47, true);
            UpdateUnknownTileArea3_One(16, 47, true);
            UpdateUnknownTileArea3_One(17, 47, true);
            UpdateUnknownTileArea3_One(18, 47, true);
            UpdateUnknownTileArea3_One(19, 47, true);
            UpdateUnknownTileArea3_One(20, 47, true);
            UpdateUnknownTileArea3_One(21, 47, true);
            UpdateUnknownTileArea3_One(22, 47, true);
            UpdateUnknownTileArea3_One(23, 47, true);
            UpdateUnknownTileArea3_One(24, 47, true);
            UpdateUnknownTileArea3_One(25, 47, true);
            UpdateUnknownTileArea3_One(26, 47, true);
            UpdateUnknownTileArea3_One(27, 47, true);
            UpdateUnknownTileArea3_One(28, 47, true);
            UpdateUnknownTileArea3_One(21, 48, true);
            UpdateUnknownTileArea3_One(21, 49, true);
            UpdateUnknownTileArea3_One(21, 50, true);
            UpdateUnknownTileArea3_One(21, 51, true);
            UpdateUnknownTileArea3_One(21, 52, true);
            UpdateUnknownTileArea3_One(21, 53, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area53()
        {
            UpdateUnknownTileArea3_One(17, 53, true);
            UpdateUnknownTileArea3_One(17, 52, true);
            UpdateUnknownTileArea3_One(16, 52, true);
            UpdateUnknownTileArea3_One(15, 52, true);
            UpdateUnknownTileArea3_One(14, 52, true);
            UpdateUnknownTileArea3_One(14, 51, true);
            UpdateUnknownTileArea3_One(14, 50, true);
            UpdateUnknownTileArea3_One(15, 50, true);
            UpdateUnknownTileArea3_One(16, 50, true);
            UpdateUnknownTileArea3_One(17, 50, true);
            UpdateUnknownTileArea3_One(17, 49, true);
            UpdateUnknownTileArea3_One(17, 48, true);
            UpdateUnknownTileArea3_One(16, 48, true);
            UpdateUnknownTileArea3_One(15, 48, true);
            UpdateUnknownTileArea3_One(14, 48, true);
            UpdateUnknownTileArea3_One(13, 48, true);
            UpdateUnknownTileArea3_One(13, 47, true);
            UpdateUnknownTileArea3_One(13, 46, true);
            UpdateUnknownTileArea3_One(14, 46, true);
            UpdateUnknownTileArea3_One(15, 46, true);
            UpdateUnknownTileArea3_One(16, 46, true);
            UpdateUnknownTileArea3_One(17, 46, true);
            UpdateUnknownTileArea3_One(18, 46, true);
            UpdateUnknownTileArea3_One(19, 46, true);
            UpdateUnknownTileArea3_One(20, 46, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area54()
        {
            UpdateUnknownTileArea3_One(12, 21, true);
            UpdateUnknownTileArea3_One(12, 22, true);
            UpdateUnknownTileArea3_One(11, 22, true);
            UpdateUnknownTileArea3_One(10, 22, true);
            UpdateUnknownTileArea3_One(10, 21, true);
            UpdateUnknownTileArea3_One(10, 20, true);
            UpdateUnknownTileArea3_One(9, 20, true);
            UpdateUnknownTileArea3_One(8, 20, true);
            UpdateUnknownTileArea3_One(7, 20, true);
            UpdateUnknownTileArea3_One(6, 20, true);
            UpdateUnknownTileArea3_One(5, 20, true);
            UpdateUnknownTileArea3_One(4, 20, true);
            UpdateUnknownTileArea3_One(3, 20, true);
            UpdateUnknownTileArea3_One(3, 21, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area55()
        {
            UpdateUnknownTileArea3_One(37, 38, true);
            UpdateUnknownTileArea3_One(37, 39, true);
            UpdateUnknownTileArea3_One(38, 39, true);
            UpdateUnknownTileArea3_One(38, 40, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area56()
        {
            UpdateUnknownTileArea3_One(2, 25, true);
            UpdateUnknownTileArea3_One(2, 24, true);
            UpdateUnknownTileArea3_One(2, 23, true);
            UpdateUnknownTileArea3_One(3, 23, true);
            UpdateUnknownTileArea3_One(4, 23, true);
            UpdateUnknownTileArea3_One(5, 23, true);
            UpdateUnknownTileArea3_One(6, 23, true);
            UpdateUnknownTileArea3_One(7, 23, true);
            UpdateUnknownTileArea3_One(8, 23, true);
            UpdateUnknownTileArea3_One(9, 23, true);
            UpdateUnknownTileArea3_One(10, 23, true);
            UpdateUnknownTileArea3_One(11, 23, true);
            UpdateUnknownTileArea3_One(12, 23, true);
            UpdateUnknownTileArea3_One(12, 24, true);
            UpdateUnknownTile_Rectangle(7, 25, 12, 29, true);
            UpdateUnknownTileArea3_One(8, 30, true);
            UpdateUnknownTileArea3_One(9, 30, true);
            UpdateUnknownTileArea3_One(10, 30, true);
            UpdateUnknownTileArea3_One(11, 30, true);
            UpdateUnknownTileArea3_One(12, 30, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area57()
        {
            UpdateUnknownTileArea3_One(26, 24, true);
            UpdateUnknownTileArea3_One(27, 24, true);
            UpdateUnknownTileArea3_One(28, 24, true);
            UpdateUnknownTileArea3_One(29, 24, true);
            UpdateUnknownTileArea3_One(29, 23, true);
            UpdateUnknownTileArea3_One(29, 22, true);
            UpdateUnknownTileArea3_One(29, 21, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area58()
        {
            UpdateUnknownTileArea3_One(17, 43, true);
            UpdateUnknownTileArea3_One(18, 43, true);
            UpdateUnknownTileArea3_One(19, 43, true);
            UpdateUnknownTileArea3_One(19, 44, true);
            UpdateUnknownTileArea3_One(19, 45, true);
            UpdateUnknownTileArea3_One(18, 45, true);
            UpdateUnknownTileArea3_One(17, 45, true);
            UpdateUnknownTileArea3_One(16, 45, true);
            UpdateUnknownTileArea3_One(15, 45, true);
            UpdateUnknownTileArea3_One(15, 44, true);
            UpdateUnknownTileArea3_One(14, 44, true);
            UpdateUnknownTileArea3_One(13, 44, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area59()
        {
            UpdateUnknownTileArea3_One(4, 21, true);
            UpdateUnknownTileArea3_One(4, 22, true);
            UpdateUnknownTileArea3_One(3, 22, true);
            UpdateUnknownTileArea3_One(2, 22, true);
            UpdateUnknownTileArea3_One(2, 21, true);
            UpdateUnknownTileArea3_One(2, 20, true);
            UpdateUnknownTileArea3_One(1, 20, true);
            UpdateUnknownTileArea3_One(0, 20, true);
            UpdateUnknownTileArea3_One(0, 21, true);
            UpdateUnknownTileArea3_One(0, 22, true);
            UpdateUnknownTileArea3_One(0, 23, true);
            UpdateUnknownTileArea3_One(0, 24, true);
            UpdateUnknownTileArea3_One(0, 25, true);
            UpdateUnknownTileArea3_One(0, 26, true);
            UpdateUnknownTileArea3_One(0, 27, true);
            UpdateUnknownTileArea3_One(0, 28, true);
            UpdateUnknownTileArea3_One(0, 29, true);
            UpdateUnknownTileArea3_One(0, 30, true);
            UpdateUnknownTileArea3_One(0, 31, true);
            UpdateUnknownTileArea3_One(0, 32, true);
            UpdateUnknownTileArea3_One(0, 33, true);
            UpdateUnknownTileArea3_One(0, 34, true);
            UpdateUnknownTileArea3_One(0, 35, true);
            UpdateUnknownTileArea3_One(0, 36, true);
            UpdateUnknownTileArea3_One(0, 37, true);
            UpdateUnknownTileArea3_One(0, 38, true);
            UpdateUnknownTileArea3_One(0, 39, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area60()
        {
            UpdateUnknownTileArea3_One(39, 35, true);
            UpdateUnknownTileArea3_One(39, 34, true);
            UpdateUnknownTileArea3_One(39, 33, true);
            UpdateUnknownTileArea3_One(39, 32, true);
            UpdateUnknownTileArea3_One(39, 31, true);
            UpdateUnknownTileArea3_One(39, 30, true);
            UpdateUnknownTileArea3_One(39, 29, true);
            UpdateUnknownTileArea3_One(39, 28, true);
            UpdateUnknownTileArea3_One(39, 27, true);
            UpdateUnknownTileArea3_One(39, 26, true);
            UpdateUnknownTileArea3_One(39, 25, true);
            UpdateUnknownTileArea3_One(39, 24, true);
            UpdateUnknownTileArea3_One(39, 23, true);
            UpdateUnknownTileArea3_One(39, 22, true);
            UpdateUnknownTileArea3_One(39, 21, true);
            UpdateUnknownTileArea3_One(39, 20, true);
            UpdateUnknownTileArea3_One(38, 20, true);
            UpdateUnknownTile_Rectangle(35, 20, 37, 27, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area61()
        {
            UpdateUnknownTileArea3_One(38, 21, true);
            UpdateUnknownTileArea3_One(38, 22, true);
            UpdateUnknownTileArea3_One(38, 23, true);
            UpdateUnknownTileArea3_One(38, 24, true);
            UpdateUnknownTileArea3_One(38, 25, true);
            UpdateUnknownTileArea3_One(38, 26, true);
            UpdateUnknownTileArea3_One(38, 27, true);
            UpdateUnknownTileArea3_One(38, 28, true);
            UpdateUnknownTileArea3_One(38, 29, true);
            UpdateUnknownTileArea3_One(38, 30, true);
            UpdateUnknownTileArea3_One(38, 31, true);
            UpdateUnknownTileArea3_One(38, 32, true);
            UpdateUnknownTileArea3_One(38, 33, true);
            UpdateUnknownTileArea3_One(38, 34, true);
            UpdateUnknownTileArea3_One(38, 35, true);
            UpdateUnknownTileArea3_One(38, 36, true);
            UpdateUnknownTileArea3_One(39, 36, true);
            UpdateUnknownTileArea3_One(39, 37, true);
            UpdateUnknownTileArea3_One(39, 38, true);
            UpdateUnknownTileArea3_One(39, 39, true);
            UpdateUnknownTileArea3_One(39, 40, true);
            UpdateUnknownTileArea3_One(39, 41, true);
            UpdateUnknownTileArea3_One(39, 42, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area62()
        {
            UpdateUnknownTileArea3_One(33, 49, true);
            UpdateUnknownTileArea3_One(33, 50, true);
            UpdateUnknownTileArea3_One(33, 51, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area63()
        {
            UpdateUnknownTileArea3_One(16, 49, true);
            UpdateUnknownTileArea3_One(15, 49, true);
            UpdateUnknownTileArea3_One(14, 49, true);
            UpdateUnknownTileArea3_One(13, 49, true);
            UpdateUnknownTileArea3_One(13, 50, true);
            UpdateUnknownTileArea3_One(13, 51, true);
            UpdateUnknownTileArea3_One(13, 52, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area64()
        {
            UpdateUnknownTileArea3_One(18, 44, true);
            UpdateUnknownTileArea3_One(17, 44, true);
            UpdateUnknownTileArea3_One(16, 44, true);
            UpdateUnknownTileArea3_One(16, 43, true);
            UpdateUnknownTileArea3_One(16, 42, true);
            UpdateUnknownTileArea3_One(16, 41, true);
            UpdateUnknownTileArea3_One(17, 41, true);
            UpdateUnknownTileArea3_One(17, 40, true);
            UpdateUnknownTileArea3_One(18, 40, true);
            UpdateUnknownTileArea3_One(19, 40, true);
            UpdateUnknownTileArea3_One(20, 40, true);
            UpdateUnknownTileArea3_One(21, 40, true);
            UpdateUnknownTileArea3_One(22, 40, true);
            UpdateUnknownTileArea3_One(23, 40, true);
            UpdateUnknownTileArea3_One(23, 41, true);
            UpdateUnknownTileArea3_One(23, 42, true);
            UpdateUnknownTileArea3_One(23, 43, true);
            UpdateUnknownTileArea3_One(23, 44, true);
            UpdateUnknownTileArea3_One(23, 45, true);
            UpdateUnknownTileArea3_One(24, 45, true);
            UpdateUnknownTileArea3_One(25, 45, true);
            UpdateUnknownTileArea3_One(26, 45, true);
            UpdateUnknownTileArea3_One(27, 45, true);
            UpdateUnknownTileArea3_One(27, 44, true);
            UpdateUnknownTileArea3_One(27, 43, true);
            UpdateUnknownTileArea3_One(27, 42, true);
            UpdateUnknownTileArea3_One(28, 42, true);
            UpdateUnknownTileArea3_One(29, 42, true);
            UpdateUnknownTileArea3_One(30, 42, true);
            UpdateUnknownTileArea3_One(30, 43, true);
            UpdateUnknownTileArea3_One(30, 44, true);
            UpdateUnknownTileArea3_One(30, 45, true);
            UpdateUnknownTileArea3_One(30, 46, true);
            UpdateUnknownTileArea3_One(30, 47, true);
            UpdateUnknownTileArea3_One(30, 48, true);
            UpdateUnknownTileArea3_One(30, 49, true);
            UpdateUnknownTileArea3_One(31, 49, true);
            UpdateUnknownTileArea3_One(32, 49, true);
            UpdateUnknownTileArea3_One(32, 50, true);
            UpdateUnknownTileArea3_One(32, 51, true);
            UpdateUnknownTileArea3_One(32, 52, true);
            UpdateUnknownTileArea3_One(33, 52, true);
            UpdateUnknownTileArea3_One(34, 52, true);
            UpdateUnknownTileArea3_One(35, 52, true);
            UpdateUnknownTileArea3_One(36, 52, true);
            UpdateUnknownTileArea3_One(37, 52, true);
            UpdateUnknownTileArea3_One(37, 53, true);
            UpdateUnknownTileArea3_One(29, 49, true);
            UpdateUnknownTileArea3_One(28, 49, true);
            UpdateUnknownTileArea3_One(27, 49, true);
            UpdateUnknownTileArea3_One(27, 50, true);
            UpdateUnknownTileArea3_One(27, 51, true);
            UpdateUnknownTileArea3_One(27, 52, true);
            UpdateUnknownTileArea3_One(27, 53, true);
            UpdateUnknownTileArea3_One(31, 46, true);
            UpdateUnknownTileArea3_One(32, 46, true);
            UpdateUnknownTileArea3_One(33, 46, true);
            UpdateUnknownTileArea3_One(34, 46, true);
            UpdateUnknownTileArea3_One(35, 46, true);
            UpdateUnknownTileArea3_One(35, 45, true);
            UpdateUnknownTileArea3_One(35, 44, true);
            UpdateUnknownTileArea3_One(35, 43, true);
            UpdateUnknownTileArea3_One(35, 42, true);
            UpdateUnknownTileArea3_One(26, 42, true);
            UpdateUnknownTileArea3_One(26, 41, true);
            UpdateUnknownTileArea3_One(26, 40, true);
            UpdateUnknownTileArea3_One(15, 43, true);
            UpdateUnknownTileArea3_One(14, 43, true);
            UpdateUnknownTileArea3_One(13, 43, true);
            UpdateUnknownTileArea3_One(12, 43, true);
            UpdateUnknownTileArea3_One(12, 44, true);
            UpdateUnknownTileArea3_One(11, 44, true);
            UpdateUnknownTileArea3_One(10, 44, true);
            UpdateUnknownTileArea3_One(10, 45, true);
            UpdateUnknownTileArea3_One(10, 46, true);
            UpdateUnknownTileArea3_One(10, 47, true);
            UpdateUnknownTileArea3_One(10, 48, true);
            UpdateUnknownTileArea3_One(9, 48, true);
            UpdateUnknownTileArea3_One(8, 48, true);
            UpdateUnknownTileArea3_One(7, 48, true);
            UpdateUnknownTileArea3_One(6, 48, true);
            UpdateUnknownTileArea3_One(5, 48, true);
            UpdateUnknownTileArea3_One(4, 48, true);
            UpdateUnknownTileArea3_One(3, 48, true);
            UpdateUnknownTileArea3_One(3, 49, true);
            UpdateUnknownTileArea3_One(3, 50, true);
            UpdateUnknownTileArea3_One(3, 51, true);
            UpdateUnknownTileArea3_One(3, 52, true);
            UpdateUnknownTileArea3_One(3, 53, true);
            UpdateUnknownTileArea3_One(4, 53, true);
            UpdateUnknownTileArea3_One(5, 53, true);
            UpdateUnknownTileArea3_One(5, 52, true);
            UpdateUnknownTileArea3_One(5, 51, true);
            UpdateUnknownTileArea3_One(5, 50, true);
            UpdateUnknownTileArea3_One(3, 47, true);
            UpdateUnknownTileArea3_One(3, 46, true);
            UpdateUnknownTileArea3_One(3, 45, true);
            UpdateUnknownTileArea3_One(3, 44, true);
            UpdateUnknownTileArea3_One(4, 44, true);
            UpdateUnknownTileArea3_One(10, 49, true);
            UpdateUnknownTileArea3_One(10, 50, true);
            UpdateUnknownTileArea3_One(10, 51, true);
            UpdateUnknownTileArea3_One(9, 51, true);
            UpdateUnknownTileArea3_One(9, 44, true);
            UpdateUnknownTileArea3_One(8, 44, true);
            UpdateUnknownTileArea3_One(7, 44, true);
            UpdateUnknownTileArea3_One(6, 44, true);
            UpdateUnknownTileArea3_One(6, 45, true);
            UpdateUnknownTileArea3_One(6, 46, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area65()
        {
            UpdateUnknownTileArea3_One(24, 21, true);
            UpdateUnknownTileArea3_One(25, 21, true);
            UpdateUnknownTileArea3_One(26, 21, true);
            UpdateUnknownTileArea3_One(27, 21, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area66()
        {
            UpdateUnknownTileArea3_One(27, 54, true);
            UpdateUnknownTileArea3_One(26, 54, true);
            UpdateUnknownTileArea3_One(26, 53, true);
            UpdateUnknownTileArea3_One(26, 52, true);
            UpdateUnknownTileArea3_One(26, 51, true);
            UpdateUnknownTileArea3_One(26, 50, true);
            UpdateUnknownTileArea3_One(26, 49, true);
            UpdateUnknownTileArea3_One(26, 48, true);
            UpdateUnknownTileArea3_One(27, 48, true);
            UpdateUnknownTileArea3_One(28, 48, true);
            UpdateUnknownTileArea3_One(29, 48, true);
            UpdateUnknownTileArea3_One(29, 47, true);
            UpdateUnknownTileArea3_One(29, 46, true);
            UpdateUnknownTileArea3_One(29, 45, true);
            UpdateUnknownTileArea3_One(29, 44, true);
            UpdateUnknownTileArea3_One(29, 43, true);
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_Area67()
        {
            UpdateUnknownTileArea3_One(31, 48, true);
            UpdateUnknownTileArea3_One(32, 48, true);
            UpdateUnknownTileArea3_One(33, 48, true);
            UpdateUnknownTileArea3_One(34, 48, true);
            UpdateUnknownTileArea3_One(35, 48, true);
            UpdateUnknownTileArea3_One(36, 48, true);
            UpdateUnknownTileArea3_One(37, 48, true);
            UpdateUnknownTileArea3_One(37, 47, true);
            UpdateUnknownTileArea3_One(37, 46, true);
            UpdateUnknownTileArea3_One(37, 45, true);
            dungeonField.Invalidate();
            this.Update();
        }
        //private void UpdateUnknownTileArea3_Area68() { } X5ルートは一歩ずつ進ませる事とする。

        private void UpdateUnknownTileArea3_Area69()
        {
            UpdateUnknownTileArea3_One(5, 36, true);
            UpdateUnknownTileArea3_One(6, 36, true);
            UpdateUnknownTileArea3_One(5, 38, true);
            UpdateUnknownTileArea3_One(6, 38, true);
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_One(int Y, int X)
        {
            UpdateUnknownTileArea3_One(Y, X, false);
        }
        private void UpdateUnknownTileArea3_One(int Y, int X, bool disableInvalidate)
        {
            unknownTile[Y * Database.TRUTH_DUNGEON_COLUMN + X].Visible = false;
            knownTileInfo3[Y * Database.TRUTH_DUNGEON_COLUMN + X] = true;
            if (disableInvalidate == false)
            {
                dungeonField.Invalidate();
                this.Update();
            }
        }
        private void UpdateUnknownTile_Rectangle(int top, int left, int bottom, int right)
        {
            UpdateUnknownTile_Rectangle(top, left, bottom, right, false);
        }
        private void UpdateUnknownTile_Rectangle(int top, int left, int bottom, int right, bool disableInvalidate)
        {
            for (int ii = left; ii <= right; ii++)
            {
                for (int jj = top; jj <= bottom; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo3[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            if (disableInvalidate == false)
            {
                dungeonField.Invalidate();
                this.Update();
            }
        }

        private void UpdateUnknownTileArea3_Last0()
        {
            for (int ii = 55; ii <= 59; ii++)
            {
                for (int jj = 35; jj <= 39; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo3[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea3_Last(int jjStart)
        {
            for (int ii = 55; ii <= 59; ii++)
            {
                for (int jj = jjStart; jj <= jjStart + 2; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo3[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea3_TruthLast()
        {
            for (int ii = 55; ii <= 59; ii++)
            {
                for (int jj = 0; jj <= 1; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo3[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private void UpdateUnknownTileArea41()
        {
            for (int ii = 44; ii <= 48; ii++)
            {
                for (int jj = 17; jj <= 21; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo4[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea42()
        {
            for (int ii = 47; ii <= 47; ii++)
            {
                for (int jj = 14; jj <= 16; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    knownTileInfo4[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }
        private void UpdateUnknownTileArea43()
        {
            UpdateUnknownTileArea(knownTileInfo4, 23, 43, 19, 19);
        }
        private void UpdateUnknownTileArea(bool[] tile, int x1, int x2, int y1, int y2)
        {
            for (int ii = x1; ii <= x2; ii++)
            {
                for (int jj = y1; jj <= y2; jj++)
                {
                    unknownTile[jj * Database.TRUTH_DUNGEON_COLUMN + ii].Visible = false;
                    tile[jj * Database.TRUTH_DUNGEON_COLUMN + ii] = true;
                }
            }
            dungeonField.Invalidate();
            this.Update();
        }

        private bool UpdateUnknownTile()
        {
            bool newUpdate = false; // 新しくタイルが拓けた事を示すフラグ
            int currentPosNum = GetTileNumber(this.Player.Location);
            string currentTileInfo = "";
            bool[] targetKnownTileInfo = null;
            if (we.DungeonArea == 1)
            {
                currentTileInfo = tileInfo[currentPosNum];
                targetKnownTileInfo = knownTileInfo;
            }
            else if (we.DungeonArea == 2)
            {
                currentTileInfo = tileInfo2[currentPosNum];
                targetKnownTileInfo = knownTileInfo2;
            }
            else if (we.DungeonArea == 3)
            {
                currentTileInfo = tileInfo3[currentPosNum];
                targetKnownTileInfo = knownTileInfo3;
            }
            else if (we.DungeonArea == 4)
            {
                currentTileInfo = tileInfo4[currentPosNum];
                targetKnownTileInfo = knownTileInfo4;
            }
            else if (we.DungeonArea == 5)
            {
                currentTileInfo = tileInfo5[currentPosNum];
                targetKnownTileInfo = knownTileInfo5;
            }

            if (unknownTile[currentPosNum].Visible)
            {
                newUpdate = true;
            }
            unknownTile[currentPosNum].Visible = false;
            targetKnownTileInfo[currentPosNum] = true;

            // 上の可視化
            if (currentPosNum >= Database.TRUTH_DUNGEON_COLUMN &&
                (currentTileInfo != "Tile1-WallT.bmp" &&
                 currentTileInfo != "Tile1-WallTL.bmp" &&
                 currentTileInfo != "Tile1-WallTR.bmp" &&
                 currentTileInfo != "Tile1-WallTB.bmp" &&
                 currentTileInfo != "Tile1-WallTLR.bmp" &&
                 currentTileInfo != "Tile1-WallTLB.bmp" &&
                 currentTileInfo != "Tile1-WallTRB.bmp" &&
                 currentTileInfo != "Tile1-WallTLRB.bmp" &&
                 currentTileInfo != "Upstair-WallTLR.bmp" &&
                 currentTileInfo != "Downstair-WallTRB.bmp" &&
                 currentTileInfo != "Downstair-WallTLB.bmp" &&
                 currentTileInfo != "Downstair-WallT.bmp" &&
                 blueWallTop[currentPosNum] == false))
            {
                if (unknownTile[currentPosNum - Database.TRUTH_DUNGEON_COLUMN].Visible)
                {
                    newUpdate = true;
                }
                unknownTile[currentPosNum - Database.TRUTH_DUNGEON_COLUMN].Visible = false;
                targetKnownTileInfo[currentPosNum - Database.TRUTH_DUNGEON_COLUMN] = true;
            }

            // 左の可視化
            if (currentPosNum % Database.TRUTH_DUNGEON_COLUMN != 0 &&
                (currentTileInfo != "Tile1-WallL.bmp" &&
                 currentTileInfo != "Tile1-WallTL.bmp" &&
                 currentTileInfo != "Tile1-WallLR.bmp" &&
                 currentTileInfo != "Tile1-WallLB.bmp" &&
                 currentTileInfo != "Tile1-WallTLR.bmp" &&
                 currentTileInfo != "Tile1-WallTLB.bmp" &&
                 currentTileInfo != "Tile1-WallLRB.bmp" &&
                 currentTileInfo != "Tile1-WallTLRB.bmp" &&
                 currentTileInfo != "Upstair-WallLRB.bmp" &&
                 currentTileInfo != "Upstair-WallTLR.bmp" &&
                 currentTileInfo != "Downstair-WallTLB.bmp" &&
                 currentTileInfo != "Downstair-WallLRB.bmp" &&
                 currentTileInfo != "Tile1-WallLR-DummyL.bmp" &&
                 blueWallLeft[currentPosNum] == false))
            {
                if (unknownTile[currentPosNum - 1].Visible)
                {
                    newUpdate = true;
                }
                unknownTile[currentPosNum - 1].Visible = false;
                targetKnownTileInfo[currentPosNum - 1] = true;
            }

            // 右の可視化
            if (currentPosNum % Database.TRUTH_DUNGEON_COLUMN != (Database.TRUTH_DUNGEON_COLUMN - 1) &&
                (currentTileInfo != "Tile1-WallR.bmp" &&
                 currentTileInfo != "Tile1-WallTR.bmp" &&
                 currentTileInfo != "Tile1-WallLR.bmp" &&
                 currentTileInfo != "Tile1-WallRB.bmp" &&
                 currentTileInfo != "Tile1-WallTLR.bmp" &&
                 currentTileInfo != "Tile1-WallTRB.bmp" &&
                 currentTileInfo != "Tile1-WallLRB.bmp" &&
                 currentTileInfo != "Tile1-WallTLRB.bmp" &&
                 currentTileInfo != "Upstair-WallLRB.bmp" &&
                 currentTileInfo != "Upstair-WallRB.bmp" &&
                 currentTileInfo != "Upstair-WallTLR.bmp" &&
                 currentTileInfo != "Downstair-WallTRB.bmp" &&
                 currentTileInfo != "Downstair-WallLRB.bmp" &&
                 currentTileInfo != "Tile1-WallLR-DummyL.bmp" &&
                 currentTileInfo != "Tile1-WallR-DummyR.bmp" &&
                 blueWallRight[currentPosNum] == false))
            {
                if (unknownTile[currentPosNum + 1].Visible)
                {
                    newUpdate = true;
                }
                unknownTile[currentPosNum + 1].Visible = false;
                targetKnownTileInfo[currentPosNum + 1] = true;
            }

            // 下の可視化
            if (currentPosNum < (Database.TRUTH_DUNGEON_COLUMN * (Database.TRUTH_DUNGEON_ROW - 1)) &&
                (currentTileInfo != "Tile1-WallB.bmp" &&
                 currentTileInfo != "Tile1-WallTB.bmp" &&
                 currentTileInfo != "Tile1-WallLB.bmp" &&
                 currentTileInfo != "Tile1-WallRB.bmp" &&
                 currentTileInfo != "Tile1-WallTLB.bmp" &&
                 currentTileInfo != "Tile1-WallTRB.bmp" &&
                 currentTileInfo != "Tile1-WallLRB.bmp" &&
                 currentTileInfo != "Tile1-WallTLRB.bmp" &&
                 currentTileInfo != "Upstair-WallLRB.bmp" &&
                 currentTileInfo != "Upstair-WallRB.bmp" &&
                 currentTileInfo != "Downstair-WallTRB.bmp" &&
                 currentTileInfo != "Downstair-WallTLB.bmp" &&
                 currentTileInfo != "Downstair-WallLRB.bmp" &&
                 currentTileInfo != "Tile1-WallB-DummyB.bmp" &&
                 currentTileInfo != "Tile1-WallRB-DummyB.bmp" &&
                 blueWallBottom[currentPosNum] == false))
            {
                if (unknownTile[currentPosNum + Database.TRUTH_DUNGEON_COLUMN].Visible)
                {
                    newUpdate = true;
                }
                unknownTile[currentPosNum + Database.TRUTH_DUNGEON_COLUMN].Visible = false;
                targetKnownTileInfo[currentPosNum + Database.TRUTH_DUNGEON_COLUMN] = true;
            }
            this.Update();

            return newUpdate;
        }

        private void PreInitialize()
        {
            this.Hide();
            this.firstLoadIgnoreMusic = false;
            GroundOne.StopDungeonMusic();
            UpdateMainMessage("", true);
            for (int ii = 0; ii < this.tileInfo.Length; ii++)
            {
                tileInfo[ii] = "";
                tileInfo2[ii] = "";
                tileInfo3[ii] = "";
                tileInfo4[ii] = "";
                tileInfo5[ii] = "";
            }


            for (int ii = 0; ii < this.dungeonTile.Length; ii++)
            {
                this.dungeonTile[ii].Image = null;
                this.Controls.Remove(dungeonTile[ii]);
                this.unknownTile[ii].Image = null;
                this.Controls.Remove(unknownTile[ii]);
            }
            this.Player.BackgroundImage = null;
            this.Player.Update();
            TruthDungeon_Load(null, null);
            this.Show();
        }

        private void CallHomeTown()
        {
            CallHomeTown(false);
        }

        private void labelVigilance_Click(object sender, EventArgs e)
        {
            if (labelVigilance.Text == Database.TEXT_VIGILANCE_MODE)
            {
                labelVigilance.ForeColor = Color.DarkRed;
                labelVigilance.Text = Database.TEXT_FINDENEMY_MODE;
            }
            else
            {
                labelVigilance.ForeColor = Color.DeepSkyBlue;
                labelVigilance.Text = Database.TEXT_VIGILANCE_MODE;
            }
        }
        private void PathfindingMode_Click(object sender, EventArgs e)
        {
            labelVigilance.ForeColor = Color.DarkRed;
            labelVigilance.Text = Database.TEXT_FINDENEMY_MODE;
        }
        private void VigilanceMode_Click(object sender, EventArgs e)
        {
            labelVigilance.ForeColor = Color.DeepSkyBlue;
            labelVigilance.Text = Database.TEXT_VIGILANCE_MODE;
        }

        public void SetupPlayerStatus()
        {
            if (we.AvailableFirstCharacter)
            {
                FirstPlayerPanel.Visible = true;

                FirstPlayerName.Text = mc.FullName;
                if (mc.AvailableSkill)
                {
                    currentSkillPoint1.Visible = true;
                }
                else
                {
                    currentSkillPoint1.Visible = false;
                }

                if (mc.AvailableMana)
                {
                    currentManaPoint1.Visible = true;
                }
                else
                {
                    currentManaPoint1.Visible = false;
                }

                if (!mc.AvailableSkill && !mc.AvailableMana)
                {
                    FirstPlayerPanel.Height = 39;
                }
                else if (mc.AvailableSkill && !mc.AvailableMana)
                {
                    FirstPlayerPanel.Height = 52;
                }
                else
                {
                    FirstPlayerPanel.Height = BASE_CHARACTER_PANEL_HEIGHT;
                }

                currentLife1.Width = (int)((double)((double)mc.CurrentLife / (double)mc.MaxLife) * (double)BASE_LIFE_WIDTH);
                currentSkillPoint1.Width = (int)((double)((double)mc.CurrentSkillPoint / (double)mc.MaxSkillPoint) * (double)BASE_LIFE_WIDTH);
                currentManaPoint1.Width = (int)((double)((double)mc.CurrentMana / (double)mc.MaxMana) * (double)BASE_LIFE_WIDTH);
                currentLifeValue1.Text = mc.CurrentLife.ToString();
                currentSkillValue1.Text = mc.CurrentSkillPoint.ToString();
                currentManaValue1.Text = mc.CurrentMana.ToString();
                FirstPlayerPanel.Invalidate();
            }
            else
            {
                FirstPlayerPanel.Visible = false;
            }

            if (we.AvailableSecondCharacter)
            {
                SecondPlayerPanel.Visible = true;

                SecondPlayerName.Text = sc.FullName;

                if (sc.AvailableSkill)
                {
                    currentSkillPoint2.Visible = true;
                }
                else
                {
                    currentSkillPoint2.Visible = false;
                }

                if (sc.AvailableMana)
                {
                    currentManaPoint2.Visible = true;
                }
                else
                {
                    currentManaPoint2.Visible = false;
                }

                if (!sc.AvailableSkill && !sc.AvailableMana)
                {
                    SecondPlayerPanel.Height = 39;
                }
                else if (sc.AvailableSkill && !sc.AvailableMana)
                {
                    SecondPlayerPanel.Height = 52;
                }
                else
                {
                    SecondPlayerPanel.Height = BASE_CHARACTER_PANEL_HEIGHT;
                }
                currentLife2.Width = (int)((double)((double)sc.CurrentLife / (double)sc.MaxLife) * (double)BASE_LIFE_WIDTH);
                currentSkillPoint2.Width = (int)((double)((double)sc.CurrentSkillPoint / (double)sc.MaxSkillPoint) * (double)BASE_LIFE_WIDTH);
                currentManaPoint2.Width = (int)((double)((double)sc.CurrentMana / (double)sc.MaxMana) * (double)BASE_LIFE_WIDTH);
                currentLifeValue2.Text = sc.CurrentLife.ToString();
                currentSkillValue2.Text = sc.CurrentSkillPoint.ToString();
                currentManaValue2.Text = sc.CurrentMana.ToString();
                SecondPlayerPanel.Invalidate();
            }
            else
            {
                SecondPlayerPanel.Visible = false;
            }

            if (we.AvailableThirdCharacter)
            {
                ThirdPlayerPanel.Visible = true;

                ThirdPlayerName.Text = tc.FullName;

                if (tc.AvailableSkill)
                {
                    currentSkillPoint3.Visible = true;
                }
                else
                {
                    currentSkillPoint3.Visible = false;
                }

                if (tc.AvailableMana)
                {
                    currentManaPoint3.Visible = true;
                }
                else
                {
                    currentManaPoint3.Visible = false;
                }

                if (!tc.AvailableSkill && !tc.AvailableMana)
                {
                    ThirdPlayerPanel.Height = 39;
                }
                else if (sc.AvailableSkill && !sc.AvailableMana)
                {
                    ThirdPlayerPanel.Height = 52;
                }
                else
                {
                    ThirdPlayerPanel.Height = BASE_CHARACTER_PANEL_HEIGHT;
                }
                currentLife3.Width = (int)((double)((double)tc.CurrentLife / (double)tc.MaxLife) * (double)BASE_LIFE_WIDTH);
                currentSkillPoint3.Width = (int)((double)((double)tc.CurrentSkillPoint / (double)tc.MaxSkillPoint) * (double)BASE_LIFE_WIDTH);
                currentManaPoint3.Width = (int)((double)((double)tc.CurrentMana / (double)tc.MaxMana) * (double)BASE_LIFE_WIDTH);
                currentLifeValue3.Text = tc.CurrentLife.ToString();
                currentSkillValue3.Text = tc.CurrentSkillPoint.ToString();
                currentManaValue3.Text = tc.CurrentMana.ToString();
                ThirdPlayerPanel.Invalidate();
            }
            else
            {
                ThirdPlayerPanel.Visible = false;
            }
        }

        private void TruthDungeon_FormClosing(object sender, FormClosingEventArgs e)
        {
            GroundOne.StopDungeonMusic();
            if (GroundOne.sound != null)
            {
                GroundOne.sound.StopMusic();
                //GroundOne.sound.Disactive();
            }

        }

        private bool GetTreasure(string targetItemName)
        {
            return GetTreasure(targetItemName, false);
        }
        private bool GetTreasure(string targetItemName, bool MustGetIt)
        {
            CancelKeyDownMovement();

            using (OKRequest ok = new OKRequest())
            {
                ok.StartPosition = FormStartPosition.Manual;
                ok.Location = new Point(this.Location.X + 904, this.Location.Y + 708);
                if (MustGetIt == false)
                {
                    UpdateMainMessage("アイン:よっしゃ！お宝だぜ！");
                }
                ItemBackPack backpackData = new ItemBackPack(targetItemName);
                // [警告]：芋プログラミングです。整備してください。
                bool result1 = mc.AddBackPack(backpackData);
                if (result1)
                {
                    UpdateMainMessage("『" + backpackData.Name + "を手に入れました』");
                    return true;
                }
                else
                {
                    if (we.AvailableSecondCharacter)
                    {
                        bool result2 = sc.AddBackPack(backpackData);
                        if (result2)
                        {
                            UpdateMainMessage("『" + backpackData.Name + "を手に入れました』");
                            return true;
                        }
                        else
                        {
                            if (we.AvailableThirdCharacter)
                            {
                                bool result3 = tc.AddBackPack(backpackData);
                                if (result3)
                                {
                                    UpdateMainMessage("『" + backpackData.Name + "を手に入れました』");
                                    return true;
                                }
                                else
                                {
                                    UpdateMainMessage("荷物がいっぱいです。" + backpackData.Name + "を入手できませんでした。");
                                    return false;
                                }
                            }
                            else
                            {
                                UpdateMainMessage("荷物がいっぱいです。" + backpackData.Name + "を入手できませんでした。");
                                return false;
                            }
                        }
                    }
                    else
                    {
                        UpdateMainMessage("荷物がいっぱいです。" + backpackData.Name + "を入手できませんでした。");
                        return false;
                    }
                }
            }
        }

        int MovementInterval = 100;
        private void movementTimer_Tick(object sender, EventArgs e)
        {
            movementTimer.Interval = this.MovementInterval;
            // [警告] ２階の技の部屋エリアＣのために優先順位を変更したが、それでいいのだろうか？
            if (this.keyUp)
            {
                UpdatePlayersKeyEvents(0);
            }
            else if (this.keyRight)
            {
                UpdatePlayersKeyEvents(2);
            }
            else if (this.keyDown)
            {
                UpdatePlayersKeyEvents(3);
            }
            else if (this.keyLeft)
            {
                UpdatePlayersKeyEvents(1);
            }
        }

        private void CancelKeyDownMovement()
        {
            this.keyUp = false;
            this.keyDown = false;
            this.keyLeft = false;
            this.keyRight = false;
            movementTimer.Enabled = false;
            movementTimer.Stop();
        }

        private void agilityRoomTimer_Tick(object sender, EventArgs e)
        {
            agilityRoomTimer.Enabled = false;

            if (!we.dungeonEvent233_Complete)
            {
                UpdateMainMessage("　　　　『ッブブー！！』");

                if (!we.dungeonEvent233_Fail1)
                {
                    UpdateMainMessage("アイン：ッゲ！　何か警告音が！？");
                }
                else if (!we.dungeonEvent233_Fail2)
                {
                    UpdateMainMessage("アイン：しまった！　警告音だ！！");
                }
                else
                {
                    UpdateMainMessage("アイン：うおおおぉぉ！　ダッシュダッシュ！！");
                }

                UpdateMainMessage("（  アイン足元の床が突如開いた  ）");

                UpdateMainMessage("　＜＜＜　ッパカ ＞＞＞");

                UpdateMainMessage("アイン：どわぁぁぁぁーーーっっ・・・");

                UpdateViewAndLocation(57, 27, 30, 16);
                dungeonField.Invalidate();
                GroundOne.PlaySoundEffect("EnemyAttack1.mp3");

                if (!we.dungeonEvent233_Fail1)
                {
                    we.dungeonEvent233_Fail1 = true;

                    UpdateMainMessage("アイン：っいて！！");

                    UpdateMainMessage("ラナ：ちょっと何やってんのよ？　遅いわね・・・");

                    UpdateMainMessage("アイン：んな事言ったってよ。ほんの少し立ち止まっただけだぜ？");

                    if (we.AvailableThirdCharacter)
                    {
                        UpdateMainMessage("ランディス：ボケが。迷ってねえでとっとと行け。");
                    }
                    else
                    {
                        UpdateMainMessage("ラナ：頑張ってよね。とにかく早く進めばいいみたいだし♪");
                    }

                    UpdateMainMessage("アイン：っくそ・・・今度こそ・・・");
                }
                else if (!we.dungeonEvent233_Fail2)
                {
                    we.dungeonEvent233_Fail2 = true;

                    UpdateMainMessage("アイン：っいて！！");

                    UpdateMainMessage("ラナ：また失敗したわけ！？　ほんっと使えないわね・・・");

                    UpdateMainMessage("アイン：待て待て、見えてないエリアだぞ？　ガンガン進めないだろが。");

                    if (we.AvailableThirdCharacter)
                    {
                        UpdateMainMessage("ランディス：ザコが。ダッシュも知らねぇのか。");
                    }
                    else
                    {
                        UpdateMainMessage("ラナ：ダッシュすればいいじゃない♪　");
                    }

                    UpdateMainMessage("アイン：ダッシュ！？　どうやるんだよ、そんなの。");

                    if (we.AvailableThirdCharacter)
                    {
                        UpdateMainMessage("ランディス：自分で見つけろ。");
                    }
                    else
                    {
                        UpdateMainMessage("ラナ：ガンバってね、アイン♪　");
                    }
                    UpdateMainMessage("アイン：くそぉ・・・");

                    UpdateMainMessage("アイン：ああ、良いさ！");

                    UpdateMainMessage("アイン：見せてやるぜ！　俺のスーパーダッシュをな！！");
                }
                else if (!we.dungeonEvent233_Fail3)
                {
                    we.dungeonEvent233_Fail3 = true;
                    UpdateMainMessage("アイン：っいて！！");

                    UpdateMainMessage("ラナ：ダッシュ、お疲れさま♪");

                    UpdateMainMessage("アイン：おいおい！　これ無理だろ！？");

                    if (we.AvailableThirdCharacter)
                    {
                        UpdateMainMessage("ランディス：泣き言、言ってんじぇねえ。");

                        UpdateMainMessage("アイン：師匠、後生だ。ダッシュを教えてくれ。");

                        UpdateMainMessage("ランディス：ッチ・・・ザコが。");

                        UpdateMainMessage("ランディス：移動ボタンをテンポよく連打しろ。");

                        UpdateMainMessage("アイン：っはい・・・？");

                        UpdateMainMessage("ランディス：いいから連打しろっつってんだ！　ボケが！！");

                        UpdateMainMessage("アイン：ワーーーー、分かった分かった！　ハイハイハイ！！");

                    }
                    else
                    {
                        UpdateMainMessage("ラナ：ダッシュ知らないと無理よね・・・確かに");

                        UpdateMainMessage("アイン：なあ、ラナ。すまねえけど、教えてくれないか？");

                        UpdateMainMessage("ラナ：うーんとね・・・そうね、何て言うのかしら。");

                        UpdateMainMessage("ラナ：移動キーをタイミング良く連続で押すのよ。");

                        UpdateMainMessage("アイン：移動キーを・・・タイミング良く連続で・・・？");

                        UpdateMainMessage("ラナ：普通に押してるだけだと、一定間隔で進んでるでしょ？");

                        UpdateMainMessage("アイン：まあな。");

                        UpdateMainMessage("アイン：あー、なるほど。　なんとなく分かったぜ！");
                    }

                    UpdateMainMessage("アイン：っしゃ、今度こそダッシュして見せるぜ！");
                }
                else
                {
                    UpdateMainMessage("アイン：っいて！！");

                    UpdateMainMessage("ラナ：アイン、ダッシュは移動ボタンをタイミング良く連打よ？");

                    UpdateMainMessage("アイン：ああ、分かってるって・・・");

                    UpdateMainMessage("アイン：っくそ！　今度こそ！！");
                }
            }
            else if (!we.dungeonEvent234_Complete)
            {
                DungeonTwoAgilityRoomTwoFailMessage();
            }
            else if (!we.dungeonEvent235_Complete)
            {
                if (!this.keyDown && !this.keyUp && !this.keyLeft && !this.keyRight)
                {
                    UpdateMainMessage("　　　　『ッブブー！！』");

                    if (!we.dungeonEvent233_Fail1 || !we.dungeonEvent233_Fail2 || !we.dungeonEvent233_Fail3 ||
                        !we.dungeonEvent234_Fail1 || !we.dungeonEvent234_Fail2 || !we.dungeonEvent234_Fail3)
                    {
                        UpdateMainMessage("アイン：しまった！　警告音だ！！");
                    }
                    else
                    {
                        UpdateMainMessage("アイン：ッゲ！　何か警告音が！？");
                    }

                    UpdateMainMessage("（  アイン足元の床が突如開いた  ）");

                    UpdateMainMessage("　＜＜＜　ッパカ ＞＞＞");

                    UpdateMainMessage("アイン：どわぁぁぁぁーーーっっ・・・");
                    GroundOne.PlaySoundEffect("EnemyAttack1.mp3");

                    UpdateViewAndLocation(33, 27, 30, 16);
                    dungeonField.Invalidate();

                    if (!we.dungeonEvent235_Fail1)
                    {
                        we.dungeonEvent235_Fail1 = true;

                        UpdateMainMessage("アイン：っいて！！");

                        UpdateMainMessage("ラナ：まあ、見事に失敗だったわけね。");

                        UpdateMainMessage("アイン：失敗も成功のうちさ。");

                        UpdateMainMessage("ラナ：何言ってんのよ、純粋に失敗じゃない。");

                        if (we.AvailableThirdCharacter)
                        {
                            UpdateMainMessage("ランディス：おい。");
                        }
                        else
                        {
                            UpdateMainMessage("ラナ：アイン、分からないなら相談してよね？");
                        }

                        UpdateMainMessage("アイン：いやいや、もう１回やらせてくれ、頼むぜ。");
                    }
                    else if (!we.dungeonEvent235_Fail2)
                    {
                        we.dungeonEvent235_Fail2 = true;

                        UpdateMainMessage("アイン：っいて！！");

                        UpdateMainMessage("ラナ：ちょっと、またまた失敗だけど？");

                        UpdateMainMessage("アイン：１００の失敗があり、ようやく１つの成功を掴むのさ。");

                        UpdateMainMessage("ラナ：１００回もやってらんないでしょ、あんたバカじゃないの？");

                        if (we.AvailableThirdCharacter)
                        {
                            UpdateMainMessage("　（ランディスの目が光っている）");

                            UpdateMainMessage("アイン：った、タンマ！！　今度こそマジ分かった！！");

                            UpdateMainMessage("ランディス：ほぉ");

                            UpdateMainMessage("アイン：ままま、任せてくれよ！　ッハッハッハ！！");
                        }
                        else
                        {
                            UpdateMainMessage("ラナ：本当に分かってるのかしら。　テキトーに言ってるでしょ！？");

                            UpdateMainMessage("アイン：っい、いやいやいや！　今度こそマジ分かった！！");

                            UpdateMainMessage("ラナ：ホントにホント？");

                            UpdateMainMessage("アイン：ホントにホントだ、任せてくれよ！　ッハッハッハ！！");
                        }
                    }
                    else if (!we.dungeonEvent235_Fail3)
                    {
                        we.dungeonEvent235_Fail3 = true;

                        UpdateMainMessage("アイン：っいて！！");

                        UpdateMainMessage("　　　『ドバキィィィ！！！』（ラナのコンビネーションキックが炸裂）");

                        if (we.AvailableThirdCharacter)
                        {
                            UpdateMainMessage("　　　『ズゴゴゴゴォオオン！！！』（ランディスのビートラッシュが炸裂）");
                        }

                        UpdateMainMessage("アイン：ゲ・・・ゲッフオォォ・・・");

                        UpdateMainMessage("アイン：そんなタイミング良く蹴る事無いだろ？");

                        if (we.AvailableThirdCharacter)
                        {
                            UpdateMainMessage("アイン：師匠まで連続コンボかまさないでくれよ。");
                        }

                        if (we.AvailableThirdCharacter)
                        {
                            UpdateMainMessage("ランディス：分からない事は、分からないと言え。");

                            UpdateMainMessage("アイン：スイマセン・・・教えてください");

                            UpdateMainMessage("ランディス：いいかザコ、良く聞け。");

                            UpdateMainMessage("ランディス：「押しっぱなし」にしろ。");

                            UpdateMainMessage("ランディス：離すんじゃねえぞ。");

                            UpdateMainMessage("アイン：何を？");

                            UpdateMainMessage("ランディス：「キー」だ。");

                            UpdateMainMessage("アイン：キー？");

                            UpdateMainMessage("　（ランディスの目が色濃くなった）");

                            UpdateMainMessage("アイン：ハイハイ！キーを押しっぱなしだな！　超了解！！");

                        }
                        else
                        {
                            UpdateMainMessage("ラナ：やっぱりホントは分かってないんでしょ？");

                            UpdateMainMessage("アイン：スイマセン・・・教えてください");

                            UpdateMainMessage("ラナ：最初っからそう言えば良いじゃないのよ、もう。");

                            UpdateMainMessage("ラナ：呼吸を置かず。要するに「キー押しっぱなし」って事よ。");

                            UpdateMainMessage("アイン：「キー」って何だ？");

                            UpdateMainMessage("ラナ：「キー」に決まってるでしょ！？　良いじゃない別にそんなトコ追求しなくても。");

                            UpdateMainMessage("アイン：マジかよ。ま、まあ分かった。");

                            UpdateMainMessage("アイン：「キー」を離さずに押しっぱなしをキープするんだな。了解了解！");
                        }
                    }
                    else
                    {
                        UpdateMainMessage("アイン：っいて！！");

                        UpdateMainMessage("ラナ：「キー押しっぱなし」で進むのよ、頑張ってよね？　ホント");

                        UpdateMainMessage("アイン：ハイ・・・");
                    }
                }
                else
                {
                    agilityRoomTimer.Start();
                }
            }
            else if (we.dungeonEvent236 && !we.dungeonEvent236_Complete)
            {
                // 黒タイルをまず描画
                for (int ii = 33; ii <= 35; ii++)
                {
                    int tempBase = 36;
                    if (ii == 34) { tempBase = 37; }

                    for (int jj = tempBase; jj <= 44; jj++)
                    {
                        dungeonTile[ii * Database.TRUTH_DUNGEON_COLUMN + jj].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_41);
                    }
                }

                // 踏み込み判定
                int CurrentTile = GetTileNumber(this.Player.Location);
                int CurrentColumn = CurrentTile % Database.TRUTH_DUNGEON_COLUMN;
                int CurrentRow = CurrentTile / Database.TRUTH_DUNGEON_COLUMN;

                if ((CurrentRow != 34) ||
                     ((CurrentColumn == 37) && (this.Area4_ShadowTileNum == 34 * Database.TRUTH_DUNGEON_COLUMN + 36) && ((33 + (Area4_InnerTimerCount / 60) % 3) != 34)) ||
                     ((CurrentColumn == 38) && (this.Area4_ShadowTileNum == 34 * Database.TRUTH_DUNGEON_COLUMN + 37) && ((33 + (Area4_InnerTimerCount / 45) % 3) != 34)) ||
                     ((CurrentColumn == 39) && (this.Area4_ShadowTileNum == 34 * Database.TRUTH_DUNGEON_COLUMN + 38) && ((33 + (Area4_InnerTimerCount / 30) % 3) != 34)) ||
                     ((CurrentColumn == 40) && (this.Area4_ShadowTileNum == 34 * Database.TRUTH_DUNGEON_COLUMN + 39) && ((33 + (Area4_InnerTimerCount / 20) % 3) != 34)) ||
                     ((CurrentColumn == 41) && (this.Area4_ShadowTileNum == 34 * Database.TRUTH_DUNGEON_COLUMN + 40) && ((33 + (Area4_InnerTimerCount / 15) % 3) != 34)) ||
                     ((CurrentColumn == 42) && (this.Area4_ShadowTileNum == 34 * Database.TRUTH_DUNGEON_COLUMN + 41) && ((33 + (Area4_InnerTimerCount / 12) % 3) != 34)) ||
                     ((CurrentColumn == 43) && (this.Area4_ShadowTileNum == 34 * Database.TRUTH_DUNGEON_COLUMN + 42) && ((33 + (Area4_InnerTimerCount / 9) % 3) != 34)) ||
                     ((CurrentColumn == 44) && (this.Area4_ShadowTileNum == 34 * Database.TRUTH_DUNGEON_COLUMN + 43) && ((33 + (Area4_InnerTimerCount / 6) % 3) != 34))
                    )
                {
                    UpdateMainMessage("　　　　『ッブブー！！』");

                    if (!we.dungeonEvent233_Fail1 || !we.dungeonEvent233_Fail2 || !we.dungeonEvent233_Fail3 ||
                        !we.dungeonEvent234_Fail1 || !we.dungeonEvent234_Fail2 || !we.dungeonEvent234_Fail3 ||
                        !we.dungeonEvent235_Fail1 || !we.dungeonEvent235_Fail2 || !we.dungeonEvent235_Fail3)
                    {
                        UpdateMainMessage("アイン：しまった！　警告音だ！！");
                    }
                    else
                    {
                        UpdateMainMessage("アイン：ッゲ！　何か警告音が！？");
                    }

                    UpdateMainMessage("（  アイン足元の床が突如開いた  ）");

                    UpdateMainMessage("　＜＜＜　ッパカ ＞＞＞");

                    UpdateMainMessage("アイン：どわぁぁぁぁーーーっっ・・・");
                    GroundOne.PlaySoundEffect("EnemyAttack1.mp3");

                    UpdateViewAndLocation(35, 34, 19, 20);
                    dungeonField.Invalidate();

                    this.Area4_InnerTimerCount = 0;
                    this.Area4_ShadowTileNum = -1;

                    if (!we.dungeonEvent236_Fail1)
                    {
                        we.dungeonEvent236_Fail1 = true;

                        UpdateMainMessage("アイン：っいて！！");

                        UpdateMainMessage("ラナ：床が「ッポヮア」っと浮かび上がって来てるわね。");

                        UpdateMainMessage("アイン：ああ、あれにタイミング良く飛び乗っていくだけだな。");


                        if (we.AvailableThirdCharacter)
                        {
                            UpdateMainMessage("ランディス：乗るだけなんだろ。　早くクリアしてこい。");
                        }
                        else
                        {
                            UpdateMainMessage("ラナ：楽勝なんでしょ？　早くクリアしてちょうだいね♪");
                        }
                        UpdateMainMessage("アイン：くそう分かったって・・・もう１回だ。");
                    }
                    else if (!we.dungeonEvent236_Fail2)
                    {
                        we.dungeonEvent236_Fail2 = true;

                        UpdateMainMessage("アイン：っいて！！");

                        UpdateMainMessage("ラナ：何か向こうの方に行くたびに失敗してない？");

                        UpdateMainMessage("アイン：少しずつタイミングが早くなってきてるんだよ。");

                        if (we.AvailableThirdCharacter)
                        {
                            UpdateMainMessage("ランディス：くだらんな。");

                            UpdateMainMessage("アイン：うっせえな。タイミングが狂うのは苦手なんだよ。");

                            UpdateMainMessage("ランディス：タイミングのせいか。ザコらしいな。");

                            UpdateMainMessage("アイン：い、いや。タイミングのせいじゃねえ。");

                            UpdateMainMessage("アイン：どんなのであれ、やってやるさ！　もう１回だ！");
                        }
                        else
                        {
                            UpdateMainMessage("ラナ：ゆっくり落ち着いて行けば良いんじゃない？");

                            UpdateMainMessage("アイン：まあ、そうなんだろうけど、どうも焦っちまうな。");

                            UpdateMainMessage("ラナ：まあ、ココから見てるから、バカアインが慌ててる所を♪");

                            UpdateMainMessage("アイン：っけ・・・次で終わらせてやるぜ！");
                        }
                    }
                    else if (!we.dungeonEvent236_Fail3)
                    {
                        we.dungeonEvent236_Fail3 = true;

                        UpdateMainMessage("アイン：っいて！！");

                        UpdateMainMessage("ラナ：アインにとって、少し苦手なトコかもね。");

                        UpdateMainMessage("アイン：そういうわけじゃねえんだけどな・・・");

                        if (we.AvailableThirdCharacter)
                        {
                            UpdateMainMessage("ランディス：テンポ良く行け。　考えるな。");

                            UpdateMainMessage("アイン：んな事ぐらい分かってるよ。");

                            UpdateMainMessage("ランディス：てめぇは考えすぎだ。　ザコにはちょうど良い機会だ、突っ走れや。");

                            UpdateMainMessage("アイン：考えすぎじゃねえって、何か合わねえだけさ。");

                            UpdateMainMessage("アイン：まあ・・・");

                            UpdateMainMessage("ランディス：ッラァ！　とっとと行け！！");

                            UpdateMainMessage("アイン：わわ分かったって！　ハイハイ！！");

                        }
                        else
                        {
                            UpdateMainMessage("ラナ：テンポ良く行って見たらどう？");

                            UpdateMainMessage("アイン：テンポ良くか？");

                            UpdateMainMessage("ラナ：そうよ、１回１回止まってると、クセになって余計失敗するわよ。");

                            UpdateMainMessage("アイン：んまあ、ずっと見てると余計迷うのも確かだな・・・");
                        }
                        UpdateMainMessage("アイン：おし、テンポ良く・・・今度こそ！");
                    }
                    else
                    {
                        UpdateMainMessage("アイン：っいて！！");

                        UpdateMainMessage("ラナ：・・・（ジィ〜〜〜）");

                        if (we.AvailableThirdCharacter)
                        {
                            UpdateMainMessage("ランディス：・・・（ビカーン）");
                        }

                        UpdateMainMessage("アイン：ッグ・・・ハイハイ・・・今度こそ・・・");
                    }
                    return;
                }

                // 正解タイル更新
                this.Area4_InnerTimerCount++;

                int x = 0;

                if (CurrentColumn == 36)
                {
                    if (this.Area4_InnerTimerCount > 60 * 3) this.Area4_InnerTimerCount = 0;
                    x = 33 + (Area4_InnerTimerCount / 60) % 3;
                    dungeonTile[x * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                }
                else if (CurrentColumn == 37)
                {
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);

                    if (this.Area4_InnerTimerCount > 45 * 3) this.Area4_InnerTimerCount = 0;
                    x = 33 + (Area4_InnerTimerCount / 45) % 3;
                    dungeonTile[x * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                }
                else if (CurrentColumn == 38)
                {
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);

                    if (this.Area4_InnerTimerCount > 30 * 3) this.Area4_InnerTimerCount = 0;
                    x = 33 + (Area4_InnerTimerCount / 30) % 3;
                    dungeonTile[x * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                }
                else if (CurrentColumn == 39)
                {
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);

                    if (this.Area4_InnerTimerCount > 20 * 3) this.Area4_InnerTimerCount = 0;
                    x = 33 + (Area4_InnerTimerCount / 20) % 3;
                    dungeonTile[x * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                }
                else if (CurrentColumn == 40)
                {
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);

                    if (this.Area4_InnerTimerCount > 15 * 3) this.Area4_InnerTimerCount = 0;
                    x = 33 + (Area4_InnerTimerCount / 15) % 3;
                    dungeonTile[x * Database.TRUTH_DUNGEON_COLUMN + 41].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                }
                else if (CurrentColumn == 41)
                {
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 41].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);

                    if (this.Area4_InnerTimerCount > 12 * 3) this.Area4_InnerTimerCount = 0;
                    x = 33 + (Area4_InnerTimerCount / 12) % 3;
                    dungeonTile[x * Database.TRUTH_DUNGEON_COLUMN + 42].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                }
                else if (CurrentColumn == 42)
                {
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 41].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 42].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);

                    if (this.Area4_InnerTimerCount > 9 * 3) this.Area4_InnerTimerCount = 0;
                    x = 33 + (Area4_InnerTimerCount / 9) % 3;
                    dungeonTile[x * Database.TRUTH_DUNGEON_COLUMN + 43].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                }
                else if (CurrentColumn == 43)
                {
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 41].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 42].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 43].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);

                    if (this.Area4_InnerTimerCount > 6 * 3) this.Area4_InnerTimerCount = 0;
                    x = 33 + (Area4_InnerTimerCount / 6) % 3;
                    dungeonTile[x * Database.TRUTH_DUNGEON_COLUMN + 44].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                }
                else if (CurrentColumn == 44)
                {
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 37].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 38].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 39].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 40].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 41].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 42].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 43].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                    dungeonTile[34 * Database.TRUTH_DUNGEON_COLUMN + 44].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_40);
                }

                dungeonField.Invalidate();

                this.Area4_ShadowTileNum = GetTileNumber(this.Player.Location);

                agilityRoomTimer.Start();
            }
            else if (we.dungeonEvent237 && !we.dungeonEvent237_Complete)
            {
                UpdateMainMessage("　　　　『ッブブー！！』");

                if (!we.dungeonEvent233_Fail1 || !we.dungeonEvent233_Fail2 || !we.dungeonEvent233_Fail3 ||
                    !we.dungeonEvent234_Fail1 || !we.dungeonEvent234_Fail2 || !we.dungeonEvent234_Fail3 ||
                    !we.dungeonEvent235_Fail1 || !we.dungeonEvent235_Fail2 || !we.dungeonEvent235_Fail3 ||
                    !we.dungeonEvent236_Fail1 || !we.dungeonEvent236_Fail2 || !we.dungeonEvent236_Fail3)
                {
                    UpdateMainMessage("アイン：しまった！　警告音だ！！");
                }
                else
                {
                    UpdateMainMessage("アイン：ッゲ！　何か警告音が！？");
                }

                UpdateMainMessage("（  アイン足元の床が突如開いた  ）");

                UpdateMainMessage("　＜＜＜　ッパカ ＞＞＞");

                UpdateMainMessage("アイン：どわぁぁぁぁーーーっっ・・・");
                GroundOne.PlaySoundEffect("EnemyAttack1.mp3");

                UpdateViewAndLocation(47, 34, 30, 20);
                dungeonField.Invalidate();

                UpdateMainMessage("アイン：っいて！！");

                if (!we.dungeonEvent237_Fail1)
                {
                    we.dungeonEvent237_Fail1 = true;

                    UpdateMainMessage("ラナ：駄目だったみたいね。");

                    UpdateMainMessage("アイン：っくそ、間に合ってねえか。");

                    UpdateMainMessage("ラナ：単純に時間勝負って事かしら？");

                    UpdateMainMessage("アイン：ああ、あの看板の内容だし。間違いねえ。");

                    if (we.AvailableThirdCharacter)
                    {
                        UpdateMainMessage("ランディス：久しぶりじゃねえか。その雰囲気。");

                        UpdateMainMessage("アイン：え？");

                        UpdateMainMessage("ランディス：自覚ねぇんだな。");

                        UpdateMainMessage("アイン：いつもと同じだって。　今度こそやってみせる。");
                    }
                    else
                    {
                        UpdateMainMessage("ラナ：でもアイン、今回なんか雰囲気違ってない？");

                        UpdateMainMessage("アイン：そうか？　いつもこんなもんだろ。");

                        UpdateMainMessage("ラナ：う〜ん、まあ別に良けど。テキトーに頑張ってきて。");

                        UpdateMainMessage("アイン：ああ、今度こそ！");
                    }
                }
                else if (!we.dungeonEvent237_Fail2)
                {
                    we.dungeonEvent237_Fail2 = true;

                    UpdateMainMessage("ラナ：うーん、残念だったわね。");

                    UpdateMainMessage("アイン：もう１回だ。　行くぜ。");

                    UpdateMainMessage("ラナ：うん、行ってらっしゃい。");

                    if (we.AvailableThirdCharacter)
                    {
                        UpdateMainMessage("ラナ：・・・ふぅ。");

                        UpdateMainMessage("ランディス：気になるか？");

                        UpdateMainMessage("ラナ：え？ええ、少し・・・");

                        UpdateMainMessage("ランディス：ああ見えて、いつも手抜きだ。");

                        UpdateMainMessage("ラナ：アインがですか？");

                        UpdateMainMessage("ランディス：マジモードは滅多に見れねぇしな。見といてやれ。");

                        UpdateMainMessage("ラナ：ハ、ハイ。");

                    }
                    else
                    {
                        UpdateMainMessage("ラナ：((( こっち見向きもしてないわね・・・)))", true);
                    }
                }
                else if (!we.dungeonEvent237_Fail3)
                {
                    we.dungeonEvent237_Fail3 = true;

                    UpdateMainMessage("ラナ：ザーンネン♪");

                    UpdateMainMessage("アイン：壁にぶつかったら間に合わねえな。");

                    UpdateMainMessage("ラナ：少し呼吸置くとかしてみたら、どう♪");

                    UpdateMainMessage("アイン：ああ、サンキュー");

                    UpdateMainMessage("ラナ：それから最初のスタートダッシュとかで");

                    UpdateMainMessage("アイン：っじゃ、もう１回行ってくるぜ！");

                    UpdateMainMessage("ラナ：・・・");

                    if (we.AvailableThirdCharacter)
                    {
                        UpdateMainMessage("ラナ：あんの素っ気無い態度。　失礼よね。");

                        UpdateMainMessage("ランディス：ザコにしちゃ上出来だ。");

                        UpdateMainMessage("ラナ：失敗してるのに、ですか？");

                        UpdateMainMessage("ランディス：失敗はどぉでもいい。");

                        UpdateMainMessage("ラナ：確かに、失敗するたびに、雰囲気がこう・・・");

                        UpdateMainMessage("ランディス：やる気んなってるって事だろ。");

                        UpdateMainMessage("ラナ：いつもやる気ないんですかね？アインって。");

                        UpdateMainMessage("ランディス：本気ではねぇな。");

                        UpdateMainMessage("ランディス：「常に本気にしない」ってトコだ。");

                        UpdateMainMessage("ラナ：意識的に抑制がかかってるって事ですか！？　ウソですよね！？");

                        UpdateMainMessage("ランディス：半分ウソだ。");

                        UpdateMainMessage("ラナ：ですよね♪　あのバカアインに限って・・・");

                        UpdateMainMessage("ラナ：・・・");

                        UpdateMainMessage("ラナ：半分は本当なんですか？");

                        UpdateMainMessage("ランディス：さぁな。");
                    }
                    else
                    {
                        UpdateMainMessage("ラナ：((( こっち見向きもしてないわね・・・)))", true);
                    }
                }
                else
                {
                    UpdateMainMessage("ラナ：残念♪　また行くの？");

                    UpdateMainMessage("アイン：ああ、もう１回だ！");
                }
            }
        }

        private void DungeonTwoAgilityRoomTwoFailMessage()
        {
            UpdateMainMessage("　　　　『ッブブー！！』");

            if (!we.dungeonEvent233_Fail1 || !we.dungeonEvent233_Fail2 || !we.dungeonEvent233_Fail3)
            {
                UpdateMainMessage("アイン：しまった！　警告音だ！！");
            }
            else
            {
                UpdateMainMessage("アイン：ッゲ！　何か警告音が！？");
            }

            UpdateMainMessage("（  アイン足元の床が突如開いた  ）");

            UpdateMainMessage("　＜＜＜　ッパカ ＞＞＞");

            UpdateMainMessage("アイン：どわぁぁぁぁーーーっっ・・・");
            GroundOne.PlaySoundEffect("EnemyAttack1.mp3");

            UpdateViewAndLocation(45, 27, 30, 16);
            dungeonField.Invalidate();

            this.ShadowTileNumber = -1;
            this.BeforeDirectionNumber = 0;

            if (!we.dungeonEvent234_Fail1)
            {
                we.dungeonEvent234_Fail1 = true;

                UpdateMainMessage("アイン：っいて！！");

                UpdateMainMessage("ラナ：あんた何かアッチいったり、コッチ行ったり何やってんのよ？");


                UpdateMainMessage("アイン：声がしてるんだよ。『左！』とか『上！』っとかな。");

                UpdateMainMessage("ラナ：ふーん、そうなんだ。");

                UpdateMainMessage("ラナ：でも後ろから見てると、ちょっと笑っちゃうわよ。");

                if (we.AvailableThirdCharacter)
                {
                    UpdateMainMessage("ランディス：ザコにお似合いの動きだな。");
                }

                UpdateMainMessage("アイン：くそお、笑い者にしやがって・・・見てろよ？　今度こそ！");
            }
            else if (!we.dungeonEvent234_Fail2)
            {
                we.dungeonEvent234_Fail2 = true;

                UpdateMainMessage("アイン：っいて！！");

                UpdateMainMessage("ラナ：っちょ、また失敗したわけ？　理屈は分かってるの？");

                UpdateMainMessage("アイン：『下！』とか『左！』って声が脳に直接響くからな。");

                UpdateMainMessage("アイン：それに従って歩を進めるだけさ。理屈は単純だけどな・・・");

                if (we.AvailableThirdCharacter)
                {
                    UpdateMainMessage("ランディス：ザコには荷が重いか");

                    UpdateMainMessage("アイン：いや、こんな単純なアクション、絶対やってみせるぜ！");
                }
                else
                {
                    UpdateMainMessage("ラナ：何だったら交代する？");

                    UpdateMainMessage("アイン：いや、ここは俺がやる。任せておけ！");
                }
            }
            else
            {
                UpdateMainMessage("アイン：っいて！！");

                UpdateMainMessage("ラナ：アイン、大丈夫？");

                UpdateMainMessage("ラナ：『左』は『←』、『上』は『↑』、『下』は『↓』だからね？");

                UpdateMainMessage("アイン：ああ、分かってるって。　くそ、今度こそ！！");

            }
        }


        private void UpdateViewAndLocation(int locationX, int locationY, int viewX, int viewY)
        {
            UpdateViewPoint(-Database.DUNGEON_MOVE_LEN * viewX, -Database.DUNGEON_MOVE_LEN * viewY);
            UpdatePlayerLocationInfo(Database.DUNGEON_MOVE_LEN * (locationX - viewX), Database.DUNGEON_MOVE_LEN * (locationY - viewY));
        }

        private void StatusArea_Click(object sender, EventArgs e)
        {
            if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd && !GroundOne.WE2.SeekerEvent507)
            {
                mainMessage.Text = "アイン：・・・　・・・";
                return;
            }

            using (TruthStatusPlayer sp = new TruthStatusPlayer())
            {
                sp.MC = mc;
                if (we.AvailableSecondCharacter)
                {
                    sp.SC = sc;
                }
                if (we.AvailableThirdCharacter)
                {
                    sp.TC = tc;
                }
                sp.WE = we;
                sp.StartPosition = FormStartPosition.CenterParent;
                sp.ShowDialog();
                mc = sp.MC;
                if (we.AvailableSecondCharacter)
                {
                    sc = sp.SC;
                }
                if (we.AvailableThirdCharacter)
                {
                    tc = sp.TC;
                }
                if (sp.DialogResult == DialogResult.Abort)
                {
                    CallHomeTown();
                    return;
                }

                SetupPlayerStatus();
            }
        }

        private void BattleSetttingArea_Click(object sender, EventArgs e)
        {
            if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd && !GroundOne.WE2.SeekerEvent507)
            {
                mainMessage.Text = "アイン：・・・　・・・";
                return;
            }

            using (TruthBattleSetting tbs = new TruthBattleSetting())
            {
                tbs.StartPosition = FormStartPosition.CenterParent;
                tbs.MC = this.mc;
                tbs.SC = this.sc;
                tbs.TC = this.tc;
                tbs.WE = this.we;
                tbs.ShowDialog();
                if (tbs.DialogResult == System.Windows.Forms.DialogResult.OK)
                {
                    this.mc = tbs.MC;
                    this.sc = tbs.SC;
                    this.tc = tbs.TC;
                    this.we = tbs.WE;
                }
            }
        }

        private void SaveArea_Click(object sender, EventArgs e)
        {
            if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd)
            {
                if (!GroundOne.WE2.SeekerEvent506)
                {
                    mainMessage.Text = "アイン：・・・　・・・";
                    return;
                }
                else
                {
                    using(TruthPlayerInformation TPI = new TruthPlayerInformation())
                    {
                        TPI.StartPosition = FormStartPosition.CenterParent;
                        TPI.SetupMessage = "ここまでの記録は自動セーブとなります。ゲームを終わりたい場合は、ゲーム終了を押してください。";
                        TPI.ShowDialog();
                    }
                    return;
                }
            }

            using (SaveLoad sl = new SaveLoad())
            {
                sl.MC = this.MC;
                sl.SC = this.SC;
                sl.TC = this.TC;
                sl.WE = this.WE;
                sl.KnownTileInfo = this.knownTileInfo;
                sl.KnownTileInfo2 = this.knownTileInfo2;
                sl.KnownTileInfo3 = this.knownTileInfo3;
                sl.KnownTileInfo4 = this.knownTileInfo4;
                sl.KnownTileInfo5 = this.knownTileInfo5;
                sl.Truth_KnownTileInfo = this.Truth_KnownTileInfo; // 後編追加
                sl.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2; // 後編追加
                sl.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3; // 後編追加
                sl.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4; // 後編追加
                sl.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5; // 後編追加
                sl.SaveMode = true;
                sl.StartPosition = FormStartPosition.CenterParent;
                sl.ShowDialog();
            }
        }

        private void LoadArea_Click(object sender, EventArgs e)
        {
            if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd)
            {
                if (!GroundOne.WE2.SeekerEvent506)
                {
                    mainMessage.Text = "アイン：・・・　・・・";
                    return;
                }
                else
                {
                    using (TruthPlayerInformation TPI = new TruthPlayerInformation())
                    {
                        TPI.StartPosition = FormStartPosition.CenterParent;
                        TPI.SetupMessage = "ここまでの記録は自動セーブとなります。ゲームを終わりたい場合は、ゲーム終了を押してください。";
                        TPI.ShowDialog();
                    }
                    return;
                }
            }

            using (SaveLoad sl = new SaveLoad())
            {
                sl.StartPosition = FormStartPosition.CenterParent;
                sl.ShowDialog();
                if (sl.DialogResult == DialogResult.Cancel)
                {
                    return;
                }
                else
                {
                    this.MC = sl.MC;
                    this.SC = sl.SC;
                    this.TC = sl.TC;
                    this.WE = sl.WE;
                    this.knownTileInfo = sl.KnownTileInfo;
                    this.knownTileInfo2 = sl.KnownTileInfo2;
                    this.knownTileInfo3 = sl.KnownTileInfo3;
                    this.knownTileInfo4 = sl.KnownTileInfo4;
                    this.knownTileInfo5 = sl.KnownTileInfo5;
                    this.Truth_KnownTileInfo = sl.Truth_KnownTileInfo; // 後編追加
                    this.Truth_KnownTileInfo2 = sl.Truth_KnownTileInfo2; // 後編追加
                    this.Truth_KnownTileInfo3 = sl.Truth_KnownTileInfo3; // 後編追加
                    this.Truth_KnownTileInfo4 = sl.Truth_KnownTileInfo4; // 後編追加
                    this.Truth_KnownTileInfo5 = sl.Truth_KnownTileInfo5; // 後編追加

                    PreInitialize();
                }
            }
        }

        private void EndArea_Click(object sender, EventArgs e)
        {
            if (GroundOne.WE2.RealWorld && !GroundOne.WE2.SeekerEnd)
            {
                if (!GroundOne.WE2.SeekerEvent506 && we.DungeonArea == 4)
                {
                    mainMessage.Text = "アイン：・・・　・・・";
                    return;
                }
                else if (!GroundOne.WE2.AutoSaveInfo)
                {
                    using(TruthPlayerInformation TPI = new TruthPlayerInformation())
                    {
                        TPI.StartPosition = FormStartPosition.CenterParent;
                        TPI.SetupMessage = "ここまでの記録をセーブしました。次回起動は、ここから再開となります。";
                        TPI.ShowDialog();
                    }
                    GroundOne.WE2.AutoSaveInfo = true;
                    Method.AutoSaveTruthWorldEnvironment();
                    Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                    this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                    return;
                }
                else
                {
                    Method.AutoSaveTruthWorldEnvironment();
                    Method.AutoSaveRealWorld(this.MC, this.SC, this.TC, this.WE, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                    this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                    return;
                }
            }

            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
            {
                ynrw.StartPosition = FormStartPosition.CenterParent;
                ynrw.MainMessage = "セーブしていない場合、現在データは破棄されます。セーブしますか？";
                ynrw.ShowDialog();
                if (ynrw.DialogResult == DialogResult.Yes)
                {
                    using (ESCMenu esc = new ESCMenu())
                    {
                        esc.MC = this.MC;
                        esc.SC = this.SC;
                        esc.TC = this.TC;
                        esc.WE = this.WE;
                        esc.KnownTileInfo = this.knownTileInfo;
                        esc.KnownTileInfo2 = this.knownTileInfo2;
                        esc.KnownTileInfo3 = this.knownTileInfo3;
                        esc.KnownTileInfo4 = this.knownTileInfo4;
                        esc.KnownTileInfo5 = this.knownTileInfo5;
                        esc.Truth_KnownTileInfo = this.Truth_KnownTileInfo; // 後編追加
                        esc.Truth_KnownTileInfo2 = this.Truth_KnownTileInfo2; // 後編追加
                        esc.Truth_KnownTileInfo3 = this.Truth_KnownTileInfo3; // 後編追加
                        esc.Truth_KnownTileInfo4 = this.Truth_KnownTileInfo4; // 後編追加
                        esc.Truth_KnownTileInfo5 = this.Truth_KnownTileInfo5; // 後編追加
                        esc.StartPosition = FormStartPosition.CenterParent;
                        esc.OnlySave = true;
                        esc.ShowDialog();
                    }
                }

                ynrw.MainMessage = "タイトルへ戻りますか？";
                ynrw.ShowDialog();
                if (ynrw.DialogResult == DialogResult.Yes)
                {
                    this.DialogResult = DialogResult.Cancel;
                }
            }
        }

        private void StatusArea_Leave(object sender, EventArgs e)
        {
            menuFocus.Visible = false;
        }
        private void StatusArea_Enter(object sender, EventArgs e)
        {
            menuFocus.Visible = false;
            menuFocus.Update();

            int adjust = 60;
            int basePos = 410;
            if (sender.Equals(StatusArea)) menuFocus.Location = new Point(820, basePos + adjust * 0 - 6);
            else if (sender.Equals(BattleSetttingArea)) menuFocus.Location = new Point(820, basePos + adjust * 1 + 3);
            else if (sender.Equals(SaveArea)) menuFocus.Location = new Point(820, basePos + adjust * 2 + 5);
            else if (sender.Equals(LoadArea)) menuFocus.Location = new Point(820, basePos + adjust * 3 + 10);
            else if (sender.Equals(EndArea)) menuFocus.Location = new Point(820, basePos + adjust * 4 + 18);

            menuFocus.Visible = true;
        }

        #region "現実世界イベント"
        private void AutoMove(int direction, int delay = 100)
        {
            int moveX = 0;
            int moveY = 0;
            if (direction == 0) moveY = -Database.DUNGEON_MOVE_LEN;
            else if (direction == 1) moveX = -Database.DUNGEON_MOVE_LEN;
            else if (direction == 2) moveX = Database.DUNGEON_MOVE_LEN;
            else if (direction == 3) moveY = Database.DUNGEON_MOVE_LEN;

            // 上端ダンジョン外を見せないようにする
            // 右端ダンジョン外を見せないようにする
            // 左端ダンジョン外を見せないようにする
            // 下端ダンジョン外を見せないようにする
            // 上端近辺での↑移動はプレイヤー移動
            // 右端近辺での→移動はプレイヤー移動
            // 左端近辺での←移動はプレイヤー移動
            // 下端近辺での↓移動はプレイヤー移動
            if ((direction == 0 && this.viewPoint.Y >= 0) ||
                 (direction == 1 && this.viewPoint.X >= 0) ||
                 (direction == 2 && this.viewPoint.X <= -Database.TRUTH_DUNGEON_COLUMN * Database.DUNGEON_MOVE_LEN / 2) ||
                 (direction == 3 && this.viewPoint.Y <= -Database.TRUTH_DUNGEON_ROW * Database.DUNGEON_MOVE_LEN / 2) ||
                 (direction == 0 && this.Player.Location.Y >= Database.DUNGEON_MOVE_LEN * 8) ||
                 (direction == 1 && this.Player.Location.X >= Database.DUNGEON_MOVE_LEN * 10) ||
                 (direction == 2 && this.Player.Location.X <= Database.DUNGEON_MOVE_LEN * 20) ||
                 (direction == 3 && this.Player.Location.Y <= Database.DUNGEON_MOVE_LEN * 12))
            {
                UpdatePlayerLocationInfo(this.Player.Location.X + moveX, this.Player.Location.Y + moveY, false);
            }
            else
            {
                UpdateViewPoint(viewPoint.X - moveX, viewPoint.Y - moveY);
            }

            bool lowSpeed = UpdateUnknownTile();
            System.Threading.Thread.Sleep(delay);
            Application.DoEvents();
            this.dungeonField.Invalidate();
        }

        private void RefreshWater()
        {
            if (mc != null) { mc.ResurrectPlayer(mc.MaxLife); mc.CurrentLife = mc.MaxLife; mc.CurrentMana = mc.MaxMana; mc.CurrentSkillPoint = mc.MaxSkillPoint; }
            if (sc != null) { sc.ResurrectPlayer(mc.MaxLife); sc.CurrentLife = sc.MaxLife; sc.CurrentMana = sc.MaxMana; sc.CurrentSkillPoint = sc.MaxSkillPoint; }
            if (tc != null) { tc.ResurrectPlayer(mc.MaxLife); tc.CurrentLife = tc.MaxLife; tc.CurrentMana = tc.MaxMana; tc.CurrentSkillPoint = tc.MaxSkillPoint; }
        }
        private bool ExecSomeEvent_ReadWorld()
        {
            int tilenum = GetTileNumber(Player.Location);
            int row = tilenum / Database.TRUTH_DUNGEON_COLUMN;
            int column = tilenum % Database.TRUTH_DUNGEON_COLUMN;
            
            if (GroundOne.WE2.StartSeeker)
            {
                #region "４階、現実世界スタート"
                if (!GroundOne.WE2.SeekerEvent1)
                {
                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：・・・　・・・");

                    UpdateMainMessage("アイン：・・・");

                    UpdateMainMessage("　　（　時間の感覚はなくなりつつあった　）");

                    UpdateMainMessage("　　（　ラナの死体を手に抱えたまま　）");

                    UpdateMainMessage("　　（　もう何かしらの思考パターンは形成されなくなった　）");

                    UpdateMainMessage("　　（　街に戻る意義もなく、ダンジョンを進める意義もなく　）");

                    UpdateMainMessage("　　（　ただ、時間だけが過ぎていった　）");

                    UpdateMainMessage("　　（　・・・ラナ・・・　）");

                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：・・・　・・・");

                    UpdateMainMessage("アイン：・・・");

                    UpdateMainMessage("　　（　何かを、決心をしたわけではなかった　）");

                    UpdateMainMessage("　　（　何かに、希望を見出したわけでもなかった　）");

                    UpdateMainMessage("　　（　何らかの、方法を探ろうとするわけでもなかった　）");

                    UpdateMainMessage("　　（　無意味に何も無く　）");

                    UpdateMainMessage("　　（　気が付けば、足が動いていた　）");

                    UpdateMainMessage("　　（　目的はない　）");

                    UpdateMainMessage("　　（　ラナが死んだ以上、目的思考はすべて俺の中では動作してない　）");

                    UpdateMainMessage("　　（　意味もなく、本質もなく、目的もなく　）");

                    UpdateMainMessage("　　（　俺は、無思慮に歩を進め始めた　）");

                    // 青扉を解放
                    blueWallRight[20 * Database.TRUTH_DUNGEON_COLUMN + 48] = false;
                    blueWallLeft[20 * Database.TRUTH_DUNGEON_COLUMN + 49] = false;
                    // 赤扉を解放
                    dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 21 + 46].Name = Database.TILEINFO_13;
                    dungeonTile[Database.TRUTH_DUNGEON_COLUMN * 21 + 46].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                    tileInfo4[Database.TRUTH_DUNGEON_COLUMN * 21 + 46] = Database.TILEINFO_13;

                    UpdateUnknownTile();
                    dungeonField.Invalidate();

                    GroundOne.WE2.SeekerEvent1 = true;
                }
                #endregion
                //　パーティ編成：アイン・ウォーレンス単独　　　　：ホームタウンで済
                //  閉ざされし【終わりの部屋】への到達　　　　　　：１階
                //　定められし【神々の試練】、＜迂回＞を選択　　　：２階
                //　【海と大地、そして天空】　完全詠唱　　　　　　：２階
                //　【愚者】と【賢者】の究極２択、　<破棄>を選択　：３階
                //　【虚無の鏡】、　<原点解>へと到達　　　　　　　：３階
                //　第四階層、無間地獄を踏破　　　　　　　　　　　：４階
                //　神剣フェルトゥーシュの入手　　　　　　　　　　：４階
                //　第四階層、第三の像を検知　　　　　　　　　　　：４階
                //　偶像の崩壊、そして真実世界へ　　　　　　　　　：最後
                #region "１階スタート"
                else if (!GroundOne.WE2.SeekerEvent701 && row == 14 && column == 39 && GroundOne.WE2.RealDungeonArea == 1)
                {
                    UpdateMainMessage("アイン：（　まずは１階だ　）");

                    UpdateMainMessage("アイン：（　ここは通過すべきルートは自由だが　）");

                    UpdateMainMessage("アイン：（　一つだけ必ず通らなければならない部屋がある　）");

                    UpdateMainMessage("アイン：（　それは【終わりの部屋】だ　）");

                    UpdateMainMessage("アイン：（　おれはもう、その部屋を知っている・・・　）");

                    UpdateMainMessage("アイン：（　行こう　）");

                    UpdateMainMessage("", true);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);

                    GroundOne.WE2.SeekerEvent701 = true;
                }
                #endregion
                #region "終わりの部屋"
                else if (!GroundOne.WE2.SeekerEvent702 && row == 29 && column == 47 && GroundOne.WE2.RealDungeonArea == 1)
                {
                    UpdateMainMessage("アイン：（　・・・ここだ　）");

                    UpdateMainMessage("アイン：（　俺はこの部屋は、何かしら始まりが起こる部屋だと錯覚していたが　）");

                    UpdateMainMessage("アイン：（　違う・・・ここは、明らかに終わりの部屋だ　）");

                    UpdateMainMessage("アイン：（　理由は明確だ　）");

                    UpdateMainMessage("アイン：（　ラナとここに来た時、俺は決定的な過ちを犯していた　）");

                    UpdateMainMessage("アイン：（　この部屋は、神々の試練を受けるための登録の場なんだ　）");

                    UpdateMainMessage("アイン：（　ここに訪れなければラナが試練を受けるハメには、ならなかった　）");

                    UpdateMainMessage("アイン：（　いいや、そもそも　）");

                    UpdateMainMessage("アイン：（　ラナをここまで連れて来る事自体がいけなかったんだ　）");

                    UpdateMainMessage("アイン：（　ここの迂回が出来ていたとしても　）");

                    UpdateMainMessage("アイン：（　何か別のルートから、結局ラナが犠牲対象になりうる　）");

                    UpdateMainMessage("アイン：（　そういう仕組みなんだろう、おそらく・・・　）");

                    UpdateMainMessage("アイン：（　俺が　）");

                    UpdateMainMessage("アイン：（　俺だけが、神々の試練への登録を行う　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　基本的に立ち寄るだけで認識されているはずだ　）");

                    UpdateMainMessage("アイン：（　他に行くべき所はない、次の階層へと進めよう　）");

                    UpdateMainMessage("", true);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(1);

                    GroundOne.WE2.SeekerEvent702 = true;
                }
                #endregion
                #region "１階、警告看板"
                else if (!GroundOne.WE2.SeekerEvent703 && row == 3 && column == 37 && GroundOne.WE2.RealDungeonArea == 1)
                {
                    UpdateMainMessage("アイン：（　看板があるな・・・なになに　）");

                    UpdateMainMessage("　　　　『近道にこそ、危険が潜む』");

                    UpdateMainMessage("アイン：（　何かラナがすぐさま引き止めそうな看板内容だな、ハハハ・・・　）");

                    UpdateMainMessage("アイン：（　だが、ここは・・・　）");

                    UpdateMainMessage("アイン：（　このまま進める　）");

                    UpdateMainMessage("", true);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);

                    GroundOne.WE2.SeekerEvent703 = true;
                }
                #endregion
                #region "１階、最後の扉通過"
                else if (!GroundOne.WE2.SeekerEvent704 && row == 6 && column == 5 && GroundOne.WE2.RealDungeonArea == 1)
                {
                    UpdateMainMessage("アイン：（　この先へ進めば・・・次の階層だ　）");

                    UpdateMainMessage("アイン：（　行こう　）");

                    UpdateMainMessage("", true);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);

                    GroundOne.WE2.SeekerEvent704 = true;                        
                }
                #endregion
                #region "１階ボス撃破"
                else if (!GroundOne.WE2.SeekerEvent705 && row == 4 && column == 11 && GroundOne.WE2.RealDungeonArea == 1)
                {
                    UpdateMainMessage("アイン：（　ボスのお出ましのようだな　）");

                    UpdateMainMessage("絡みつくフランシス：【【【キィィィシャアアアァァァ！！！】】】");

                    UpdateMainMessage("アイン：（　悪いが　）");

                    UpdateMainMessage("アイン：（　今は俺一人、パーティを組んでないわけだ　）");

                    UpdateMainMessage("アイン：（　つまり、誰にも気を配る必要はないって事だ　）");

                    UpdateMainMessage("アイン：（　サクっと終わらせるぜ　）");

                    UpdateMainMessage("　　＜＜＜　アインの展開する剣の軌道が、絡みつくフランシスの胴体に無数に瞬時に刻まれた ＞＞＞");

                    UpdateMainMessage("絡みつくフランシス：ッピ・・・ピギャアアァァ・・・");

                    UpdateMainMessage("アイン：（　悪いな、あっさり倒しちまって・・・　）");

                    UpdateMainMessage("アイン：（　よし、次へ進めるぜ　）");

                    UpdateMainMessage("", true);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);

                    GroundOne.WE2.SeekerEvent705 = true;
                }
                #endregion
                #region "１階から２階へ"
                else if (!GroundOne.WE2.SeekerEvent706 && row == 6 && column == 17 && GroundOne.WE2.RealDungeonArea == 1)
                {
                    UpdateMainMessage("アイン：（　階段だ、降りよう　）");

                    JumpByNormal(19, 29);
                    SetupDungeonMapping(2);
                    dungeonField.Invalidate();
                    UpdateMainMessage("", true);

                    GroundOne.WE2.RealDungeonArea = 2;
                    GroundOne.WE2.SeekerEvent706 = true;
                }
                #endregion
                #region "２階スタート"
                else if (!GroundOne.WE2.SeekerEvent801 && row == 19 && column == 29 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（　・・・２階・・・）");

                    UpdateMainMessage("アイン：（　４方向に分かれているが　）");

                    UpdateMainMessage("アイン：（　まずは見てみるのが先決だな　）");

                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);

                    GroundOne.WE2.SeekerEvent801 = true;
                }
                else if (!GroundOne.WE2.SeekerEvent802 && row == 19 && column == 25 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("　　　　『力を示す者、戻り無き通路、真実への選択』");

                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);

                    GroundOne.WE2.SeekerEvent802 = true;
                }
                else if (!GroundOne.WE2.SeekerEvent803 && row == 15 && column == 29 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("　　　　『心を示す者、無間の部屋、存在しない解への選択』");

                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);

                    GroundOne.WE2.SeekerEvent803 = true;
                }
                else if (!GroundOne.WE2.SeekerEvent804 && row == 19 && column == 33 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("　　　　『知を示す者、隠されし通路、秘められた選択』");

                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);

                    GroundOne.WE2.SeekerEvent804 = true;
                }
                else if (!GroundOne.WE2.SeekerEvent805 && row == 23 && column == 29 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("　　　　『技を示す者、順序ある通路、閉ざされた選択』");

                    UpdateMainMessage("アイン：（　これで、４つの方向性が分かったな　）");

                    UpdateMainMessage("アイン：（　・・・　ここは　・・・　）");

                    UpdateMainMessage("アイン：（　知を示す者の方を調べるのが、おそらく先決だ）");

                    UpdateMainMessage("アイン：（　行こう　）");

                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);

                    GroundOne.WE2.SeekerEvent805 = true;
                }
                #endregion
                #region "知の部屋【絶対試練】"
                else if (!GroundOne.WE2.SeekerEvent806 && row == 8 && column == 49 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（　・・・何かある・・・　）");

                    UpdateMainMessage("アイン：（　地面にくぼみがほんの少し見えるな　）");

                    UpdateMainMessage("アイン：（　足を踏み入れると、台座のような物が上がってくる仕組みだな　）");

                    UpdateMainMessage("アイン：（　罠か・・・いやそれとも・・・　）");

                    UpdateMainMessage("アイン：（　こんな時、師匠ならきっと　）");

                    UpdateMainMessage("アイン：（　迷わず、踏み込む　）");

                    UpdateMainMessage("アイン：（　罠だと分かっていれば、大丈夫だ　）");

                    UpdateMainMessage("アイン：（　よし、踏み込むぞ　）");

                    UpdateMainMessage("　　　　『突如台座がアインの前に浮き上がった。直後、薄黄色い空間にアインが包まれた。』");

                    UpdateMainMessage("　　　　『絶対試練：汝、答えを示せ。』");

                    UpdateMainMessage("アイン：（　答えか・・・　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　石版の数は１５　）");

                    UpdateMainMessage("アイン：（　順番通りに押せば、おそらく　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　いや　）");

                    UpdateMainMessage("アイン：（　この節・・・それからこの節も・・・　）");

                    UpdateMainMessage("アイン：（　なんだこれ、所々だが文節の単語が違ってるじゃねえか　）");

                    UpdateMainMessage("アイン：（　慌てて操作して、【答え】を導いていたらおそらく・・・　）");

                    UpdateMainMessage("アイン：（　・・・　ここと　・・・　）");

                    UpdateMainMessage("　　　＜＜＜　ッカコン ＞＞＞　");

                    UpdateMainMessage("アイン：（　・・・　これも　・・・　）");

                    UpdateMainMessage("　　　＜＜＜　ッカコン ＞＞＞　");

                    UpdateMainMessage("アイン：（　石版の中に小さなスリットがある、やっぱり・・・　）");


                    UpdateMainMessage("アイン：（　・・・　これで多分最後だ　・・・　）");

                    UpdateMainMessage("　　　＜＜＜　ッカコン ＞＞＞　");

                    UpdateMainMessage("アイン：（　違う文節の所だけ、ひっくり返る仕組みだったってワケだ　）");

                    UpdateMainMessage("アイン：（　あ、あとココも・・・あぶねえな　）");

                    UpdateMainMessage("　　　＜＜＜　ッカコン ＞＞＞　");

                    UpdateMainMessage("アイン：（　これで全部だな　）");

                    UpdateMainMessage("　　　＜＜＜　その瞬間、台座全体が淡く光り始めた ＞＞＞　");

                    UpdateMainMessage("アイン：（　よし、合ってるみたいだ　）");

                    UpdateMainMessage("アイン：（　後は文節の石版を順序通り押して行くだけだ　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　これでＯＫのはずだ　）");
                    
                    UpdateMainMessage("　　　　『空間が激しくフラッシュし、凝縮された空間へと連続的に小さくなる！！！』");

                    UpdateMainMessage("　　　　『パパパパパパパ！！！！ッバシュウウウゥゥゥン！！！！！！！』");

                    UpdateMainMessage("　　　　『空間は弾け飛んだ後、アインの前から台座が完全に取り除かれていた』");

                    UpdateMainMessage("アイン：（　ふぅ、どうやら終わったみたいだな　）");

                    UpdateMainMessage("アイン：（　ん・・・？何か落ちてる・・・？　）");

                    UpdateMainMessage("アイン：（　違う、この床・・・何か小さく刻印がきざんである。");

                    UpdateMainMessage("　　　　（　始まりなるは火と水、後に死と生を経て、人と理を成し、そして鳥は天へと還る　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（  なるほどな、そういう理論か　）");

                    UpdateMainMessage("アイン：（  だとしたら・・・まだこの区画に在るって事だな　）");

                    UpdateMainMessage("アイン：（  探索を続けよう　）");

                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);

                    GroundOne.WE2.SeekerEvent806 = true;
                }
                #endregion
                #region "【知】の部屋で、【心】関連の看板"
                else if (!GroundOne.WE2.SeekerEvent807 && row == 5 && column == 51 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  看板だ　）");

                    UpdateMainMessage("　　　　『  終わりなるは、心　』");

                    UpdateMainMessage("アイン：（  ・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（  心を示す者の部屋が、おそらく一番最後　）");

                    UpdateMainMessage("アイン：（  サイドにレバーが二つ　）");

                    UpdateMainMessage("アイン：（  ・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（  なるほどな　）");

                    AutoMove(0);

                    GroundOne.WE2.SeekerEvent807 = true;
                }
                #endregion
                #region "複合レバー【知】の部屋で、【心】関連"
                else if (!GroundOne.WE2.SeekerEvent808 && row == 4 && column == 51 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  このレバーだな　）");

                    UpdateMainMessage("アイン：（  『歌い、木々が囁き始める』　）");

                    UpdateMainMessage("アイン：（  【鳥】・・・【空】・・・【樹】・・・【霊】・・・　）");

                    UpdateMainMessage("アイン：（  ・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　【鳥】で決まりだな　）");

                    UpdateMainMessage("アイン：（　よし、もう一つ。すぐそこのレバーもチェックだ　）");

                    AutoMove(3);
                    AutoMove(3);

                    GroundOne.WE2.SeekerEvent808 = true;
                }
                else if (!GroundOne.WE2.SeekerEvent809 && row == 6 && column == 51 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  『青く照らし、地は新緑を謳歌する』　）");

                    UpdateMainMessage("アイン：（  【湖】、【人】、【天】、【海】・・・　）");

                    UpdateMainMessage("アイン：（  ・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　ココは【天】で間違いないだろう　）");

                    UpdateMainMessage("アイン：（　・・・特に何の音もしない、まだ残りがあるからだろう　）");

                    UpdateMainMessage("アイン：（　次の部屋へ行こう、次は・・・　）");

                    UpdateMainMessage("アイン：（　技の部屋だ　）");

                    AutoMove(0, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(1);

                    // 技１
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(1, 10);
                    AutoMove(1, 10);
                    AutoMove(1, 10);
                    AutoMove(1, 10);
                    AutoMove(1, 10);
                    AutoMove(1, 10);
                    AutoMove(1, 10);
                    AutoMove(1, 10);
                    AutoMove(1, 10);
                    AutoMove(1, 10);
                    System.Threading.Thread.Sleep(500);
                    AutoMove(1);
                    AutoMove(1);
                    // 技２
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(3);
                    AutoMove(1);
                    System.Threading.Thread.Sleep(500);
                    AutoMove(1);
                    AutoMove(1);
                    // 技３
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    System.Threading.Thread.Sleep(500);
                    AutoMove(2);
                    AutoMove(2);
                    // 技４
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(2, 300);
                    AutoMove(2, 270);
                    AutoMove(2, 240);
                    AutoMove(2, 210);
                    AutoMove(2, 180);
                    AutoMove(2, 150);
                    AutoMove(2, 120);
                    AutoMove(2,  90);
                    AutoMove(2,  60);
                    AutoMove(2,  30);
                    System.Threading.Thread.Sleep(500);
                    AutoMove(2);
                    AutoMove(2);
                    // 技５
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(2, 50);
                    AutoMove(0, 50);
                    AutoMove(2, 50);
                    AutoMove(3, 50);
                    AutoMove(3, 50);
                    AutoMove(2, 50);
                    AutoMove(0, 50);
                    AutoMove(0, 50);
                    AutoMove(2, 50);
                    AutoMove(2, 50);
                    AutoMove(2, 50);
                    AutoMove(3, 50);
                    AutoMove(1, 50);
                    AutoMove(1, 50);
                    AutoMove(3, 50);
                    AutoMove(2, 50);
                    AutoMove(2, 50);
                    AutoMove(2, 50);
                    AutoMove(0, 50);
                    AutoMove(0, 50);
                    AutoMove(2, 50);
                    AutoMove(3, 50);
                    AutoMove(3, 50);
                    AutoMove(2, 50);
                    AutoMove(0, 50);
                    AutoMove(2, 50);
                    System.Threading.Thread.Sleep(500);
                    AutoMove(2);
                    AutoMove(2);
                    // 技看板最後
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);
                    AutoMove(2);
                    System.Threading.Thread.Sleep(500);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(0);

                    GroundOne.WE2.SeekerEvent809 = true;
                }
                #endregion
                #region "複合レバー【技】の部屋で、【知】関連の看板"
                else if (!GroundOne.WE2.SeekerEvent810 && row == 37 && column == 30 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  看板だ　）");

                    UpdateMainMessage("　　　　『  始まりなるは、知　』");

                    UpdateMainMessage("アイン：（ 【知】は最初か・・・　）");

                    UpdateMainMessage("アイン：（ ここもサイドレバーが二つ　）");

                    UpdateMainMessage("アイン：（ 同じパターンだな、やっておこう　）");

                    AutoMove(1);

                    GroundOne.WE2.SeekerEvent810 = true;
                }
                #endregion
                #region "複合レバー【技】の部屋で、【知】関連"
                else if (!GroundOne.WE2.SeekerEvent811 && row == 37 && column == 29 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  このレバーだな　）");

                    UpdateMainMessage("アイン：（  『流れ落ち、偉大なる海、天へと還り、無限循環』　）");

                    UpdateMainMessage("アイン：（  【生】、【水】、【死】、【光】・・・　）");

                    UpdateMainMessage("アイン：（　【水】で間違いないだろう　）");

                    UpdateMainMessage("アイン：（　もう一つ隣にレバーがある、やっていこう　）");

                    AutoMove(2);
                    AutoMove(2);

                    GroundOne.WE2.SeekerEvent811 = true;
                }
                else if (!GroundOne.WE2.SeekerEvent812 && row == 37 && column == 31 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  『あらゆる場所、可能な場を生めつくし、創元浄化』　）");

                    UpdateMainMessage("アイン：（  【天】、【災】、【灰】、【火】・・・　）");

                    UpdateMainMessage("アイン：（　間違いなく【火】だ　）");

                    UpdateMainMessage("アイン：（　・・・特に何の音もしない、次へ行くしかないだろう　）");

                    UpdateMainMessage("アイン：（　次は、心の部屋だ　）");

                    AutoMove(1, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(3, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(3, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(2);
                    AutoMove(0);
                    System.Threading.Thread.Sleep(500);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(0);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    System.Threading.Thread.Sleep(500);
                    AutoMove(2);
                    System.Threading.Thread.Sleep(500);
                    AutoMove(2);
                    System.Threading.Thread.Sleep(500);
                    AutoMove(2);
                    System.Threading.Thread.Sleep(500);
                    AutoMove(2);

                    GroundOne.WE2.SeekerEvent812 = true;
                }
                #endregion
                #region "【心】の部屋で、【力】関連の看板"
                else if (!GroundOne.WE2.SeekerEvent813 && row == 6 && column == 30 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  看板だ　）");

                    UpdateMainMessage("　　　　『  終わりの前、すなわち、力　』");
                    
                    UpdateMainMessage("アイン：（  やっぱりな、心の部屋を先に調べておいて正解だったぜ　）");

                    UpdateMainMessage("アイン：（  よし、サイドのレバー二つを動かそう　）");

                    AutoMove(0);

                    GroundOne.WE2.SeekerEvent813 = true;
                }
                #endregion
                #region "複合レバー【心】の部屋で、【力】関連"
                else if (!GroundOne.WE2.SeekerEvent814 && row == 5 && column == 30 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  『誤り、恐れ、喚き、屈し、失い、揺らぎ続ける存在』　）");

                    UpdateMainMessage("アイン：（  【敵】、【僧】、【人】、【神】・・・　）");

                    UpdateMainMessage("アイン：（　これは【人】だな　）");

                    UpdateMainMessage("アイン：（　よし、もう一つのレバーを　）");

                    AutoMove(3);
                    AutoMove(3);

                    GroundOne.WE2.SeekerEvent814 = true;
                }
                else if (!GroundOne.WE2.SeekerEvent815 && row == 7 && column == 30 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  『神と人、鳥、木々、全生物における連続の理そこに見つけたり』　）");

                    UpdateMainMessage("アイン：（  【虚】、【真】、【心】、【理】・・・　）");

                    UpdateMainMessage("アイン：（　【理】で決まりだな　）");

                    UpdateMainMessage("アイン：（　・・・特に何の音もしないが、次で最後だ　）");

                    UpdateMainMessage("アイン：（　力の部屋に行ってみよう　）");

                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(2, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(3, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(0);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(3);
                    AutoMove(3);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    
                    GroundOne.WE2.SeekerEvent815 = true;
                }
                #endregion
                #region "ボス"
                else if (!GroundOne.WE2.SeekerEvent816 && row == 36 && column == 14 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  ボスのお出ましか　）");

                    UpdateMainMessage("アイン：（  大海蛇のリヴィアサン、昔コイツと戦ったことがあるな　）");

                    UpdateMainMessage("アイン：（  あの時が・・・一番楽しかったかもな。ラナも師匠も居て・・・　）");

                    UpdateMainMessage("　　『その時、部屋全体に向けてリヴィアサンが咆哮を放った！！』");

                    UpdateMainMessage("リヴィアサン：『グゥゥオォォオォォ！！！！』");

                    UpdateMainMessage("アイン：（　でけぇが・・・　）");

                    UpdateMainMessage("アイン：（　パターンはそれほど難しくはない　）");

                    UpdateMainMessage("アイン：（　前衛さえしっかりしてれば、あとは後方が・・・　）");

                    UpdateMainMessage("アイン：（　っと、今はそういうのは関係ねえんだったな　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　みんな、いろいろと俺に付き合ってくれてたんだろうか　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("リヴィアサン：『グガアアァァ！！！』");

                    UpdateMainMessage("アイン：（　ヤベっ、ぼうっとしちまってたぜ　）");

                    UpdateMainMessage("　　＜＜＜　リヴィアサンは自らの咆哮により、能力を最大限に引き上げた　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　それを見て、アインは何の行動も取らないでいた　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　臆もせず、動揺もせず、焦り一つみせずに微動だにしない　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　そして、攻撃力、防御力、戦闘速度を上げきったリヴィアサンが　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　「大激衝」を放とうとしたが、その刹那　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　剣を振るう音が部屋に響く事もなく　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　リヴィアサンの首から上が、静かに地面に落ちた　＞＞＞");

                    UpdateMainMessage("リヴィアサン：『ア・・・ァァ・・・ガ・・・』");

                    UpdateMainMessage("アイン：（　ここで時間を使う意味はないんだ、悪いな　）");

                    UpdateMainMessage("アイン：（　・・・　行くぜ　・・・　）");

                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);

                    GroundOne.WE2.SeekerEvent816 = true;
                }
                #endregion
                #region "【知】の部屋で、【心】関連の看板"
                else if (!GroundOne.WE2.SeekerEvent817 && row == 26 && column == 14 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  看板だ　）");

                    UpdateMainMessage("　　　　『  次に求められるは、技　』");

                    UpdateMainMessage("アイン：（  この看板は自明の理だな、考えるまでもない　）");

                    UpdateMainMessage("アイン：（  サイドのレバーをやってしまおう　）");

                    AutoMove(1);

                    GroundOne.WE2.SeekerEvent817 = true;
                }
                #endregion
                #region "複合レバー【力】の部屋で、【技】関連"

                else if (!GroundOne.WE2.SeekerEvent818 && row == 26 && column == 13 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  『この世における絶対的な平等の象徴』　）");

                    UpdateMainMessage("アイン：（  【死】、【母】、【父】、【命】・・・　）");

                    UpdateMainMessage("アイン：（　【死】って所だな　）");

                    UpdateMainMessage("アイン：（　隣のレバーに移ろう　）");

                    AutoMove(2);
                    AutoMove(2);

                    GroundOne.WE2.SeekerEvent818 = true;
                }
                else if (!GroundOne.WE2.SeekerEvent819 && row == 26 && column == 15 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：（  『偉大なる母、厳格なる父より永久の確約』　）");

                    UpdateMainMessage("アイン：（  【源】、【生】、【滅】、【諭】・・・　）");

                    UpdateMainMessage("アイン：（　よし、ここは【生】だ　）");

                    UpdateMainMessage("アイン：（　これで全部やったはずだ　）");

                    UpdateMainMessage("　　　【アインがレバーを倒したその瞬間！】　");

                    UpdateMainMessage("　　　『ブウゥゥン！！』");

                    UpdateMainMessage("アイン：（　すげえ・・・文字が・・・突然目の前に・・・　）");

                    UpdateMainMessage("アイン：（　どうなってんだ、これ・・・　）");

                    UpdateMainMessage("アイン：（　・・・まあ、多少読みにくいが・・・　）");

                    UpdateMainMessage("アイン：（　『４つのフロアを心得し者、その順列を示せ。』　）");

                    UpdateMainMessage("アイン：（　これは今まで見てきた４か所の看板に示す通りだな　）");

                    UpdateMainMessage("アイン：（  『　始まりなるは、知　』　）");

                    UpdateMainMessage("アイン：（  『　次に求められるは、技　』　）");

                    UpdateMainMessage("アイン：（  『　終わりの前、すなわち、力　』　）");

                    UpdateMainMessage("アイン：（  『　終わりなるは、心　』　）");

                    UpdateMainMessage("アイン：（　看板のすぐ隣に２つのレバーがあったせいで、そちらに気を取られたが　）");

                    UpdateMainMessage("アイン：（　あの看板は、レバーに関してではなく、この最後に出てくる浮遊文字の問いかけへ呼応する　）");

                    UpdateMainMessage("アイン：（　看板は、文字通り、その順序を指していたんだ　）");

                    UpdateMainMessage("アイン：（　【知】　【技】　【力】　【心】　と・・・）");

                    UpdateMainMessage("　　　　『ッゴゴゴゴゴ・・・ズウウゥゥン！』");

                    GroundOne.WE2.TruthAnswer2_OK = true;
                    dungeonTile[26 * Database.TRUTH_DUNGEON_COLUMN + 13].Image = Image.FromFile(Database.BaseResourceFolder + Database.FloorFolder[we.DungeonArea - 1] + Database.TILEINFO_13);
                    dungeonTile[26 * Database.TRUTH_DUNGEON_COLUMN + 13].Name = Database.TILEINFO_13;
                    tileInfo2[26 * Database.TRUTH_DUNGEON_COLUMN + 13] = Database.TILEINFO_13;
                    dungeonField.Invalidate();

                    UpdateMainMessage("アイン：（　よし、もう一つの扉が開いたみたいだな　）");

                    UpdateMainMessage("アイン：（　行くぜ　）");

                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    
                    GroundOne.WE2.SeekerEvent819 = true;
                }
                #endregion
                #region "２階、回想録"
                else if (!GroundOne.WE2.SeekerEvent820 && row == 26 && column == 10 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    Story_TruthRecollection2_1();

                    UpdateMainMessage("アイン：（・・・ヴェルゼ・・・アーティ・・・）");

                    UpdateMainMessage("アイン：（・・・　・・・　・・・）");

                    UpdateMainMessage("アイン：（　・・・　）");

                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);

                    GroundOne.WE2.SeekerEvent820 = true;
                }
                #endregion
                #region "２階、カールハンツと会話／戦闘"
                else if (!GroundOne.WE2.SeekerEvent821 && row == 26 && column == 16 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：この雰囲気は・・・カール先生か？");

                    UpdateMainMessage("カール：如何にも。");

                    UpdateMainMessage("アイン：やっぱりそうか・・・");

                    UpdateMainMessage("アイン：カール先生・・・何故ここに・・・");

                    UpdateMainMessage("カール：我がここにいる理由か。");

                    UpdateMainMessage("カール：しかしそれは愚問だと言える。");

                    UpdateMainMessage("カール：解は、貴君の潜在意識の中に既に存在している、違うかね？");

                    UpdateMainMessage("アイン：・・・　・・・");

                    UpdateMainMessage("アイン：俺が・・・越えなければならない【壁】という認識に起因して");

                    UpdateMainMessage("アイン：カール先生が現れた。そういう事だよな。");

                    UpdateMainMessage("カール：如何にも。");

                    UpdateMainMessage("カール：貴君は今、現実の世界にいる。そして");

                    UpdateMainMessage("カール：このダンジョンは挑む者の精神を全て把握する。");

                    UpdateMainMessage("カール：その中から、対象の者の苦手となる要素を摘出する。");

                    UpdateMainMessage("カール：つまり、今の我は、貴君が生み出した【壁】そのもの。");

                    UpdateMainMessage("カール：超えるがよい、アイン・ウォーレンス。");

                    UpdateMainMessage("カール：我を打ち倒すがよい、アイン・ウォーレンス。");

                    UpdateMainMessage("アイン：やらなきゃ・・・いけないみたいだな。");

                    UpdateMainMessage("アイン：・・・構えるぜ。");

                    UpdateMainMessage("カール：来るがよい。");

                    bool win = EncountBattle(Database.ENEMY_LAST_SINIKIA_KAHLHANZ, string.Empty, string.Empty, true, true, false, false);
                    if (win == false)
                    {
                        GroundOne.StopDungeonMusic();
                        UpdateMainMessage("アイン：ッグ・・・！！！");

                        UpdateMainMessage("カール：貴君のポテンシャル、そこまでのようだな。");

                        UpdateMainMessage("カール：このPiercingFlameで最後だ。");

                        UpdateMainMessage("　　　＜＜＜　ッボシュ！　＞＞＞　　");

                        UpdateMainMessage("アイン：ッグ　・・・　・・・");

                        UpdateMainMessage("　　　（　意識が　）　　");

                        UpdateMainMessage("　　　（　破壊された　）　　");

                        UpdateMainMessage("　　　（　カール先生の最後の詠唱を見た瞬間　）　");

                        UpdateMainMessage("　　　（　意識は暗闇へと誘われていった　）　");

                        UpdateMainMessage("　　　（　ラナ・・・すまない・・・　）　");

                        UpdateMainMessage("　　　（　・・・　・・・　・・・　）　");

                        UpdateMainMessage("　　　（　・・・　・・・　）　");

                        UpdateMainMessage("　　　（　・・・　）　");

                        UpdateMainMessage(" 〜　THE　END　〜　（カールハンツとの死闘）");

                        bool tempFlag = GroundOne.WE2.SeekerEvent821_fail;
                        GroundOne.WE2.SeekerEvent821_fail = true;
                        UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.mc, this.sc, this.tc, this.we, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);

                        if (tempFlag)
                        {
                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "戦闘をスキップし、勝利した状態からストーリーを進めますか？\r\n戦闘スキップによるペナルティはありません。";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // なにもせず次へ進む
                                }
                                else
                                {
                                    this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                                    return false;
                                }
                            }
                        }
                        else
                        {
                            this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                            return false;
                        }
                    }

                    UpdateMainMessage("カール：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：（確かに討ち取ったはずだが・・・）");

                    UpdateMainMessage("アイン：（全く倒れる気配が無い・・・どうなってんだ・・・）");

                    UpdateMainMessage("　　　＜＜＜　その時　＞＞＞");

                    UpdateMainMessage("　　　＜＜＜　カールの黒いマントは　＞＞＞");

                    UpdateMainMessage("　　　＜＜＜　徐々に赤く染まっていった　＞＞＞");

                    UpdateMainMessage("カール：その太刀筋、見事である。");

                    UpdateMainMessage("カール：貴君の・・・勝利・・・だ。");

                    UpdateMainMessage("アイン：・・・カール先生・・・俺・・・");

                    UpdateMainMessage("カール：貴君が気にしている事");
                    
                    UpdateMainMessage("カール：ヴェルゼ・アーティの事であろう。");

                    UpdateMainMessage("アイン：ああ。");

                    UpdateMainMessage("カール：ダンジョンを出た後、時間はかからなかった。");

                    UpdateMainMessage("カール：ヴェルゼ・アーティは、再びダンジョンへ挑む様になっていた。");

                    UpdateMainMessage("カール：エレマ・セフィーネの死を知ったのが原因だろう。");

                    UpdateMainMessage("アイン：止めなかったんですか？このダンジョンに向かうのを。");
                    
                    UpdateMainMessage("カール：FiveSeekerと呼ばれた中において");

                    UpdateMainMessage("カール：あの者は特に秀でておる。");

                    UpdateMainMessage("カール：当時は、我もあのランディスも実力が拮抗したものだ。");

                    UpdateMainMessage("カール：だが、今ではもはや力の差は歴然。");

                    UpdateMainMessage("アイン：止められなかった・・・って事なんですか・・・");

                    UpdateMainMessage("カール：我とランディスの２人がかりだったが");

                    UpdateMainMessage("カール：速度、パワー、判断ともに追いつけるレベルではなかった。");

                    UpdateMainMessage("アイン：二人がかりでも？・・・そんな・・・バカな・・・");

                    UpdateMainMessage("カール：あやつの動きは、人間の限界を完全に超えておる。");

                    UpdateMainMessage("カール：おそらくヴェルゼ・アーティに立ち向かえるのは");

                    UpdateMainMessage("カール：アイン・ウォーレンス");

                    UpdateMainMessage("カール：貴君なら可能だと言える。");

                    UpdateMainMessage("アイン：む、無理ですよ・・・師匠と先生二人がかりで止められなかったのが・・・");

                    UpdateMainMessage("カール：いや、貴君なら可能である。");

                    UpdateMainMessage("アイン：どうしてそんなことが言い切れるんだ？無理なもんは無理だ。");

                    UpdateMainMessage("カール：ッフ・・・");

                    UpdateMainMessage("カール：ッフ、ッフハハハハハ！！");

                    UpdateMainMessage("カール：治っておらんな、貴君の相手への下手な気配りは。");

                    UpdateMainMessage("アイン：いやいや、そういうわけじゃねえんだが・・・");

                    UpdateMainMessage("カール：一つ、真実を貴君に語っておこう。");

                    UpdateMainMessage("アイン：・・・真実？");

                    UpdateMainMessage("カール：そうだ。");
                    
                    UpdateMainMessage("カール：ヴェルゼ・アーティと、貴君の関係だ。");

                    UpdateMainMessage("カール：ヴェルゼ・アーティとは");

                    UpdateMainMessage("カール：貴君にとって");

                    UpdateMainMessage("カール：腹違いの兄である。");

                    UpdateMainMessage("アイン：なっ・・・なんだって！！！");

                    UpdateMainMessage("アイン：そんな馬鹿な！　俺には兄弟なんていねえはずだ！");

                    UpdateMainMessage("カール：これは貴君の父から固く口止めされておるが。");

                    UpdateMainMessage("カール：貴君の父は、別の女性に一人ずつ子を授けておる。");

                    UpdateMainMessage("カール：それが、ヴェルゼ・アーティと貴君：アイン・ウォーレンスである。");

                    UpdateMainMessage("アイン：そ・・・そんな・・・");

                    UpdateMainMessage("カール：戦いにおける天性の素質は、両者とも父親から譲りうけておる。");

                    UpdateMainMessage("カール：貴君が");

                    UpdateMainMessage("カール：止めてみせよ。");

                    UpdateMainMessage("カール：頼ん・・・だ・・・ぞ・・・");

                    UpdateMainMessage("アイン：せ、先生！！カール先生！！！");

                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：消えちまったか・・・");

                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：行こう、この先へ");

                    AutoMove(2);

                    GroundOne.WE2.SeekerEvent821 = true;
                    if (this.endlessLoop == false && GroundOne.WE2.SeekerEvent821_fail)
                    {
                        TruthDungeon_Shown(null, null);
                    }
                }
                #endregion
                #region "２階、カールハンツ会話後、戦闘敗北後の自由行動制限"
                else if (GroundOne.WE2.SeekerEvent821_fail && !GroundOne.WE2.SeekerEvent821) 
                {
                    if (row == 28 && column == 14 && GroundOne.WE2.RealDungeonArea == 2)
                    {
                        UpdateMainMessage("アイン：いや、もう後ろへ振り返るのはよそう。");
                        UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                        this.Invalidate();
                    }
                    else if (row == 26 && column == 12 && GroundOne.WE2.RealDungeonArea == 2)
                    {
                        UpdateMainMessage("アイン：いや、もう後ろへ振り返るのはよそう。");
                        UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                        this.Invalidate();
                    }
                    return false;
                }
                #endregion
                #region "２階から３階へ"
                else if (row == 26 && column == 17 && GroundOne.WE2.RealDungeonArea == 2)
                {
                    System.Threading.Thread.Sleep(1000);
                    JumpByNormal(19, 0);
                    SetupDungeonMapping(3);
                    dungeonField.Invalidate();
                    UpdateMainMessage("", true);

                    GroundOne.WE2.RealDungeonArea = 3;
                    GroundOne.WE2.SeekerEvent822 = true;
                }
                #endregion
                #region "３階スタート"
                else if (!GroundOne.WE2.SeekerEvent901 && row == 19 && column == 0 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    UpdateMainMessage("アイン：（　３階か・・・　）");

                    UpdateMainMessage("アイン：（　看板が見える、まずはそこからだ　）");

                    UpdateMainMessage("アイン：（　行ってみよう　）");

                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);

                    GroundOne.WE2.SeekerEvent901 = true;
                }
                #endregion
                #region "誘導看板"
                else if ((!GroundOne.WE2.SeekerEvent902 && row == 19 && column == 9 && GroundOne.WE2.RealDungeonArea == 3) ||
                         (!GroundOne.WE2.SeekerEvent902 && row == 20 && column == 9 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　看板内容は・・・　）");

                    UpdateMainMessage("　　　　『鏡、　それは本人の迷い・思考・判断を整理する。』");

                    AutoMove(3);

                    UpdateMainMessage("　　　　『鏡から鏡へ。感じたままに触れよ。感じたままに進め。』");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　どうだろうな　）");

                    UpdateMainMessage("アイン：（　最初は多分、練習的な要素、鏡の使い方を教えてくれてるって所だな　）");

                    UpdateMainMessage("アイン：（　だが、どこか途中で・・・あるいは、突然か・・・　）");

                    UpdateMainMessage("アイン：（　注意深く進めるとするか　）");

                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    AutoMove(1);
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);
                    JumpByMirror_1_10();
                    System.Threading.Thread.Sleep(500);
                    AutoMove(0);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    JumpByMirror_1_21();
                    System.Threading.Thread.Sleep(500);
                    AutoMove(1);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    JumpByMirror_1_33();
                    System.Threading.Thread.Sleep(2000);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(2);
                    AutoMove(2);
                    JumpByMirror_1_37();
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(0, 200);
                    AutoMove(0, 200);
                    AutoMove(0, 200);

                    GroundOne.WE2.SeekerEvent902 = true;
                }
                #endregion
                #region "鏡エリア１コンプリート"
                else if (!GroundOne.WE2.SeekerEvent903 && row == 35 && column == 1 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    Story_TruthRecollection3_1();

                    UpdateMainMessage("アイン：（・・・　・・・　・・・）");

                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    JumpByMirror_1_End();
                    System.Threading.Thread.Sleep(1000);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);

                    GroundOne.WE2.SeekerEvent903 = true;
                }
                #endregion
                #region "鏡エリア２開始の分析"
                else if (!GroundOne.WE2.SeekerEvent904 && row == 16 && column == 24 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    UpdateMainMessage("アイン：（　おっと、看板だな・・・　）");

                    UpdateMainMessage("　　　　『　２つ目は正解、３つ目は無限解、そして１つ目が原点解　』");

                    UpdateMainMessage("アイン：（　これは・・・　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　まずいな・・・　）");

                    UpdateMainMessage("アイン：（　失敗は出来ない、まずはじっくりと分析だ　）");

                    UpdateMainMessage("アイン：（　解答そのものに対する警告に見て取れる・・・　）");

                    UpdateMainMessage("アイン：（　しかも、２つ目が始めに書いてあるし、書いてある内容は『正解』って事は・・・　）");

                    UpdateMainMessage("アイン：（　『正解』がまずありきで、見つけ出しそれから・・・いや　）");

                    UpdateMainMessage("アイン：（　それ以前に、順列通り行くとすれば、１つ目を見つける必要があるんじゃねえのか・・・　）");

                    UpdateMainMessage("アイン：（　原点・・・正解・・・無限・・・　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　最初ではなく２番目が正解　）");

                    UpdateMainMessage("アイン：（　つまり最初は２番目を解く事から始まる　）");

                    UpdateMainMessage("アイン：（　最初から原点解は解けねえ、まず２番目を解く必要があるってことか　）");

                    UpdateMainMessage("アイン：（　次に、無限解という表現・・・ ）");

                    UpdateMainMessage("アイン：（　順列通り、進めようとすれば、言葉通り無限回の探索をしなくちゃいけなくなる　）");

                    UpdateMainMessage("アイン：（　文字通り無限・・・永遠に同じ行動を取らなければいけなくなる　）");

                    UpdateMainMessage("アイン：（　しかし、それじゃあ解けない。当然ながら無限回数を実行するのは不可能だ　）");

                    UpdateMainMessage("アイン：（　それゆえに、無限解へ順列通り読み解くのは駄目・・・となると ）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　必ず目を通さなきゃならないのが原点解　）");

                    UpdateMainMessage("アイン：（　無限解にハマらないように、『一つ目』となる原点解　）");

                    UpdateMainMessage("アイン：（　この原点解をまず調べるのが無限解を解く上で重要な面なんだ　）");

                    UpdateMainMessage("アイン：（　その原点解を知り得て初めて、無限解がなんたるかを知る事が許されるんじゃないのか　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　表現を整理しよう　）");

                    UpdateMainMessage("アイン：（　まずは手探りで『正解』をたぐり寄せる　）");

                    UpdateMainMessage("アイン：（　『正解』により、道は拓けるが、『無限解』を前にして無限通りをこなさねばならなくなる ）");

                    UpdateMainMessage("アイン：（　『無限解』の施行は、永遠の手探りが必要となる。つまり、道は拓けない　）");

                    UpdateMainMessage("アイン：（　その永遠の手探りから抜け出るために、本来探らなければならない『原点解』が浮上する ）");

                    UpdateMainMessage("アイン：（　一旦手にした『正解』が本当に正解なのかどうか、考え直す必要がある　）");

                    UpdateMainMessage("アイン：（　『正解』を手に入れて、安心しちゃダメなんだ ）");

                    UpdateMainMessage("アイン：（　師匠はよくこういう『正解』を嫌っていたからな。それがなきゃ俺は気付けてないかも知れない　）");

                    UpdateMainMessage("アイン：（　感謝しないとな、ホント　）");
                    
                    UpdateMainMessage("アイン：（　それさえ気づけば後は、考え方は一本道　）");

                    UpdateMainMessage("アイン：（　『正解』か『不正解』かは、関係ねえ。文字通り『原点』を探る行動をしなければならない　）");

                    UpdateMainMessage("アイン：（　その『原点』を探る行動はつまり　）");

                    UpdateMainMessage("アイン：（　今から始まる鏡ルートを一つ一つ確かめる行為が必要だって事だ ）");

                    UpdateMainMessage("アイン：（　よし、決まりだ。迂闊に進み過ぎないように注意深く進めよう ）");

                    GroundOne.WE2.SeekerEvent904 = true;
                }
                #endregion
                #region "鏡エリア２の進行"
                else if (!GroundOne.WE2.SeekerEvent905 && row == 16 && column == 24 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    int wayLine = GroundOne.WE2.TruthWay3_1;
                    int anotherWayLine = 1;
                    if (!GroundOne.WE2.SeekerEvent906) { wayLine = GroundOne.WE2.TruthWay3_1; anotherWayLine = 1; }
                    else if (!GroundOne.WE2.SeekerEvent907) { wayLine = GroundOne.WE2.TruthWay3_2; anotherWayLine = 2; }
                    else if (!GroundOne.WE2.SeekerEvent908) { wayLine = GroundOne.WE2.TruthWay3_3; anotherWayLine = 3; }
                    else if (!GroundOne.WE2.SeekerEvent909) { wayLine = GroundOne.WE2.TruthWay3_4; anotherWayLine = 4; }
                    else if (!GroundOne.WE2.SeekerEvent910) { wayLine = GroundOne.WE2.TruthWay3_5; anotherWayLine = 5; }

                    MirrorWay(wayLine, anotherWayLine);

                    int wayPoint = 0;
                    if (!GroundOne.WE2.SeekerEvent906) { wayPoint = 0; GroundOne.WE2.SeekerEvent906 = true; }
                    else if (!GroundOne.WE2.SeekerEvent907) { wayPoint = 1; GroundOne.WE2.SeekerEvent907 = true; }
                    else if (!GroundOne.WE2.SeekerEvent908) { wayPoint = 2; GroundOne.WE2.SeekerEvent908 = true; }
                    else if (!GroundOne.WE2.SeekerEvent909) { wayPoint = 3; GroundOne.WE2.SeekerEvent909 = true; }
                    else if (!GroundOne.WE2.SeekerEvent910) { wayPoint = 4; GroundOne.WE2.SeekerEvent910 = true; GroundOne.WE2.SeekerEvent905 = true; }

                    MirrorTruthWay(wayPoint);
                }
                #endregion
                #region "真実の回想録3_2"
                else if (!GroundOne.WE2.SeekerEvent911 && row == 25 && column == 1 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    Story_TruthRecollection3_2();
                    MirrorLastWay();

                    GroundOne.WE2.SeekerEvent911 = true;
                }
                #endregion
                #region "正解への到達時"
                else if (!GroundOne.WE2.SeekerEvent912 && row == 39 && column == 54 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    UpdateMainMessage("アイン：（　・・・扉だ・・・ ）");

                    UpdateMainMessage("アイン：（　これを開ければ、おそらく・・・ ）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　いや　）");

                    UpdateMainMessage("アイン：（　間違いねえ、これは『正解』だ　）");

                    UpdateMainMessage("アイン：（　『正解』まで辿り着いた・・・後は、この後に来る『無限』に対応するため、『原点』を探る事だ　）");

                    UpdateMainMessage("アイン：（　ここまでくるにあたって、鏡を潜った回数は数えるほどだ　）");

                    UpdateMainMessage("アイン：（　だが、俺が見る限り、最後の鏡に該当する鏡の総数は・・・　）");

                    UpdateMainMessage("アイン：（　１２８個　）");

                    UpdateMainMessage("アイン：（　・・・到達までが早過ぎる・・・　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　一旦戻って、まだ潜ってない鏡を一つ一つ調べ直そう　）");

                    UpdateMainMessage("アイン：（　それが『原点解』を見つけるための手筋だ　）");

                    UpdateMainMessage("アイン：（　よし、戻ろう　）");

                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(0, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    AutoMove(1, 20);
                    JumpByMirror_TurnBack();
                    System.Threading.Thread.Sleep(500);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    GroundOne.WE2.SeekerEvent912 = true;
                }
                #endregion
                #region "原点解到達までのあらすじ"
                else if (!GroundOne.WE2.SeekerEvent913 && row == 16 && column == 24 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    UpdateMainMessage("アイン：（　原点解は・・・地道に探すしかねえな　）");

                    UpdateMainMessage("アイン：（　ここでは直観は使わない　）");

                    UpdateMainMessage("アイン：（　総当たりで行くぜ　）");

                    this.dungeonField.Invalidate();

                    UpdateMainMessage("　　（　一つずつ　）");

                    UpdateMainMessage("　　（　鏡を探る　）");

                    UpdateMainMessage("　　（　きっとあるはずだ　）");

                    UpdateMainMessage("　　（　そう考えながらひたすら鏡を潜った　）");

                    UpdateMainMessage("　　（　潜り・・・潜り続けて・・・　）");

                    UpdateMainMessage("　　（　そして・・・　）");

                    GroundOne.WE2.SeekerEvent913 = true;
                    this.dungeonField.Invalidate();
                }                    
                #endregion
                #region "原点解への道と、真実の回想録3_3"
                else if (!GroundOne.WE2.SeekerEvent914 && row == 16 && column == 24 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    UpdateMainMessage("アイン：（　よし、結構の回数を潜ったはずだ　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　いや、ここで無いかどうかを気にしちゃだめだ　）");

                    UpdateMainMessage("アイン：（　当たるかどうかは全部やれば、分かる　）");

                    UpdateMainMessage("アイン：（　行こう　）");

                    int zeroLine = 150; // 150とは鏡５６パターン内の最後の鏡である。万が一ロジック崩れがある場合は最後の鏡を原点解とする。
                    if (GroundOne.WE2.TruthWay95 == 0) { zeroLine = 95; }
                    else if (GroundOne.WE2.TruthWay96 == 0) { zeroLine = 96; }
                    else if (GroundOne.WE2.TruthWay97 == 0) { zeroLine = 97; }
                    else if (GroundOne.WE2.TruthWay98 == 0) { zeroLine = 98; }
                    else if (GroundOne.WE2.TruthWay99 == 0) { zeroLine = 99; }
                    else if (GroundOne.WE2.TruthWay100 == 0) { zeroLine = 100; }
                    else if (GroundOne.WE2.TruthWay101 == 0) { zeroLine = 101; }
                    else if (GroundOne.WE2.TruthWay102 == 0) { zeroLine = 102; }
                    else if (GroundOne.WE2.TruthWay103 == 0) { zeroLine = 103; }
                    else if (GroundOne.WE2.TruthWay104 == 0) { zeroLine = 104; }
                    else if (GroundOne.WE2.TruthWay105 == 0) { zeroLine = 105; }
                    else if (GroundOne.WE2.TruthWay106 == 0) { zeroLine = 106; }
                    else if (GroundOne.WE2.TruthWay107 == 0) { zeroLine = 107; }
                    else if (GroundOne.WE2.TruthWay108 == 0) { zeroLine = 108; }
                    else if (GroundOne.WE2.TruthWay109 == 0) { zeroLine = 109; }
                    else if (GroundOne.WE2.TruthWay110 == 0) { zeroLine = 110; }
                    else if (GroundOne.WE2.TruthWay111 == 0) { zeroLine = 111; }
                    else if (GroundOne.WE2.TruthWay112 == 0) { zeroLine = 112; }
                    else if (GroundOne.WE2.TruthWay113 == 0) { zeroLine = 113; }
                    else if (GroundOne.WE2.TruthWay114 == 0) { zeroLine = 114; }
                    else if (GroundOne.WE2.TruthWay115 == 0) { zeroLine = 115; }
                    else if (GroundOne.WE2.TruthWay116 == 0) { zeroLine = 116; }
                    else if (GroundOne.WE2.TruthWay117 == 0) { zeroLine = 117; }
                    else if (GroundOne.WE2.TruthWay118 == 0) { zeroLine = 118; }
                    else if (GroundOne.WE2.TruthWay119 == 0) { zeroLine = 119; }
                    else if (GroundOne.WE2.TruthWay120 == 0) { zeroLine = 120; }
                    else if (GroundOne.WE2.TruthWay121 == 0) { zeroLine = 121; }
                    else if (GroundOne.WE2.TruthWay122 == 0) { zeroLine = 122; }
                    else if (GroundOne.WE2.TruthWay123 == 0) { zeroLine = 123; }
                    else if (GroundOne.WE2.TruthWay124 == 0) { zeroLine = 124; }
                    else if (GroundOne.WE2.TruthWay125 == 0) { zeroLine = 125; }
                    else if (GroundOne.WE2.TruthWay126 == 0) { zeroLine = 126; }
                    else if (GroundOne.WE2.TruthWay127 == 0) { zeroLine = 127; }
                    else if (GroundOne.WE2.TruthWay128 == 0) { zeroLine = 128; }
                    else if (GroundOne.WE2.TruthWay129 == 0) { zeroLine = 129; }
                    else if (GroundOne.WE2.TruthWay130 == 0) { zeroLine = 130; }
                    else if (GroundOne.WE2.TruthWay131 == 0) { zeroLine = 131; }
                    else if (GroundOne.WE2.TruthWay132 == 0) { zeroLine = 132; }
                    else if (GroundOne.WE2.TruthWay133 == 0) { zeroLine = 133; }
                    else if (GroundOne.WE2.TruthWay134 == 0) { zeroLine = 134; }
                    else if (GroundOne.WE2.TruthWay135 == 0) { zeroLine = 135; }
                    else if (GroundOne.WE2.TruthWay136 == 0) { zeroLine = 136; }
                    else if (GroundOne.WE2.TruthWay137 == 0) { zeroLine = 137; }
                    else if (GroundOne.WE2.TruthWay138 == 0) { zeroLine = 138; }
                    else if (GroundOne.WE2.TruthWay139 == 0) { zeroLine = 139; }
                    else if (GroundOne.WE2.TruthWay140 == 0) { zeroLine = 140; }
                    else if (GroundOne.WE2.TruthWay141 == 0) { zeroLine = 141; }
                    else if (GroundOne.WE2.TruthWay142 == 0) { zeroLine = 142; }
                    else if (GroundOne.WE2.TruthWay143 == 0) { zeroLine = 143; }
                    else if (GroundOne.WE2.TruthWay144 == 0) { zeroLine = 144; }
                    else if (GroundOne.WE2.TruthWay145 == 0) { zeroLine = 145; }
                    else if (GroundOne.WE2.TruthWay146 == 0) { zeroLine = 146; }
                    else if (GroundOne.WE2.TruthWay147 == 0) { zeroLine = 147; }
                    else if (GroundOne.WE2.TruthWay148 == 0) { zeroLine = 148; }
                    else if (GroundOne.WE2.TruthWay149 == 0) { zeroLine = 149; }
                    else if (GroundOne.WE2.TruthWay150 == 0) { zeroLine = 150; }

                    MirrorWay(zeroLine, 6);
                    JumpByMirror_Recollection3();
                    System.Threading.Thread.Sleep(1000);
                    dungeonField.Invalidate();
                    dungeonField.Update();
                    this.Update();

                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);

                    Story_TruthRecollection3_3();
                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");
                    System.Threading.Thread.Sleep(1000);

                    AutoMove(3);
                    AutoMove(3);
                    AutoMove(3);
                    JumpByMirror_ZeroWay();

                    GroundOne.WE2.SeekerEvent914 = true;
                }
                #endregion
                #region "原点解到達"
                else if (!GroundOne.WE2.SeekerEvent915 && row == 12 && column == 37 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    UpdateMainMessage("アイン：（　よし・・・来たな　）");

                    UpdateMainMessage("アイン：（　これで『原点解』到達だ、間違いねえ　）");

                    UpdateMainMessage("アイン：（　奥に看板が見える、行ってみよう　）");

                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);

                    GroundOne.WE2.SeekerEvent915 = true;
                }
                #endregion
                #region "原点解の看板"
                else if (!GroundOne.WE2.SeekerEvent916 && row == 7 && column == 37 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    UpdateMainMessage("アイン：（　あった・・・これだ　）");

                    UpdateMainMessage("　　　　『　原点解(1 3 4 5 4 2 3 1 4 2 5 5)  左は聖者、右は愚者、究極解を選択せよ』");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　原点解の数値は記憶すれば良いとして、後ろのは一体・・・　）");

                    UpdateMainMessage("アイン：（　左は聖者、右は愚者、究極解・・・　）");

                    UpdateMainMessage("アイン：（　前方に鏡が二つ見える、きっとあれの事を指しているんだろう　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　答えは・・・　）");

                    GroundOne.WE2.SeekerEvent916 = true;
                }
                #endregion
                // この後は、プレイヤーに操作させること
                #region "原点解の看板"
                else if (row == 7 && column == 37 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    UpdateMainMessage("　　　　『　原点解(1 3 4 5 4 2 3 1 4 2 5 5)  左は聖者、右は愚者、究極解を選択せよ』", true);
                    return false;
                }
                #endregion
                #region "聖者の選択"
                else if (!GroundOne.WE2.SeekerEvent917 && row == 5 && column == 36 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    Story_SeekerEvent907();
                    // セーブする必要はないため、コメントアウト。タイトルへ戻る
                    this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                    //GroundOne.WE2.SeekerEvent917 = true;
                    //Method.AutoSaveTruthWorldEnvironment();
                    //Method.AutoSaveRealWorld(this.mc, this.sc, this.tc, this.we, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                    return false;
                }
                #endregion
                #region "愚者の選択"
                else if (!GroundOne.WE2.SeekerEvent918 && row == 5 && column == 38 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    Story_SeekerEvent908();
                    // セーブする必要はないため、コメントアウト。タイトルへ戻る
                    this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                    //GroundOne.WE2.SeekerEvent918 = true;
                    //Method.AutoSaveTruthWorldEnvironment();
                    //Method.AutoSaveRealWorld(this.mc, this.sc, this.tc, this.we, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                    return false;
                }
                #endregion
                #region "戻るを選択"
                else if (!GroundOne.WE2.SeekerEvent919 && row == 12 && column == 37 && GroundOne.WE2.RealDungeonArea == 3 && GroundOne.WE2.SeekerEvent906)
                {
                    UpdateMainMessage("アイン：（　聖者か・・・愚者か・・・　）");

                    UpdateMainMessage("アイン：（　どちらが究極解って言われりゃ、そりゃあ聖者だろうな　）");

                    UpdateMainMessage("アイン：（　でも俺はそう言う『神様』みたいな雰囲気がする選択肢は、絶対に間違ってると思う ）");

                    UpdateMainMessage("アイン：（　じゃあ、愚者を選んだらどうなるのか　）");

                    UpdateMainMessage("アイン：（　愚者って言うと、耳障りは悪いが　）");

                    UpdateMainMessage("アイン：（　究極解を得ようとして、貪欲に突き進む事を指すんだろう　）");

                    UpdateMainMessage("アイン：（　終わるまで止めない、ある意味じゃ聖者よりも究極解に近いって所じゃねえかな　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・ ）");

                    UpdateMainMessage("アイン：（　進めちゃ行けない、戻るんだ　）");

                    UpdateMainMessage("アイン：（　俺は聖者、愚者、どちらにも興味はない ）");

                    UpdateMainMessage("アイン：（　原点解は得られた　）");

                    UpdateMainMessage("アイン：（　戻るんだ、元いた場所へ・・・　）");

                    JumpByMirror_TurnBack();
                    System.Threading.Thread.Sleep(500);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(2);
                    AutoMove(0);
                    AutoMove(0);
                    AutoMove(0);
                    System.Threading.Thread.Sleep(1000);
                    MirrorWay(GroundOne.WE2.TruthWay3_5, 5);
                    MirrorTruthWay(4);
                    MirrorLastWay();

                    GroundOne.WE2.SeekerEvent919 = true;
                //}
                #endregion
                #region "ボス撃破後の無限回廊看板"
                //else if (!GroundOne.WE2.SeekerEvent920 && row == 39 && column == 54 && GroundOne.WE2.RealDungeonArea == 3 && GroundOne.WE2.SeekerEvent909)
                //{
                    UpdateMainMessage("アイン：（　扉を開けば、おそらくボスだ　）");

                    UpdateMainMessage("アイン：（　原点解のキーは得ている・・・大丈夫　）");

                    UpdateMainMessage("アイン：（　いくぜ　）");

                    UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                    this.dungeonField.Invalidate();

                    UpdateMainMessage("　　『その瞬間、部屋の奥底から、地鳴りのような唸り声が響き渡ってきた！！』");

                    UpdateMainMessage("ハウリング・シーザー：『ッヴオオオオォォォォォォ、グゥウウオォォオォォ！！！！！！』");

                    UpdateMainMessage("アイン：（　でけぇな・・・　）");

                    UpdateMainMessage("アイン：（　だが、こう見えても動き自体は早そうだ　）");

                    UpdateMainMessage("アイン：（　攻撃タイプはおそらく・・・物理戦闘の重圧型　）");

                    UpdateMainMessage("アイン：（　耐性装備には気を配っておくか　）");

                    UpdateMainMessage("アイン：（　後はパワーゲーム　）");

                    UpdateMainMessage("アイン：（　サクサクっと短期決戦に持ち込んでみせるぜ　）");

                    UpdateMainMessage("　　＜＜＜　アインは初手、何の行動もせず立ち止まったままとした　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　ハウリング・シーザーからの威圧的な咆哮に対し、微動だにせず　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　部屋全体を破壊するが如くのぶん回し攻撃に対し、完全回避　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　壊滅的な全体ダメージ、アース・コールド・シェイクを、完全に見切りカウンター　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　そして、ハウリング・シーザーの巨大な手が、アインをわし掴み、胴体をもぎとろうとした瞬間　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　その巨大な手はバラバラに砕け散り　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　その直後、ハウリング・シーザーの腕／肩／胴体／首／顔面に直線的な亀裂が発生　＞＞＞");

                    UpdateMainMessage("　　＜＜＜　亀裂に誘引され、ハウリング・シーザーの身体全体は、崩壊に至った　＞＞＞");

                    UpdateMainMessage("ハウリング・シーザー：ッヴ・・・ヴォォォォ・・・");

                    UpdateMainMessage("アイン：（　・・・　すまねえな　・・・　）");

                    UpdateMainMessage("アイン：（　目の前に看板がある。　すぐ読もう　）");

                    UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                    this.dungeonField.Invalidate();

                    UpdateMainMessage("　　　　『　正解を導きし者、無限解の探求にて永遠に彷徨い、原点を知ること無く、回り続けるがよい　』");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");
                    
                    UpdateMainMessage("アイン：（　大丈夫、予想通りだ ）");
                    
                    UpdateMainMessage("アイン：（　原点解は、1 3 4 5 4 2 3 1 4 2 5 5　）");

                    UpdateMainMessage("アイン：（　目の前に階段が一応あるが、部屋の奥にも鏡がある　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　原点解の数字の羅列は１〜５まで、そして鏡の数も左から数えて５つ　）");

                    UpdateMainMessage("アイン：（　目の前の階段はトラップだ　）");

                    UpdateMainMessage("アイン：（　左側が１、右側が５として、原点解の記載通りの順序で鏡を潜ろう　）");

                    GroundOne.WE2.SeekerEvent920 = true;
                }
                #endregion
                #region "３Fハウリングシーザー撃破の破、自由行動制限"
                else if (GroundOne.WE2.SeekerEvent920 && row == 39 && column == 54)
                {
                    UpdateMainMessage("アイン：いや、もう後ろへ振り返るのはよそう。");
                    UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                    this.Invalidate();
                }
                #endregion
                #region "無限回廊前の看板"
                else if (GroundOne.WE2.SeekerEvent920 && row == 39 && column == 56)
                {
                    UpdateMainMessage("　　　　『　正解を導きし者、無限解の探求にて永遠に彷徨い、原点を知ること無く、回り続けるがよい　』", true);
                }
                #endregion
                else if (GroundOne.WE2.SeekerEvent920 && row == 39 && column == 59)
                {
                    UpdateMainMessage("アイン：（　・・・この階段へは行かないでおこう　）");

                    UpdateMainMessage("アイン：（　原点解は得ている。確か・・・1 3 4 5 4 2 3 1 4 2 5 5　）");

                    UpdateMainMessage("アイン：（　原点解の数字の羅列は１〜５まで、そして鏡の数も左から数えて５つ　）");

                    UpdateMainMessage("アイン：（　左側が１、右側が５として、原点解の記載通りの順序で鏡を潜ろう　）");
                }
                #region "無限回廊"
                else if (!GroundOne.WE2.SeekerEvent921 && row == 35 && column == 55 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Instant(34, 57);
                    UpdateUnknownTileArea3_Last(32);
                }
                else if((!GroundOne.WE2.SeekerEvent921 && row == 35 && column == 56 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 35 && column == 57 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 35 && column == 58 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 35 && column == 59 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }
                else if (!GroundOne.WE2.SeekerEvent921 && row == 32 && column == 57 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Instant(31, 57);
                    UpdateUnknownTileArea3_Last(29);
                }
                else if((!GroundOne.WE2.SeekerEvent921 && row == 32 && column == 55 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 32 && column == 56 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 32 && column == 58 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 32 && column == 59 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }
                else if (!GroundOne.WE2.SeekerEvent921 && row == 29 && column == 58 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Instant(28, 57);
                    UpdateUnknownTileArea3_Last(26);
                }
                else if((!GroundOne.WE2.SeekerEvent921 && row == 29 && column == 55 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 29 && column == 56 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 29 && column == 57 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 29 && column == 59 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }
                else if (!GroundOne.WE2.SeekerEvent921 && row == 26 && column == 59 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Instant(25, 57);
                    UpdateUnknownTileArea3_Last(23);
                }
                else if((!GroundOne.WE2.SeekerEvent921 && row == 26 && column == 55 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 26 && column == 56 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 26 && column == 57 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 26 && column == 58 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }
                else if (!GroundOne.WE2.SeekerEvent921 && row == 23 && column == 58 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Instant(22, 57);
                    UpdateUnknownTileArea3_Last(20);
                }
                else if((!GroundOne.WE2.SeekerEvent921 && row == 23 && column == 55 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 23 && column == 56 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 23 && column == 57 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 23 && column == 59 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }
                else if (!GroundOne.WE2.SeekerEvent921 && row == 20 && column == 56 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Instant(19, 57);
                    UpdateUnknownTileArea3_Last(17);
                }
                else if((!GroundOne.WE2.SeekerEvent921 && row == 20 && column == 55 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 20 && column == 57 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 20 && column == 58 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 20 && column == 59 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }
                else if (!GroundOne.WE2.SeekerEvent921 && row == 17 && column == 57 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Instant(16, 57);
                    UpdateUnknownTileArea3_Last(14);
                }
                else if((!GroundOne.WE2.SeekerEvent921 && row == 17 && column == 55 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 17 && column == 56 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 17 && column == 58 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 17 && column == 59 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }
                else if (!GroundOne.WE2.SeekerEvent921 && row == 14 && column == 55 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Instant(13, 57);
                    UpdateUnknownTileArea3_Last(11);
                }
                else if((!GroundOne.WE2.SeekerEvent921 && row == 14 && column == 56 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 14 && column == 57 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 14 && column == 58 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 14 && column == 59 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }
                else if (!GroundOne.WE2.SeekerEvent921 && row == 11 && column == 58 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Instant(10, 57);
                    UpdateUnknownTileArea3_Last(8);
                }
                else if((!GroundOne.WE2.SeekerEvent921 && row == 11 && column == 55 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 11 && column == 56 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 11 && column == 57 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 11 && column == 59 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }
                else if (!GroundOne.WE2.SeekerEvent921 && row ==  8 && column == 56 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Instant(7, 57);
                    UpdateUnknownTileArea3_Last(5);
                }
                else if((!GroundOne.WE2.SeekerEvent921 && row ==  8 && column == 55 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row ==  8 && column == 57 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row ==  8 && column == 58 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row ==  8 && column == 59 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }
                else if (!GroundOne.WE2.SeekerEvent921 && row ==  5 && column == 59 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Instant(4, 57);
                    UpdateUnknownTileArea3_Last(2);
                }
                else if((!GroundOne.WE2.SeekerEvent921 && row ==  5 && column == 55 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row ==  5 && column == 56 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row ==  5 && column == 57 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row ==  5 && column == 58 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }

                else if ((!GroundOne.WE2.SeekerEvent921 && row == 2 && column == 55 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 2 && column == 56 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 2 && column == 57 && GroundOne.WE2.RealDungeonArea == 3) ||
                        (!GroundOne.WE2.SeekerEvent921 && row == 2 && column == 58 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：（　いや、この鏡じゃねえな　）");
                    UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                }
                #endregion
                #region "無限回廊から真実の回想録へ抜ける"
                else if (row ==  2 && column == 59 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror_Recollection4();
                    UpdateUnknownTile();

                    if (!GroundOne.WE2.SeekerEvent921)
                    {
                        UpdateMainMessage("アイン：（　よし、抜けたみたいだな　）");

                        UpdateMainMessage("アイン：（　進めよう　）");
                    }

                    GroundOne.WE2.SeekerEvent921 = true;
                }
                #endregion
                #region "真実の回想録3_4"
                else if (!GroundOne.WE2.SeekerEvent922 && row == 4 && column == 1 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    Story_TruthRecollection3_4();
                    GroundOne.WE2.SeekerEvent922 = true;
                }
                #endregion
                #region "真実の回想録から右上最後の看板へ"
                else if (row == 8 && column == 1 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    JumpByMirror(1, 55);
                    UpdateUnknownTileArea3_TruthLast();

                    if (!GroundOne.WE2.SeekerEvent923)
                    {
                        UpdateMainMessage("アイン：（　看板がある・・・見てみよう　）");

                        string correct = "○";
                        UpdateMainMessage("　　　　『　原点を知りし者、　　向かうは　【生】【死】　』\r\n　　　　　　"
                                    + this.originNumber[0] + " - " + this.originNumber[0] + " = " + correct + "    "
                                    + this.originNumber[1] + " - " + this.originNumber[1] + " = " + correct + "    "
                                    + this.originNumber[2] + " - " + this.originNumber[2] + " = " + correct + "    "
                                    + this.originNumber[3] + " - " + this.originNumber[3] + " = " + correct + "\r\n　　　　　　"
                                    + this.originNumber[4] + " - " + this.originNumber[4] + " = " + correct + "    "
                                    + this.originNumber[5] + " - " + this.originNumber[5] + " = " + correct + "    "
                                    + this.originNumber[6] + " - " + this.originNumber[6] + " = " + correct + "    "
                                    + this.originNumber[7] + " - " + this.originNumber[7] + " = " + correct + "\r\n　　　　　　"
                                    + this.originNumber[8] + " - " + this.originNumber[8] + " = " + correct + "    "
                                    + this.originNumber[9] + " - " + this.originNumber[9] + " = " + correct + "    "
                                    + this.originNumber[10] + " - " + this.originNumber[10] + " = " + correct + "    "
                                    + this.originNumber[11] + " - " + this.originNumber[11] + " = " + correct + "    "
                                    , false);

                        UpdateMainMessage("アイン：（　向かうは、【生】か【死】か・・・　）");

                        UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                        UpdateMainMessage("アイン：（　ラナを死なせはしない　）");

                        UpdateMainMessage("アイン：（　絶対に助け出して見せる　）");

                        UpdateMainMessage("アイン：（　行こう、４階へ　）");
                    }
                    GroundOne.WE2.SeekerEvent923 = true;
                }
                #endregion
                #region "最後の看板"
                else if (row == 1 && column == 55 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    string correct = "○";
                    UpdateMainMessage("　　　　『　原点を知りし者、　　向かうは　【生】【死】　』\r\n　　　　　　"
                                + this.originNumber[0] + " - " + this.originNumber[0] + " = " + correct + "    "
                                + this.originNumber[1] + " - " + this.originNumber[1] + " = " + correct + "    "
                                + this.originNumber[2] + " - " + this.originNumber[2] + " = " + correct + "    "
                                + this.originNumber[3] + " - " + this.originNumber[3] + " = " + correct + "\r\n　　　　　　"
                                + this.originNumber[4] + " - " + this.originNumber[4] + " = " + correct + "    "
                                + this.originNumber[5] + " - " + this.originNumber[5] + " = " + correct + "    "
                                + this.originNumber[6] + " - " + this.originNumber[6] + " = " + correct + "    "
                                + this.originNumber[7] + " - " + this.originNumber[7] + " = " + correct + "\r\n　　　　　　"
                                + this.originNumber[8] + " - " + this.originNumber[8] + " = " + correct + "    "
                                + this.originNumber[9] + " - " + this.originNumber[9] + " = " + correct + "    "
                                + this.originNumber[10] + " - " + this.originNumber[10] + " = " + correct + "    "
                                + this.originNumber[11] + " - " + this.originNumber[11] + " = " + correct + "    "
                                , true);
                    return false;
                }
                #endregion
                #region "３階、オル・ランディスと会話／戦闘"
                else if ((!GroundOne.WE2.SeekerEvent924 && row == 0 && column == 58 && GroundOne.WE2.RealDungeonArea == 3) ||
                         (!GroundOne.WE2.SeekerEvent924 && row == 1 && column == 59 && GroundOne.WE2.RealDungeonArea == 3))
                {
                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：３階は・・・師匠か。");

                    UpdateMainMessage("ランディス：わりぃかよ。");

                    UpdateMainMessage("アイン：いや・・・");

                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("ランディス：・・・良い面構えじゃねえか。");

                    UpdateMainMessage("ランディス：土壇場になって、腹括ってるみてえだな。");

                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：気持ちとしては師匠に勝ちたい。");

                    UpdateMainMessage("アイン：でも、気合云々で師匠に勝てる気が到底しないんだ。");

                    UpdateMainMessage("ランディス：やる前から腰引けてんじゃねえ、ボケザコが。");

                    UpdateMainMessage("アイン：師匠はなんでそんな強いんだ？");

                    UpdateMainMessage("ランディス：てめぇが勝手に俺を強いヤツにしてんだろ。");

                    UpdateMainMessage("ランディス：御託は要らねぇっつってんだろ。");

                    UpdateMainMessage("ランディス：とっとと、かかってこい。");

                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("ランディス：おっ");

                    UpdateMainMessage("ランディス：てめぇの本気は、久々に見るな。");

                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：行くぜ、師匠。");

                    UpdateMainMessage("ランディス：ああ、来い。");

                    bool win = EncountBattle(Database.ENEMY_LAST_OL_LANDIS, string.Empty, string.Empty, true, true, false, false);
                    if (win == false)
                    {
                        GroundOne.StopDungeonMusic();
                        UpdateMainMessage("アイン：ッグホ・・・！！！");

                        UpdateMainMessage("ランディス：ッチ、くだらねえ手加減グセが治ってねえみてぇだな。");

                        UpdateMainMessage("ランディス：最後のカルネージ・ラッシュだ、食らえやぁ！！");

                        UpdateMainMessage("　　　＜＜＜　ッドドドドドシュ！　＞＞＞　　");

                        UpdateMainMessage("アイン：ッグ　・・・　・・・");

                        UpdateMainMessage("　　　（　意識が　）　　");

                        UpdateMainMessage("　　　（　破壊された　）　　");

                        UpdateMainMessage("　　　（　師匠から何発もらったのか　）　");

                        UpdateMainMessage("　　　（　数える事が出来ず、意識が崩れていくのが分かった　）　");

                        UpdateMainMessage("　　　（　ラナ・・・すまない・・・　）　");

                        UpdateMainMessage("　　　（　・・・　・・・　・・・　）　");

                        UpdateMainMessage("　　　（　・・・　・・・　）　");

                        UpdateMainMessage("　　　（　・・・　）　");

                        UpdateMainMessage(" 〜　THE　END　〜　（オル・ランディスとの死闘）");

                        bool tempFlag = GroundOne.WE2.SeekerEvent924_fail;
                        GroundOne.WE2.SeekerEvent924_fail = true;
                        UpdatePlayerLocationInfo(this.Player.Location.X - Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                        Method.AutoSaveTruthWorldEnvironment();
                        Method.AutoSaveRealWorld(this.mc, this.sc, this.tc, this.we, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);

                        if (tempFlag)
                        {
                            using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                            {
                                ynrw.StartPosition = FormStartPosition.CenterParent;
                                ynrw.MainMessage = "戦闘をスキップし、勝利した状態からストーリーを進めますか？\r\n戦闘スキップによるペナルティはありません。";
                                ynrw.ShowDialog();
                                if (ynrw.DialogResult == DialogResult.Yes)
                                {
                                    // なにもせず次へ進む
                                }
                                else
                                {
                                    this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                                    return false;
                                }
                            }
                        }
                        else
                        {
                            this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                            return false;
                        }
                    }


                    UpdateMainMessage("ランディス：ッチ・・・");

                    UpdateMainMessage("アイン：し、師匠！　今の大丈夫だったか！？");

                    UpdateMainMessage("ランディス：ああ、何でもねえ。");

                    UpdateMainMessage("ランディス：ちっとばかし・・・ッグ・・・");

                    UpdateMainMessage("アイン：し、師匠！！！");

                    UpdateMainMessage("ランディス：ボ・・・ケが・・・そんな事より・・・も・・・だ。");

                    UpdateMainMessage("ランディス：こっからは・・・俺からの頼み事・・・だ。");

                    UpdateMainMessage("アイン：え？");

                    UpdateMainMessage("ランディス：アーティを・・・");

                    UpdateMainMessage("ランディス：このダンジョンから・・・解放してやってくれ。");

                    UpdateMainMessage("アイン：どういう意味なんだ？ヴェルゼに一体何が起きてるんだ？");

                    UpdateMainMessage("ランディス：アイツはもう・・・何度もこのダンジョンに挑んでいる。");

                    UpdateMainMessage("ランディス：数え切れねえほど・・・だ・・・");

                    UpdateMainMessage("ランディス：目的は、今のてめぇなら・・・分かるな？");

                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("ランディス：このダンジョンで・・・願い事が叶うというのを・・・信じて");

                    UpdateMainMessage("ランディス：アイツは今も・・・エレマ・セフィーネを・・・");

                    UpdateMainMessage("ランディス：いや・・・違う・・・か・・・");

                    UpdateMainMessage("アイン：師匠、もういいよ。頼むから喋らないでくれよ！");

                    UpdateMainMessage("ランディス：カッ・・・てめぇは・・・つくづく・・・甘いぜ。");

                    UpdateMainMessage("ランディス：アーティの・・・事だが・・・");

                    UpdateMainMessage("ランディス：アイツは今・・・神の遺産をとりあえず願うだけになっちまってる。");

                    UpdateMainMessage("アイン：そ・・・そんな・・・");

                    UpdateMainMessage("アイン：【天空の翼】を手に入れてるんだろ？");

                    UpdateMainMessage("アイン：もうそれ以上、神の遺産を受諾する事は叶わないんじゃないのか？");

                    UpdateMainMessage("ランディス：普通はそうだ。");

                    UpdateMainMessage("ランディス：だが、アーティの野郎は・・・それを・・・覆した。");

                    UpdateMainMessage("ランディス：今のあいつは・・・【天空の翼】に加え・・・");

                    UpdateMainMessage("ランディス：【黒真空の鎧】と・・・");
                    
                    UpdateMainMessage("ランディス：・・・【白銀の剣】・・・");

                    UpdateMainMessage("アイン：そ・・・そんな・・・３つも・・・");

                    UpdateMainMessage("ランディス：神の遺産は・・・膨大に心を・・・消費・・・する・・・");

                    UpdateMainMessage("ランディス：アイツの精神は・・・もうとっくに限界だ・・・");

                    UpdateMainMessage("ランディス：頼む、アーティを・・・");

                    UpdateMainMessage("ランディス：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：し、師匠！！　師匠！！！");

                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：消えてしまった・・・");

                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：この先・・・きっとヴェルゼが待ち構えている。");

                    UpdateMainMessage("アイン：神の遺産を・・・３つも・・・");

                    UpdateMainMessage("アイン：そんなのを相手に勝てるのか・・・俺は・・・");

                    UpdateMainMessage("アイン：・・・　・・・　・・・");

                    UpdateMainMessage("アイン：いや、やるしかないんだ。");

                    UpdateMainMessage("アイン：行こう。");

                    GroundOne.WE2.SeekerEvent924 = true;
                }
                #endregion
                #region "３階から４階へ"
                else if (row == 0 && column == 59 && GroundOne.WE2.RealDungeonArea == 3)
                {
                    if (!GroundOne.WE2.SeekerEvent925)
                    {
                        UpdateMainMessage("アイン：（　階段だ、降りよう　）");
                    }

                    JumpByNormal(28, 31);
                    SetupDungeonMapping(4);
                    UpdateUnknownTile();
                    dungeonField.Invalidate();
                    UpdateMainMessage("", true);

                    GroundOne.WE2.RealDungeonArea = 4;
                    GroundOne.WE2.SeekerEvent925 = true;
                    return false;
                }
                #endregion
                #region "無間地獄の看板"
                else if (row == 28 && column == 27 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    if (!GroundOne.WE2.SeekerEvent1001)
                    {
                        UpdateMainMessage("アイン：（　看板だ、読んでみよう　）");

                        UpdateMainMessage("　　　　『　無間地獄の終焉、生への帰還　』");

                        UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                        UpdateMainMessage("アイン：（　ん、看板の横に小さな泉があるな　）");

                        UpdateMainMessage("アイン：（　飲んでみるか　）");

                        UpdateMainMessage("アイン：（　・・・　ッゴク　・・・　）");

                        RefreshWater();
                        SetupPlayerStatus();

                        UpdateMainMessage("アイン：（　おし、どうやら回復するみたいだ　）");

                        UpdateMainMessage("アイン：（　看板の内容からして、これでもう最後だ　）");

                        UpdateMainMessage("アイン：（　行くぜ　）");

                        GroundOne.WE2.SeekerEvent1001 = true;
                        return false;
                    }
                    else
                    {
                        UpdateMainMessage("　　　　『　無間地獄の終焉、生への帰還　』");

                        UpdateMainMessage("アイン：（　回復の泉を飲んでおこう　）");

                        UpdateMainMessage("アイン：（　・・・　ッゴク　・・・　）");

                        RefreshWater();
                        SetupPlayerStatus();

                        UpdateMainMessage("アイン：（　っしゃ、行くぜ　）");

                        return false;
                    }
                }
                #endregion
                #region "登り階段をブロック"
                else if (row == 28 && column == 31 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    UpdateMainMessage("アイン：（　いや、もう戻る必要はねえ　）", true);
                    return false;
                }
                #endregion
                #region "宝箱１"
                else if (!GroundOne.WE2.SeekerEvent1002 && row == 25 && column == 27 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    GroundOne.WE2.SeekerEvent1002 = GetTreasure(Database.COMMON_GREEN_CRYSTAL);
                    return false;
                }
                #endregion
                #region "宝箱２"
                else if (!GroundOne.WE2.SeekerEvent1003 && row == 24 && column == 27 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    GroundOne.WE2.SeekerEvent1003 = GetTreasure(Database.RARE_MEEK_HIDENSYO);
                    return false;
                }
                #endregion
                #region "宝箱３"
                else if (!GroundOne.WE2.SeekerEvent1004 && row == 31 && column == 26 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    GroundOne.WE2.SeekerEvent1004 = GetTreasure(Database.COMMON_PLATINUM_RING_1);
                    return false;
                }
                #endregion
                #region "宝箱４"
                else if (!GroundOne.WE2.SeekerEvent1005 && row == 30 && column == 43 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    GroundOne.WE2.SeekerEvent1005 = GetTreasure(Database.POOR_MIGAWARI_DOOL);
                    return false;
                }
                #endregion
                #region "宝箱５"
                else if (!GroundOne.WE2.SeekerEvent1006 && row == 32 && column == 27 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    GroundOne.WE2.SeekerEvent1006 = GetTreasure(Database.COMMON_RED_CRYSTAL);
                    return false;
                }
                #endregion
                #region "宝箱６"
                else if (!GroundOne.WE2.SeekerEvent1007 && row == 28 && column == 44 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    GroundOne.WE2.SeekerEvent1007 = GetTreasure(Database.RARE_SHINING_AETHER);
                    return false;
                }
                #endregion
                #region "宝箱７"
                else if (!GroundOne.WE2.SeekerEvent1008 && row == 27 && column == 31 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    GroundOne.WE2.SeekerEvent1008 = GetTreasure(Database.EPIC_OVER_SHIFTING);
                    return false;
                }
                #endregion
                #region "宝箱８"
                else if (!GroundOne.WE2.SeekerEvent1009 && row == 28 && column == 38 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    GroundOne.WE2.SeekerEvent1009 = GetTreasure(Database.EPIC_GOLD_POTION);
                    return false;
                }
                #endregion
                #region "鏡１"
                else if (row == 28 && column == 23 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(22, 40);
                }
                #endregion
                #region "鏡２"
                else if (row == 23 && column == 43 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(20, 26);
                }
                #endregion
                #region "鏡３"
                else if (row == 22 && column == 28 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(31, 39);
                }
                #endregion
                #region "鏡４"
                else if (row == 32 && column == 39 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(28, 22);
                }
                #endregion
                #region "鏡５"
                else if (row == 22 && column == 22 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(21, 39);
                }
                #endregion
                #region "鏡６"
                else if (row == 20 && column == 32 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(31, 23);
                }
                #endregion
                #region "鏡７"
                else if (row == 29 && column == 21 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(26, 39);
                }
                #endregion
                #region "鏡８"
                else if (row == 26 && column == 43 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(23, 23);
                }
                #endregion
                #region "鏡９"
                else if (row == 25 && column == 26 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(33, 34);
                }
                #endregion
                #region "鏡１０"
                else if (row == 32 && column == 23 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(22, 38);
                }
                #endregion
                #region "鏡１１"
                else if (row == 22 && column == 32 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(25, 44);
                }
                #endregion
                #region "鏡１２"
                else if (row == 31 && column == 44 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(31, 34);
                }
                #endregion
                #region "鏡１３"
                else if (row == 31 && column == 28 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(25, 28);
                }
                #endregion
                #region "鏡１４"
                else if (row == 25 && column == 34 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(25, 38);
                }
                #endregion
                #region "鏡１５"
                else if (row == 28 && column == 32 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(27, 33);

                    if (!GroundOne.WE2.SeekerEvent1015)
                    {
                        Story_TruthRecollection4_5();

                        UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                        UpdateMainMessage("アイン：（　なんだ・・・あれは・・・　）");

                        UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.  Y - Database.DUNGEON_MOVE_LEN);
                        UpdateUnknownTile();
                        this.dungeonField.Invalidate();

                        UpdateMainMessage("アイン：（　何か設置されている　）");

                        UpdateMainMessage("アイン：（　・・・　剣　・・・　）");

                        UpdateMainMessage("アイン：（　神剣フェルトゥーシュ　）");

                        CallSomeMessageWithAnimation("アインは" + Database.LEGENDARY_FELTUS + "を手に入れた。");

                        ItemBackPack item = new ItemBackPack(Database.LEGENDARY_FELTUS);
                        if (mc.AddBackPack(item) == false)
                        {
                            // バックパックがいっぱいの場合ステータス画面で不要アイテムを捨てさせます。
                            using (TruthStatusPlayer sp = new TruthStatusPlayer())
                            {
                                sp.MC = mc;
                                if (we.AvailableSecondCharacter)
                                {
                                    sp.SC = sc;
                                }
                                if (we.AvailableThirdCharacter)
                                {
                                    sp.TC = tc;
                                }
                                sp.WE = we;
                                sp.StartPosition = FormStartPosition.CenterParent;
                                sp.OnlySelectTrash = true;
                                sp.CannotSelectTrash = Database.LEGENDARY_FELTUS;
                                sp.ShowDialog();
                                mc = sp.MC;
                                if (we.AvailableSecondCharacter)
                                {
                                    sc = sp.SC;
                                }
                                if (we.AvailableThirdCharacter)
                                {
                                    tc = sp.TC;
                                }
                                if (sp.DialogResult == DialogResult.Abort)
                                {
                                    this.DialogResult = DialogResult.Abort;
                                }
                            }
                            mc.AddBackPack(item);
                        }

                        UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                        UpdateMainMessage("アイン：（　俺が知る限り、この神剣フェルトゥーシュは　）");

                        UpdateMainMessage("アイン：（　ヴェルゼ・アーティが所持していたはずだ　）");

                        UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                        UpdateMainMessage("アイン：（　その神剣が、今この目の前に出現したという事は　）");

                        UpdateMainMessage("アイン：（　最後の最後まで、俺の記憶から一番遠ざけたかった事　）");

                        UpdateMainMessage("アイン：（　それが目の前に来たという事だ　）");

                        UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                        UpdateMainMessage("アイン：（　手遅れじゃない　）");

                        UpdateMainMessage("アイン：（　手遅れじゃないはずだ　）");

                        UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                        UpdateMainMessage("アイン：（　鏡が左と右に１つずつ　）");

                        UpdateMainMessage("アイン：（　左は、元の入口へ　）");

                        UpdateMainMessage("アイン：（　右へ行けば、おそらくそこに・・・　）");

                        UpdateMainMessage("アイン：（　行こう　）");
                    }
                    GroundOne.WE2.SeekerEvent1015 = true;
                }
                #endregion
                #region "失敗Ｘ"
                else if ((row == 25 && column == 22 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 27 && column == 23 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 29 && column == 23 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 22 && column == 26 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 31 && column == 27 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 23 && column == 31 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 29 && column == 31 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 32 && column == 31 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 21 && column == 35 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 24 && column == 35 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 30 && column == 35 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 30 && column == 39 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 20 && column == 40 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 33 && column == 40 && GroundOne.WE2.RealDungeonArea == 4) ||
                         (row == 22 && column == 44 && GroundOne.WE2.RealDungeonArea == 4))
                {
                    JumpByMirror_Instant(28, 27);

                    if (!GroundOne.WE2.SeekerEvent1010)
                    {
                        UpdateMainMessage("アイン：（　ここは・・・　）");

                        UpdateMainMessage("アイン：（　最初の看板に戻っちまったみたいだな　）");

                        UpdateMainMessage("アイン：（　っくそ、今度こそ・・・　）");
                    }
                    else
                    {
                        UpdateMainMessage("アイン：（　しまった、元の場所だ・・・　）");

                        UpdateMainMessage("アイン：（　っくそ、今度こそ・・・　）");
                    }
                    GroundOne.WE2.SeekerEvent1010 = true;
                }
                else if (row == 26 && column == 32 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(28, 27);
                }
                #endregion
                #region "鏡１６"
                else if (row == 26 && column == 34 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(19, 49);
                }
                else if (row == 19 && column == 49 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    JumpByMirror_Instant(26, 33);
                }
                #endregion
                #region "ボス前の扉"
                else if (!GroundOne.WE2.SeekerEvent1011 && row == 19 && column == 52 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    UpdateUnknownTileArea(this.Truth_KnownTileInfo4, 53, 59, 18, 20);

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    int current = GetTileNumber(this.Player.Location);
                    UpdatePlayerLocationInfo(this.Player.Location.X + Database.DUNGEON_MOVE_LEN, this.Player.Location.Y);
                    dungeonField.Invalidate();

                    UpdateMainMessage("アイン：（　銅像がこの部屋の向こうに見える・・・　）");

                    UpdateMainMessage("アイン：（　いや、それより　）");

                    UpdateMainMessage("アイン：（　気配を感じる・・・　）");

                    UpdateMainMessage("アイン：（　誰だ？　）");

                    UpdateMainMessage("　　？？？：・・・　少年よ　・・・");

                    UpdateMainMessage("　　？？？：この先へと進める少年よ");

                    UpdateMainMessage("　　アイン：だ、誰だ！？");

                    UpdateMainMessage("　　？？？：我は名も無き傍観者Bystander");

                    UpdateMainMessage("　　？？？：それが真実の名　");

                    UpdateMainMessage("　　？？？：世俗では支配竜と呼ばれている");

                    UpdateMainMessage("　　アイン：支配竜・・・");

                    UpdateMainMessage("　　支配竜：少年のイメージにより我の形態は常に変化する");

                    UpdateMainMessage("　　支配竜：呼びやすくイメージしやすい姿で問いかけるとよい");

                    UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                    UpdateMainMessage("　　アイン：俺は今、神剣フェルトゥーシュを手にしている。");

                    UpdateMainMessage("　　アイン：この剣を・・・向こうに見える銅像に突き刺せば良いのか？");

                    UpdateMainMessage("　　支配竜：銅像に突き刺せば少年は元の世界へと還る");

                    UpdateMainMessage("　　支配竜：最下層へ目指す事もなく現実をあきらめる事もなく");

                    UpdateMainMessage("　　支配竜：在るがままの姿を知る事になるだろう");

                    UpdateMainMessage("　　支配竜：全ては必然だと知るがよい");

                    UpdateMainMessage("　　アイン：俺がラナの母親からこの神剣を受け取った事");

                    UpdateMainMessage("　　アイン：昔、FiveSeeker達がこのダンジョンへ挑んでいた事");

                    UpdateMainMessage("　　アイン：６人目のセフィーネさんが死んでしまった事");

                    UpdateMainMessage("　　アイン：ヴェルゼがそのせいでダンジョンへ挑み続ける様になった事");

                    UpdateMainMessage("　　アイン：俺がヴェルゼと緑小屋でDUELして神剣を奪われた事");

                    UpdateMainMessage("　　アイン：そしてラナがダンジョンについて来る事になった事");

                    UpdateMainMessage("　　アイン：そして・・・");

                    UpdateMainMessage("　　アイン：俺がしくじった結果、ラナがダンジョンで死ぬ事");

                    UpdateMainMessage("　　アイン：全て支配竜、お前にとって必然だったって事なのか？");

                    UpdateMainMessage("　　支配竜：我にとっての事象は存在しない");

                    UpdateMainMessage("　　支配竜：我のための論理は存在しない");

                    UpdateMainMessage("　　支配竜：我からの意志は存在しない");

                    UpdateMainMessage("　　支配竜：この世は我ではなく");

                    UpdateMainMessage("　　支配竜：少年達のために存在する");

                    UpdateMainMessage("　　支配竜：行くがよい少年よ");

                    UpdateMainMessage("　　アイン：ま、待ってくれ！");

                    UpdateMainMessage("　　アイン：俺が・・・俺がここに来る事も必然性はあったのか？");

                    UpdateMainMessage("　　アイン：頼む、教えてくれ！");

                    UpdateMainMessage("　　支配竜：少年がここに来ることは");

                    UpdateMainMessage("　　支配竜：少年が決めた事である");

                    UpdateMainMessage("　　支配竜：少女ラナ・アミリアが決めた事である");

                    UpdateMainMessage("　　支配竜：超越者ヴェルス・エクストゥーゼ・アーティスが決めた事である");

                    UpdateMainMessage("　　支配竜：少年一人の意志にあらずと知るがよい");

                    UpdateMainMessage("　　アイン：そうか・・・そうなんだろうなきっと・・・");

                    UpdateMainMessage("　　アイン：・・・　・・・　・・・");

                    UpdateMainMessage("　　支配竜：・・・　・・・　・・・");

                    UpdateMainMessage("　　（　支配竜の姿が徐々に薄れていく　）");

                    UpdateMainMessage("　　（　まだ聞きたい事がたくさんあるんだが　）");

                    UpdateMainMessage("　　（　言葉が出てこない　）");

                    UpdateMainMessage("　　（　このまま　）");

                    UpdateMainMessage("　　（　進めるしかないんだ　）");

                    UpdateMainMessage("　　（　そんな気がした　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　幻影だったんだろうか・・・　）");

                    UpdateMainMessage("アイン：（　もう気配は何も感じ取れない・・・　）");

                    UpdateMainMessage("アイン：（　・・・　・・・　・・・　）");

                    UpdateMainMessage("アイン：（　行こう　）");

                    UpdateMainMessage("アイン：（　銅像は目の前だ　）");

                    GroundOne.WE2.SeekerEvent1011 = true;
                    this.dungeonField.Invalidate();
                }
                else if (row == 19 && column == 53 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    UpdateUnknownTileArea(knownTileInfo4, 53, 59, 18, 20);
                    dungeonField.Invalidate();
                    return false;
                }
                #endregion
                #region "フェルトゥーシュ入手＋第三偶像を破壊"
                else if (!GroundOne.WE2.SeekerEvent1012 && row == 19 && column == 59 && GroundOne.WE2.RealDungeonArea == 4)
                {
                    // ここで偶像２択画面を出して、最後まで実施させて、人間の像ではなく、ラナの像を破壊させるを選択までさせて、最後で第三の像を表示してそれを選択させる。
                    UpdateMainMessage("アイン：（　・・・銅像だ　）");

                    UpdateMainMessage("アイン：（　・・・剣を・・・　）");

                    UpdateMainMessage("アイン：（　差し込もう　）");

                    UpdateMainMessage("アイン：（　行くぜ！！　）");

                    UpdateMainMessage("＜＜＜　ッザシュ！！！ ＞＞＞");

                    UpdateMainMessage("＜＜＜　剣を差し込んだ銅像からまばゆい光があふれ始めた！ ＞＞＞");

                    UpdateMainMessage("アイン：っうわ！！ま、まぶし・・・");

                    UpdateMainMessage("＜＜＜　強烈な光が幾重にもかさなり、その輝きは更に増していく！ ＞＞＞");

                    UpdateMainMessage("アイン：目・・・目を瞑っていても・・・光が・・・ッグ！！");

                    GroundOne.WE2.SeekerEvent1013 = true;
                    this.BackColor = Color.White;
                    this.backgroundData = null;
                    this.Invalidate();
                    labelVigilance.Visible = false;
                    VigilanceMode.Visible = false;
                    PathfindingMode.Visible = false;
                    menuFocus.Visible = false;
                    FirstPlayerPanel.Visible = false;
                    SecondPlayerPanel.Visible = false;
                    ThirdPlayerPanel.Visible = false;
                    this.Invalidate();

                    UpdateMainMessage("＜＜＜　アインの周囲は完全に光に包まれた ＞＞＞");

                    UpdateMainMessage("＜＜＜　空間、音、時間のすべてが光に包まれ、消滅していく ＞＞＞");

                    UpdateMainMessage("アイン：やべ・・・なんだこれ・・・！");

                    UpdateMainMessage("＜＜＜　やがて、アインの意志や思考も光の中へ消えていくのをアインは実感した ＞＞＞");

                    UpdateMainMessage("アイン：ッグ・・・　・・・ラ・・・ナ・・・");

                    UpdateMainMessage("＜＜＜　アインという個体と、神剣フェルトゥーシュ、そしてダンジョンは ＞＞＞");

                    UpdateMainMessage("＜＜＜　今この場から連続的に全ての要素が粒状に消滅していく ＞＞＞");

                    UpdateMainMessage("アイン：ッ・・・ラ・・・");

                    UpdateMainMessage("＜＜＜　 粒状の物質は全て光へと連続的に吸い込まれ　＞＞＞");

                    UpdateMainMessage("＜＜＜　 形状／形質／性質それらが全て断続的な微小球体となり、光へ　＞＞＞");

                    UpdateMainMessage("＜＜＜　 光へ次々と飲み込まれていった　＞＞＞");

                    UpdateMainMessage("＜＜＜　 そして、ダンジョンおよび世界の全てが消滅した　＞＞＞");

                    UpdateMainMessage("＜＜＜　ダンジョンとは支配竜がいた世界 ＞＞＞");

                    UpdateMainMessage("＜＜＜　ダンジョンとは支配竜そのものであり　＞＞＞");

                    UpdateMainMessage("＜＜＜　支配竜とは宇宙法則そのもの　＞＞＞");

                    UpdateMainMessage("＜＜＜　宇宙法則とは、原理であり、摂理である　＞＞＞");

                    UpdateMainMessage("＜＜＜　そして摂理とはフェルトゥーシュが司っていた　＞＞＞");

                    UpdateMainMessage("＜＜＜　この世界が消滅した事は ＞＞＞");

                    UpdateMainMessage("＜＜＜　この世の創生が行われてから ＞＞＞");

                    UpdateMainMessage("＜＜＜　始めての事象である ＞＞＞");

                    UpdateMainMessage("＜＜＜　これは唯一の事象であると記録されている　＞＞＞");

                    UpdateMainMessage("＜＜＜　世界は終わり　＞＞＞");

                    UpdateMainMessage("＜＜＜　無へと還った　＞＞＞");

                    UpdateMainMessage("＜＜＜　果てしなき無へと還った　＞＞＞");

                    UpdateMainMessage("＜＜＜　アイン・ウォーレンス　＞＞＞");

                    UpdateMainMessage("＜＜＜　そう呼ばれていた存在の根源が失われてから　＞＞＞");

                    UpdateMainMessage("＜＜＜　無限の時間が過ぎ去った　＞＞＞");

                    UpdateMainMessage("＜＜＜　生命が還る場所すら無い空間と場　＞＞＞");

                    UpdateMainMessage("＜＜＜　そんな中で　＞＞＞");

                    UpdateMainMessage("＜＜＜　ただ一点　＞＞＞");

                    UpdateMainMessage("＜＜＜　生命波動が形成された　＞＞＞");

                    UpdateMainMessage("＜＜＜　そこから生まれし波動を元に　＞＞＞");

                    UpdateMainMessage("＜＜＜　あらゆる事象が現れ始めた　＞＞＞");

                    UpdateMainMessage("＜＜＜　そこに　＞＞＞");

                    UpdateMainMessage("＜＜＜　アイン・ウォーレンスと呼ばれていた存在は　＞＞＞");

                    UpdateMainMessage("＜＜＜　願いを発生し始めたのである　＞＞＞");

                    UpdateMainMessage("＜＜＜　支配竜ですら捉えられなかった事象が　＞＞＞");

                    UpdateMainMessage("＜＜＜　起こったのだ　＞＞＞");

                    UpdateMainMessage("＜＜＜　アイン・ウォーレンスは自分自身が何者かも分からないまま　＞＞＞");

                    UpdateMainMessage("＜＜＜　何も知りえず、経験せず、意識も行えず、意志も持てず、言葉一つ持たない状態で　＞＞＞");

                    UpdateMainMessage("＜＜＜　途絶える事なく、ひたすら願いを発生し始めた　＞＞＞");

                    UpdateMainMessage("＜＜＜　ラナ・アミリアと共に生きる世界を　＞＞＞");

                    UpdateMainMessage("＜＜＜　もう一度　＞＞＞");

                    UpdateMainMessage("＜＜＜　・・・　＞＞＞");

                    UpdateMainMessage("　　　『　・・・　・・・　・・・　』");

                    UpdateMainMessage("　　　『　・・・　・・・　』");

                    UpdateMainMessage("　　　『　・・・　』");

                    JumpByNormal(15, 30);
                    SetupDungeonMapping(5);
                    dungeonField.Invalidate();
                    UpdateMainMessage("", true);

                    GroundOne.WE2.SeekerEvent1014 = true;
                    ReturnToNormal();
                    this.Invalidate();
                    labelVigilance.Visible = true;
                    VigilanceMode.Visible = true;
                    PathfindingMode.Visible = true;
                    menuFocus.Visible = true;
                    SetupPlayerStatus();
                    this.Invalidate();

                    GroundOne.WE2.RealDungeonArea = 5;
                    GroundOne.WE2.SeekerEvent1012 = true;
                }
                #endregion
                #region "最終戦の前で引き返す事をさせないための制御"
                else if (row == 16 && column == 30 && GroundOne.WE2.RealDungeonArea == 5)
                {
                    UpdateMainMessage("アイン：（　ラナ・・・どこにいるんだ！！　）");
                    UpdatePlayerLocationInfo(Player.Location.X, Player.Location.Y - Database.DUNGEON_MOVE_LEN);
                    this.dungeonField.Invalidate();
                    return false;
                }
                #endregion
                #region "回復の泉"
                else if (row == 14 && column == 31 && GroundOne.WE2.RealDungeonArea == 5)
                {
                    RefreshWater();
                    SetupPlayerStatus();

                    UpdateMainMessage("『　ライフ／スキル／マナが全回復しました。　』");

                    using (TruthEquipmentShop ES = new TruthEquipmentShop())
                    {
                        ES.TitleName = "アイテム転送ポータル << OutPhase >>";
                        ES.StartPosition = FormStartPosition.CenterParent;
                        ES.MC = this.mc;
                        ES.SC = this.sc;
                        ES.TC = this.tc;
                        ES.WE = this.we;
                        ES.ShowDialog();
                    }
                    return false;
                }
                #endregion
                #region "真実世界"
                else if (row == 9 && ((column == 29) || (column == 30) || (column == 31)) && GroundOne.WE2.RealDungeonArea == 5)
                {
                    if (column == 29) { UpdatePlayerLocationInfo(Player.Location.X + Database.DUNGEON_MOVE_LEN, Player.Location.Y); UpdateUnknownTile(); }
                    if (column == 31) { UpdatePlayerLocationInfo(Player.Location.X - Database.DUNGEON_MOVE_LEN, Player.Location.Y); UpdateUnknownTile(); }

                    UpdateUnknownTileArea(this.knownTileInfo5, 25, 35, 3, 9);

                    if (!GroundOne.WE2.SeekerEvent1101)
                    {
                        UpdateMainMessage("アイン：ラ、ラナ！！！");

                        UpdateMainMessage("ラナ：う・・・");

                        UpdateMainMessage("アイン：ラナ、しっかりしろ！！");

                        UpdateMainMessage("ラナ：アイン・・・ごめんね。ごめんなさい。・・・ご・・・ごめんなさい・・・私");

                        UpdateMainMessage("アイン：やめろ、喋るな！！");

                        UpdateMainMessage("ラナ：私はアインと一緒に居るから。絶対に。");

                        UpdateMainMessage("　『ッブシュ！！！』（床一面が赤に染まっていく！）");

                        UpdateMainMessage("ラナ：わ・・・私ね。ごめんね・・・");

                        UpdateMainMessage("アイン：分かった。分かったから！！　今直してやる。　フレッシュヒール！！");

                        UpdateMainMessage("　　【【【　神剣フェルトゥーシュの傷痕は、ヒーリング効果を打ち消している　】】】");

                        UpdateMainMessage("アイン：っくそ、フェルトゥーシュの影響か・・・ックソ！　サークレッド・ヒール！！");

                        UpdateMainMessage("　　【【【　神剣フェルトゥーシュの傷痕は、ヒーリング効果を打ち消し続けている　】】】");

                        UpdateMainMessage("アイン：っくそ・・・どうして・・・こんな・・・？");

                        UpdateMainMessage("ラナ：ア、アイン・・・良いの、私の事は・・・あきらめて・・・");

                        UpdateMainMessage("ラナ：私、最初からそういう運命だったのよ、きっと・・・");

                        UpdateMainMessage("アイン：何言ってる、そういう言い方はやめろ！！");

                        UpdateMainMessage("ラナ：良いの・・・助か・・・らない・・・から・・・");

                        UpdateMainMessage("　　【【【　ラナ・アミリアはその場で意識を完全に失った　】】】");

                        UpdateMainMessage("アイン：ラナ！ラナ！！　うわあああぁぁぁ！！！");

                        UpdateMainMessage("アイン：なんで・・何でこんな事に・・・");

                        UpdateMainMessage("アイン：・・・ック・・・ラナが・・・ラナが死んでしまう・・・");

                        UpdateMainMessage("アイン：ッグ・・・・・・");

                        UpdateMainMessage("　　＜＜＜　その時　＞＞＞");

                        UpdateMainMessage("　　＜＜＜　アイン・ウォーレンスに、声が届いた　＞＞＞");

                        UpdateMainMessage("ヴェルゼ：　　　アイン君　　　");

                        UpdateMainMessage("　　＜＜＜　時間が完全に停止した、そんな気がした　＞＞＞");

                        UpdateMainMessage("アイン：誰だ！？");

                        UpdateMainMessage("　　　＜＜＜　一つの風がアインの全体へ触れる　＞＞＞　　");

                        UpdateMainMessage("アイン：この雰囲気・・・まさかヴェルゼか！？");

                        UpdateMainMessage("ヴェルゼ：アイン君");

                        UpdateMainMessage("ヴェルゼ：ラナさんの事は、もうあきらめてください。");

                        UpdateMainMessage("ヴェルゼ：そのフェルトゥーシュで刺された者に対して");

                        UpdateMainMessage("ヴェルゼ：ヒーリング効果は発揮されません。");

                        UpdateMainMessage("ヴェルゼ：ラナさんはもうすぐ絶命するでしょう。");

                        UpdateMainMessage("アイン：何で・・・");

                        UpdateMainMessage("アイン：何でラナに神剣フェルトゥーシュが刺さってんだよ！？");

                        UpdateMainMessage("アイン：俺がこの部屋に来る前に何があったんだ！？答えてくれ、ヴェルゼ！！");

                        UpdateMainMessage("ヴェルゼ：ラナさんがこうなったのは、アイン君のせいではありません。");

                        UpdateMainMessage("アイン：３階の最後で、迂闊にもラナを先に進めてしまった・・・");

                        UpdateMainMessage("アイン：３階の妙な台座にラナが囚われちまって・・・");

                        UpdateMainMessage("アイン：そのあとすぐ解けたと思ったら、ラナは黒い煙みたいなモノにさらわれてしまった。");

                        UpdateMainMessage("ヴェルゼ：・・・");

                        UpdateMainMessage("アイン：あの直後、気付いたらヴェルゼも居なくなってた。");

                        UpdateMainMessage("アイン：俺は完全に失敗だと思った。");

                        UpdateMainMessage("アイン：完全に俺のせいだ。");

                        UpdateMainMessage("ヴェルゼ：いや、アイン君のせいではありません。");

                        UpdateMainMessage("ヴェルゼ：これは逃れられない事象なんです、アイン君。");

                        UpdateMainMessage("アイン：逃れられないって何だよ・・・");

                        UpdateMainMessage("アイン：この部屋で何があったのかを教えてくれよ、頼む！！");

                        UpdateMainMessage("　　　＜＜＜　ヴェルゼ・アーティは目を閉じ　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　どこかへ向くともなく、どこかへ語り掛けることもなく　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　言葉を空中へ発した　＞＞＞　　");

                        UpdateMainMessage("ヴェルゼ：　　ラナさんは");

                        UpdateMainMessage("ヴェルゼ：　　　　　　　　　ボクが");

                        UpdateMainMessage("ヴェルゼ：　　　　　　　　　　　　　　　殺しました。");

                        UpdateMainMessage("アイン：・・・　・・・　・・・");

                        UpdateMainMessage("　　　（　何を言ってるのか　）　　");

                        UpdateMainMessage("　　　（　俺には分からなかった　）　　");

                        UpdateMainMessage("アイン：ッハ・・・ハハハ・・・");

                        UpdateMainMessage("アイン：いやいや、やめてくれよ冗談は。");

                        UpdateMainMessage("アイン：この部屋で何があったのかを聞いてるんだ、俺は。");

                        UpdateMainMessage("　　　＜＜＜　ヴェルゼ・アーティは目を閉じ続けている　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　そのまま言葉を空中へと発する　＞＞＞　　");

                        UpdateMainMessage("ヴェルゼ：神剣フェルトゥーシュを");

                        UpdateMainMessage("ヴェルゼ：　　　　　　　　　　　　ラナさんの身体へ");

                        UpdateMainMessage("ヴェルゼ：　　　　　　　　　　　　　　　　　　　　　突き刺しました。");

                        UpdateMainMessage("アイン：ウソだ！！！");

                        UpdateMainMessage("アイン：冗談じゃねえぞ！！何言ってんだ！！！");

                        UpdateMainMessage("　　　＜＜＜　ヴェルゼ・アーティは突如目を開け　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　アイン・ウォーレンスの方へと視線を投げた　＞＞＞　　");

                        UpdateMainMessage("ヴェルゼ：アイン君、ラナさんはボクが殺したんです。");

                        UpdateMainMessage("　　　＜＜＜　頭髪はいつのまにか全て純白へと色を変え　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　ヴェルゼの両目の色素は真紅に染まっていた　＞＞＞　　");

                        UpdateMainMessage("アイン：ヴェ・・・ヴェルゼ・・・お前・・・");

                        UpdateMainMessage("ヴェルゼ：アイン君の痛み、ボクは分かります。");

                        UpdateMainMessage("ヴェルゼ：アイン君の苦しみを、ボクは知っています。");

                        UpdateMainMessage("ヴェルゼ：アイン君の全てを、ボクは理解しています。");

                        UpdateMainMessage("ヴェルゼ：アイン君");

                        UpdateMainMessage("ヴェルゼ：ボクがアイン君を殺してあげましょう。");

                        UpdateMainMessage("アイン：っな！・・・");

                        UpdateMainMessage("　　　＜＜＜　ヴェルゼ・アーティは完全なる殺気を部屋中に満たしていった　＞＞＞　　");

                        UpdateMainMessage("ヴェルゼ：アイン君を殺した後");

                        UpdateMainMessage("ヴェルゼ：ボクもこの場で死ぬ事を約束します。");

                        UpdateMainMessage("アイン：ふ、ふざけてんのか！？　ヴェルゼてめぇ！！");

                        UpdateMainMessage("ヴェルゼ：止めたければ");

                        UpdateMainMessage("ヴェルゼ：ボクを");

                        UpdateMainMessage("ヴェルゼ：殺すしか選択肢はありません。");

                        UpdateMainMessage("ヴェルゼ：アイン君、行きますよ。");

                        UpdateMainMessage("アイン：・・・　・・・　・・・");

                        UpdateMainMessage("　　　＜＜＜　アインは顔を微かに下に伏せ　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　視線を完全に隠す体制を取った　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　体位は正面から微かに右へと向け　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　剣の切っ先は地面との垂直方向より5度傾けた方向に向け　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　体位を整えた　＞＞＞　　");

                        UpdateMainMessage("アイン：・・・　・・・　・・・");

                        UpdateMainMessage("　　　＜＜＜　腹部より大きい呼吸を一つ　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　アイン・ウォーレンスは　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　この時、生まれてから初めて　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　今まで象った事の無い戦闘スタイルを取った　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　それは、アイン・ウォーレンスにとって唯一無二の戦闘スタイルであった　＞＞＞　　");

                        UpdateMainMessage("ヴェルゼ：アイン君");

                        UpdateMainMessage("ヴェルゼ：ラナさんと、そしてボクと共に");

                        UpdateMainMessage("ヴェルゼ：ここで死を迎えましょう。");

                        UpdateMainMessage("アイン：・・・　・・・　・・・");

                        UpdateMainMessage("アイン：絶対に");

                        UpdateMainMessage("アイン：ヴェルゼ、おめえを倒す。");

                        UpdateMainMessage("アイン：・・・行くぜ！！");

                        bool win = false;
                        win = EncountBattle(Database.ENEMY_LAST_VERZE_ARTIE, String.Empty, String.Empty, true, true, true, false);
                        UpdateMainMessage("", true);
                        if (win == false)
                        {
                            GroundOne.StopDungeonMusic();
                            UpdateMainMessage("アイン：ッグ・・・グハァ！！！");

                            UpdateMainMessage("ヴェルゼ：とどめです。");

                            UpdateMainMessage("ヴェルゼ：ッハアアアァァァァ！！");

                            UpdateMainMessage("　　　＜＜＜　ッザシュ！　＞＞＞　　");

                            UpdateMainMessage("アイン：ッグ　・・・　・・・");

                            UpdateMainMessage("　　　（　意識が　）　　");

                            UpdateMainMessage("　　　（　破壊された　）　　");

                            UpdateMainMessage("　　　（　呼吸の方法を必死で探ったが　）　");

                            UpdateMainMessage("　　　（　その意識すら消えていく　）　");

                            UpdateMainMessage("　　　（　ラナ・・・すまない・・・　）　");

                            UpdateMainMessage("　　　（　・・・　・・・　・・・　）　");

                            UpdateMainMessage("　　　（　・・・　・・・　）　");

                            UpdateMainMessage("　　　（　・・・　）　");

                            UpdateMainMessage(" 〜　THE　END　〜　（ヴェルゼ・アーティとの死闘）");

                            bool tempFlag = GroundOne.WE2.SeekerEvent1101_fail;
                            GroundOne.WE2.SeekerEvent1101_fail = true;
                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                            Method.AutoSaveTruthWorldEnvironment();
                            Method.AutoSaveRealWorld(this.mc, this.sc, this.tc, this.we, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);

                            if (tempFlag)
                            {
                                using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                                {
                                    ynrw.StartPosition = FormStartPosition.CenterParent;
                                    ynrw.MainMessage = "戦闘をスキップし、勝利した状態からストーリーを進めますか？\r\n戦闘スキップによるペナルティはありません。";
                                    ynrw.ShowDialog();
                                    if (ynrw.DialogResult == DialogResult.Yes)
                                    {
                                        // なにもせず次へ進む
                                    }
                                    else
                                    {
                                        this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                                        return false;
                                    }
                                }
                            }
                            else
                            {
                                this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                                return false;
                            }
                        }
                    }
                    GroundOne.WE2.SeekerEvent1101 = true;
                #endregion
                    #region "ヴェルゼ最終戦２【原罪】"
                    if (!GroundOne.WE2.SeekerEvent1102)
                    {
                        GroundOne.StopDungeonMusic();

                        UpdateMainMessage("ヴェルゼ：グ・・・グアアアァァァ！！！");

                        UpdateMainMessage("アイン：ど、どうだ！？");

                        UpdateMainMessage("ヴェルゼ：ック・・・こ、このくらい・・・");

                        UpdateMainMessage("ヴェルゼ：セ・・・セフィの苦しみに・・・比べたら・・・");

                        UpdateMainMessage("アイン：な！？");

                        UpdateMainMessage("ヴェルゼ：ッグ・・・");

                        UpdateMainMessage("ヴェルゼ：ハアアアァアァァァ！！！");

                        UpdateMainMessage("　　　＜＜＜　ヴェルゼの身体から血しぶきが出ると同時に　＞＞＞　　");

                        UpdateMainMessage("　　　＜＜＜　ヴェルゼの頭髪は純白から漆黒へと変化を始めた！！　＞＞＞　　");

                        UpdateMainMessage("アイン：ヴェ・・・ヴェルゼ、お前・・・");

                        UpdateMainMessage("ヴェルゼ：ハアァ！！！");

                        UpdateMainMessage("　　　＜＜＜　ヴェルゼは輝かしいオーラを放ち、ライフ・マナ・スキルを全回復させた！！　＞＞＞　　");

                        UpdateMainMessage("アイン：ば、ばかな！！　かなりのダメージを与え始めたはずだぞ！？");

                        UpdateMainMessage("ヴェルゼ：神具の力を使いました。");

                        UpdateMainMessage("ヴェルゼ：この神具さえあれば、ボクは何度でも代償を支払い全回復する事が可能です。");

                        UpdateMainMessage("アイン：全・・・回復だと？");

                        UpdateMainMessage("ヴェルゼ：そうです。");

                        UpdateMainMessage("ヴェルゼ：自分の生命力を使い切っていく事で");

                        UpdateMainMessage("ヴェルゼ：その恩恵は受けられます。");

                        UpdateMainMessage("ヴェルゼ：アイン君");

                        UpdateMainMessage("ヴェルゼ：今度こそ最後です。");

                        UpdateMainMessage("ヴェルゼ：アイン君がボクを殺せないようであれば");

                        UpdateMainMessage("ヴェルゼ：ボクがアイン君を殺してあげましょう。");

                        UpdateMainMessage("アイン：っく・・・");

                        //bool win2 = EncountBattle(Database.ENEMY_LAST_OL_LANDIS, String.Empty, String.Empty, true, false, false, false);
                        bool win2 = EncountBattle(Database.ENEMY_LAST_SIN_VERZE_ARTIE, String.Empty, String.Empty, true, true, true, true);
                        UpdateMainMessage("", true);
                        if (win2 == false)
                        {
                            GroundOne.StopDungeonMusic();

                            UpdateMainMessage("アイン：ッグ・・・グハァ！！！");

                            UpdateMainMessage("ヴェルゼ：とどめです。");

                            UpdateMainMessage("ヴェルゼ：ッハアアアァァァァ！！");

                            UpdateMainMessage("　　　＜＜＜　ッザシュ！　＞＞＞　　");

                            UpdateMainMessage("アイン：ッグ　・・・　・・・");

                            UpdateMainMessage("　　　（　意識が　）　　");

                            UpdateMainMessage("　　　（　破壊された　）　　");

                            UpdateMainMessage("　　　（　呼吸の方法を必死で探ったが　）　");

                            UpdateMainMessage("　　　（　その意識すら消えていく　）　");

                            UpdateMainMessage("　　　（　ラナ・・・すまない・・・　）　");

                            UpdateMainMessage("　　　（　・・・　・・・　・・・　）　");

                            UpdateMainMessage("　　　（　・・・　・・・　）　");

                            UpdateMainMessage("　　　（　・・・　）　");

                            UpdateMainMessage(" 〜　THE　END　〜　（超越者ヴェルゼとの死闘）");

                            bool tempFlag = GroundOne.WE2.SeekerEvent1102_fail;
                            GroundOne.WE2.SeekerEvent1102_fail = true;
                            UpdatePlayerLocationInfo(this.Player.Location.X, this.Player.Location.Y + Database.DUNGEON_MOVE_LEN);
                            Method.AutoSaveTruthWorldEnvironment();
                            Method.AutoSaveRealWorld(this.mc, this.sc, this.tc, this.we, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);

                            if (tempFlag)
                            {
                                using (YesNoReqWithMessage ynrw = new YesNoReqWithMessage())
                                {
                                    ynrw.StartPosition = FormStartPosition.CenterParent;
                                    ynrw.MainMessage = "戦闘をスキップし、勝利した状態からストーリーを進めますか？\r\n戦闘スキップによるペナルティはありません。";
                                    ynrw.ShowDialog();
                                    if (ynrw.DialogResult == DialogResult.Yes)
                                    {
                                        // なにもせず次へ進む
                                    }
                                    else
                                    {
                                        this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                                        return false;
                                    }
                                }
                            }
                            else
                            {
                                this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                                return false;
                            }
                        }
                    }
                    GroundOne.WE2.SeekerEvent1102 = true;
                    #endregion
                    #region "ヴェルゼ戦闘終了後"
                    if (!GroundOne.WE2.SeekerEvent1103)
                    {
                        GroundOne.StopDungeonMusic();
                        UpdateMainMessage("　　　（　ハッキリと狙ったわけじゃなかった　）　");

                        UpdateMainMessage("　　　（　だが戦闘中の無意識的な動作により　）　");

                        UpdateMainMessage("　　　（　俺の剣は　）　");

                        UpdateMainMessage("　　　（　ヴェルゼの心臓部分にキッチリと　）　");

                        UpdateMainMessage("　　　（　突き刺す形となった　）　");

                        UpdateMainMessage("ヴェルゼ：ッ・・・");

                        UpdateMainMessage("アイン：しまった！！　ヴェ、ヴェルゼ！！！");

                        UpdateMainMessage("ヴェルゼ：ぃ・・・　い、良いんですよ・・・これで");

                        UpdateMainMessage("ヴェルゼ：こ・・・これで・・・ラナさんは・・・");

                        UpdateMainMessage("ヴェルゼ：大丈夫・・・・だと・・・思います・・・・");

                        UpdateMainMessage("アイン：な、なんだって！？");

                        UpdateMainMessage("ヴェルゼ：ボクが死ねば・・・・");

                        UpdateMainMessage("ヴェルゼ：し・・・神剣・・・フェルトゥーシュ・・・は・・・");

                        UpdateMainMessage("ヴェルゼ：主と・・・なる・・・対象を・・・変えます・・・");

                        UpdateMainMessage("ヴェルゼ：その間・・・に・・・ヒーリング・・・スペルを・・・");

                        UpdateMainMessage("アイン：ヴェルゼもういい、しゃべるな・・・");

                        UpdateMainMessage("アイン：し・・・死なないでくれ・・・頼む・・・");

                        UpdateMainMessage("ヴェルゼ：・・・ボ・・・ボクが死ぬのを・・・トリガーで・・・");

                        UpdateMainMessage("ヴェルゼ：ヒーリング・・が・・発動・・・されます・・・");

                        UpdateMainMessage("ヴェルゼ：・・・　・・・　安心　・・・　してくださ　・・・");

                        UpdateMainMessage("ヴェルゼ：・・・　・・・　・・・");

                        UpdateMainMessage("アイン：ヴェ・・・ヴェルゼ！！死ぬな！！");

                        UpdateMainMessage("ヴェルゼ：・・・　・・・　・・・");

                        UpdateMainMessage("ヴェルゼ：・・・　・・・");

                        UpdateMainMessage("ヴェルゼ：・・・");

                        this.BackColor = Color.White;
                        this.backgroundData = null;
                        this.Invalidate();

                        UpdateMainMessage("　　　（　その時　）　");

                        UpdateMainMessage("　　　（　やさしい風が肌に振れた感じがした　）　");

                        UpdateMainMessage("　　　（　ヴェルゼが最後に放ったヒーリングスペルの波動だったのかもしれないが　）　");

                        UpdateMainMessage("　　　（　それはヴェルゼの魂そのものだったと俺はその瞬間、感じ取った　）　");

                        UpdateMainMessage("　　　（　・・・ヴェルゼはもう・・・　）　");

                        UpdateMainMessage("　　　（　・・・動かない・・・　）　");

                        UpdateMainMessage("アイン：ヴェルゼ！・・・おい、ヴェルゼ！！！");

                        UpdateMainMessage("ラナ：・・・　ッ　・・・");

                        UpdateMainMessage("ラナ：ッ、ッゴホ、ッゴホ・・・");

                        AutoMove(0, 100);

                        UpdateMainMessage("アイン：ラ、ラナ！！！");

                        UpdateMainMessage("ラナ：ウッ・・・あ・・・わたし・・・");

                        UpdateMainMessage("アイン：喋るな！いいから！");

                        UpdateMainMessage("ラナ：イ・・・ッツツ・・・体中が何か感覚が・・・");

                        UpdateMainMessage("アイン：いいから、動くな。");

                        UpdateMainMessage("ラナ：・・・　・・・　・・・");

                        UpdateMainMessage("アイン：ちゃんと担いでってやるから。");

                        UpdateMainMessage("ラナ：・・・　・・・　・・・");

                        UpdateMainMessage("アイン：ラ、ラナ？");

                        UpdateMainMessage("ラナ：・・・　スゥ・・・　スゥ・・・");

                        UpdateMainMessage("アイン：・・・息はある");

                        UpdateMainMessage("アイン：気絶してしまったみたいだ。");

                        UpdateMainMessage("アイン：大丈夫そうだ、良かった・・・");

                        UpdateMainMessage("アイン：向こう側に・・・何か光が見える。");

                        UpdateMainMessage("アイン：あそこへ行けば、おそらく");

                        UpdateMainMessage("アイン：ラナは俺が背中に担いで行けばいい・・・");

                        UpdateMainMessage("アイン：ラナ。");

                        UpdateMainMessage("アイン：ちゃんと戻って、介抱してやる。");

                        UpdateMainMessage("アイン：もう少しの辛抱だ。");

                        UpdateMainMessage("アイン：・・・　・・・　・・・");

                        UpdateMainMessage("アイン：・・・ヴェルゼ・・・");

                        UpdateMainMessage("アイン：死んでしまったのか・・・");

                        UpdateMainMessage("アイン：・・・　・・・　・・・");

                        UpdateMainMessage("アイン：・・・　・・・");

                        UpdateMainMessage("アイン：・・・");

                        AutoMove(0, 300);
                        AutoMove(0, 300);
                        AutoMove(0, 300);
                        AutoMove(0, 300);
                        AutoMove(0, 300);
                        AutoMove(0, 300);
                        AutoMove(0, 300);
                        AutoMove(0, 300);

                        this.BackColor = Color.White;
                        this.backgroundData = null;
                        this.Invalidate();
                        GroundOne.WE2.SeekerEvent1104 = true;
                        labelVigilance.Visible = false;
                        VigilanceMode.Visible = false;
                        PathfindingMode.Visible = false;
                        menuFocus.Visible = false;
                        FirstPlayerPanel.Visible = false;
                        SecondPlayerPanel.Visible = false;
                        ThirdPlayerPanel.Visible = false;
                        this.Invalidate();

                        UpdateMainMessage("　　　（　光の中に俺とラナは入り込んでいった　）　");

                        UpdateMainMessage("　　　（　その空間がどうなっていたのか、俺には把握できなかった　）　");

                        UpdateMainMessage("　　　（　光に包まれた後　）　");

                        UpdateMainMessage("　　　（　見えるのは真っ白な世界　）　");

                        UpdateMainMessage("　　　（　上下左右の空間的な方向感覚は遮断され　）　");

                        UpdateMainMessage("　　　（　視点そのものが奪われた感触がした　）　");

                        UpdateMainMessage("　　　（　やがて、思考そのものも消え失せていく　）　");

                        UpdateMainMessage("　　　（　考える事ができない。そんな感じだ。　）　");

                        UpdateMainMessage("　　　（　自分の存在、ラナの存在が消えていく中で　）　");

                        UpdateMainMessage("　　　（　俺はハッキリとそれを認識した　）　");

                        UpdateMainMessage("　　　（　支配竜　）　");

                        UpdateMainMessage("　　　（　まっすぐにこちらを見据えている　）　");

                        UpdateMainMessage("　　　（　今の自分は口を動かす術がなく、対話は行えない　）");

                        UpdateMainMessage("　　　（　だが・・・何かしらの波動が伝わってくる　）　");

                        UpdateMainMessage("　　　（　・・・その内容は・・・　）　");

                        UpdateMainMessage("　　　（　・・・　・・・　・・・　）　");

                        UpdateMainMessage("　　　（　・・・　・・・　）　");

                        UpdateMainMessage("　　　（　・・・　）　");
                    }
                    GroundOne.WE2.SeekerEvent1103 = true;
                    we.AlreadyShownEvent = false;
                    Method.AutoSaveTruthWorldEnvironment();
                    Method.AutoSaveRealWorld(this.mc, this.sc, this.tc, this.we, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
                    CallHomeTown();
                    return false;
                }
                    #endregion
                #region "エンディングへ"
                else if (row == 0 && column == 30 && GroundOne.WE2.RealDungeonArea == 5)
                {
                    CallHomeTown();
                    return false;
                }
                #endregion
                else
                {
                    return false;
                }
            }

            Method.AutoSaveTruthWorldEnvironment();
            Method.AutoSaveRealWorld(this.mc, this.sc, this.tc, this.we, this.knownTileInfo, this.knownTileInfo2, this.knownTileInfo3, this.knownTileInfo4, this.knownTileInfo5, this.Truth_KnownTileInfo, this.Truth_KnownTileInfo2, this.Truth_KnownTileInfo3, this.Truth_KnownTileInfo4, this.Truth_KnownTileInfo5);
            return true;
        }
        bool endlessLoop = false;
        private void TruthDungeon_Shown(object sender, EventArgs e)
        {
            if (GroundOne.WE2.StartSeeker == false) { return; }

            this.endlessLoop = true;
            while (true)
            {
                if (ExecSomeEvent_ReadWorld() == false)
                {
                    break;
                }
            }
            this.endlessLoop = false;
        }
        private void CallSomeMessageWithAnimation(string message)
        {
            using (MessageDisplay md = new MessageDisplay())
            {
                md.StartPosition = FormStartPosition.Manual;
                md.Location = new Point(this.Location.X, this.Location.Y + this.Size.Height);
                md.NeedAnimation = true;
                md.Message = message;
                md.ShowDialog();
            }
        }
        #endregion

    }
}